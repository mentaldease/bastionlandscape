// File generated from 'wxLuaWrap.i' by 'wxLuaWrap.lua'. Do not edit.
#include "wx/wx.h"

#if WXWIN_COMPATIBILITY_2
    #error Lua Interface was generated with WXWIN_COMPATIBILITY_2 = 0
#endif

#if WXWIN_COMPATIBILITY_2_2
    #error Lua Interface was generated with WXWIN_COMPATIBILITY_2_2 = 0
#endif

#if !WXWIN_COMPATIBILITY_2_4
    #error Lua Interface was generated with WXWIN_COMPATIBILITY_2_4 = 1
#endif

#if wxUSE_UNICODE
    #error Lua Interface was generated with wxUSE_UNICODE = 0
#endif

#include "wx/wx.h"
#include "wxLuaInternals.h"
#include "wx/object.h"
#include "wx/validate.h"
#include "wx/valtext.h"
#include "wx/valgen.h"
#include "wx/list.h"
#include "wx/dynarray.h"
#include "wx/string.h"
#include "wx/hash.h"
#include <wx/stream.h>
#include <wx/protocol/protocol.h>
#include <wx/protocol/http.h>
#include <wx/protocol/ftp.h>
#include "wx/event.h"
#include "wx/tglbtn.h"
#include "wx/dialup.h"
#include "wx/process.h"
#include "wx/timer.h"
#include "wx/control.h"
#include "wx/notebook.h"
#include "wx/tabctrl.h"
#include "wx/sashwin.h"
#include "wx/laywin.h"
#include "wx/splitter.h"
#include "wx/statbox.h"
#include "wx/statbmp.h"
#include "wx/stattext.h"
#include "wx/statline.h"
#include "wx/gdicmn.h"
#include "wx/font.h"
#include "wx/fontenum.h"
#include "wx/fontmap.h"
#include "wx/colour.h"
#include "wx/pen.h"
#include "wx/brush.h"
#include "wx/palette.h"
#include "wx/bitmap.h"
#include "wx/cursor.h"
#include "wx/imaglist.h"
#include "wx/dc.h"
#include "wx/dcmemory.h"
#include "wx/dcclient.h"
#include "wx/dcscreen.h"
#include "wx/caret.h"
#include "wx/app.h"
#include "wx/frame.h"
#include "wx/minifram.h"
#include "wx/statusbr.h"
#include "wx/tooltip.h"
#include "wx/accel.h"
#include "wx/taskbar.h"
#include "wx/settings.h"
#include "wx/sysopt.h"
#include "wx/dialog.h"
#include "wx/colordlg.h"
#include "wx/cmndata.h"
#include "wx/filedlg.h"
#include "wx/fontdlg.h"
#include "wx/fdrepdlg.h"
#include "wx/generic/progdlgg.h"
#include "wx/print.h"
#include "wx/printdlg.h"
#include "wx/dcprint.h"
#include "wx/clipbrd.h"
#include "wx/dataobj.h"
#include "wx/dnd.h"
#include "wx/metafile.h"
#include "wx/confbase.h"
#include "wx/config.h"
#include "wx/fileconf.h"
#include "wx/button.h"
#include "wx/bmpbuttn.h"
#include "wx/checkbox.h"
#include "wx/choice.h"
#include "wx/combobox.h"
#include "wx/gauge.h"
#include "wx/listbox.h"
#include "wx/checklst.h"
#include "wx/listctrl.h"
#include "wx/radiobox.h"
#include "wx/radiobut.h"
#include "wx/scrolbar.h"
#include "wx/slider.h"
#include "wx/spinbutt.h"
#include "wx/spinctrl.h"
#include "wx/textctrl.h"
#include "wx/treectrl.h"
#include "wx/utils.h"
#include "wx/datetime.h"
#include "wx/calctrl.h"
#include "wx/defs.h"
#include "wx/txtstrm.h"
#include "wx/filefn.h"
#include "sys/stat.h"
#include "wx/filename.h"
#include "wx/file.h"
#include "wx/dir.h"
#include "wx/grid.h"
#include "wx/help.h"
#include "wx/helpbase.h"
#include "wx/helpwin.h"
#include "wx/html/helpdata.h"
#include "wx/html/helpctrl.h"
#include "wx/html/htmlcell.h"
#include "wx/html/htmltag.h"
#include "wx/wxhtml.h"
#include "wx/html/htmprint.h"
#include "wx/image.h"
#include "wx/imagbmp.h"
#include "wx/imagpng.h"
#include "wx/imagjpeg.h"
#include "wx/imaggif.h"
#include "wx/imagpnm.h"
#include "wx/imagpcx.h"
#include "wx/imagtiff.h"
#include "wx/imagxpm.h"
#include "wx/docview.h"
#include "wx/cmdproc.h"
#include "wx/menu.h"
#include "wx/menuitem.h"
#include "wx/tbarbase.h"
#include "wx/toolbar.h"
#include "wx/layout.h"
#include "wx/socket.h"
#include "wx/geometry.h"
#include "wx/wave.h"
#include "wx/regex.h"
#include "../Library/wxLuaDebugServer.h"
#include "../Library/wxLuaPrinting.h"
#include "../Library/wxLuaHtmlWindow.h"
#include "../Library/wxLuaLibrary.h"
#include "wx/fl/controlbar.h"
#include "wx/fl/updatesmgr.h"
#include "wx/fl/gcupdatesmgr.h"
#include "wx/fl/barhintspl.h"
#include "wx/fl/hintanimpl.h"
#include "wx/fl/rowdragpl.h"
#include "wx/fl/antiflickpl.h"
#include "wx/fl/cbcustom.h"
#include "wx/fl/dyntbarhnd.h"
#include "wx/fl/dyntbar.h"
#include "wx/stc/stc.h"
#include "wx/xml/xml.h"
#include "wx/xrc/xmlres.h"

DECLARE_ENCAPSULATION  (wxPoint2DInt)
IMPLEMENT_ENCAPSULATION(wxPoint2DInt)
DECLARE_ENCAPSULATION  (wxDataObjectComposite)
IMPLEMENT_ENCAPSULATION(wxDataObjectComposite)
DECLARE_ENCAPSULATION  (wxCalendarDateAttr)
IMPLEMENT_ENCAPSULATION(wxCalendarDateAttr)
DECLARE_ENCAPSULATION  (wxSize)
IMPLEMENT_ENCAPSULATION(wxSize)
DECLARE_ENCAPSULATION  (wxFileDataObject)
IMPLEMENT_ENCAPSULATION(wxFileDataObject)
DECLARE_ENCAPSULATION  (wxXmlNode)
IMPLEMENT_ENCAPSULATION(wxXmlNode)
DECLARE_ENCAPSULATION  (wxDropSource)
IMPLEMENT_ENCAPSULATION(wxDropSource)
DECLARE_ENCAPSULATION  (wxSystemSettings)
IMPLEMENT_ENCAPSULATION(wxSystemSettings)
DECLARE_ENCAPSULATION  (wxRect2DInt)
IMPLEMENT_ENCAPSULATION(wxRect2DInt)
DECLARE_ENCAPSULATION  (wxPoint)
IMPLEMENT_ENCAPSULATION(wxPoint)
DECLARE_ENCAPSULATION  (wxDataFormat)
IMPLEMENT_ENCAPSULATION(wxDataFormat)
DECLARE_ENCAPSULATION  (wxPoint2DDouble)
IMPLEMENT_ENCAPSULATION(wxPoint2DDouble)
DECLARE_ENCAPSULATION  (wxDataObjectSimple)
IMPLEMENT_ENCAPSULATION(wxDataObjectSimple)
DECLARE_ENCAPSULATION  (wxRegEx)
IMPLEMENT_ENCAPSULATION(wxRegEx)
DECLARE_ENCAPSULATION  (wxListItemAttr)
IMPLEMENT_ENCAPSULATION(wxListItemAttr)
DECLARE_ENCAPSULATION  (wxTimeSpan)
IMPLEMENT_ENCAPSULATION(wxTimeSpan)
DECLARE_ENCAPSULATION  (wxRect2DDouble)
IMPLEMENT_ENCAPSULATION(wxRect2DDouble)
DECLARE_ENCAPSULATION  (wxFile)
IMPLEMENT_ENCAPSULATION(wxFile)
DECLARE_ENCAPSULATION  (wxBitmapDataObject)
IMPLEMENT_ENCAPSULATION(wxBitmapDataObject)
DECLARE_ENCAPSULATION  (wxFileName)
IMPLEMENT_ENCAPSULATION(wxFileName)
DECLARE_ENCAPSULATION  (wxXmlProperty)
IMPLEMENT_ENCAPSULATION(wxXmlProperty)
DECLARE_ENCAPSULATION  (wxFontEnumerator)
IMPLEMENT_ENCAPSULATION(wxFontEnumerator)
DECLARE_ENCAPSULATION  (wxArrayInt)
IMPLEMENT_ENCAPSULATION(wxArrayInt)
DECLARE_ENCAPSULATION  (wxArrayString)
IMPLEMENT_ENCAPSULATION(wxArrayString)
DECLARE_ENCAPSULATION  (wxDateSpan)
IMPLEMENT_ENCAPSULATION(wxDateSpan)
DECLARE_ENCAPSULATION  (wxTextDataObject)
IMPLEMENT_ENCAPSULATION(wxTextDataObject)
DECLARE_ENCAPSULATION  (wxDateTime)
IMPLEMENT_ENCAPSULATION(wxDateTime)
DECLARE_ENCAPSULATION  (wxTreeItemId)
IMPLEMENT_ENCAPSULATION(wxTreeItemId)
DECLARE_ENCAPSULATION  (wxDir)
IMPLEMENT_ENCAPSULATION(wxDir)
DECLARE_ENCAPSULATION  (wxAcceleratorEntry)
IMPLEMENT_ENCAPSULATION(wxAcceleratorEntry)
DECLARE_ENCAPSULATION  (wxCustomDataObject)
IMPLEMENT_ENCAPSULATION(wxCustomDataObject)
DECLARE_ENCAPSULATION  (wxRect)
IMPLEMENT_ENCAPSULATION(wxRect)

int s_wxGridStringTable = -1;
int s_wxCalendarCtrl = -1;
int s_wxPaintEvent = -1;
int s_cbDimInfo = -1;
int s_wxStaticBox = -1;
int s_wxEraseEvent = -1;
int s_wxView = -1;
int s_wxRect2DDouble = -1;
int s_cbInsertBarEvent = -1;
int s_wxPNMHandler = -1;
int s_wxFontEnumerator = -1;
int s_wxCheckBox = -1;
int s_wxGridCellTextEditor = -1;
int s_wxWindowList = -1;
int s_wxGauge = -1;
int s_wxTimerEvent = -1;
int s_cbLuaCommonPaneProperties = -1;
int s_wxNotebookSizer = -1;
int s_wxSize = -1;
int s_wxListEvent = -1;
int s_wxHtmlContentsItem = -1;
int s_wxGridCellRenderer = -1;
int s_wxTimeSpan = -1;
int s_wxBitmapButton = -1;
int s_wxDynToolInfo = -1;
int s_cbRemoveBarEvent = -1;
int s_wxHashTable = -1;
int s_cbHintAnimationPlugin = -1;
int s_wxDialog = -1;
int s_wxProcessEvent = -1;
int s_wxGrid = -1;
int s_wxApp = -1;
int s_cbBarDimHandlerBase = -1;
int s_wxGridCellAttrProvider = -1;
int s_wxConfig = -1;
int s_wxStatusBar = -1;
int s_wxPoint2DInt = -1;
int s_wxLuaDebugEvent = -1;
int s_wxSizeEvent = -1;
int s_wxUpdateUIEvent = -1;
int s_wxFileDataObject = -1;
int s_wxDataObject = -1;
int s_wxFindReplaceDialog = -1;
int s_wxDC = -1;
int s_wxCheckListBox = -1;
int s_wxCommand = -1;
int s_wxCursor = -1;
int s_wxMessageDialog = -1;
int s_wxPreviewFrame = -1;
int s_wxStringList = -1;
int s_wxSashEvent = -1;
int s_wxInputStream = -1;
int s_wxCalculateLayoutEvent = -1;
int s_wxSashLayoutWindow = -1;
int s_wxStaticLine = -1;
int s_wxFontDialog = -1;
int s_wxBrushList = -1;
int s_wxPreviewCanvas = -1;
int s_cbAntiflickerPlugin = -1;
int s_wxXmlResourceHandler = -1;
int s_wxFlexGridSizer = -1;
int s_wxRect = -1;
int s_wxDataFormat = -1;
int s_wxMenu = -1;
int s_wxActivateEvent = -1;
int s_wxPageSetupDialogData = -1;
int s_wxMask = -1;
int s_wxPenList = -1;
int s_wxMiniFrame = -1;
int s_wxGridEditorCreatedEvent = -1;
int s_wxControl = -1;
int s_wxDir = -1;
int s_wxNode = -1;
int s_wxChoice = -1;
int s_wxTabEvent = -1;
int s_wxMetafileDC = -1;
int s_wxTabCtrl = -1;
int s_wxStaticBoxSizer = -1;
int s_wxPrintPreview = -1;
int s_wxSocketBase = -1;
int s_wxTreeCtrl = -1;
int s_wxIndividualLayoutConstraint = -1;
int s_wxGridCellNumberRenderer = -1;
int s_wxHTTP = -1;
int s_wxComboBox = -1;
int s_wxMenuItem = -1;
int s_wxToolBar = -1;
int s_cbUpdatesManagerBase = -1;
int s_wxCaret = -1;
int s_wxPrintout = -1;
int s_wxButton = -1;
int s_wxClientDC = -1;
int s_wxPNGHandler = -1;
int s_cbDrawPaneDecorEvent = -1;
int s_wxSizer = -1;
int s_wxToolTip = -1;
int s_wxTaskBarIcon = -1;
int s_wxColour = -1;
int s_wxRadioBox = -1;
int s_wxHtmlEasyPrinting = -1;
int s_wxLayoutConstraints = -1;
int s_wxFont = -1;
int s_wxSingleChoiceDialog = -1;
int s_cbDrawBarDecorEvent = -1;
int s_wxHtmlContainerCell = -1;
int s_wxFTP = -1;
int s_wxStreamBase = -1;
int s_wxLuaHtmlWindow = -1;
int s_wxXmlDocument = -1;
int s_cbLayoutRowEvent = -1;
int s_cbLeftDClickEvent = -1;
int s_wxGridEvent = -1;
int s_cbBarSpy = -1;
int s_wxDataObjectSimple = -1;
int s_cbRowInfo = -1;
int s_wxBestHelpController = -1;
int s_wxPageSetupDialog = -1;
int s_wxWindow = -1;
int s_wxToolLayoutItem = -1;
int s_wxArrayString = -1;
int s_wxDynamicToolBar = -1;
int s_wxInitDialogEvent = -1;
int s_wxDropTarget = -1;
int s_wxGIFHandler = -1;
int s_wxHtmlLinkInfo = -1;
int s_wxGridTableMessage = -1;
int s_wxNotebookEvent = -1;
int s_wxDateTime = -1;
int s_wxPrinterDC = -1;
int s_wxBarIterator = -1;
int s_wxObject = -1;
int s_wxCalendarDateAttr = -1;
int s_wxICOHandler = -1;
int s_wxTextCtrl = -1;
int s_wxObjectRefData = -1;
int s_wxTreeEvent = -1;
int s_wxLog = -1;
int s_cbDockPane = -1;
int s_wxMoveEvent = -1;
int s_wxBitmap = -1;
int s_cbBarInfo = -1;
int s_wxSashWindow = -1;
int s_wxClipboard = -1;
int s_wxTextEntryDialog = -1;
int s_wxXmlNode = -1;
int s_wxGridCellFloatRenderer = -1;
int s_wxToolBarBase = -1;
int s_wxGridCellStringRenderer = -1;
int s_wxKeyEvent = -1;
int s_wxMenuBar = -1;
int s_wxAcceleratorTable = -1;
int s_wxRegionIterator = -1;
int s_wxWindowDC = -1;
int s_cbLeftDownEvent = -1;
int s_wxDropSource = -1;
int s_wxTreeItemId = -1;
int s_wxDropFilesEvent = -1;
int s_wxWave = -1;
int s_wxMouseEvent = -1;
int s_wxProtocol = -1;
int s_wxXmlResource = -1;
int s_wxXmlProperty = -1;
int s_wxPaintDC = -1;
int s_wxGridCellBoolRenderer = -1;
int s_wxStyledTextCtrl = -1;
int s_wxPen = -1;
int s_wxIPV4address = -1;
int s_wxDialUpEvent = -1;
int s_cbDynToolBarDimHandler = -1;
int s_wxMemoryDC = -1;
int s_wxBitmapDataObject = -1;
int s_cbRightUpEvent = -1;
int s_wxLuaDebugData = -1;
int s_wxColourDialog = -1;
int s_cbRowDragPlugin = -1;
int s_wxFile = -1;
int s_cbBarHintsPlugin = -1;
int s_wxTextDataObject = -1;
int s_wxGDIImageHandlerList = -1;
int s_wxPanel = -1;
int s_cbGCUpdatesMgr = -1;
int s_cbSimpleUpdatesMgr = -1;
int s_wxSpinCtrl = -1;
int s_cbCustomizeLayoutEvent = -1;
int s_cbCustomizeBarEvent = -1;
int s_wxDocChildFrame = -1;
int s_wxArrayTreeItemIds = -1;
int s_wxMDIParentFrame = -1;
int s_wxQueryLayoutInfoEvent = -1;
int s_wxImageList = -1;
int s_cbStartDrawInAreaEvent = -1;
int s_wxGDIObject = -1;
int s_cbDrawHintRectEvent = -1;
int s_wxFocusEvent = -1;
int s_wxTreeItemData = -1;
int s_cbStartBarDraggingEvent = -1;
int s_wxGridCellBoolEditor = -1;
int s_wxJoystickEvent = -1;
int s_wxHtmlCell = -1;
int s_wxGridCellCoords = -1;
int s_wxPalette = -1;
int s_wxFontList = -1;
int s_cbDrawPaneBkGroundEvent = -1;
int s_cbDrawRowBkGroundEvent = -1;
int s_cbDrawRowHandlesEvent = -1;
int s_wxHtmlPrintout = -1;
int s_wxFileName = -1;
int s_wxGridCellFloatEditor = -1;
int s_cbDrawRowDecorEvent = -1;
int s_wxSplitterWindow = -1;
int s_wxSpinButton = -1;
int s_cbSizeBarWndEvent = -1;
int s_wxPrintData = -1;
int s_wxAcceleratorEntry = -1;
int s_wxLayoutAlgorithm = -1;
int s_cbResizeBarEvent = -1;
int s_cbLayoutRowsEvent = -1;
int s_cbResizeRowEvent = -1;
int s_wxDocTemplate = -1;
int s_wxDirDialog = -1;
int s_wxDocManager = -1;
int s_cbSimpleCustomizationPlugin = -1;
int s_wxGDIImageHandler = -1;
int s_cbRightDownEvent = -1;
int s_wxFrame = -1;
int s_cbLeftUpEvent = -1;
int s_cbPluginBase = -1;
int s_cbPluginEvent = -1;
int s_cbCommonPaneProperties = -1;
int s_cbBarShapeData = -1;
int s_wxBrush = -1;
int s_wxJPEGHandler = -1;
int s_wxRect2DInt = -1;
int s_cbUpdateMgrData = -1;
int s_wxFrameLayout = -1;
int s_wxLuaHtmlWinTagEvent = -1;
int s_wxLuaPrintout = -1;
int s_wxSockAddress = -1;
int s_wxTimer = -1;
int s_wxFontData = -1;
int s_wxLuaObject = -1;
int s_wxPCXHandler = -1;
int s_wxFindReplaceData = -1;
int s_wxLuaTreeItemData = -1;
int s_wxSystemOptions = -1;
int s_wxPoint2DDouble = -1;
int s_wxScrollWinEvent = -1;
int s_wxStyledTextCtrlDocument = -1;
int s_wxLuaDebugServer = -1;
int s_wxSocketEvent = -1;
int s_wxSocketServer = -1;
int s_wxSocketClient = -1;
int s_wxStaticText = -1;
int s_wxGridSizer = -1;
int s_wxBoxSizer = -1;
int s_wxSplitterEvent = -1;
int s_wxEvent = -1;
int s_wxXPMHandler = -1;
int s_wxToolBarTool = -1;
int s_wxHelpController = -1;
int s_wxToolBarToolBase = -1;
int s_wxRegEx = -1;
int s_wxGenericValidator = -1;
int s_cbFinishDrawInAreaEvent = -1;
int s_wxListBox = -1;
int s_wxImageHandler = -1;
int s_wxBitmapHandler = -1;
int s_cbDrawBarHandlesEvent = -1;
int s_wxStyledTextEvent = -1;
int s_wxMenuItemList = -1;
int s_wxOutputStream = -1;
int s_wxTreeItemAttr = -1;
int s_wxHelpEvent = -1;
int s_wxCustomDataObject = -1;
int s_wxCalendarEvent = -1;
int s_wxIcon = -1;
int s_wxSpinEvent = -1;
int s_wxSystemSettings = -1;
int s_wxConfigBase = -1;
int s_wxCommandProcessor = -1;
int s_wxGridTableBase = -1;
int s_wxTextValidator = -1;
int s_wxDocument = -1;
int s_cbMotionEvent = -1;
int s_wxStaticBitmap = -1;
int s_wxDocParentFrame = -1;
int s_wxHtmlParser = -1;
int s_wxNotebook = -1;
int s_wxListItem = -1;
int s_wxPrinter = -1;
int s_wxHtmlHelpData = -1;
int s_wxScrollBar = -1;
int s_wxPrintDialog = -1;
int s_wxCloseEvent = -1;
int s_wxMDIClientWindow = -1;
int s_wxDateSpan = -1;
int s_wxTIFFHandler = -1;
int s_wxLuaInterpreter = -1;
int s_wxSlider = -1;
int s_wxTreeItemIdValue = -1;
int s_wxImage = -1;
int s_wxGridRangeSelectEvent = -1;
int s_wxColourData = -1;
int s_wxValidator = -1;
int s_wxHtmlDCRenderer = -1;
int s_wxHtmlWinParser = -1;
int s_wxMenuEvent = -1;
int s_wxIdleEvent = -1;
int s_wxHtmlWindow = -1;
int s_wxSysColourChangedEvent = -1;
int s_wxHtmlTag = -1;
int s_wxHtmlWidgetCell = -1;
int s_wxCommandEvent = -1;
int s_wxDataObjectComposite = -1;
int s_wxHtmlHelpController = -1;
int s_wxMetafile = -1;
int s_wxClassInfo = -1;
int s_wxProcess = -1;
int s_wxList = -1;
int s_wxScrollEvent = -1;
int s_wxMDIChildFrame = -1;
int s_wxWinHelpController = -1;
int s_wxScreenDC = -1;
int s_wxGridCellNumberEditor = -1;
int s_wxGridCellEditor = -1;
int s_wxFileHistory = -1;
int s_wxListItemAttr = -1;
int s_wxListCtrl = -1;
int s_wxTaskBarIconEvent = -1;
int s_wxFontMapper = -1;
int s_wxGridCellAttr = -1;
int s_wxFindDialogEvent = -1;
int s_wxNotifyEvent = -1;
int s_wxScrolledWindow = -1;
int s_wxArrayInt = -1;
int s_wxRegion = -1;
int s_wxProgressDialog = -1;
int s_wxRadioButton = -1;
int s_wxPrintDialogData = -1;
int s_wxGridSizeEvent = -1;
int s_wxBMPHandler = -1;
int s_wxPoint = -1;
int s_wxFileDialog = -1;
int s_wxEvtHandler = -1;



static int LUACALL wxLog_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxProcess_destructor(lua_State *)
{
    return 0;
}

// %builtin wxObject * wxCreateDynamicObject(const wxString& className)
static int LUACALL builtin_wxCreateDynamicObject(lua_State *L)
{    
    wxObject *returns;    
    wxString className = lua2wx(getstringtype(L, 2));
    returns = wxCreateDynamicObject(className);
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

static int LUACALL wxObject_destructor(lua_State *L)
{
    wxObject * self = (wxObject*)getuserdatatype(L, 1, s_wxObject);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxObject_Delete(lua_State *L)
{
    wxObject * self = (wxObject*)getuserdatatype(L, 1, s_wxObject);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxObject()
static int LUACALL wxObject_constructor(lua_State *L)
{    
    wxObject *returns;
    returns = new wxObject();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

// wxClassInfo * GetClassInfo()
static int LUACALL wxObject_GetClassInfo(lua_State *L)
{    
    wxClassInfo *returns;
    wxObject *self = (wxObject*)getuserdatatype(L, 1, s_wxObject);
    returns = self->GetClassInfo();
    pushuserdatatype(L, s_wxClassInfo, returns);
    return 1;
}

// wxObjectRefData* GetRefData() const
static int LUACALL wxObject_GetRefData(lua_State *L)
{    
    wxObjectRefData *returns;
    wxObject *self = (wxObject*)getuserdatatype(L, 1, s_wxObject);
    returns = self->GetRefData();
    pushuserdatatype(L, s_wxObjectRefData, returns);
    return 1;
}

// bool  IsKindOf(wxClassInfo *info)
static int LUACALL wxObject_IsKindOf(lua_State *L)
{    
    bool returns;    
    wxClassInfo *info = (wxClassInfo*)getuserdatatype(L, 2, s_wxClassInfo);
    wxObject *self = (wxObject*)getuserdatatype(L, 1, s_wxObject);
    returns = self->IsKindOf(info);
    lua_pushboolean(L, returns);
    return 1;
}

// void  Ref(const wxObject& clone)
static int LUACALL wxObject_Ref(lua_State *L)
{        
    const wxObject *clone = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxObject *self = (wxObject*)getuserdatatype(L, 1, s_wxObject);
    self->Ref(*clone);
    return 0;
}

// void  SetRefData(wxObjectRefData* data)
static int LUACALL wxObject_SetRefData(lua_State *L)
{        
    wxObjectRefData *data = (wxObjectRefData*)getuserdatatype(L, 2, s_wxObjectRefData);
    wxObject *self = (wxObject*)getuserdatatype(L, 1, s_wxObject);
    self->SetRefData(data);
    return 0;
}

// void  UnRef()
static int LUACALL wxObject_UnRef(lua_State *L)
{    
    wxObject *self = (wxObject*)getuserdatatype(L, 1, s_wxObject);
    self->UnRef();
    return 0;
}

// void *DynamicCast(const char *class)
// body is in wxLuaInternals.cpp
extern int LUACALL wxObject_DynamicCast(lua_State *L);

static int LUACALL wxObjectRefData_destructor(lua_State *)
{
    return 0;
}

// int GetRefCount() const
static int LUACALL wxObjectRefData_GetRefCount(lua_State *L)
{    
    int returns;
    wxObjectRefData *self = (wxObjectRefData*)getuserdatatype(L, 1, s_wxObjectRefData);
    returns = self->GetRefCount();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxClassInfo_destructor(lua_State *)
{
    return 0;
}

// wxClassInfo(const wxString &name)
static int LUACALL wxClassInfo_constructor(lua_State *L)
{
    wxClassInfo *returns;
    // const wxString &name
    wxString name = lua2wx(getstringtype(L, 1));
    // call constructor
    returns = wxClassInfo::FindClass(name);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxClassInfo, returns);
    // return the number of parameters
    return 1;
}

// wxObject* CreateObject()
static int LUACALL wxClassInfo_CreateObject(lua_State *L)
{    
    wxObject *returns;
    wxClassInfo *self = (wxClassInfo*)getuserdatatype(L, 1, s_wxClassInfo);
    returns = self->CreateObject();
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

// static wxClassInfo * FindClass(const wxString &name)
static int LUACALL wxClassInfo_FindClass(lua_State *L)
{
    wxClassInfo *returns;
    // const wxString &name
    wxString name = lua2wx(getstringtype(L, 2));
    // call FindClass
    returns = wxClassInfo::FindClass((wxChar *)name.c_str());
    // push the result datatype
    pushuserdatatype(L, s_wxClassInfo, returns );
    // return the number of parameters
    return 1;
}

// wxString GetBaseClassName1() const
static int LUACALL wxClassInfo_GetBaseClassName1(lua_State *L)
{    
    wxString returns;
    wxClassInfo *self = (wxClassInfo*)getuserdatatype(L, 1, s_wxClassInfo);
    returns = self->GetBaseClassName1();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetBaseClassName2() const
static int LUACALL wxClassInfo_GetBaseClassName2(lua_State *L)
{    
    wxString returns;
    wxClassInfo *self = (wxClassInfo*)getuserdatatype(L, 1, s_wxClassInfo);
    returns = self->GetBaseClassName2();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetClassName() const
static int LUACALL wxClassInfo_GetClassName(lua_State *L)
{    
    wxString returns;
    wxClassInfo *self = (wxClassInfo*)getuserdatatype(L, 1, s_wxClassInfo);
    returns = self->GetClassName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetSize() const
static int LUACALL wxClassInfo_GetSize(lua_State *L)
{    
    int returns;
    wxClassInfo *self = (wxClassInfo*)getuserdatatype(L, 1, s_wxClassInfo);
    returns = self->GetSize();
    lua_pushnumber(L, returns);
    return 1;
}

// bool IsKindOf(wxClassInfo* info)
static int LUACALL wxClassInfo_IsKindOf(lua_State *L)
{    
    bool returns;    
    wxClassInfo *info = (wxClassInfo*)getuserdatatype(L, 2, s_wxClassInfo);
    wxClassInfo *self = (wxClassInfo*)getuserdatatype(L, 1, s_wxClassInfo);
    returns = self->IsKindOf(info);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxValidator_destructor(lua_State *)
{
    return 0;
}

// wxWindow* GetWindow() const
static int LUACALL wxValidator_GetWindow(lua_State *L)
{    
    wxWindow *returns;
    wxValidator *self = (wxValidator*)getuserdatatype(L, 1, s_wxValidator);
    returns = self->GetWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// static void SetBellOnError(bool doIt = TRUE)
static int LUACALL wxValidator_SetBellOnError(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool doIt = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxValidator::SetBellOnError(doIt);
    return 0;
}

// void SetWindow(wxWindow* window)
static int LUACALL wxValidator_SetWindow(lua_State *L)
{        
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxValidator *self = (wxValidator*)getuserdatatype(L, 1, s_wxValidator);
    self->SetWindow(window);
    return 0;
}

// virtual bool TransferFromWindow()
static int LUACALL wxValidator_TransferFromWindow(lua_State *L)
{    
    bool returns;
    wxValidator *self = (wxValidator*)getuserdatatype(L, 1, s_wxValidator);
    returns = self->TransferFromWindow();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool TransferToWindow()
static int LUACALL wxValidator_TransferToWindow(lua_State *L)
{    
    bool returns;
    wxValidator *self = (wxValidator*)getuserdatatype(L, 1, s_wxValidator);
    returns = self->TransferToWindow();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool Validate(wxWindow* parent)
static int LUACALL wxValidator_Validate(lua_State *L)
{    
    bool returns;    
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxValidator *self = (wxValidator*)getuserdatatype(L, 1, s_wxValidator);
    returns = self->Validate(parent);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxTextValidator_destructor(lua_State *L)
{
    wxTextValidator * self = (wxTextValidator*)getuserdatatype(L, 1, s_wxTextValidator);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxTextValidator_Delete(lua_State *L)
{
    wxTextValidator * self = (wxTextValidator*)getuserdatatype(L, 1, s_wxTextValidator);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

class wxLuaTextValidator : public wxTextValidator
{
    public:
        wxLuaTextValidator(long style, const wxString& valPtr)
            : wxTextValidator(style, &valString),
	      valString(valPtr)
        {
        }
        wxLuaTextValidator(long style)
            : wxTextValidator(style)
        {
        }
    private:
        wxString valString;
};
// wxTextValidator(long style = wxFILTER_NONE, wxString *valPtr = NULL)
static int LUACALL wxTextValidator_constructor(lua_State *L)
{
    wxTextValidator *returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxFILTER_NONE
    long style = (argCount >= 1 ? (long) getnumbertype(L, 1) : wxFILTER_NONE);
    // call constructor
    if (argCount >= 2)
        returns = new wxLuaTextValidator(style, lua2wx(getstringtype(L, 2)));
    else
        returns = new wxLuaTextValidator(style);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxTextValidator, returns );
    // return the number of parameters
    return 1;
}

// long GetStyle() const
static int LUACALL wxTextValidator_GetStyle(lua_State *L)
{    
    long returns;
    wxTextValidator *self = (wxTextValidator*)getuserdatatype(L, 1, s_wxTextValidator);
    returns = self->GetStyle();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetStyle(long style)
static int LUACALL wxTextValidator_SetStyle(lua_State *L)
{        
    long style = (long) getnumbertype(L, 2);
    wxTextValidator *self = (wxTextValidator*)getuserdatatype(L, 1, s_wxTextValidator);
    self->SetStyle(style);
    return 0;
}

// void SetExcludeList(const wxStringList& stringList)
static int LUACALL wxTextValidator_SetExcludeList(lua_State *L)
{
    // const wxStringList& stringList
    const wxStringList *stringList = (wxStringList *) getuserdatatype(L, 2, s_wxStringList);
    // get this
    wxTextValidator *self = ( wxTextValidator * ) getuserdatatype(L, 1, s_wxTextValidator );
    // call SetExcludeList
    self->SetExcludeList(*stringList);
    // return the number of parameters
    return 0;
}

// void SetIncludeList(const wxStringList& stringList)
static int LUACALL wxTextValidator_SetIncludeList(lua_State *L)
{
    // const wxStringList& stringList
    const wxStringList *stringList = (wxStringList *) getuserdatatype(L, 2, s_wxStringList);
    // get this
    wxTextValidator *self = ( wxTextValidator * ) getuserdatatype(L, 1, s_wxTextValidator );
    // call SetIncludeList
    self->SetIncludeList(*stringList);
    // return the number of parameters
    return 0;
}

static int LUACALL wxGenericValidator_destructor(lua_State *L)
{
    wxGenericValidator * self = (wxGenericValidator*)getuserdatatype(L, 1, s_wxGenericValidator);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxGenericValidator_Delete(lua_State *L)
{
    wxGenericValidator * self = (wxGenericValidator*)getuserdatatype(L, 1, s_wxGenericValidator);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %constructor wxGenericValidatorBool(wxLuaObject *boolPtr)
static int LUACALL wxGenericValidatorBool_constructor(lua_State *L)
{
    wxGenericValidator *returns;
    // wxLuaObject *boolPtr
    wxLuaObject *boolPtr = (wxLuaObject *) getuserdatatype(L, 1, s_wxLuaObject);
    // call constructor
    returns = new wxGenericValidator(boolPtr->GetBoolPtr());
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxGenericValidator, returns );
    // return the number of parameters
    return 1;
}

// %constructor wxGenericValidatorString(wxLuaObject *valPtr)
static int LUACALL wxGenericValidatorString_constructor(lua_State *L)
{
    wxGenericValidator *returns;
    // wxLuaObject *valPtr
    wxLuaObject *valPtr = (wxLuaObject *) getuserdatatype(L, 1, s_wxLuaObject);
    // call constructor
    returns = new wxGenericValidator(valPtr->GetStringPtr());
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxGenericValidator, returns );
    // return the number of parameters
    return 1;
}

// %constructor wxGenericValidatorInt(wxLuaObject *valPtr)
static int LUACALL wxGenericValidatorInt_constructor(lua_State *L)
{
    wxGenericValidator *returns;
    // wxLuaObject *valPtr
    wxLuaObject *valPtr = (wxLuaObject *) getuserdatatype(L, 1, s_wxLuaObject);
    // call constructor
    returns = new wxGenericValidator(valPtr->GetIntPtr());
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxGenericValidator, returns );
    // return the number of parameters
    return 1;
}

// %constructor wxGenericValidatorArray(wxLuaObject *valPtr)
static int LUACALL wxGenericValidatorArray_constructor(lua_State *L)
{
    wxGenericValidator *returns;
    // wxLuaObject *valPtr
    wxLuaObject *valPtr = (wxLuaObject *) getuserdatatype(L, 1, s_wxLuaObject);
    // call constructor
    returns = new wxGenericValidator(valPtr->GetArrayPtr());
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxGenericValidator, returns );
    // return the number of parameters
    return 1;
}

static int LUACALL wxList_destructor(lua_State *)
{
    return 0;
}

// wxList()
static int LUACALL wxList_constructor(lua_State *L)
{    
    wxList *returns;
    returns = new wxList();
    pushuserdatatype(L, s_wxList, returns);
    return 1;
}

// %constructor wxListFromTable()
static int LUACALL wxListFromTable_constructor(lua_State *L)
{    
    wxList *returns;
    returns = new wxList();
    pushuserdatatype(L, s_wxList, returns);
    return 1;
}

// wxNode *Append(wxObject *object)
static int LUACALL wxList_Append(lua_State *L)
{    
    wxNode *returns;    
    wxObject *object = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Append(object);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// %rename AppendNumKey wxNode *Append(long key, wxObject *object)
static int LUACALL wxList_AppendNumKey(lua_State *L)
{    
    wxNode *returns;    
    wxObject *object = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    long key = (long) getnumbertype(L, 2);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Append(key, object);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// %rename AppendStringKey wxNode *Append(const wxString& key, wxObject *object)
static int LUACALL wxList_AppendStringKey(lua_State *L)
{    
    wxNode *returns;    
    wxObject *object = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    wxString key = lua2wx(getstringtype(L, 2));
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Append(key, object);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// void Clear()
static int LUACALL wxList_Clear(lua_State *L)
{    
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    self->Clear();
    return 0;
}

// void DeleteContents(bool destroy)
static int LUACALL wxList_DeleteContents(lua_State *L)
{        
    bool destroy = getbooleantype(L, 2);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    self->DeleteContents(destroy);
    return 0;
}

// bool DeleteNode(wxNode *pNode)
static int LUACALL wxList_DeleteNode(lua_State *L)
{    
    bool returns;    
    wxNode *pNode = (wxNode*)getuserdatatype(L, 2, s_wxNode);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->DeleteNode(pNode);
    lua_pushboolean(L, returns);
    return 1;
}

// bool DeleteObject(wxObject *pObject)
static int LUACALL wxList_DeleteObject(lua_State *L)
{    
    bool returns;    
    wxObject *pObject = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->DeleteObject(pObject);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename FindNumKey wxNode *Find(long key)
static int LUACALL wxList_FindNumKey(lua_State *L)
{    
    wxNode *returns;    
    long key = (long) getnumbertype(L, 2);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Find(key);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// %rename FindStringKey wxNode *Find(const wxString &key)
static int LUACALL wxList_FindStringKey(lua_State *L)
{    
    wxNode *returns;    
    wxString key = lua2wx(getstringtype(L, 2));
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Find(key);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// int     GetCount() const
static int LUACALL wxList_GetCount(lua_State *L)
{    
    int returns;
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

// wxNode *GetFirst()
static int LUACALL wxList_GetFirst(lua_State *L)
{    
    wxNode *returns;
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->GetFirst();
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// wxNode *GetLast()
static int LUACALL wxList_GetLast(lua_State *L)
{    
    wxNode *returns;
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->GetLast();
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// wxNode *Insert(wxObject *pObject)
static int LUACALL wxList_Insert(lua_State *L)
{    
    wxNode *returns;    
    wxObject *pObject = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Insert(pObject);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// %rename InsertAt wxNode *Insert(int position, wxObject *pObject)
static int LUACALL wxList_InsertAt(lua_State *L)
{    
    wxNode *returns;    
    wxObject *pObject = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    int position = (int) getnumbertype(L, 2);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Insert(position, pObject);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// %rename InsertBefore wxNode *Insert(wxNode *pNode, wxObject *pObject)
static int LUACALL wxList_InsertBefore(lua_State *L)
{    
    wxNode *returns;    
    wxObject *pObject = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    wxNode *pNode = (wxNode*)getuserdatatype(L, 2, s_wxNode);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Insert(pNode, pObject);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// wxNode *Item(int iIndex) const
static int LUACALL wxList_Item(lua_State *L)
{    
    wxNode *returns;    
    int iIndex = (int) getnumbertype(L, 2);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Item(iIndex);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// wxNode *Member(wxObject *pObject)
static int LUACALL wxList_Member(lua_State *L)
{    
    wxNode *returns;    
    wxObject *pObject = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxList *self = (wxList*)getuserdatatype(L, 1, s_wxList);
    returns = self->Member(pObject);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

static int LUACALL wxNode_destructor(lua_State *)
{
    return 0;
}

// wxObject *GetData()
static int LUACALL wxNode_GetData(lua_State *L)
{    
    wxObject *returns;
    wxNode *self = (wxNode*)getuserdatatype(L, 1, s_wxNode);
    returns = self->GetData();
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

// wxNode *GetNext()
static int LUACALL wxNode_GetNext(lua_State *L)
{    
    wxNode *returns;
    wxNode *self = (wxNode*)getuserdatatype(L, 1, s_wxNode);
    returns = self->GetNext();
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// wxNode *GetPrevious()
static int LUACALL wxNode_GetPrevious(lua_State *L)
{    
    wxNode *returns;
    wxNode *self = (wxNode*)getuserdatatype(L, 1, s_wxNode);
    returns = self->GetPrevious();
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// void SetData(wxObject *Data)
static int LUACALL wxNode_SetData(lua_State *L)
{        
    wxObject *Data = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxNode *self = (wxNode*)getuserdatatype(L, 1, s_wxNode);
    self->SetData(Data);
    return 0;
}

static int LUACALL wxArrayInt_destructor(lua_State *L)
{
    wxArrayInt * self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxArrayInt_Delete(lua_State *L)
{
    wxArrayInt * self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// void Clear()
static int LUACALL wxArrayInt_Clear(lua_State *L)
{    
    wxArrayInt *self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    self->Clear();
    return 0;
}

// int  GetCount() const
static int LUACALL wxArrayInt_GetCount(lua_State *L)
{    
    int returns;
    wxArrayInt *self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

// void Empty()
static int LUACALL wxArrayInt_Empty(lua_State *L)
{    
    wxArrayInt *self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    self->Empty();
    return 0;
}

// bool IsEmpty() const
static int LUACALL wxArrayInt_IsEmpty(lua_State *L)
{    
    bool returns;
    wxArrayInt *self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    returns = self->IsEmpty();
    lua_pushboolean(L, returns);
    return 1;
}

// void Shrink()
static int LUACALL wxArrayInt_Shrink(lua_State *L)
{    
    wxArrayInt *self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    self->Shrink();
    return 0;
}

// void RemoveAt(size_t index)
static int LUACALL wxArrayInt_RemoveAt(lua_State *L)
{        
    size_t index = (size_t) getnumbertype(L, 2);
    wxArrayInt *self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    self->RemoveAt(index);
    return 0;
}

// int Item( int n )
static int LUACALL wxArrayInt_Item(lua_State *L)
{    
    int returns;    
    int n = (int) getnumbertype(L, 2);
    wxArrayInt *self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    returns = self->Item(n);
    lua_pushnumber(L, returns);
    return 1;
}

// void Add( int num )
static int LUACALL wxArrayInt_Add(lua_State *L)
{        
    int num = (int) getnumbertype(L, 2);
    wxArrayInt *self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    self->Add(num);
    return 0;
}

// void Insert( int num, int n, int copies = 1 )
static int LUACALL wxArrayInt_Insert(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int copies = (argCount >= 4 ? (int) getnumbertype(L, 4) : 1);
    int n = (int) getnumbertype(L, 3);
    int num = (int) getnumbertype(L, 2);
    wxArrayInt *self = (wxArrayInt*)getuserdatatype(L, 1, s_wxArrayInt);
    self->Insert(num, n, copies);
    return 0;
}

static int LUACALL wxArrayString_destructor(lua_State *L)
{
    wxArrayString * self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxArrayString_Delete(lua_State *L)
{
    wxArrayString * self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxArrayString()
static int LUACALL wxArrayString_constructor(lua_State *L)
{    
    wxArrayString *returns;
    returns = new wxArrayString();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxArrayString, returns);
    return 1;
}

// %constructor wxArrayStringCopy(const wxArrayString& array)
static int LUACALL wxArrayStringCopy_constructor(lua_State *L)
{    
    wxArrayString *returns;    
    const wxArrayString *array = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    returns = new wxArrayString(*array);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxArrayString, returns);
    return 1;
}

// size_t Add(const wxString& str)
static int LUACALL wxArrayString_Add(lua_State *L)
{    
    size_t returns;    
    wxString str = lua2wx(getstringtype(L, 2));
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    returns = self->Add(str);
    lua_pushnumber(L, returns);
    return 1;
}

// void Alloc(size_t nCount)
static int LUACALL wxArrayString_Alloc(lua_State *L)
{        
    size_t nCount = (size_t) getnumbertype(L, 2);
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    self->Alloc(nCount);
    return 0;
}

// void Clear()
static int LUACALL wxArrayString_Clear(lua_State *L)
{    
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    self->Clear();
    return 0;
}

// int Count() const
static int LUACALL wxArrayString_Count(lua_State *L)
{    
    int returns;
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    returns = self->Count();
    lua_pushnumber(L, returns);
    return 1;
}

// void Empty()
static int LUACALL wxArrayString_Empty(lua_State *L)
{    
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    self->Empty();
    return 0;
}

// int GetCount() const
static int LUACALL wxArrayString_GetCount(lua_State *L)
{    
    int returns;
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

// int Index(const wxString &sz, bool bCase = TRUE, bool bFromEnd = FALSE)
static int LUACALL wxArrayString_Index(lua_State *L)
{    
    int returns;
    int argCount = lua_gettop(L);    
    bool bFromEnd = (argCount >= 4 ? getbooleantype(L, 4) : FALSE);
    bool bCase = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    wxString sz = lua2wx(getstringtype(L, 2));
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    returns = self->Index(sz, bCase, bFromEnd);
    lua_pushnumber(L, returns);
    return 1;
}

// void Insert(const wxString& str, int nIndex)
static int LUACALL wxArrayString_Insert(lua_State *L)
{        
    int nIndex = (int) getnumbertype(L, 3);
    wxString str = lua2wx(getstringtype(L, 2));
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    self->Insert(str, nIndex);
    return 0;
}

// bool IsEmpty()
static int LUACALL wxArrayString_IsEmpty(lua_State *L)
{    
    bool returns;
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    returns = self->IsEmpty();
    lua_pushboolean(L, returns);
    return 1;
}

// wxString& Item(size_t nIndex) const
static int LUACALL wxArrayString_Item(lua_State *L)
{    
    wxString *returns;    
    size_t nIndex = (size_t) getnumbertype(L, 2);
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    returns = &self->Item(nIndex);
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// wxString& Last()
static int LUACALL wxArrayString_Last(lua_State *L)
{    
    wxString *returns;
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    returns = &self->Last();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// void Remove(const wxString &sz)
static int LUACALL wxArrayString_Remove(lua_State *L)
{        
    wxString sz = lua2wx(getstringtype(L, 2));
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    self->Remove(sz);
    return 0;
}

// void RemoveAt(size_t nIndex)
static int LUACALL wxArrayString_RemoveAt(lua_State *L)
{        
    size_t nIndex = (size_t) getnumbertype(L, 2);
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    self->RemoveAt(nIndex);
    return 0;
}

// void Shrink()
static int LUACALL wxArrayString_Shrink(lua_State *L)
{    
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    self->Shrink();
    return 0;
}

// void Sort(bool reverseOrder = FALSE)
static int LUACALL wxArrayString_Sort(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool reverseOrder = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxArrayString *self = (wxArrayString*)getuserdatatype(L, 1, s_wxArrayString);
    self->Sort(reverseOrder);
    return 0;
}

static int LUACALL wxStringList_destructor(lua_State *)
{
    return 0;
}

// wxStringList()
static int LUACALL wxStringList_constructor(lua_State *L)
{
    wxStringList *returns;
    // call constructor
    returns = new wxStringList();
    int argCount = lua_gettop(L);
    if (argCount > 0)
    {
        int idx;
        if (argCount == 1 && lua_istable(L, 1))
        {
            int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = tostringarray(L, 1, count);
            for (idx = 0; idx < count; ++idx)
                returns->Add(choices[idx]);
        }
        else
        {
            for (idx = 1; idx < argCount; ++idx)
                returns->Add(lua2wx(lua_tostring(L, idx)));
        }
    }
    // push the constructed class pointer
    pushuserdatatype(L, s_wxStringList, returns );
    // return the number of parameters
    return 1;
}

// wxNode *Add(const wxString& s)
static int LUACALL wxStringList_Add(lua_State *L)
{    
    wxNode *returns;    
    wxString s = lua2wx(getstringtype(L, 2));
    wxStringList *self = (wxStringList*)getuserdatatype(L, 1, s_wxStringList);
    returns = self->Add(s);
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// void Clear()
static int LUACALL wxStringList_Clear(lua_State *L)
{    
    wxStringList *self = (wxStringList*)getuserdatatype(L, 1, s_wxStringList);
    self->Clear();
    return 0;
}

// void Delete(const wxString& s)
static int LUACALL wxStringList_Delete(lua_State *L)
{        
    wxString s = lua2wx(getstringtype(L, 2));
    wxStringList *self = (wxStringList*)getuserdatatype(L, 1, s_wxStringList);
    self->Delete(s);
    return 0;
}

// bool Member(const wxString& s)
static int LUACALL wxStringList_Member(lua_State *L)
{    
    bool returns;    
    wxString s = lua2wx(getstringtype(L, 2));
    wxStringList *self = (wxStringList*)getuserdatatype(L, 1, s_wxStringList);
    returns = self->Member(s);
    lua_pushboolean(L, returns);
    return 1;
}

// void Sort()
static int LUACALL wxStringList_Sort(lua_State *L)
{    
    wxStringList *self = (wxStringList*)getuserdatatype(L, 1, s_wxStringList);
    self->Sort();
    return 0;
}

static int LUACALL wxHashTable_destructor(lua_State *)
{
    return 0;
}

// wxHashTable(unsigned int key_type, int size = 1000)
static int LUACALL wxHashTable_constructor(lua_State *L)
{    
    wxHashTable *returns;
    int argCount = lua_gettop(L);    
    int size = (argCount >= 2 ? (int) getnumbertype(L, 2) : 1000);
    unsigned int key_type = (unsigned int) getnumbertype(L, 1);
    returns = new wxHashTable(key_type, size);
    pushuserdatatype(L, s_wxHashTable, returns);
    return 1;
}

// void BeginFind()
static int LUACALL wxHashTable_BeginFind(lua_State *L)
{    
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    self->BeginFind();
    return 0;
}

// void Clear()
static int LUACALL wxHashTable_Clear(lua_State *L)
{    
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    self->Clear();
    return 0;
}

// wxObject * Delete(long key)
static int LUACALL wxHashTable_Delete(lua_State *L)
{    
    wxObject *returns;    
    long key = (long) getnumbertype(L, 2);
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    returns = self->Delete(key);
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

// void DeleteContents(bool flag)
static int LUACALL wxHashTable_DeleteContents(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    self->DeleteContents(flag);
    return 0;
}

// %rename GetNumKey wxObject * Get(long key)
static int LUACALL wxHashTable_GetNumKey(lua_State *L)
{    
    wxObject *returns;    
    long key = (long) getnumbertype(L, 2);
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    returns = self->Get(key);
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

// %rename GetStringKey wxObject * Get(const wxString &key)
static int LUACALL wxHashTable_GetStringKey(lua_State *L)
{    
    wxObject *returns;    
    wxString key = lua2wx(getstringtype(L, 2));
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    returns = self->Get(key);
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

// long MakeKey(const wxString& string)
static int LUACALL wxHashTable_MakeKey(lua_State *L)
{    
    long returns;    
    wxString string = lua2wx(getstringtype(L, 2));
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    returns = self->MakeKey(string);
    lua_pushnumber(L, returns);
    return 1;
}

// wxNode * Next()
static int LUACALL wxHashTable_Next(lua_State *L)
{    
    wxNode *returns;
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    returns = self->Next();
    pushuserdatatype(L, s_wxNode, returns);
    return 1;
}

// %rename PutNumKey void Put(long key, wxObject *object)
static int LUACALL wxHashTable_PutNumKey(lua_State *L)
{        
    wxObject *object = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    long key = (long) getnumbertype(L, 2);
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    self->Put(key, object);
    return 0;
}

// %rename PutStringKey void Put(const wxString & key, wxObject *object)
static int LUACALL wxHashTable_PutStringKey(lua_State *L)
{        
    wxObject *object = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    wxString key = lua2wx(getstringtype(L, 2));
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    self->Put(key, object);
    return 0;
}

// int GetCount() const
static int LUACALL wxHashTable_GetCount(lua_State *L)
{    
    int returns;
    wxHashTable *self = (wxHashTable*)getuserdatatype(L, 1, s_wxHashTable);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxStreamBase_destructor(lua_State *)
{
    return 0;
}

// wxStreamBase()
static int LUACALL wxStreamBase_constructor(lua_State *L)
{    
    wxStreamBase *returns;
    returns = new wxStreamBase();
    pushuserdatatype(L, s_wxStreamBase, returns);
    return 1;
}

// bool IsOk() const
static int LUACALL wxStreamBase_IsOk(lua_State *L)
{    
    bool returns;
    wxStreamBase *self = (wxStreamBase*)getuserdatatype(L, 1, s_wxStreamBase);
    returns = self->IsOk();
    lua_pushboolean(L, returns);
    return 1;
}

// void Reset()
static int LUACALL wxStreamBase_Reset(lua_State *L)
{    
    wxStreamBase *self = (wxStreamBase*)getuserdatatype(L, 1, s_wxStreamBase);
    self->Reset();
    return 0;
}

// wxStreamError GetLastError() const
static int LUACALL wxStreamBase_GetLastError(lua_State *L)
{    
    wxStreamError returns;
    wxStreamBase *self = (wxStreamBase*)getuserdatatype(L, 1, s_wxStreamBase);
    returns = self->GetLastError();
    lua_pushnumber(L, returns);
    return 1;
}

// size_t GetSize() const
static int LUACALL wxStreamBase_GetSize(lua_State *L)
{    
    size_t returns;
    wxStreamBase *self = (wxStreamBase*)getuserdatatype(L, 1, s_wxStreamBase);
    returns = self->GetSize();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxInputStream_destructor(lua_State *)
{
    return 0;
}

// char GetC()
static int LUACALL wxInputStream_GetC(lua_State *L)
{    
    char returns;
    wxInputStream *self = (wxInputStream*)getuserdatatype(L, 1, s_wxInputStream);
    returns = self->GetC();
    lua_pushnumber(L, returns);
    return 1;
}

// bool Eof()
static int LUACALL wxInputStream_Eof(lua_State *L)
{    
    bool returns;
    wxInputStream *self = (wxInputStream*)getuserdatatype(L, 1, s_wxInputStream);
    returns = self->Eof();
    lua_pushboolean(L, returns);
    return 1;
}

// size_t LastRead() const
static int LUACALL wxInputStream_LastRead(lua_State *L)
{    
    size_t returns;
    wxInputStream *self = (wxInputStream*)getuserdatatype(L, 1, s_wxInputStream);
    returns = self->LastRead();
    lua_pushnumber(L, returns);
    return 1;
}

// char Peek()
static int LUACALL wxInputStream_Peek(lua_State *L)
{    
    char returns;
    wxInputStream *self = (wxInputStream*)getuserdatatype(L, 1, s_wxInputStream);
    returns = self->Peek();
    lua_pushnumber(L, returns);
    return 1;
}

// wxInputStream& Read(void *buffer, size_t size)
static int LUACALL wxInputStream_Read(lua_State *L)
{    
    wxInputStream *returns;    
    // size_t size
    size_t size = (size_t) getnumbertype(L, 2);
    // void *buffer
    void *buffer = malloc(size);
    // get this
    wxInputStream *self = ( wxInputStream * ) getuserdatatype(L, 1, s_wxInputStream );
    if (buffer != NULL)
    {
        // call Read
        returns = &self->Read(buffer, size);
        // push the result datatype
        pushuserdatatype(L, s_wxInputStream, returns );
        lua_pushlstring(L, (const char *)buffer, size);
        free(buffer);
        return 2;
    }
    return 0;
}

// %rename ReadStream wxInputStream& Read(wxOutputStream& stream_in)
static int LUACALL wxInputStream_ReadStream(lua_State *L)
{    
    wxInputStream *returns;    
    // wxOutputStream& stream_in
    wxOutputStream *stream_in = (wxOutputStream *) getuserdatatype(L, 2, s_wxOutputStream);
    // get this
    wxInputStream *self = ( wxInputStream * ) getuserdatatype(L, 1, s_wxInputStream );
    // call Read
    returns = &self->Read(*stream_in);
    // push the result datatype
    pushuserdatatype(L, s_wxInputStream, returns );
    // return the number of parameters
    return 1;
}

// off_t SeekI(off_t pos, wxSeekMode mode)
static int LUACALL wxInputStream_SeekI(lua_State *L)
{    
    off_t returns;    
    wxSeekMode mode = (wxSeekMode) getenumerationtype(L, 3);
    off_t pos = (off_t) getnumbertype(L, 2);
    wxInputStream *self = (wxInputStream*)getuserdatatype(L, 1, s_wxInputStream);
    returns = self->SeekI(pos, mode);
    lua_pushnumber(L, returns);
    return 1;
}

// off_t TellI() const
static int LUACALL wxInputStream_TellI(lua_State *L)
{    
    off_t returns;
    wxInputStream *self = (wxInputStream*)getuserdatatype(L, 1, s_wxInputStream);
    returns = self->TellI();
    lua_pushnumber(L, returns);
    return 1;
}

// %rename Unget size_t Ungetch(const char* buffer, size_t size)
static int LUACALL wxInputStream_Unget(lua_State *L)
{    
    size_t returns;    
    // size_t size
    size_t size = (size_t) getnumbertype(L, 3);
    // const char* buffer
    const char *buffer = (const char *) lua_tostring(L, 2);
    // get this
    wxInputStream *self = ( wxInputStream * ) getuserdatatype(L, 1, s_wxInputStream );
    // call Ungetch
    returns = self->Ungetch(buffer, size);
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}

// bool Ungetch(char c)
static int LUACALL wxInputStream_Ungetch(lua_State *L)
{    
    bool returns;    
    char c = (char) getnumbertype(L, 2);
    wxInputStream *self = (wxInputStream*)getuserdatatype(L, 1, s_wxInputStream);
    returns = self->Ungetch(c);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxOutputStream_destructor(lua_State *)
{
    return 0;
}

// wxOutputStream()
static int LUACALL wxOutputStream_constructor(lua_State *L)
{    
    wxOutputStream *returns;
    returns = new wxOutputStream();
    pushuserdatatype(L, s_wxOutputStream, returns);
    return 1;
}

// size_t LastWrite() const
static int LUACALL wxOutputStream_LastWrite(lua_State *L)
{    
    size_t returns;
    wxOutputStream *self = (wxOutputStream*)getuserdatatype(L, 1, s_wxOutputStream);
    returns = self->LastWrite();
    lua_pushnumber(L, returns);
    return 1;
}

// void PutC(char c)
static int LUACALL wxOutputStream_PutC(lua_State *L)
{        
    char c = (char) getnumbertype(L, 2);
    wxOutputStream *self = (wxOutputStream*)getuserdatatype(L, 1, s_wxOutputStream);
    self->PutC(c);
    return 0;
}

// off_t SeekO(off_t pos, wxSeekMode mode)
static int LUACALL wxOutputStream_SeekO(lua_State *L)
{    
    off_t returns;    
    wxSeekMode mode = (wxSeekMode) getenumerationtype(L, 3);
    off_t pos = (off_t) getnumbertype(L, 2);
    wxOutputStream *self = (wxOutputStream*)getuserdatatype(L, 1, s_wxOutputStream);
    returns = self->SeekO(pos, mode);
    lua_pushnumber(L, returns);
    return 1;
}

// off_t TellO() const
static int LUACALL wxOutputStream_TellO(lua_State *L)
{    
    off_t returns;
    wxOutputStream *self = (wxOutputStream*)getuserdatatype(L, 1, s_wxOutputStream);
    returns = self->TellO();
    lua_pushnumber(L, returns);
    return 1;
}

// wxOutputStream& Write(const void *buffer, size_t size)
static int LUACALL wxOutputStream_Write(lua_State *L)
{    
    wxOutputStream *returns;    
    // size_t size
    size_t size = (size_t) getnumbertype(L, 3);
    // const void *buffer
    const void *buffer = (void *) lua_tostring(L, 2);
    // get this
    wxOutputStream *self = ( wxOutputStream * ) getuserdatatype(L, 1, s_wxOutputStream );
    // call Write
    returns = &self->Write(buffer, size);
    // push the result datatype
    pushuserdatatype(L, s_wxOutputStream, returns );
    // return the number of parameters
    return 1;
}

// %rename WriteStream wxOutputStream& Write(wxInputStream& stream_in)
static int LUACALL wxOutputStream_WriteStream(lua_State *L)
{    
    wxOutputStream *returns;    
    // wxInputStream& stream_in
    wxInputStream *stream_in = (wxInputStream *) getuserdatatype(L, 2, s_wxInputStream);
    // get this
    wxOutputStream *self = ( wxOutputStream * ) getuserdatatype(L, 1, s_wxOutputStream );
    // call Write
    returns = &self->Write(*stream_in);
    // push the result datatype
    pushuserdatatype(L, s_wxOutputStream, returns );
    // return the number of parameters
    return 1;
}

static int LUACALL wxProtocol_destructor(lua_State *)
{
    return 0;
}

// bool Reconnect()
static int LUACALL wxProtocol_Reconnect(lua_State *L)
{    
    bool returns;
    wxProtocol *self = (wxProtocol*)getuserdatatype(L, 1, s_wxProtocol);
    returns = self->Reconnect();
    lua_pushboolean(L, returns);
    return 1;
}

// wxInputStream *GetInputStream(const wxString& path)
static int LUACALL wxProtocol_GetInputStream(lua_State *L)
{    
    wxInputStream *returns;    
    wxString path = lua2wx(getstringtype(L, 2));
    wxProtocol *self = (wxProtocol*)getuserdatatype(L, 1, s_wxProtocol);
    returns = self->GetInputStream(path);
    pushuserdatatype(L, s_wxInputStream, returns);
    return 1;
}

// bool Abort()
static int LUACALL wxProtocol_Abort(lua_State *L)
{    
    bool returns;
    wxProtocol *self = (wxProtocol*)getuserdatatype(L, 1, s_wxProtocol);
    returns = self->Abort();
    lua_pushboolean(L, returns);
    return 1;
}

// wxProtocolError GetError()
static int LUACALL wxProtocol_GetError(lua_State *L)
{    
    wxProtocolError returns;
    wxProtocol *self = (wxProtocol*)getuserdatatype(L, 1, s_wxProtocol);
    returns = self->GetError();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetContentType()
static int LUACALL wxProtocol_GetContentType(lua_State *L)
{    
    wxString returns;
    wxProtocol *self = (wxProtocol*)getuserdatatype(L, 1, s_wxProtocol);
    returns = self->GetContentType();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetUser(const wxString& user)
static int LUACALL wxProtocol_SetUser(lua_State *L)
{        
    wxString user = lua2wx(getstringtype(L, 2));
    wxProtocol *self = (wxProtocol*)getuserdatatype(L, 1, s_wxProtocol);
    self->SetUser(user);
    return 0;
}

// void SetPassword(const wxString& user)
static int LUACALL wxProtocol_SetPassword(lua_State *L)
{        
    wxString user = lua2wx(getstringtype(L, 2));
    wxProtocol *self = (wxProtocol*)getuserdatatype(L, 1, s_wxProtocol);
    self->SetPassword(user);
    return 0;
}

static int LUACALL wxHTTP_destructor(lua_State *L)
{
    wxHTTP * self = (wxHTTP*)getuserdatatype(L, 1, s_wxHTTP);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxHTTP_Delete(lua_State *L)
{
    wxHTTP * self = (wxHTTP*)getuserdatatype(L, 1, s_wxHTTP);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxHTTP()
static int LUACALL wxHTTP_constructor(lua_State *L)
{    
    wxHTTP *returns;
    returns = new wxHTTP();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxHTTP, returns);
    return 1;
}

// wxInputStream *GetInputStream(const wxString& path)
static int LUACALL wxHTTP_GetInputStream(lua_State *L)
{    
    wxInputStream *returns;    
    wxString path = lua2wx(getstringtype(L, 2));
    wxHTTP *self = (wxHTTP*)getuserdatatype(L, 1, s_wxHTTP);
    returns = self->GetInputStream(path);
    pushuserdatatype(L, s_wxInputStream, returns);
    return 1;
}

// void SetHeader(const wxString& header, const wxString& h_data)
static int LUACALL wxHTTP_SetHeader(lua_State *L)
{        
    wxString h_data = lua2wx(getstringtype(L, 3));
    wxString header = lua2wx(getstringtype(L, 2));
    wxHTTP *self = (wxHTTP*)getuserdatatype(L, 1, s_wxHTTP);
    self->SetHeader(header, h_data);
    return 0;
}

// wxString GetHeader(const wxString& header)
static int LUACALL wxHTTP_GetHeader(lua_State *L)
{    
    wxString returns;    
    wxString header = lua2wx(getstringtype(L, 2));
    wxHTTP *self = (wxHTTP*)getuserdatatype(L, 1, s_wxHTTP);
    returns = self->GetHeader(header);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

static int LUACALL wxFTP_destructor(lua_State *L)
{
    wxFTP * self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFTP_Delete(lua_State *L)
{
    wxFTP * self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxFTP()
static int LUACALL wxFTP_constructor(lua_State *L)
{    
    wxFTP *returns;
    returns = new wxFTP();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFTP, returns);
    return 1;
}

// bool Abort()
static int LUACALL wxFTP_Abort(lua_State *L)
{    
    bool returns;
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->Abort();
    lua_pushboolean(L, returns);
    return 1;
}

// bool CheckCommand(const wxString& command, char ret)
static int LUACALL wxFTP_CheckCommand(lua_State *L)
{    
    bool returns;    
    char ret = (char) getnumbertype(L, 3);
    wxString command = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->CheckCommand(command, ret);
    lua_pushboolean(L, returns);
    return 1;
}

// char SendCommand(const wxString& command)
static int LUACALL wxFTP_SendCommand(lua_State *L)
{    
    char returns;    
    wxString command = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->SendCommand(command);
    lua_pushnumber(L, returns);
    return 1;
}

// const wxString& GetLastResult()
static int LUACALL wxFTP_GetLastResult(lua_State *L)
{    
    const wxString *returns;
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = &self->GetLastResult();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// bool ChDir(const wxString& dir)
static int LUACALL wxFTP_ChDir(lua_State *L)
{    
    bool returns;    
    wxString dir = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->ChDir(dir);
    lua_pushboolean(L, returns);
    return 1;
}

// bool MkDir(const wxString& dir)
static int LUACALL wxFTP_MkDir(lua_State *L)
{    
    bool returns;    
    wxString dir = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->MkDir(dir);
    lua_pushboolean(L, returns);
    return 1;
}

// bool RmDir(const wxString& dir)
static int LUACALL wxFTP_RmDir(lua_State *L)
{    
    bool returns;    
    wxString dir = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->RmDir(dir);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString Pwd()
static int LUACALL wxFTP_Pwd(lua_State *L)
{    
    wxString returns;
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->Pwd();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool Rename(const wxString& src, const wxString& dst)
static int LUACALL wxFTP_Rename(lua_State *L)
{    
    bool returns;    
    wxString dst = lua2wx(getstringtype(L, 3));
    wxString src = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->Rename(src, dst);
    lua_pushboolean(L, returns);
    return 1;
}

// bool RmFile(const wxString& path)
static int LUACALL wxFTP_RmFile(lua_State *L)
{    
    bool returns;    
    wxString path = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->RmFile(path);
    lua_pushboolean(L, returns);
    return 1;
}

// bool SetAscii()
static int LUACALL wxFTP_SetAscii(lua_State *L)
{    
    bool returns;
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->SetAscii();
    lua_pushboolean(L, returns);
    return 1;
}

// bool SetBinary()
static int LUACALL wxFTP_SetBinary(lua_State *L)
{    
    bool returns;
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->SetBinary();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetUser(const wxString& user)
static int LUACALL wxFTP_SetUser(lua_State *L)
{        
    wxString user = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    self->SetUser(user);
    return 0;
}

// void SetPassword(const wxString& passwd)
static int LUACALL wxFTP_SetPassword(lua_State *L)
{        
    wxString passwd = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    self->SetPassword(passwd);
    return 0;
}

// bool FileExists(const wxString& filename)
static int LUACALL wxFTP_FileExists(lua_State *L)
{    
    bool returns;    
    wxString filename = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->FileExists(filename);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetFileSize(const wxString& filename)
static int LUACALL wxFTP_GetFileSize(lua_State *L)
{    
    int returns;    
    wxString filename = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->GetFileSize(filename);
    lua_pushnumber(L, returns);
    return 1;
}

// bool GetDirList(wxArrayString& files, const wxString& wildcard = "")
static int LUACALL wxFTP_GetDirList(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString wildcard = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    wxArrayString *files = (wxArrayString*)getuserdatatype(L, 2, s_wxArrayString);
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->GetDirList(*files, wildcard);
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetFilesList(wxArrayString& files, const wxString& wildcard = "")
static int LUACALL wxFTP_GetFilesList(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString wildcard = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    wxArrayString *files = (wxArrayString*)getuserdatatype(L, 2, s_wxArrayString);
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->GetFilesList(*files, wildcard);
    lua_pushboolean(L, returns);
    return 1;
}

// wxOutputStream * GetOutputStream(const wxString& file)
static int LUACALL wxFTP_GetOutputStream(lua_State *L)
{    
    wxOutputStream *returns;    
    wxString file = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->GetOutputStream(file);
    pushuserdatatype(L, s_wxOutputStream, returns);
    return 1;
}

// wxInputStream * GetInputStream(const wxString& path)
static int LUACALL wxFTP_GetInputStream(lua_State *L)
{    
    wxInputStream *returns;    
    wxString path = lua2wx(getstringtype(L, 2));
    wxFTP *self = (wxFTP*)getuserdatatype(L, 1, s_wxFTP);
    returns = self->GetInputStream(path);
    pushuserdatatype(L, s_wxInputStream, returns);
    return 1;
}

static int LUACALL wxEvtHandler_destructor(lua_State *)
{
    return 0;
}

// wxEvtHandler()
static int LUACALL wxEvtHandler_constructor(lua_State *L)
{    
    wxEvtHandler *returns;
    returns = new wxEvtHandler();
    pushuserdatatype(L, s_wxEvtHandler, returns);
    return 1;
}

// void ConnectEvent()
// body is in wxLuaInternals.cpp
extern int LUACALL wxEvtHandler_ConnectEvent(lua_State *L);

static int LUACALL wxEvent_destructor(lua_State *)
{
    return 0;
}

// wxObject* GetEventObject()
static int LUACALL wxEvent_GetEventObject(lua_State *L)
{    
    wxObject *returns;
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    returns = self->GetEventObject();
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

// WXTYPE GetEventType()
static int LUACALL wxEvent_GetEventType(lua_State *L)
{    
    WXTYPE returns;
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    returns = self->GetEventType();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetId()
static int LUACALL wxEvent_GetId(lua_State *L)
{    
    int returns;
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    returns = self->GetId();
    lua_pushnumber(L, returns);
    return 1;
}

// bool GetSkipped()
static int LUACALL wxEvent_GetSkipped(lua_State *L)
{    
    bool returns;
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    returns = self->GetSkipped();
    lua_pushboolean(L, returns);
    return 1;
}

// long GetTimestamp()
static int LUACALL wxEvent_GetTimestamp(lua_State *L)
{    
    long returns;
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    returns = self->GetTimestamp();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetEventObject(wxObject* object)
static int LUACALL wxEvent_SetEventObject(lua_State *L)
{        
    wxObject *object = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    self->SetEventObject(object);
    return 0;
}

// void SetEventType(WXTYPE typ)
static int LUACALL wxEvent_SetEventType(lua_State *L)
{        
    WXTYPE typ = (WXTYPE) getnumbertype(L, 2);
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    self->SetEventType(typ);
    return 0;
}

// void SetId(int id)
static int LUACALL wxEvent_SetId(lua_State *L)
{        
    int id = (int) getnumbertype(L, 2);
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    self->SetId(id);
    return 0;
}

// void SetTimestamp(long timeStamp)
static int LUACALL wxEvent_SetTimestamp(lua_State *L)
{        
    long timeStamp = (long) getnumbertype(L, 2);
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    self->SetTimestamp(timeStamp);
    return 0;
}

// void Skip(bool skip = TRUE)
static int LUACALL wxEvent_Skip(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool skip = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxEvent *self = (wxEvent*)getuserdatatype(L, 1, s_wxEvent);
    self->Skip(skip);
    return 0;
}

static int LUACALL wxCommandEvent_destructor(lua_State *L)
{
    wxCommandEvent * self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxCommandEvent_Delete(lua_State *L)
{
    wxCommandEvent * self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxCommandEvent(WXTYPE commandEventType = 0, int id = 0)
static int LUACALL wxCommandEvent_constructor(lua_State *L)
{    
    wxCommandEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    WXTYPE commandEventType = (argCount >= 1 ? (WXTYPE) getnumbertype(L, 1) : 0);
    returns = new wxCommandEvent(commandEventType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCommandEvent, returns);
    return 1;
}

// wxObject* GetClientData()
static int LUACALL wxCommandEvent_GetClientData(lua_State *L)
{
    wxObject *returns;
    // get this
    wxCommandEvent *self = ( wxCommandEvent * ) getuserdatatype(L, 1, s_wxCommandEvent );
    // call GetClientData
    returns = (wxObject *) self->GetClientData();
    // push the result datatype
    pushuserdatatype(L, s_wxObject, returns );
    // return the number of parameters
    return 1;
}

// long GetExtraLong()
static int LUACALL wxCommandEvent_GetExtraLong(lua_State *L)
{    
    long returns;
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    returns = self->GetExtraLong();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetInt()
static int LUACALL wxCommandEvent_GetInt(lua_State *L)
{    
    int returns;
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    returns = self->GetInt();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetSelection()
static int LUACALL wxCommandEvent_GetSelection(lua_State *L)
{    
    int returns;
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    returns = self->GetSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetString()
static int LUACALL wxCommandEvent_GetString(lua_State *L)
{    
    wxString returns;
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    returns = self->GetString();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool IsChecked() const
static int LUACALL wxCommandEvent_IsChecked(lua_State *L)
{    
    bool returns;
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    returns = self->IsChecked();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsSelection()
static int LUACALL wxCommandEvent_IsSelection(lua_State *L)
{    
    bool returns;
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    returns = self->IsSelection();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetClientData(wxObject *clientData)
static int LUACALL wxCommandEvent_SetClientData(lua_State *L)
{        
    wxObject *clientData = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    self->SetClientData(clientData);
    return 0;
}

// void SetExtraLong(int extraLong)
static int LUACALL wxCommandEvent_SetExtraLong(lua_State *L)
{        
    int extraLong = (int) getnumbertype(L, 2);
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    self->SetExtraLong(extraLong);
    return 0;
}

// void SetInt(int intCommand)
static int LUACALL wxCommandEvent_SetInt(lua_State *L)
{        
    int intCommand = (int) getnumbertype(L, 2);
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    self->SetInt(intCommand);
    return 0;
}

// void SetString(const wxString &string)
static int LUACALL wxCommandEvent_SetString(lua_State *L)
{        
    wxString string = lua2wx(getstringtype(L, 2));
    wxCommandEvent *self = (wxCommandEvent*)getuserdatatype(L, 1, s_wxCommandEvent);
    self->SetString(string);
    return 0;
}

static int LUACALL wxNotifyEvent_destructor(lua_State *L)
{
    wxNotifyEvent * self = (wxNotifyEvent*)getuserdatatype(L, 1, s_wxNotifyEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxNotifyEvent_Delete(lua_State *L)
{
    wxNotifyEvent * self = (wxNotifyEvent*)getuserdatatype(L, 1, s_wxNotifyEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxNotifyEvent(wxEventType eventType = wxEVT_NULL, int id = 0)
static int LUACALL wxNotifyEvent_constructor(lua_State *L)
{    
    wxNotifyEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxEventType eventType = (argCount >= 1 ? (wxEventType) getnumbertype(L, 1) : wxEVT_NULL);
    returns = new wxNotifyEvent(eventType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxNotifyEvent, returns);
    return 1;
}

// bool IsAllowed() const
static int LUACALL wxNotifyEvent_IsAllowed(lua_State *L)
{    
    bool returns;
    wxNotifyEvent *self = (wxNotifyEvent*)getuserdatatype(L, 1, s_wxNotifyEvent);
    returns = self->IsAllowed();
    lua_pushboolean(L, returns);
    return 1;
}

// void Veto()
static int LUACALL wxNotifyEvent_Veto(lua_State *L)
{    
    wxNotifyEvent *self = (wxNotifyEvent*)getuserdatatype(L, 1, s_wxNotifyEvent);
    self->Veto();
    return 0;
}

static int LUACALL wxActivateEvent_destructor(lua_State *L)
{
    wxActivateEvent * self = (wxActivateEvent*)getuserdatatype(L, 1, s_wxActivateEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxActivateEvent_Delete(lua_State *L)
{
    wxActivateEvent * self = (wxActivateEvent*)getuserdatatype(L, 1, s_wxActivateEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxActivateEvent(WXTYPE eventType = 0, bool active = TRUE, int id = 0)
static int LUACALL wxActivateEvent_constructor(lua_State *L)
{    
    wxActivateEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    bool active = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    WXTYPE eventType = (argCount >= 1 ? (WXTYPE) getnumbertype(L, 1) : 0);
    returns = new wxActivateEvent(eventType, active, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxActivateEvent, returns);
    return 1;
}

// bool GetActive() const
static int LUACALL wxActivateEvent_GetActive(lua_State *L)
{    
    bool returns;
    wxActivateEvent *self = (wxActivateEvent*)getuserdatatype(L, 1, s_wxActivateEvent);
    returns = self->GetActive();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxCloseEvent_destructor(lua_State *L)
{
    wxCloseEvent * self = (wxCloseEvent*)getuserdatatype(L, 1, s_wxCloseEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxCloseEvent_Delete(lua_State *L)
{
    wxCloseEvent * self = (wxCloseEvent*)getuserdatatype(L, 1, s_wxCloseEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxCloseEvent(WXTYPE commandEventType = 0, int id = 0)
static int LUACALL wxCloseEvent_constructor(lua_State *L)
{    
    wxCloseEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    WXTYPE commandEventType = (argCount >= 1 ? (WXTYPE) getnumbertype(L, 1) : 0);
    returns = new wxCloseEvent(commandEventType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCloseEvent, returns);
    return 1;
}

// bool CanVeto()
static int LUACALL wxCloseEvent_CanVeto(lua_State *L)
{    
    bool returns;
    wxCloseEvent *self = (wxCloseEvent*)getuserdatatype(L, 1, s_wxCloseEvent);
    returns = self->CanVeto();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetLoggingOff() const
static int LUACALL wxCloseEvent_GetLoggingOff(lua_State *L)
{    
    bool returns;
    wxCloseEvent *self = (wxCloseEvent*)getuserdatatype(L, 1, s_wxCloseEvent);
    returns = self->GetLoggingOff();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetCanVeto(bool canVeto)
static int LUACALL wxCloseEvent_SetCanVeto(lua_State *L)
{        
    bool canVeto = getbooleantype(L, 2);
    wxCloseEvent *self = (wxCloseEvent*)getuserdatatype(L, 1, s_wxCloseEvent);
    self->SetCanVeto(canVeto);
    return 0;
}

// void SetLoggingOff(bool loggingOff) const
static int LUACALL wxCloseEvent_SetLoggingOff(lua_State *L)
{        
    bool loggingOff = getbooleantype(L, 2);
    wxCloseEvent *self = (wxCloseEvent*)getuserdatatype(L, 1, s_wxCloseEvent);
    self->SetLoggingOff(loggingOff);
    return 0;
}

// void Veto(bool veto = TRUE)
static int LUACALL wxCloseEvent_Veto(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool veto = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxCloseEvent *self = (wxCloseEvent*)getuserdatatype(L, 1, s_wxCloseEvent);
    self->Veto(veto);
    return 0;
}

static int LUACALL wxDialUpEvent_destructor(lua_State *)
{
    return 0;
}

// wxDialUpEvent(bool isConnected, bool isOwnEvent)
static int LUACALL wxDialUpEvent_constructor(lua_State *L)
{    
    wxDialUpEvent *returns;    
    bool isOwnEvent = getbooleantype(L, 2);
    bool isConnected = getbooleantype(L, 1);
    returns = new wxDialUpEvent(isConnected, isOwnEvent);
    pushuserdatatype(L, s_wxDialUpEvent, returns);
    return 1;
}

// bool IsConnectedEvent() const
static int LUACALL wxDialUpEvent_IsConnectedEvent(lua_State *L)
{    
    bool returns;
    wxDialUpEvent *self = (wxDialUpEvent*)getuserdatatype(L, 1, s_wxDialUpEvent);
    returns = self->IsConnectedEvent();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsOwnEvent() const
static int LUACALL wxDialUpEvent_IsOwnEvent(lua_State *L)
{    
    bool returns;
    wxDialUpEvent *self = (wxDialUpEvent*)getuserdatatype(L, 1, s_wxDialUpEvent);
    returns = self->IsOwnEvent();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxEraseEvent_destructor(lua_State *L)
{
    wxEraseEvent * self = (wxEraseEvent*)getuserdatatype(L, 1, s_wxEraseEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxEraseEvent_Delete(lua_State *L)
{
    wxEraseEvent * self = (wxEraseEvent*)getuserdatatype(L, 1, s_wxEraseEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxEraseEvent(int id = 0, wxDC* dc = NULL)
static int LUACALL wxEraseEvent_constructor(lua_State *L)
{    
    wxEraseEvent *returns;
    int argCount = lua_gettop(L);    
    wxDC *dc = (argCount >= 2 ? (wxDC*)getuserdatatype(L, 2, s_wxDC) : NULL);
    int id = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxEraseEvent(id, dc);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxEraseEvent, returns);
    return 1;
}

// wxDC* GetDC() const
static int LUACALL wxEraseEvent_GetDC(lua_State *L)
{    
    wxDC *returns;
    wxEraseEvent *self = (wxEraseEvent*)getuserdatatype(L, 1, s_wxEraseEvent);
    returns = self->GetDC();
    pushuserdatatype(L, s_wxDC, returns);
    return 1;
}

static int LUACALL wxFocusEvent_destructor(lua_State *L)
{
    wxFocusEvent * self = (wxFocusEvent*)getuserdatatype(L, 1, s_wxFocusEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFocusEvent_Delete(lua_State *L)
{
    wxFocusEvent * self = (wxFocusEvent*)getuserdatatype(L, 1, s_wxFocusEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxFocusEvent(WXTYPE eventType = 0, int id = 0)
static int LUACALL wxFocusEvent_constructor(lua_State *L)
{    
    wxFocusEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    WXTYPE eventType = (argCount >= 1 ? (WXTYPE) getnumbertype(L, 1) : 0);
    returns = new wxFocusEvent(eventType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFocusEvent, returns);
    return 1;
}

static int LUACALL wxKeyEvent_destructor(lua_State *L)
{
    wxKeyEvent * self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxKeyEvent_Delete(lua_State *L)
{
    wxKeyEvent * self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxKeyEvent(WXTYPE keyEventType)
static int LUACALL wxKeyEvent_constructor(lua_State *L)
{    
    wxKeyEvent *returns;    
    WXTYPE keyEventType = (WXTYPE) getnumbertype(L, 1);
    returns = new wxKeyEvent(keyEventType);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxKeyEvent, returns);
    return 1;
}

// bool AltDown() const
static int LUACALL wxKeyEvent_AltDown(lua_State *L)
{    
    bool returns;
    wxKeyEvent *self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    returns = self->AltDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool ControlDown() const
static int LUACALL wxKeyEvent_ControlDown(lua_State *L)
{    
    bool returns;
    wxKeyEvent *self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    returns = self->ControlDown();
    lua_pushboolean(L, returns);
    return 1;
}

// int GetKeyCode() const
static int LUACALL wxKeyEvent_GetKeyCode(lua_State *L)
{    
    int returns;
    wxKeyEvent *self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    returns = self->GetKeyCode();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetX()
static int LUACALL wxKeyEvent_GetX(lua_State *L)
{    
    long returns;
    wxKeyEvent *self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    returns = self->GetX();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetY() const
static int LUACALL wxKeyEvent_GetY(lua_State *L)
{    
    long returns;
    wxKeyEvent *self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    returns = self->GetY();
    lua_pushnumber(L, returns);
    return 1;
}

// bool MetaDown() const
static int LUACALL wxKeyEvent_MetaDown(lua_State *L)
{    
    bool returns;
    wxKeyEvent *self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    returns = self->MetaDown();
    lua_pushboolean(L, returns);
    return 1;
}

// wxPoint GetPosition() const
static int LUACALL wxKeyEvent_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxKeyEvent *self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

static int LUACALL wxKeyEvent_GetPositionXY(lua_State *L)
{
    wxCoord y;
    wxCoord x;
    // get this
    wxKeyEvent *self = ( wxKeyEvent * ) getuserdatatype(L, 1, s_wxKeyEvent );
    // call GetPositionXY
    self->GetPosition(&x, &y);
    // push results
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

// bool HasModifiers() const
static int LUACALL wxKeyEvent_HasModifiers(lua_State *L)
{    
    bool returns;
    wxKeyEvent *self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    returns = self->HasModifiers();
    lua_pushboolean(L, returns);
    return 1;
}

// bool ShiftDown() const
static int LUACALL wxKeyEvent_ShiftDown(lua_State *L)
{    
    bool returns;
    wxKeyEvent *self = (wxKeyEvent*)getuserdatatype(L, 1, s_wxKeyEvent);
    returns = self->ShiftDown();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxIdleEvent_destructor(lua_State *L)
{
    wxIdleEvent * self = (wxIdleEvent*)getuserdatatype(L, 1, s_wxIdleEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxIdleEvent_Delete(lua_State *L)
{
    wxIdleEvent * self = (wxIdleEvent*)getuserdatatype(L, 1, s_wxIdleEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxIdleEvent()
static int LUACALL wxIdleEvent_constructor(lua_State *L)
{    
    wxIdleEvent *returns;
    returns = new wxIdleEvent();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxIdleEvent, returns);
    return 1;
}

// void RequestMore(bool needMore = TRUE)
static int LUACALL wxIdleEvent_RequestMore(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool needMore = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxIdleEvent *self = (wxIdleEvent*)getuserdatatype(L, 1, s_wxIdleEvent);
    self->RequestMore(needMore);
    return 0;
}

// bool MoreRequested() const
static int LUACALL wxIdleEvent_MoreRequested(lua_State *L)
{    
    bool returns;
    wxIdleEvent *self = (wxIdleEvent*)getuserdatatype(L, 1, s_wxIdleEvent);
    returns = self->MoreRequested();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxInitDialogEvent_destructor(lua_State *L)
{
    wxInitDialogEvent * self = (wxInitDialogEvent*)getuserdatatype(L, 1, s_wxInitDialogEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxInitDialogEvent_Delete(lua_State *L)
{
    wxInitDialogEvent * self = (wxInitDialogEvent*)getuserdatatype(L, 1, s_wxInitDialogEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxInitDialogEvent(int id = 0)
static int LUACALL wxInitDialogEvent_constructor(lua_State *L)
{    
    wxInitDialogEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxInitDialogEvent(id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxInitDialogEvent, returns);
    return 1;
}

static int LUACALL wxJoystickEvent_destructor(lua_State *L)
{
    wxJoystickEvent * self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxJoystickEvent_Delete(lua_State *L)
{
    wxJoystickEvent * self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxJoystickEvent(WXTYPE eventType = 0, int state = 0, int joystick = wxJOYSTICK1, int change = 0)
static int LUACALL wxJoystickEvent_constructor(lua_State *L)
{    
    wxJoystickEvent *returns;
    int argCount = lua_gettop(L);    
    int change = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int joystick = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxJOYSTICK1);
    int state = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    WXTYPE eventType = (argCount >= 1 ? (WXTYPE) getnumbertype(L, 1) : 0);
    returns = new wxJoystickEvent(eventType, state, joystick, change);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxJoystickEvent, returns);
    return 1;
}

// bool ButtonDown(int button = wxJOY_BUTTON_ANY) const
static int LUACALL wxJoystickEvent_ButtonDown(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int button = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxJOY_BUTTON_ANY);
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->ButtonDown(button);
    lua_pushboolean(L, returns);
    return 1;
}

// bool ButtonIsDown(int button = wxJOY_BUTTON_ANY) const
static int LUACALL wxJoystickEvent_ButtonIsDown(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int button = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxJOY_BUTTON_ANY);
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->ButtonIsDown(button);
    lua_pushboolean(L, returns);
    return 1;
}

// bool ButtonUp(int button = wxJOY_BUTTON_ANY) const
static int LUACALL wxJoystickEvent_ButtonUp(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int button = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxJOY_BUTTON_ANY);
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->ButtonUp(button);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetButtonChange() const
static int LUACALL wxJoystickEvent_GetButtonChange(lua_State *L)
{    
    int returns;
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->GetButtonChange();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetButtonState() const
static int LUACALL wxJoystickEvent_GetButtonState(lua_State *L)
{    
    int returns;
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->GetButtonState();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetJoystick() const
static int LUACALL wxJoystickEvent_GetJoystick(lua_State *L)
{    
    int returns;
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->GetJoystick();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPoint GetPosition() const
static int LUACALL wxJoystickEvent_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// int GetZPosition() const
static int LUACALL wxJoystickEvent_GetZPosition(lua_State *L)
{    
    int returns;
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->GetZPosition();
    lua_pushnumber(L, returns);
    return 1;
}

// bool IsButton() const
static int LUACALL wxJoystickEvent_IsButton(lua_State *L)
{    
    bool returns;
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->IsButton();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsMove() const
static int LUACALL wxJoystickEvent_IsMove(lua_State *L)
{    
    bool returns;
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->IsMove();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsZMove() const
static int LUACALL wxJoystickEvent_IsZMove(lua_State *L)
{    
    bool returns;
    wxJoystickEvent *self = (wxJoystickEvent*)getuserdatatype(L, 1, s_wxJoystickEvent);
    returns = self->IsZMove();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxMouseEvent_destructor(lua_State *)
{
    return 0;
}

// bool AltDown()
static int LUACALL wxMouseEvent_AltDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->AltDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Button(int button)
static int LUACALL wxMouseEvent_Button(lua_State *L)
{    
    bool returns;    
    int button = (int) getnumbertype(L, 2);
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->Button(button);
    lua_pushboolean(L, returns);
    return 1;
}

// bool ButtonDClick(int but = -1)
static int LUACALL wxMouseEvent_ButtonDClick(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int but = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->ButtonDClick(but);
    lua_pushboolean(L, returns);
    return 1;
}

// bool ButtonDown(int but = -1)
static int LUACALL wxMouseEvent_ButtonDown(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int but = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->ButtonDown(but);
    lua_pushboolean(L, returns);
    return 1;
}

// bool ButtonUp(int but = -1)
static int LUACALL wxMouseEvent_ButtonUp(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int but = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->ButtonUp(but);
    lua_pushboolean(L, returns);
    return 1;
}

// bool ControlDown()
static int LUACALL wxMouseEvent_ControlDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->ControlDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Dragging()
static int LUACALL wxMouseEvent_Dragging(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->Dragging();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Entering()
static int LUACALL wxMouseEvent_Entering(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->Entering();
    lua_pushboolean(L, returns);
    return 1;
}

// wxPoint GetPosition() const
static int LUACALL wxMouseEvent_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// void GetPositionXY(wxCoord* x, wxCoord* y) const
static int LUACALL wxMouseEvent_GetPositionXY(lua_State *L)
{
    wxCoord y;
    wxCoord x;
    // get this
    wxMouseEvent *self = ( wxMouseEvent * ) getuserdatatype(L, 1, s_wxMouseEvent );
    // call GetPosition
    self->GetPosition(&x, &y);
    // push results
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

// wxPoint GetLogicalPosition(const wxDC& dc) const
static int LUACALL wxMouseEvent_GetLogicalPosition(lua_State *L)
{    
    wxPoint *returns;    
    const wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = new wxPoint(self->GetLogicalPosition(*dc));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// long GetX() const
static int LUACALL wxMouseEvent_GetX(lua_State *L)
{    
    long returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->GetX();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetY()
static int LUACALL wxMouseEvent_GetY(lua_State *L)
{    
    long returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->GetY();
    lua_pushnumber(L, returns);
    return 1;
}

// bool IsButton() const
static int LUACALL wxMouseEvent_IsButton(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->IsButton();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Leaving() const
static int LUACALL wxMouseEvent_Leaving(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->Leaving();
    lua_pushboolean(L, returns);
    return 1;
}

// bool LeftDClick() const
static int LUACALL wxMouseEvent_LeftDClick(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->LeftDClick();
    lua_pushboolean(L, returns);
    return 1;
}

// bool LeftDown() const
static int LUACALL wxMouseEvent_LeftDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->LeftDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool LeftIsDown() const
static int LUACALL wxMouseEvent_LeftIsDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->LeftIsDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool LeftUp() const
static int LUACALL wxMouseEvent_LeftUp(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->LeftUp();
    lua_pushboolean(L, returns);
    return 1;
}

// bool MetaDown() const
static int LUACALL wxMouseEvent_MetaDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->MetaDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool MiddleDClick() const
static int LUACALL wxMouseEvent_MiddleDClick(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->MiddleDClick();
    lua_pushboolean(L, returns);
    return 1;
}

// bool MiddleDown() const
static int LUACALL wxMouseEvent_MiddleDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->MiddleDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool MiddleIsDown() const
static int LUACALL wxMouseEvent_MiddleIsDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->MiddleIsDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool MiddleUp() const
static int LUACALL wxMouseEvent_MiddleUp(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->MiddleUp();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Moving() const
static int LUACALL wxMouseEvent_Moving(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->Moving();
    lua_pushboolean(L, returns);
    return 1;
}

// bool RightDClick() const
static int LUACALL wxMouseEvent_RightDClick(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->RightDClick();
    lua_pushboolean(L, returns);
    return 1;
}

// bool RightDown() const
static int LUACALL wxMouseEvent_RightDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->RightDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool RightIsDown() const
static int LUACALL wxMouseEvent_RightIsDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->RightIsDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool RightUp() const
static int LUACALL wxMouseEvent_RightUp(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->RightUp();
    lua_pushboolean(L, returns);
    return 1;
}

// bool ShiftDown() const
static int LUACALL wxMouseEvent_ShiftDown(lua_State *L)
{    
    bool returns;
    wxMouseEvent *self = (wxMouseEvent*)getuserdatatype(L, 1, s_wxMouseEvent);
    returns = self->ShiftDown();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxMoveEvent_destructor(lua_State *L)
{
    wxMoveEvent * self = (wxMoveEvent*)getuserdatatype(L, 1, s_wxMoveEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxMoveEvent_Delete(lua_State *L)
{
    wxMoveEvent * self = (wxMoveEvent*)getuserdatatype(L, 1, s_wxMoveEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxMoveEvent(const wxPoint& pt, int id = 0)
static int LUACALL wxMoveEvent_constructor(lua_State *L)
{    
    wxMoveEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new wxMoveEvent(*pt, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxMoveEvent, returns);
    return 1;
}

// wxPoint GetPosition() const
static int LUACALL wxMoveEvent_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxMoveEvent *self = (wxMoveEvent*)getuserdatatype(L, 1, s_wxMoveEvent);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

static int LUACALL wxPaintEvent_destructor(lua_State *L)
{
    wxPaintEvent * self = (wxPaintEvent*)getuserdatatype(L, 1, s_wxPaintEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPaintEvent_Delete(lua_State *L)
{
    wxPaintEvent * self = (wxPaintEvent*)getuserdatatype(L, 1, s_wxPaintEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPaintEvent(int id = 0)
static int LUACALL wxPaintEvent_constructor(lua_State *L)
{    
    wxPaintEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxPaintEvent(id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPaintEvent, returns);
    return 1;
}

static int LUACALL wxProcessEvent_destructor(lua_State *L)
{
    wxProcessEvent * self = (wxProcessEvent*)getuserdatatype(L, 1, s_wxProcessEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxProcessEvent_Delete(lua_State *L)
{
    wxProcessEvent * self = (wxProcessEvent*)getuserdatatype(L, 1, s_wxProcessEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxProcessEvent(int id = 0, int pid = 0)
static int LUACALL wxProcessEvent_constructor(lua_State *L)
{    
    wxProcessEvent *returns;
    int argCount = lua_gettop(L);    
    int pid = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    int id = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxProcessEvent(id, pid);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxProcessEvent, returns);
    return 1;
}

// int GetPid() const
static int LUACALL wxProcessEvent_GetPid(lua_State *L)
{    
    int returns;
    wxProcessEvent *self = (wxProcessEvent*)getuserdatatype(L, 1, s_wxProcessEvent);
    returns = self->GetPid();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxScrollEvent_destructor(lua_State *L)
{
    wxScrollEvent * self = (wxScrollEvent*)getuserdatatype(L, 1, s_wxScrollEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxScrollEvent_Delete(lua_State *L)
{
    wxScrollEvent * self = (wxScrollEvent*)getuserdatatype(L, 1, s_wxScrollEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxScrollEvent(WXTYPE commandType = 0, int id = 0, int pos = 0, int orientation = 0)
static int LUACALL wxScrollEvent_constructor(lua_State *L)
{    
    wxScrollEvent *returns;
    int argCount = lua_gettop(L);    
    int orientation = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int pos = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    WXTYPE commandType = (argCount >= 1 ? (WXTYPE) getnumbertype(L, 1) : 0);
    returns = new wxScrollEvent(commandType, id, pos, orientation);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxScrollEvent, returns);
    return 1;
}

// int GetOrientation() const
static int LUACALL wxScrollEvent_GetOrientation(lua_State *L)
{    
    int returns;
    wxScrollEvent *self = (wxScrollEvent*)getuserdatatype(L, 1, s_wxScrollEvent);
    returns = self->GetOrientation();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetPosition() const
static int LUACALL wxScrollEvent_GetPosition(lua_State *L)
{    
    int returns;
    wxScrollEvent *self = (wxScrollEvent*)getuserdatatype(L, 1, s_wxScrollEvent);
    returns = self->GetPosition();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxScrollWinEvent_destructor(lua_State *L)
{
    wxScrollWinEvent * self = (wxScrollWinEvent*)getuserdatatype(L, 1, s_wxScrollWinEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxScrollWinEvent_Delete(lua_State *L)
{
    wxScrollWinEvent * self = (wxScrollWinEvent*)getuserdatatype(L, 1, s_wxScrollWinEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// int GetOrientation() const
static int LUACALL wxScrollWinEvent_GetOrientation(lua_State *L)
{    
    int returns;
    wxScrollWinEvent *self = (wxScrollWinEvent*)getuserdatatype(L, 1, s_wxScrollWinEvent);
    returns = self->GetOrientation();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetPosition() const
static int LUACALL wxScrollWinEvent_GetPosition(lua_State *L)
{    
    int returns;
    wxScrollWinEvent *self = (wxScrollWinEvent*)getuserdatatype(L, 1, s_wxScrollWinEvent);
    returns = self->GetPosition();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxSizeEvent_destructor(lua_State *L)
{
    wxSizeEvent * self = (wxSizeEvent*)getuserdatatype(L, 1, s_wxSizeEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxSizeEvent_Delete(lua_State *L)
{
    wxSizeEvent * self = (wxSizeEvent*)getuserdatatype(L, 1, s_wxSizeEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxSizeEvent(const wxSize& sz, int id = 0)
static int LUACALL wxSizeEvent_constructor(lua_State *L)
{    
    wxSizeEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    const wxSize *sz = (wxSize*)getuserdatatype(L, 1, s_wxSize);
    returns = new wxSizeEvent(*sz, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSizeEvent, returns);
    return 1;
}

// wxSize GetSize() const
static int LUACALL wxSizeEvent_GetSize(lua_State *L)
{    
    wxSize *returns;
    wxSizeEvent *self = (wxSizeEvent*)getuserdatatype(L, 1, s_wxSizeEvent);
    returns = new wxSize(self->GetSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

static int LUACALL wxSysColourChangedEvent_destructor(lua_State *L)
{
    wxSysColourChangedEvent * self = (wxSysColourChangedEvent*)getuserdatatype(L, 1, s_wxSysColourChangedEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxSysColourChangedEvent_Delete(lua_State *L)
{
    wxSysColourChangedEvent * self = (wxSysColourChangedEvent*)getuserdatatype(L, 1, s_wxSysColourChangedEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxSysColourChangedEvent()
static int LUACALL wxSysColourChangedEvent_constructor(lua_State *L)
{    
    wxSysColourChangedEvent *returns;
    returns = new wxSysColourChangedEvent();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSysColourChangedEvent, returns);
    return 1;
}

static int LUACALL wxTimerEvent_destructor(lua_State *)
{
    return 0;
}

// int GetInterval() const
static int LUACALL wxTimerEvent_GetInterval(lua_State *L)
{    
    int returns;
    wxTimerEvent *self = (wxTimerEvent*)getuserdatatype(L, 1, s_wxTimerEvent);
    returns = self->GetInterval();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxUpdateUIEvent_destructor(lua_State *L)
{
    wxUpdateUIEvent * self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxUpdateUIEvent_Delete(lua_State *L)
{
    wxUpdateUIEvent * self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxUpdateUIEvent(wxWindowID commandId = 0)
static int LUACALL wxUpdateUIEvent_constructor(lua_State *L)
{    
    wxUpdateUIEvent *returns;
    int argCount = lua_gettop(L);    
    wxWindowID commandId = (argCount >= 1 ? (wxWindowID) getnumbertype(L, 1) : 0);
    returns = new wxUpdateUIEvent(commandId);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxUpdateUIEvent, returns);
    return 1;
}

// void Check(bool check)
static int LUACALL wxUpdateUIEvent_Check(lua_State *L)
{        
    bool check = getbooleantype(L, 2);
    wxUpdateUIEvent *self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    self->Check(check);
    return 0;
}

// void Enable(bool enable)
static int LUACALL wxUpdateUIEvent_Enable(lua_State *L)
{        
    bool enable = getbooleantype(L, 2);
    wxUpdateUIEvent *self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    self->Enable(enable);
    return 0;
}

// bool GetChecked() const
static int LUACALL wxUpdateUIEvent_GetChecked(lua_State *L)
{    
    bool returns;
    wxUpdateUIEvent *self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    returns = self->GetChecked();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetEnabled() const
static int LUACALL wxUpdateUIEvent_GetEnabled(lua_State *L)
{    
    bool returns;
    wxUpdateUIEvent *self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    returns = self->GetEnabled();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetSetChecked() const
static int LUACALL wxUpdateUIEvent_GetSetChecked(lua_State *L)
{    
    bool returns;
    wxUpdateUIEvent *self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    returns = self->GetSetChecked();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetSetEnabled() const
static int LUACALL wxUpdateUIEvent_GetSetEnabled(lua_State *L)
{    
    bool returns;
    wxUpdateUIEvent *self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    returns = self->GetSetEnabled();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetSetText() const
static int LUACALL wxUpdateUIEvent_GetSetText(lua_State *L)
{    
    bool returns;
    wxUpdateUIEvent *self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    returns = self->GetSetText();
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetText() const
static int LUACALL wxUpdateUIEvent_GetText(lua_State *L)
{    
    wxString returns;
    wxUpdateUIEvent *self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    returns = self->GetText();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetText(const wxString& text)
static int LUACALL wxUpdateUIEvent_SetText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxUpdateUIEvent *self = (wxUpdateUIEvent*)getuserdatatype(L, 1, s_wxUpdateUIEvent);
    self->SetText(text);
    return 0;
}

static int LUACALL wxHelpEvent_destructor(lua_State *L)
{
    wxHelpEvent * self = (wxHelpEvent*)getuserdatatype(L, 1, s_wxHelpEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxHelpEvent_Delete(lua_State *L)
{
    wxHelpEvent * self = (wxHelpEvent*)getuserdatatype(L, 1, s_wxHelpEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxHelpEvent(wxEventType type = wxEVT_NULL, wxWindowID id = 0, const wxPoint& pt = wxDefaultPosition)
static int LUACALL wxHelpEvent_constructor(lua_State *L)
{    
    wxHelpEvent *returns;
    int argCount = lua_gettop(L);    
    const wxPoint *pt = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 2 ? (wxWindowID) getnumbertype(L, 2) : 0);
    wxEventType type = (argCount >= 1 ? (wxEventType) getnumbertype(L, 1) : wxEVT_NULL);
    returns = new wxHelpEvent(type, id, *pt);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxHelpEvent, returns);
    return 1;
}

// const wxPoint& GetPosition()
static int LUACALL wxHelpEvent_GetPosition(lua_State *L)
{    
    const wxPoint *returns;
    wxHelpEvent *self = (wxHelpEvent*)getuserdatatype(L, 1, s_wxHelpEvent);
    returns = &self->GetPosition();
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// void SetPosition(const wxPoint& pos)
static int LUACALL wxHelpEvent_SetPosition(lua_State *L)
{        
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxHelpEvent *self = (wxHelpEvent*)getuserdatatype(L, 1, s_wxHelpEvent);
    self->SetPosition(*pos);
    return 0;
}

// const wxString& GetLink()
static int LUACALL wxHelpEvent_GetLink(lua_State *L)
{    
    const wxString *returns;
    wxHelpEvent *self = (wxHelpEvent*)getuserdatatype(L, 1, s_wxHelpEvent);
    returns = &self->GetLink();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// void SetLink(const wxString& link)
static int LUACALL wxHelpEvent_SetLink(lua_State *L)
{        
    wxString link = lua2wx(getstringtype(L, 2));
    wxHelpEvent *self = (wxHelpEvent*)getuserdatatype(L, 1, s_wxHelpEvent);
    self->SetLink(link);
    return 0;
}

// const wxString& GetTarget()
static int LUACALL wxHelpEvent_GetTarget(lua_State *L)
{    
    const wxString *returns;
    wxHelpEvent *self = (wxHelpEvent*)getuserdatatype(L, 1, s_wxHelpEvent);
    returns = &self->GetTarget();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// void SetTarget(const wxString& target)
static int LUACALL wxHelpEvent_SetTarget(lua_State *L)
{        
    wxString target = lua2wx(getstringtype(L, 2));
    wxHelpEvent *self = (wxHelpEvent*)getuserdatatype(L, 1, s_wxHelpEvent);
    self->SetTarget(target);
    return 0;
}

static int LUACALL wxWindow_destructor(lua_State *)
{
    return 0;
}

// wxWindow(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = wxPanelNameStr)
static int LUACALL wxWindow_constructor(lua_State *L)
{    
    wxWindow *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxString(wxPanelNameStr));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : 0);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxWindow(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// virtual void AddChild(wxWindow* child)
static int LUACALL wxWindow_AddChild(lua_State *L)
{        
    wxWindow *child = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->AddChild(child);
    return 0;
}

// virtual void CaptureMouse()
static int LUACALL wxWindow_CaptureMouse(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->CaptureMouse();
    return 0;
}

// void Center(int direction = wxBOTH)
static int LUACALL wxWindow_Center(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int direction = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxBOTH);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Center(direction);
    return 0;
}

// void CenterOnParent(int direction = wxBOTH)
static int LUACALL wxWindow_CenterOnParent(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int direction = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxBOTH);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->CenterOnParent(direction);
    return 0;
}

// void CenterOnScreen(int direction = wxBOTH)
static int LUACALL wxWindow_CenterOnScreen(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int direction = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxBOTH);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->CenterOnScreen(direction);
    return 0;
}

// void Centre(int direction = wxBOTH)
static int LUACALL wxWindow_Centre(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int direction = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxBOTH);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Centre(direction);
    return 0;
}

// void CentreOnParent(int direction = wxBOTH)
static int LUACALL wxWindow_CentreOnParent(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int direction = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxBOTH);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->CentreOnParent(direction);
    return 0;
}

// void CentreOnScreen(int direction = wxBOTH)
static int LUACALL wxWindow_CentreOnScreen(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int direction = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxBOTH);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->CentreOnScreen(direction);
    return 0;
}

// ~<wxver25 void ClearBackground()
static int LUACALL wxWindow_ClearBackground(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->ClearBackground();
    return 0;
}

// virtual void ClientToScreen(int* x, int* y) const
int LUACALL wxWindow_ClientToScreen(lua_State *L)
{
    int y = (int) lua_tonumber(L,  3);
    int x = (int) lua_tonumber(L,  2);
    // get this
    wxWindow *self = ( wxWindow * ) getuserdatatype(L, 1, s_wxWindow );
    // call ClientToScreen
    self->ClientToScreen(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

// virtual bool Close(bool force = FALSE)
static int LUACALL wxWindow_Close(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool force = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->Close(force);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename ConvertDialogPointToPixels wxPoint ConvertPixelsToDialog(const wxPoint& pt)
static int LUACALL wxWindow_ConvertDialogPointToPixels(lua_State *L)
{    
    wxPoint *returns;    
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxPoint(self->ConvertPixelsToDialog(*pt));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// %rename ConvertDialogSizeToPixels wxSize ConvertPixelsToDialog(const wxSize& sz)
static int LUACALL wxWindow_ConvertDialogSizeToPixels(lua_State *L)
{    
    wxSize *returns;    
    const wxSize *sz = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxSize(self->ConvertPixelsToDialog(*sz));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// virtual bool Destroy()
static int LUACALL wxWindow_Destroy(lua_State *L)
{    
    bool returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->Destroy();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void DestroyChildren()
static int LUACALL wxWindow_DestroyChildren(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->DestroyChildren();
    return 0;
}

// %win virtual void DragAcceptFiles(bool accept)
static int LUACALL wxWindow_DragAcceptFiles(lua_State *L)
{        
    bool accept = getbooleantype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->DragAcceptFiles(accept);
    return 0;
}

// virtual void Enable(bool enable)
static int LUACALL wxWindow_Enable(lua_State *L)
{        
    bool enable = getbooleantype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Enable(enable);
    return 0;
}

// static wxWindow* FindFocus()
static int LUACALL wxWindow_FindFocus(lua_State *L)
{    
    wxWindow *returns;
    returns = wxWindow::FindFocus();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// wxWindow* FindWindow(long id)
static int LUACALL wxWindow_FindWindow(lua_State *L)
{    
    wxWindow *returns;    
    long id = (long) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->FindWindow(id);
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// virtual void Fit()
static int LUACALL wxWindow_Fit(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Fit();
    return 0;
}

// virtual wxColour GetBackgroundColour() const
static int LUACALL wxWindow_GetBackgroundColour(lua_State *L)
{    
    wxColour *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxColour(self->GetBackgroundColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// virtual wxSize GetBestSize() const
static int LUACALL wxWindow_GetBestSize(lua_State *L)
{    
    wxSize *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxSize(self->GetBestSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// wxCaret * GetCaret() const
static int LUACALL wxWindow_GetCaret(lua_State *L)
{    
    wxCaret *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetCaret();
    pushuserdatatype(L, s_wxCaret, returns);
    return 1;
}

// virtual int GetCharHeight() const
static int LUACALL wxWindow_GetCharHeight(lua_State *L)
{    
    int returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetCharHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual int GetCharWidth() const
static int LUACALL wxWindow_GetCharWidth(lua_State *L)
{    
    int returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetCharWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// wxWindowList& GetChildren()
static int LUACALL wxWindow_GetChildren(lua_State *L)
{    
    wxWindowList *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = &self->GetChildren();
    pushuserdatatype(L, s_wxWindowList, returns);
    return 1;
}

// virtual wxSize GetClientSize() const
static int LUACALL wxWindow_GetClientSize(lua_State *L)
{
    wxWindow *self = ( wxWindow * ) getuserdatatype(L, 1, s_wxWindow );
    // call GetClientSize
    wxSize size = self->GetClientSize();
    lua_pushnumber(L, size.x);
    lua_pushnumber(L, size.y);
    // return the number of parameters
    return 2;
}

// wxLayoutConstraints* GetConstraints() const
static int LUACALL wxWindow_GetConstraints(lua_State *L)
{    
    wxLayoutConstraints *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetConstraints();
    pushuserdatatype(L, s_wxLayoutConstraints, returns);
    return 1;
}

// wxDropTarget* GetDropTarget() const
static int LUACALL wxWindow_GetDropTarget(lua_State *L)
{    
    wxDropTarget *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetDropTarget();
    pushuserdatatype(L, s_wxDropTarget, returns);
    return 1;
}

// wxEvtHandler* GetEventHandler() const
static int LUACALL wxWindow_GetEventHandler(lua_State *L)
{    
    wxEvtHandler *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetEventHandler();
    pushuserdatatype(L, s_wxEvtHandler, returns);
    return 1;
}

// long GetExtraStyle() const
static int LUACALL wxWindow_GetExtraStyle(lua_State *L)
{    
    long returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetExtraStyle();
    lua_pushnumber(L, returns);
    return 1;
}

// wxFont GetFont() const
static int LUACALL wxWindow_GetFont(lua_State *L)
{    
    wxFont *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxFont(self->GetFont());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// virtual wxColour GetForegroundColour()
static int LUACALL wxWindow_GetForegroundColour(lua_State *L)
{    
    wxColour *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxColour(self->GetForegroundColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxWindow* GetGrandParent() const
static int LUACALL wxWindow_GetGrandParent(lua_State *L)
{    
    wxWindow *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetGrandParent();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// void *GetHandle() const
static int LUACALL wxWindow_GetHandle(lua_State *L)
{
    // get this
    wxWindow *self = ( wxWindow * ) getuserdatatype(L, 1, s_wxWindow );
    // call GetHandle
    void *handle = (void *)self->GetHandle();
    // push handle
    lua_pushlightuserdata(L, handle);
    // return the number of parameters
    return 1;
}

// int GetId() const
static int LUACALL wxWindow_GetId(lua_State *L)
{    
    int returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetId();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual wxString GetLabel() const
static int LUACALL wxWindow_GetLabel(lua_State *L)
{    
    wxString returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetLabel();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// virtual wxString GetName() const
static int LUACALL wxWindow_GetName(lua_State *L)
{    
    wxString returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// virtual wxWindow* GetParent() const
static int LUACALL wxWindow_GetParent(lua_State *L)
{    
    wxWindow *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetParent();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// virtual void GetPosition(int* x, int* y) const
static int LUACALL wxWindow_GetPosition(lua_State *L)
{
    int y;
    int x;
    // get this
    wxWindow *self = ( wxWindow * ) getuserdatatype(L, 1, s_wxWindow );
    // call GetPosition
    self->GetPosition(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

// %rename GetPositionPoint wxPoint GetPosition() const
static int LUACALL wxWindow_GetPositionPoint(lua_State *L)
{    
    wxPoint *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// virtual wxRect GetRect() const
static int LUACALL wxWindow_GetRect(lua_State *L)
{    
    wxRect *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxRect(self->GetRect());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// virtual int GetScrollThumb(int orientation)
static int LUACALL wxWindow_GetScrollThumb(lua_State *L)
{    
    int returns;    
    int orientation = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetScrollThumb(orientation);
    lua_pushnumber(L, returns);
    return 1;
}

// virtual int GetScrollPos(int orientation)
static int LUACALL wxWindow_GetScrollPos(lua_State *L)
{    
    int returns;    
    int orientation = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetScrollPos(orientation);
    lua_pushnumber(L, returns);
    return 1;
}

// virtual int GetScrollRange(int orientation)
static int LUACALL wxWindow_GetScrollRange(lua_State *L)
{    
    int returns;    
    int orientation = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetScrollRange(orientation);
    lua_pushnumber(L, returns);
    return 1;
}

// void GetSize(int *width, int *height)
int LUACALL wxWindow_GetSize(lua_State *L)
{
    int width;
    int height;
    // get this
    wxWindow *self = ( wxWindow * ) getuserdatatype(L, 1, s_wxWindow );
    // call ClientToScreen
    self->GetSize(&width, &height);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 2;
}

// virtual void GetTextExtent(const wxString& string, int* x, int* y, int* descent = NULL, int* externalLeading = NULL, const wxFont* font = NULL ) const
static int LUACALL wxWindow_GetTextExtent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxFont* font = NULL
    const wxFont *font = (argCount >= 3 ? (wxFont *) getuserdatatype(L, 3, s_wxFont) : NULL);
    int externalLeading;
    int descent;
    int w;
    int h;
    // const wxString& string
    wxString string = lua2wx(getstringtype(L, 2));
    // get this
    wxWindow *self = ( wxWindow * ) getuserdatatype(L, 1, s_wxWindow );
    // call GetTextExtent
    self->GetTextExtent(string, &w, &h, &descent, &externalLeading, font);
    // return the number of parameters
    lua_pushnumber(L, w);
    lua_pushnumber(L, h);
    lua_pushnumber(L, descent);
    lua_pushnumber(L, externalLeading);
    return 4;
}

// virtual wxString GetTitle()
static int LUACALL wxWindow_GetTitle(lua_State *L)
{    
    wxString returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetTitle();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// virtual wxRegion GetUpdateRegion() const
static int LUACALL wxWindow_GetUpdateRegion(lua_State *L)
{    
    wxRegion *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxRegion(self->GetUpdateRegion());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRegion, returns);
    return 1;
}

// wxValidator* GetValidator() const
static int LUACALL wxWindow_GetValidator(lua_State *L)
{    
    wxValidator *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetValidator();
    pushuserdatatype(L, s_wxValidator, returns);
    return 1;
}

// long GetWindowStyleFlag() const
static int LUACALL wxWindow_GetWindowStyleFlag(lua_State *L)
{    
    long returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetWindowStyleFlag();
    lua_pushnumber(L, returns);
    return 1;
}

// ~<wxver23 bool HasCapture() const
static int LUACALL wxWindow_HasCapture(lua_State *L)
{    
    bool returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->HasCapture();
    lua_pushboolean(L, returns);
    return 1;
}

// void InitDialog()
static int LUACALL wxWindow_InitDialog(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->InitDialog();
    return 0;
}

// virtual bool IsEnabled() const
static int LUACALL wxWindow_IsEnabled(lua_State *L)
{    
    bool returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->IsEnabled();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsExposed(int x, int y) const
static int LUACALL wxWindow_IsExposed(lua_State *L)
{    
    bool returns;    
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->IsExposed(x, y);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename IsExposedPoint bool IsExposed(wxPoint &pt) const
static int LUACALL wxWindow_IsExposedPoint(lua_State *L)
{    
    bool returns;    
    wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->IsExposed(*pt);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename IsExposedRect bool IsExposed(wxRect &rect) const
static int LUACALL wxWindow_IsExposedRect(lua_State *L)
{    
    bool returns;    
    wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->IsExposed(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool IsRetained() const
static int LUACALL wxWindow_IsRetained(lua_State *L)
{    
    bool returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->IsRetained();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool IsShown() const
static int LUACALL wxWindow_IsShown(lua_State *L)
{    
    bool returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->IsShown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsTopLevel() const
static int LUACALL wxWindow_IsTopLevel(lua_State *L)
{    
    bool returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->IsTopLevel();
    lua_pushboolean(L, returns);
    return 1;
}

// void Layout()
static int LUACALL wxWindow_Layout(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Layout();
    return 0;
}

// void Lower()
static int LUACALL wxWindow_Lower(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Lower();
    return 0;
}

// virtual void MakeModal(bool flag)
static int LUACALL wxWindow_MakeModal(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->MakeModal(flag);
    return 0;
}

// void Move(int x, int y)
static int LUACALL wxWindow_Move(lua_State *L)
{        
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Move(x, y);
    return 0;
}

// %rename MoveXY void Move(const wxPoint& pt)
static int LUACALL wxWindow_MoveXY(lua_State *L)
{        
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Move(*pt);
    return 0;
}

// wxEvtHandler* PopEventHandler(bool deleteHandler = FALSE) const
static int LUACALL wxWindow_PopEventHandler(lua_State *L)
{    
    wxEvtHandler *returns;
    int argCount = lua_gettop(L);    
    bool deleteHandler = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->PopEventHandler(deleteHandler);
    pushuserdatatype(L, s_wxEvtHandler, returns);
    return 1;
}

// bool PopupMenu(wxMenu* menu, const wxPoint& pos)
static int LUACALL wxWindow_PopupMenu(lua_State *L)
{    
    bool returns;    
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->PopupMenu(menu, *pos);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename PopupMenuXY bool PopupMenu(wxMenu* menu, int x, int y)
static int LUACALL wxWindow_PopupMenuXY(lua_State *L)
{    
    bool returns;    
    int y = (int) getnumbertype(L, 4);
    int x = (int) getnumbertype(L, 3);
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->PopupMenu(menu, x, y);
    lua_pushboolean(L, returns);
    return 1;
}

// void PushEventHandler(wxEvtHandler* handler)
static int LUACALL wxWindow_PushEventHandler(lua_State *L)
{        
    wxEvtHandler *handler = (wxEvtHandler*)getuserdatatype(L, 2, s_wxEvtHandler);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->PushEventHandler(handler);
    return 0;
}

// void Raise()
static int LUACALL wxWindow_Raise(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Raise();
    return 0;
}

// virtual void Refresh(bool eraseBackground = TRUE, const wxRect* rect = NULL)
static int LUACALL wxWindow_Refresh(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const wxRect *rect = (argCount >= 3 ? (wxRect*)getuserdatatype(L, 3, s_wxRect) : NULL);
    bool eraseBackground = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->Refresh(eraseBackground, rect);
    return 0;
}

// virtual void ReleaseMouse()
static int LUACALL wxWindow_ReleaseMouse(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->ReleaseMouse();
    return 0;
}

// virtual void RemoveChild(wxWindow* child)
static int LUACALL wxWindow_RemoveChild(lua_State *L)
{        
    wxWindow *child = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->RemoveChild(child);
    return 0;
}

// virtual bool Reparent(wxWindow* newParent)
static int LUACALL wxWindow_Reparent(lua_State *L)
{    
    bool returns;    
    wxWindow *newParent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->Reparent(newParent);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual wxPoint ScreenToClient(const wxPoint& pt) const
static int LUACALL wxWindow_ScreenToClient(lua_State *L)
{    
    wxPoint *returns;    
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxPoint(self->ScreenToClient(*pt));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// %rename ScreenToClientXY virtual void ScreenToClient(int* x, int* y) const
static int LUACALL wxWindow_ScreenToClientXY(lua_State *L)
{
    int y;
    int x;
    // get this
    wxWindow *self = ( wxWindow * ) getuserdatatype(L, 1, s_wxWindow );
    // call ScreenToClient
    self->ScreenToClient(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

// virtual void ScrollWindow(int dx, int dy, const wxRect* rect = NULL)
static int LUACALL wxWindow_ScrollWindow(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const wxRect *rect = (argCount >= 4 ? (wxRect*)getuserdatatype(L, 4, s_wxRect) : NULL);
    int dy = (int) getnumbertype(L, 3);
    int dx = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->ScrollWindow(dx, dy, rect);
    return 0;
}

// virtual void SetAcceleratorTable(const wxAcceleratorTable& accel)
static int LUACALL wxWindow_SetAcceleratorTable(lua_State *L)
{        
    const wxAcceleratorTable *accel = (wxAcceleratorTable*)getuserdatatype(L, 2, s_wxAcceleratorTable);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetAcceleratorTable(*accel);
    return 0;
}

// void SetAutoLayout(bool autoLayout)
static int LUACALL wxWindow_SetAutoLayout(lua_State *L)
{        
    bool autoLayout = getbooleantype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetAutoLayout(autoLayout);
    return 0;
}

// virtual void SetBackgroundColour(const wxColour& colour)
static int LUACALL wxWindow_SetBackgroundColour(lua_State *L)
{        
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetBackgroundColour(*colour);
    return 0;
}

// void SetCaret(wxCaret *caret) const
static int LUACALL wxWindow_SetCaret(lua_State *L)
{        
    wxCaret *caret = (wxCaret*)getuserdatatype(L, 2, s_wxCaret);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetCaret(caret);
    return 0;
}

// virtual void SetClientSize(const wxSize& size)
static int LUACALL wxWindow_SetClientSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetClientSize(*size);
    return 0;
}

// %rename SetClientSizeWH virtual void SetClientSize(int width, int height)
static int LUACALL wxWindow_SetClientSizeWH(lua_State *L)
{        
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetClientSize(width, height);
    return 0;
}

// virtual void SetCursor(const wxCursor&cursor)
static int LUACALL wxWindow_SetCursor(lua_State *L)
{        
    const wxCursor *cursor = (wxCursor*)getuserdatatype(L, 2, s_wxCursor);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetCursor(*cursor);
    return 0;
}

// void SetConstraints(wxLayoutConstraints* constraints)
static int LUACALL wxWindow_SetConstraints(lua_State *L)
{        
    wxLayoutConstraints *constraints = (wxLayoutConstraints*)getuserdatatype(L, 2, s_wxLayoutConstraints);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetConstraints(constraints);
    return 0;
}

// void SetDropTarget(wxDropTarget* target)
static int LUACALL wxWindow_SetDropTarget(lua_State *L)
{        
    wxDropTarget *target = (wxDropTarget*)getuserdatatype(L, 2, s_wxDropTarget);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetDropTarget(target);
    return 0;
}

// void SetEventHandler(wxEvtHandler* handler)
static int LUACALL wxWindow_SetEventHandler(lua_State *L)
{        
    wxEvtHandler *handler = (wxEvtHandler*)getuserdatatype(L, 2, s_wxEvtHandler);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetEventHandler(handler);
    return 0;
}

// void SetExtraStyle(long exStyle)
static int LUACALL wxWindow_SetExtraStyle(lua_State *L)
{        
    long exStyle = (long) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetExtraStyle(exStyle);
    return 0;
}

// virtual void SetFocus()
static int LUACALL wxWindow_SetFocus(lua_State *L)
{    
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetFocus();
    return 0;
}

// void SetFont(const wxFont& font)
static int LUACALL wxWindow_SetFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetFont(*font);
    return 0;
}

// virtual void SetForegroundColour(const wxColour& colour)
static int LUACALL wxWindow_SetForegroundColour(lua_State *L)
{        
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetForegroundColour(*colour);
    return 0;
}

// void SetId(int id)
static int LUACALL wxWindow_SetId(lua_State *L)
{        
    int id = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetId(id);
    return 0;
}

// virtual void SetName(const wxString& name)
static int LUACALL wxWindow_SetName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetName(name);
    return 0;
}

// virtual void SetScrollbar(int orientation, int position, int thumbSize, int range, bool refresh = TRUE)
static int LUACALL wxWindow_SetScrollbar(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool refresh = (argCount >= 6 ? getbooleantype(L, 6) : TRUE);
    int range = (int) getnumbertype(L, 5);
    int thumbSize = (int) getnumbertype(L, 4);
    int position = (int) getnumbertype(L, 3);
    int orientation = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetScrollbar(orientation, position, thumbSize, range, refresh);
    return 0;
}

// virtual void SetScrollPos(int orientation, int pos, bool refresh = TRUE)
static int LUACALL wxWindow_SetScrollPos(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool refresh = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    int pos = (int) getnumbertype(L, 3);
    int orientation = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetScrollPos(orientation, pos, refresh);
    return 0;
}

// %rename SetDimensions virtual void SetSize(int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO)
static int LUACALL wxWindow_SetDimensions(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int sizeFlags = (argCount >= 6 ? (int) getnumbertype(L, 6) : wxSIZE_AUTO);
    int height = (int) getnumbertype(L, 5);
    int width = (int) getnumbertype(L, 4);
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetSize(x, y, width, height, sizeFlags);
    return 0;
}

// virtual void SetSize(int width, int height)
static int LUACALL wxWindow_SetSize(lua_State *L)
{        
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetSize(width, height);
    return 0;
}

// %rename SetPosition virtual void SetSize(const wxSize& size)
static int LUACALL wxWindow_SetPosition(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetSize(*size);
    return 0;
}

// virtual void SetSizeHints(int minW = -1, int minH = -1, int maxW = -1, int maxH = -1, int incW = -1, int incH = -1)
static int LUACALL wxWindow_SetSizeHints(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int incH = (argCount >= 7 ? (int) getnumbertype(L, 7) : -1);
    int incW = (argCount >= 6 ? (int) getnumbertype(L, 6) : -1);
    int maxH = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    int maxW = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    int minH = (argCount >= 3 ? (int) getnumbertype(L, 3) : -1);
    int minW = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetSizeHints(minW, minH, maxW, maxH, incW, incH);
    return 0;
}

// void SetSizer(wxSizer* sizer)
static int LUACALL wxWindow_SetSizer(lua_State *L)
{        
    wxSizer *sizer = (wxSizer*)getuserdatatype(L, 2, s_wxSizer);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetSizer(sizer);
    return 0;
}

// virtual void SetTitle(const wxString& title)
static int LUACALL wxWindow_SetTitle(lua_State *L)
{        
    wxString title = lua2wx(getstringtype(L, 2));
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetTitle(title);
    return 0;
}

// virtual void SetValidator(const wxValidator& validator)
static int LUACALL wxWindow_SetValidator(lua_State *L)
{        
    const wxValidator *validator = (wxValidator*)getuserdatatype(L, 2, s_wxValidator);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetValidator(*validator);
    return 0;
}

// void SetToolTip(const wxString& tip)
static int LUACALL wxWindow_SetToolTip(lua_State *L)
{        
    wxString tip = lua2wx(getstringtype(L, 2));
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetToolTip(tip);
    return 0;
}

// wxToolTip* GetToolTip() const
static int LUACALL wxWindow_GetToolTip(lua_State *L)
{    
    wxToolTip *returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->GetToolTip();
    pushuserdatatype(L, s_wxToolTip, returns);
    return 1;
}

// void SetWindowStyle(long style)
static int LUACALL wxWindow_SetWindowStyle(lua_State *L)
{        
    long style = (long) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetWindowStyle(style);
    return 0;
}

// virtual void SetWindowStyleFlag(long style)
static int LUACALL wxWindow_SetWindowStyleFlag(lua_State *L)
{        
    long style = (long) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->SetWindowStyleFlag(style);
    return 0;
}

// virtual bool Show(bool show)
static int LUACALL wxWindow_Show(lua_State *L)
{    
    bool returns;    
    bool show = getbooleantype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->Show(show);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool TransferDataFromWindow()
static int LUACALL wxWindow_TransferDataFromWindow(lua_State *L)
{    
    bool returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->TransferDataFromWindow();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool TransferDataToWindow()
static int LUACALL wxWindow_TransferDataToWindow(lua_State *L)
{    
    bool returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->TransferDataToWindow();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool Validate()
static int LUACALL wxWindow_Validate(lua_State *L)
{    
    bool returns;
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = self->Validate();
    lua_pushboolean(L, returns);
    return 1;
}

// void WarpPointer(int x, int y)
static int LUACALL wxWindow_WarpPointer(lua_State *L)
{        
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxWindow *self = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    self->WarpPointer(x, y);
    return 0;
}

static int LUACALL wxWindowList_destructor(lua_State *)
{
    return 0;
}

// void Clear()
static int LUACALL wxWindowList_Clear(lua_State *L)
{    
    wxWindowList *self = (wxWindowList*)getuserdatatype(L, 1, s_wxWindowList);
    self->Clear();
    return 0;
}

// void DeleteContents(bool destroy)
static int LUACALL wxWindowList_DeleteContents(lua_State *L)
{        
    bool destroy = getbooleantype(L, 2);
    wxWindowList *self = (wxWindowList*)getuserdatatype(L, 1, s_wxWindowList);
    self->DeleteContents(destroy);
    return 0;
}

// bool DeleteObject(wxWindow *pMenuItem)
static int LUACALL wxWindowList_DeleteObject(lua_State *L)
{    
    bool returns;    
    wxWindow *pMenuItem = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxWindowList *self = (wxWindowList*)getuserdatatype(L, 1, s_wxWindowList);
    returns = self->DeleteObject(pMenuItem);
    lua_pushboolean(L, returns);
    return 1;
}

// int  GetCount() const
static int LUACALL wxWindowList_GetCount(lua_State *L)
{    
    int returns;
    wxWindowList *self = (wxWindowList*)getuserdatatype(L, 1, s_wxWindowList);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxPanel_destructor(lua_State *)
{
    return 0;
}

// wxPanel(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxTAB_TRAVERSAL, const wxString& name = "panel")
static int LUACALL wxPanel_constructor(lua_State *L)
{    
    wxPanel *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("panel"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxTAB_TRAVERSAL);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxPanel(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxPanel, returns);
    return 1;
}

// %constructor wxPanelDefault()
static int LUACALL wxPanelDefault_constructor(lua_State *L)
{    
    wxPanel *returns;
    returns = new wxPanel();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxPanel, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxTAB_TRAVERSAL, const wxString& name = "panel")
static int LUACALL wxPanel_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("panel"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxTAB_TRAVERSAL);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxPanel *self = (wxPanel*)getuserdatatype(L, 1, s_wxPanel);
    returns = self->Create(parent, id, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxWindow* GetDefaultItem() const
static int LUACALL wxPanel_GetDefaultItem(lua_State *L)
{    
    wxWindow *returns;
    wxPanel *self = (wxPanel*)getuserdatatype(L, 1, s_wxPanel);
    returns = self->GetDefaultItem();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// void InitDialog()
static int LUACALL wxPanel_InitDialog(lua_State *L)
{    
    wxPanel *self = (wxPanel*)getuserdatatype(L, 1, s_wxPanel);
    self->InitDialog();
    return 0;
}

// void SetDefaultItem(wxButton *btn)
static int LUACALL wxPanel_SetDefaultItem(lua_State *L)
{        
    wxButton *btn = (wxButton*)getuserdatatype(L, 2, s_wxButton);
    wxPanel *self = (wxPanel*)getuserdatatype(L, 1, s_wxPanel);
    self->SetDefaultItem(btn);
    return 0;
}

static int LUACALL wxControl_destructor(lua_State *)
{
    return 0;
}

// void     Command(wxCommandEvent& event)
static int LUACALL wxControl_Command(lua_State *L)
{        
    wxCommandEvent *event = (wxCommandEvent*)getuserdatatype(L, 2, s_wxCommandEvent);
    wxControl *self = (wxControl*)getuserdatatype(L, 1, s_wxControl);
    self->Command(*event);
    return 0;
}

// wxString GetLabel()
static int LUACALL wxControl_GetLabel(lua_State *L)
{    
    wxString returns;
    wxControl *self = (wxControl*)getuserdatatype(L, 1, s_wxControl);
    returns = self->GetLabel();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void     SetLabel(const wxString& label)
static int LUACALL wxControl_SetLabel(lua_State *L)
{        
    wxString label = lua2wx(getstringtype(L, 2));
    wxControl *self = (wxControl*)getuserdatatype(L, 1, s_wxControl);
    self->SetLabel(label);
    return 0;
}

static int LUACALL wxNotebook_destructor(lua_State *)
{
    return 0;
}

// wxNotebook(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "notebook")
static int LUACALL wxNotebook_constructor(lua_State *L)
{    
    wxNotebook *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("notebook"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : 0);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxNotebook(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxNotebook, returns);
    return 1;
}

// bool AddPage(wxNotebookPage* page, const wxString& text, bool select = FALSE, int imageId = -1)
static int LUACALL wxNotebook_AddPage(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int imageId = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    bool select = (argCount >= 4 ? getbooleantype(L, 4) : FALSE);
    wxString text = lua2wx(getstringtype(L, 3));
    wxWindow *page = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->AddPage(page, text, select, imageId);
    lua_pushboolean(L, returns);
    return 1;
}

// void AdvanceSelection(bool forward = TRUE)
static int LUACALL wxNotebook_AdvanceSelection(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool forward = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    self->AdvanceSelection(forward);
    return 0;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "notebook")
static int LUACALL wxNotebook_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("notebook"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->Create(parent, id, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// bool DeleteAllPages()
static int LUACALL wxNotebook_DeleteAllPages(lua_State *L)
{    
    bool returns;
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->DeleteAllPages();
    lua_pushboolean(L, returns);
    return 1;
}

// bool DeletePage(int page)
static int LUACALL wxNotebook_DeletePage(lua_State *L)
{    
    bool returns;    
    int page = (int) getnumbertype(L, 2);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->DeletePage(page);
    lua_pushboolean(L, returns);
    return 1;
}

// wxImageList* GetImageList() const
static int LUACALL wxNotebook_GetImageList(lua_State *L)
{    
    wxImageList *returns;
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->GetImageList();
    pushuserdatatype(L, s_wxImageList, returns);
    return 1;
}

// wxNotebookPage* GetPage(int page)
static int LUACALL wxNotebook_GetPage(lua_State *L)
{    
    wxWindow *returns;    
    int page = (int) getnumbertype(L, 2);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->GetPage(page);
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// int GetPageCount() const
static int LUACALL wxNotebook_GetPageCount(lua_State *L)
{    
    int returns;
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->GetPageCount();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetPageImage(int nPage) const
static int LUACALL wxNotebook_GetPageImage(lua_State *L)
{    
    int returns;    
    int nPage = (int) getnumbertype(L, 2);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->GetPageImage(nPage);
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetPageText(int nPage) const
static int LUACALL wxNotebook_GetPageText(lua_State *L)
{    
    wxString returns;    
    int nPage = (int) getnumbertype(L, 2);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->GetPageText(nPage);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetRowCount() const
static int LUACALL wxNotebook_GetRowCount(lua_State *L)
{    
    int returns;
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->GetRowCount();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetSelection() const
static int LUACALL wxNotebook_GetSelection(lua_State *L)
{    
    int returns;
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->GetSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// bool InsertPage(int index, wxNotebookPage* page, const wxString& text, bool select = FALSE, int imageId = -1)
static int LUACALL wxNotebook_InsertPage(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int imageId = (argCount >= 6 ? (int) getnumbertype(L, 6) : -1);
    bool select = (argCount >= 5 ? getbooleantype(L, 5) : FALSE);
    wxString text = lua2wx(getstringtype(L, 4));
    wxWindow *page = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    int index = (int) getnumbertype(L, 2);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->InsertPage(index, page, text, select, imageId);
    lua_pushboolean(L, returns);
    return 1;
}

// bool RemovePage(int page)
static int LUACALL wxNotebook_RemovePage(lua_State *L)
{    
    bool returns;    
    int page = (int) getnumbertype(L, 2);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->RemovePage(page);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetImageList(wxImageList* imageList)
static int LUACALL wxNotebook_SetImageList(lua_State *L)
{        
    wxImageList *imageList = (wxImageList*)getuserdatatype(L, 2, s_wxImageList);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    self->SetImageList(imageList);
    return 0;
}

// void SetPadding(const wxSize& padding)
static int LUACALL wxNotebook_SetPadding(lua_State *L)
{        
    const wxSize *padding = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    self->SetPadding(*padding);
    return 0;
}

// void SetPageSize(const wxSize& size)
static int LUACALL wxNotebook_SetPageSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    self->SetPageSize(*size);
    return 0;
}

// bool SetPageImage(int page, int image)
static int LUACALL wxNotebook_SetPageImage(lua_State *L)
{    
    bool returns;    
    int image = (int) getnumbertype(L, 3);
    int page = (int) getnumbertype(L, 2);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->SetPageImage(page, image);
    lua_pushboolean(L, returns);
    return 1;
}

// bool SetPageText(int page, const wxString& text)
static int LUACALL wxNotebook_SetPageText(lua_State *L)
{    
    bool returns;    
    wxString text = lua2wx(getstringtype(L, 3));
    int page = (int) getnumbertype(L, 2);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->SetPageText(page, text);
    lua_pushboolean(L, returns);
    return 1;
}

// int SetSelection(int page)
static int LUACALL wxNotebook_SetSelection(lua_State *L)
{    
    int returns;    
    int page = (int) getnumbertype(L, 2);
    wxNotebook *self = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = self->SetSelection(page);
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxNotebookEvent_destructor(lua_State *L)
{
    wxNotebookEvent * self = (wxNotebookEvent*)getuserdatatype(L, 1, s_wxNotebookEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxNotebookEvent_Delete(lua_State *L)
{
    wxNotebookEvent * self = (wxNotebookEvent*)getuserdatatype(L, 1, s_wxNotebookEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxNotebookEvent(wxEventType eventType = wxEVT_NULL, int id = 0, int sel = -1, int oldSel = -1)
static int LUACALL wxNotebookEvent_constructor(lua_State *L)
{    
    wxNotebookEvent *returns;
    int argCount = lua_gettop(L);    
    int oldSel = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    int sel = (argCount >= 3 ? (int) getnumbertype(L, 3) : -1);
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxEventType eventType = (argCount >= 1 ? (wxEventType) getnumbertype(L, 1) : wxEVT_NULL);
    returns = new wxNotebookEvent(eventType, id, sel, oldSel);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxNotebookEvent, returns);
    return 1;
}

// int GetOldSelection() const
static int LUACALL wxNotebookEvent_GetOldSelection(lua_State *L)
{    
    int returns;
    wxNotebookEvent *self = (wxNotebookEvent*)getuserdatatype(L, 1, s_wxNotebookEvent);
    returns = self->GetOldSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetSelection() const
static int LUACALL wxNotebookEvent_GetSelection(lua_State *L)
{    
    int returns;
    wxNotebookEvent *self = (wxNotebookEvent*)getuserdatatype(L, 1, s_wxNotebookEvent);
    returns = self->GetSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetOldSelection(int page)
static int LUACALL wxNotebookEvent_SetOldSelection(lua_State *L)
{        
    int page = (int) getnumbertype(L, 2);
    wxNotebookEvent *self = (wxNotebookEvent*)getuserdatatype(L, 1, s_wxNotebookEvent);
    self->SetOldSelection(page);
    return 0;
}

// void SetSelection(int page)
static int LUACALL wxNotebookEvent_SetSelection(lua_State *L)
{        
    int page = (int) getnumbertype(L, 2);
    wxNotebookEvent *self = (wxNotebookEvent*)getuserdatatype(L, 1, s_wxNotebookEvent);
    self->SetSelection(page);
    return 0;
}

static int LUACALL wxTabCtrl_destructor(lua_State *)
{
    return 0;
}

// wxTabCtrl(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "tabCtrl")
static int LUACALL wxTabCtrl_constructor(lua_State *L)
{    
    wxTabCtrl *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("tabCtrl"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : 0);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxTabCtrl(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxTabCtrl, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "tabCtrl")
static int LUACALL wxTabCtrl_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("tabCtrl"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->Create(parent, id, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// bool DeleteAllItems()
static int LUACALL wxTabCtrl_DeleteAllItems(lua_State *L)
{    
    bool returns;
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->DeleteAllItems();
    lua_pushboolean(L, returns);
    return 1;
}

// bool DeleteItem(int item)
static int LUACALL wxTabCtrl_DeleteItem(lua_State *L)
{    
    bool returns;    
    int item = (int) getnumbertype(L, 2);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->DeleteItem(item);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetCurFocus() const
static int LUACALL wxTabCtrl_GetCurFocus(lua_State *L)
{    
    int returns;
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->GetCurFocus();
    lua_pushnumber(L, returns);
    return 1;
}

// wxImageList* GetImageList() const
static int LUACALL wxTabCtrl_GetImageList(lua_State *L)
{    
    wxImageList *returns;
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->GetImageList();
    pushuserdatatype(L, s_wxImageList, returns);
    return 1;
}

// int GetItemCount() const
static int LUACALL wxTabCtrl_GetItemCount(lua_State *L)
{    
    int returns;
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->GetItemCount();
    lua_pushnumber(L, returns);
    return 1;
}

// wxObject * GetItemData(int item) const
static int LUACALL wxTabCtrl_GetItemData(lua_State *L)
{
    wxObject *returns;
    // int item
    int item = (int) getnumbertype(L, 2);
    // get this
    wxTabCtrl *self = ( wxTabCtrl * ) getuserdatatype(L, 1, s_wxTabCtrl );
    // call GetItemData
    returns = (wxObject *) self->GetItemData(item);
    // push the result datatype
    pushuserdatatype(L, s_wxObject, returns );
    // return the number of parameters
    return 1;
}

// int GetItemImage(int item) const
static int LUACALL wxTabCtrl_GetItemImage(lua_State *L)
{    
    int returns;    
    int item = (int) getnumbertype(L, 2);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->GetItemImage(item);
    lua_pushnumber(L, returns);
    return 1;
}

// bool GetItemRect(int item, wxRect& rect) const
static int LUACALL wxTabCtrl_GetItemRect(lua_State *L)
{    
    bool returns;    
    wxRect *rect = (wxRect*)getuserdatatype(L, 3, s_wxRect);
    int item = (int) getnumbertype(L, 2);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->GetItemRect(item, *rect);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetItemText(int item) const
static int LUACALL wxTabCtrl_GetItemText(lua_State *L)
{    
    wxString returns;    
    int item = (int) getnumbertype(L, 2);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->GetItemText(item);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetRowCount() const
static int LUACALL wxTabCtrl_GetRowCount(lua_State *L)
{    
    int returns;
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->GetRowCount();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetSelection() const
static int LUACALL wxTabCtrl_GetSelection(lua_State *L)
{    
    int returns;
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->GetSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// int HitTest(const wxPoint& pt, long& flags)
static int LUACALL wxTabCtrl_HitTest(lua_State *L)
{
    int returns;
    // long& flags
    long flags;
    // const wxPoint& pt
    const wxPoint *pt = (wxPoint *) getuserdatatype(L, 2, s_wxPoint);
    // get this
    wxTabCtrl *self = ( wxTabCtrl * ) getuserdatatype(L, 1, s_wxTabCtrl );
    // call HitTest
    returns = self->HitTest(*pt, flags);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result flags
    lua_pushnumber(L, flags);
    // return the number of parameters
    return 2;
}

// void InsertItem(int item, const wxString& text, int imageId = -1, wxObject *clientData = NULL)
static int LUACALL wxTabCtrl_InsertItem(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxObject *clientData = (argCount >= 5 ? (wxObject*)getuserdatatype(L, 5, s_wxObject) : NULL);
    int imageId = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    wxString text = lua2wx(getstringtype(L, 3));
    int item = (int) getnumbertype(L, 2);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    self->InsertItem(item, text, imageId, clientData);
    return 0;
}

// bool SetItemData(int item, wxObject * data)
static int LUACALL wxTabCtrl_SetItemData(lua_State *L)
{    
    bool returns;    
    wxObject *data = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    int item = (int) getnumbertype(L, 2);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->SetItemData(item, data);
    lua_pushboolean(L, returns);
    return 1;
}

// bool SetItemImage(int item, int image)
static int LUACALL wxTabCtrl_SetItemImage(lua_State *L)
{    
    bool returns;    
    int image = (int) getnumbertype(L, 3);
    int item = (int) getnumbertype(L, 2);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->SetItemImage(item, image);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetImageList(wxImageList* imageList)
static int LUACALL wxTabCtrl_SetImageList(lua_State *L)
{        
    wxImageList *imageList = (wxImageList*)getuserdatatype(L, 2, s_wxImageList);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    self->SetImageList(imageList);
    return 0;
}

// void SetItemSize(const wxSize& size)
static int LUACALL wxTabCtrl_SetItemSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    self->SetItemSize(*size);
    return 0;
}

// bool SetItemText(int item, const wxString& text)
static int LUACALL wxTabCtrl_SetItemText(lua_State *L)
{    
    bool returns;    
    wxString text = lua2wx(getstringtype(L, 3));
    int item = (int) getnumbertype(L, 2);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->SetItemText(item, text);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetPadding(const wxSize& padding)
static int LUACALL wxTabCtrl_SetPadding(lua_State *L)
{        
    const wxSize *padding = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    self->SetPadding(*padding);
    return 0;
}

// int SetSelection(int item)
static int LUACALL wxTabCtrl_SetSelection(lua_State *L)
{    
    int returns;    
    int item = (int) getnumbertype(L, 2);
    wxTabCtrl *self = (wxTabCtrl*)getuserdatatype(L, 1, s_wxTabCtrl);
    returns = self->SetSelection(item);
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxTabEvent_destructor(lua_State *L)
{
    wxTabEvent * self = (wxTabEvent*)getuserdatatype(L, 1, s_wxTabEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxTabEvent_Delete(lua_State *L)
{
    wxTabEvent * self = (wxTabEvent*)getuserdatatype(L, 1, s_wxTabEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxTabEvent(WXTYPE commandType = 0, int id = 0)
static int LUACALL wxTabEvent_constructor(lua_State *L)
{    
    wxTabEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    WXTYPE commandType = (argCount >= 1 ? (WXTYPE) getnumbertype(L, 1) : 0);
    returns = new wxTabEvent(commandType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTabEvent, returns);
    return 1;
}

static int LUACALL wxSashWindow_destructor(lua_State *)
{
    return 0;
}

// wxSashWindow(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSW_3D|wxCLIP_CHILDREN, const wxString& name = "sashWindow")
static int LUACALL wxSashWindow_constructor(lua_State *L)
{    
    wxSashWindow *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("sashWindow"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxSW_3D|wxCLIP_CHILDREN);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 2 ? (wxWindowID) getnumbertype(L, 2) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxSashWindow(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxSashWindow, returns);
    return 1;
}

// bool GetSashVisible(wxSashEdgePosition edge) const
static int LUACALL wxSashWindow_GetSashVisible(lua_State *L)
{    
    bool returns;    
    wxSashEdgePosition edge = (wxSashEdgePosition) getenumerationtype(L, 2);
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    returns = self->GetSashVisible(edge);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetMaximumSizeX() const
static int LUACALL wxSashWindow_GetMaximumSizeX(lua_State *L)
{    
    int returns;
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    returns = self->GetMaximumSizeX();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMaximumSizeY() const
static int LUACALL wxSashWindow_GetMaximumSizeY(lua_State *L)
{    
    int returns;
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    returns = self->GetMaximumSizeY();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMinimumSizeX()
static int LUACALL wxSashWindow_GetMinimumSizeX(lua_State *L)
{    
    int returns;
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    returns = self->GetMinimumSizeX();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMinimumSizeY() const
static int LUACALL wxSashWindow_GetMinimumSizeY(lua_State *L)
{    
    int returns;
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    returns = self->GetMinimumSizeY();
    lua_pushnumber(L, returns);
    return 1;
}

// bool HasBorder(wxSashEdgePosition edge) const
static int LUACALL wxSashWindow_HasBorder(lua_State *L)
{    
    bool returns;    
    wxSashEdgePosition edge = (wxSashEdgePosition) getenumerationtype(L, 2);
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    returns = self->HasBorder(edge);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetMaximumSizeX(int min)
static int LUACALL wxSashWindow_SetMaximumSizeX(lua_State *L)
{        
    int min = (int) getnumbertype(L, 2);
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    self->SetMaximumSizeX(min);
    return 0;
}

// void SetMaximumSizeY(int min)
static int LUACALL wxSashWindow_SetMaximumSizeY(lua_State *L)
{        
    int min = (int) getnumbertype(L, 2);
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    self->SetMaximumSizeY(min);
    return 0;
}

// void SetMinimumSizeX(int min)
static int LUACALL wxSashWindow_SetMinimumSizeX(lua_State *L)
{        
    int min = (int) getnumbertype(L, 2);
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    self->SetMinimumSizeX(min);
    return 0;
}

// void SetMinimumSizeY(int min)
static int LUACALL wxSashWindow_SetMinimumSizeY(lua_State *L)
{        
    int min = (int) getnumbertype(L, 2);
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    self->SetMinimumSizeY(min);
    return 0;
}

// void SetSashVisible(wxSashEdgePosition edge, bool visible)
static int LUACALL wxSashWindow_SetSashVisible(lua_State *L)
{        
    bool visible = getbooleantype(L, 3);
    wxSashEdgePosition edge = (wxSashEdgePosition) getenumerationtype(L, 2);
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    self->SetSashVisible(edge, visible);
    return 0;
}

// void SetSashBorder(wxSashEdgePosition edge, bool hasBorder)
static int LUACALL wxSashWindow_SetSashBorder(lua_State *L)
{        
    bool hasBorder = getbooleantype(L, 3);
    wxSashEdgePosition edge = (wxSashEdgePosition) getenumerationtype(L, 2);
    wxSashWindow *self = (wxSashWindow*)getuserdatatype(L, 1, s_wxSashWindow);
    self->SetSashBorder(edge, hasBorder);
    return 0;
}

static int LUACALL wxSashLayoutWindow_destructor(lua_State *)
{
    return 0;
}

// wxSashLayoutWindow(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSW_3D|wxCLIP_CHILDREN, const wxString& name = "layoutWindow")
static int LUACALL wxSashLayoutWindow_constructor(lua_State *L)
{    
    wxSashLayoutWindow *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("layoutWindow"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxSW_3D|wxCLIP_CHILDREN);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 2 ? (wxWindowID) getnumbertype(L, 2) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxSashLayoutWindow(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxSashLayoutWindow, returns);
    return 1;
}

// wxLayoutAlignment GetAlignment() const
static int LUACALL wxSashLayoutWindow_GetAlignment(lua_State *L)
{    
    wxLayoutAlignment returns;
    wxSashLayoutWindow *self = (wxSashLayoutWindow*)getuserdatatype(L, 1, s_wxSashLayoutWindow);
    returns = self->GetAlignment();
    lua_pushnumber(L, returns);
    return 1;
}

// wxLayoutOrientation GetOrientation() const
static int LUACALL wxSashLayoutWindow_GetOrientation(lua_State *L)
{    
    wxLayoutOrientation returns;
    wxSashLayoutWindow *self = (wxSashLayoutWindow*)getuserdatatype(L, 1, s_wxSashLayoutWindow);
    returns = self->GetOrientation();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetAlignment(wxLayoutAlignment alignment)
static int LUACALL wxSashLayoutWindow_SetAlignment(lua_State *L)
{        
    wxLayoutAlignment alignment = (wxLayoutAlignment) getenumerationtype(L, 2);
    wxSashLayoutWindow *self = (wxSashLayoutWindow*)getuserdatatype(L, 1, s_wxSashLayoutWindow);
    self->SetAlignment(alignment);
    return 0;
}

// void SetDefaultSize(const wxSize& size)
static int LUACALL wxSashLayoutWindow_SetDefaultSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxSashLayoutWindow *self = (wxSashLayoutWindow*)getuserdatatype(L, 1, s_wxSashLayoutWindow);
    self->SetDefaultSize(*size);
    return 0;
}

// void SetOrientation(wxLayoutOrientation orientation)
static int LUACALL wxSashLayoutWindow_SetOrientation(lua_State *L)
{        
    wxLayoutOrientation orientation = (wxLayoutOrientation) getenumerationtype(L, 2);
    wxSashLayoutWindow *self = (wxSashLayoutWindow*)getuserdatatype(L, 1, s_wxSashLayoutWindow);
    self->SetOrientation(orientation);
    return 0;
}

static int LUACALL wxLayoutAlgorithm_destructor(lua_State *)
{
    return 0;
}

// wxLayoutAlgorithm()
static int LUACALL wxLayoutAlgorithm_constructor(lua_State *L)
{    
    wxLayoutAlgorithm *returns;
    returns = new wxLayoutAlgorithm();
    pushuserdatatype(L, s_wxLayoutAlgorithm, returns);
    return 1;
}

// bool LayoutMDIFrame(wxMDIParentFrame* frame, wxRect* rect = NULL)
static int LUACALL wxLayoutAlgorithm_LayoutMDIFrame(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxRect *rect = (argCount >= 3 ? (wxRect*)getuserdatatype(L, 3, s_wxRect) : NULL);
    wxMDIParentFrame *frame = (wxMDIParentFrame*)getuserdatatype(L, 2, s_wxMDIParentFrame);
    wxLayoutAlgorithm *self = (wxLayoutAlgorithm*)getuserdatatype(L, 1, s_wxLayoutAlgorithm);
    returns = self->LayoutMDIFrame(frame, rect);
    lua_pushboolean(L, returns);
    return 1;
}

// bool LayoutWindow(wxWindow* frame, wxWindow* mainWindow = NULL)
static int LUACALL wxLayoutAlgorithm_LayoutWindow(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxWindow *mainWindow = (argCount >= 3 ? (wxWindow*)getuserdatatype(L, 3, s_wxWindow) : NULL);
    wxWindow *frame = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxLayoutAlgorithm *self = (wxLayoutAlgorithm*)getuserdatatype(L, 1, s_wxLayoutAlgorithm);
    returns = self->LayoutWindow(frame, mainWindow);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxQueryLayoutInfoEvent_destructor(lua_State *L)
{
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent*)getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxQueryLayoutInfoEvent_Delete(lua_State *L)
{
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent*)getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxQueryLayoutInfoEvent(wxWindowID id = 0)
static int LUACALL wxQueryLayoutInfoEvent_constructor(lua_State *L)
{    
    wxQueryLayoutInfoEvent *returns;
    int argCount = lua_gettop(L);    
    wxWindowID id = (argCount >= 1 ? (wxWindowID) getnumbertype(L, 1) : 0);
    returns = new wxQueryLayoutInfoEvent(id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxQueryLayoutInfoEvent, returns);
    return 1;
}

// int GetFlags() const
static int LUACALL wxQueryLayoutInfoEvent_GetFlags(lua_State *L)
{    
    int returns;
    wxQueryLayoutInfoEvent *self = (wxQueryLayoutInfoEvent*)getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent);
    returns = self->GetFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// wxLayoutOrientation GetOrientation() const
static int LUACALL wxQueryLayoutInfoEvent_GetOrientation(lua_State *L)
{    
    wxLayoutOrientation returns;
    wxQueryLayoutInfoEvent *self = (wxQueryLayoutInfoEvent*)getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent);
    returns = self->GetOrientation();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetRequestedLength() const
static int LUACALL wxQueryLayoutInfoEvent_GetRequestedLength(lua_State *L)
{    
    int returns;
    wxQueryLayoutInfoEvent *self = (wxQueryLayoutInfoEvent*)getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent);
    returns = self->GetRequestedLength();
    lua_pushnumber(L, returns);
    return 1;
}

// wxSize GetSize() const
static int LUACALL wxQueryLayoutInfoEvent_GetSize(lua_State *L)
{    
    wxSize *returns;
    wxQueryLayoutInfoEvent *self = (wxQueryLayoutInfoEvent*)getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent);
    returns = new wxSize(self->GetSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// void SetAlignment(wxLayoutAlignment alignment)
static int LUACALL wxQueryLayoutInfoEvent_SetAlignment(lua_State *L)
{
    // wxLayoutAlignment alignment
    wxLayoutAlignment alignment = (wxLayoutAlignment) getenumerationtype(L, 2);
    // get this
    wxQueryLayoutInfoEvent *self = ( wxQueryLayoutInfoEvent * ) getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent );
    // call SetAlignment
    self->SetAlignment(alignment);
    // return the number of parameters
    return 0;
}

// void SetFlags(int flags)
static int LUACALL wxQueryLayoutInfoEvent_SetFlags(lua_State *L)
{        
    int flags = (int) getnumbertype(L, 2);
    wxQueryLayoutInfoEvent *self = (wxQueryLayoutInfoEvent*)getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent);
    self->SetFlags(flags);
    return 0;
}

// void SetOrientation(wxLayoutOrientation orientation)
static int LUACALL wxQueryLayoutInfoEvent_SetOrientation(lua_State *L)
{
    // wxLayoutOrientation orientation
    wxLayoutOrientation orientation = (wxLayoutOrientation) getenumerationtype(L, 2);
    // get this
    wxQueryLayoutInfoEvent *self = ( wxQueryLayoutInfoEvent * ) getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent );
    // call SetOrientation
    self->SetOrientation(orientation);
    // return the number of parameters
    return 0;
}

// void SetRequestedLength(int length)
static int LUACALL wxQueryLayoutInfoEvent_SetRequestedLength(lua_State *L)
{        
    int length = (int) getnumbertype(L, 2);
    wxQueryLayoutInfoEvent *self = (wxQueryLayoutInfoEvent*)getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent);
    self->SetRequestedLength(length);
    return 0;
}

// void SetSize(const wxSize& size)
static int LUACALL wxQueryLayoutInfoEvent_SetSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxQueryLayoutInfoEvent *self = (wxQueryLayoutInfoEvent*)getuserdatatype(L, 1, s_wxQueryLayoutInfoEvent);
    self->SetSize(*size);
    return 0;
}

static int LUACALL wxCalculateLayoutEvent_destructor(lua_State *L)
{
    wxCalculateLayoutEvent * self = (wxCalculateLayoutEvent*)getuserdatatype(L, 1, s_wxCalculateLayoutEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxCalculateLayoutEvent_Delete(lua_State *L)
{
    wxCalculateLayoutEvent * self = (wxCalculateLayoutEvent*)getuserdatatype(L, 1, s_wxCalculateLayoutEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxCalculateLayoutEvent(wxWindowID id = 0)
static int LUACALL wxCalculateLayoutEvent_constructor(lua_State *L)
{    
    wxCalculateLayoutEvent *returns;
    int argCount = lua_gettop(L);    
    wxWindowID id = (argCount >= 1 ? (wxWindowID) getnumbertype(L, 1) : 0);
    returns = new wxCalculateLayoutEvent(id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCalculateLayoutEvent, returns);
    return 1;
}

// int GetFlags() const
static int LUACALL wxCalculateLayoutEvent_GetFlags(lua_State *L)
{    
    int returns;
    wxCalculateLayoutEvent *self = (wxCalculateLayoutEvent*)getuserdatatype(L, 1, s_wxCalculateLayoutEvent);
    returns = self->GetFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// wxRect GetRect() const
static int LUACALL wxCalculateLayoutEvent_GetRect(lua_State *L)
{    
    wxRect *returns;
    wxCalculateLayoutEvent *self = (wxCalculateLayoutEvent*)getuserdatatype(L, 1, s_wxCalculateLayoutEvent);
    returns = new wxRect(self->GetRect());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// void SetFlags(int flags)
static int LUACALL wxCalculateLayoutEvent_SetFlags(lua_State *L)
{        
    int flags = (int) getnumbertype(L, 2);
    wxCalculateLayoutEvent *self = (wxCalculateLayoutEvent*)getuserdatatype(L, 1, s_wxCalculateLayoutEvent);
    self->SetFlags(flags);
    return 0;
}

// void SetRect(const wxRect& rect)
static int LUACALL wxCalculateLayoutEvent_SetRect(lua_State *L)
{        
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxCalculateLayoutEvent *self = (wxCalculateLayoutEvent*)getuserdatatype(L, 1, s_wxCalculateLayoutEvent);
    self->SetRect(*rect);
    return 0;
}

static int LUACALL wxSashEvent_destructor(lua_State *L)
{
    wxSashEvent * self = (wxSashEvent*)getuserdatatype(L, 1, s_wxSashEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxSashEvent_Delete(lua_State *L)
{
    wxSashEvent * self = (wxSashEvent*)getuserdatatype(L, 1, s_wxSashEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxSashEvent(int id = 0, wxSashEdgePosition edge = wxSASH_NONE)
static int LUACALL wxSashEvent_constructor(lua_State *L)
{    
    wxSashEvent *returns;
    int argCount = lua_gettop(L);    
    wxSashEdgePosition edge = (argCount >= 2 ? (wxSashEdgePosition) getenumerationtype(L, 2) : wxSASH_NONE);
    int id = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxSashEvent(id, edge);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSashEvent, returns);
    return 1;
}

// void SetEdge(wxSashEdgePosition edge)
static int LUACALL wxSashEvent_SetEdge(lua_State *L)
{        
    wxSashEdgePosition edge = (wxSashEdgePosition) getenumerationtype(L, 2);
    wxSashEvent *self = (wxSashEvent*)getuserdatatype(L, 1, s_wxSashEvent);
    self->SetEdge(edge);
    return 0;
}

// int GetEdge()
static int LUACALL wxSashEvent_GetEdge(lua_State *L)
{    
    int returns;
    wxSashEvent *self = (wxSashEvent*)getuserdatatype(L, 1, s_wxSashEvent);
    returns = self->GetEdge();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetDragRect(const wxRect& rect)
static int LUACALL wxSashEvent_SetDragRect(lua_State *L)
{        
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxSashEvent *self = (wxSashEvent*)getuserdatatype(L, 1, s_wxSashEvent);
    self->SetDragRect(*rect);
    return 0;
}

// wxRect GetDragRect()
static int LUACALL wxSashEvent_GetDragRect(lua_State *L)
{    
    wxRect *returns;
    wxSashEvent *self = (wxSashEvent*)getuserdatatype(L, 1, s_wxSashEvent);
    returns = new wxRect(self->GetDragRect());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// void SetDragStatus(wxSashDragStatus status)
static int LUACALL wxSashEvent_SetDragStatus(lua_State *L)
{        
    wxSashDragStatus status = (wxSashDragStatus) getenumerationtype(L, 2);
    wxSashEvent *self = (wxSashEvent*)getuserdatatype(L, 1, s_wxSashEvent);
    self->SetDragStatus(status);
    return 0;
}

// int GetDragStatus()
static int LUACALL wxSashEvent_GetDragStatus(lua_State *L)
{    
    int returns;
    wxSashEvent *self = (wxSashEvent*)getuserdatatype(L, 1, s_wxSashEvent);
    returns = self->GetDragStatus();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxScrolledWindow_destructor(lua_State *)
{
    return 0;
}

// wxScrolledWindow(wxWindow* parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHSCROLL | wxVSCROLL, const wxString& name = "scrolledWindow")
static int LUACALL wxScrolledWindow_constructor(lua_State *L)
{    
    wxScrolledWindow *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("scrolledWindow"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxHSCROLL | wxVSCROLL);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 2 ? (wxWindowID) getnumbertype(L, 2) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxScrolledWindow(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxScrolledWindow, returns);
    return 1;
}

// void CalcScrolledPosition( int x, int y, int *xx, int *yy) const
static int LUACALL wxScrolledWindow_CalcScrolledPosition(lua_State *L)
{
    int yy;
    int xx;
    // int y
    int y = (int) getnumbertype(L, 3);
    // int x
    int x = (int) getnumbertype(L, 2);
    // get this
    wxScrolledWindow *self = ( wxScrolledWindow * ) getuserdatatype(L, 1, s_wxScrolledWindow );
    // call CalcScrolledPosition
    self->CalcScrolledPosition(x, y, &xx, &yy);
    lua_pushnumber(L, xx);
    lua_pushnumber(L, yy);
    // return the number of parameters
    return 2;
}

// void CalcUnscrolledPosition( int x, int y, int *xx, int *yy) const
static int LUACALL wxScrolledWindow_CalcUnscrolledPosition(lua_State *L)
{
    int yy;
    int xx;
    // int y
    int y = (int) getnumbertype(L, 3);
    // int x
    int x = (int) getnumbertype(L, 2);
    // get this
    wxScrolledWindow *self = ( wxScrolledWindow * ) getuserdatatype(L, 1, s_wxScrolledWindow );
    // call CalcUnscrolledPosition
    self->CalcUnscrolledPosition(x, y, &xx, &yy);
    lua_pushnumber(L, xx);
    lua_pushnumber(L, yy);
    // return the number of parameters
    return 2;
}

// bool Create(wxWindow* parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHSCROLL | wxVSCROLL, const wxString& name = "scrolledWindow")
static int LUACALL wxScrolledWindow_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("scrolledWindow"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxHSCROLL | wxVSCROLL);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 3 ? (wxWindowID) getnumbertype(L, 3) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxScrolledWindow *self = (wxScrolledWindow*)getuserdatatype(L, 1, s_wxScrolledWindow);
    returns = self->Create(parent, id, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// void EnableScrolling(const bool xScrolling, const bool yScrolling)
static int LUACALL wxScrolledWindow_EnableScrolling(lua_State *L)
{        
    const bool yScrolling = getbooleantype(L, 3);
    const bool xScrolling = getbooleantype(L, 2);
    wxScrolledWindow *self = (wxScrolledWindow*)getuserdatatype(L, 1, s_wxScrolledWindow);
    self->EnableScrolling(xScrolling, yScrolling);
    return 0;
}

// void GetScrollPixelsPerUnit(int* xUnit, int* yUnit) const
static int LUACALL wxScrolledWindow_GetScrollPixelsPerUnit(lua_State *L)
{
    int yUnit;
    int xUnit;
    // get this
    wxScrolledWindow *self = ( wxScrolledWindow * ) getuserdatatype(L, 1, s_wxScrolledWindow );
    // call GetScrollPixelsPerUnit
    self->GetScrollPixelsPerUnit(&xUnit, &yUnit);
    lua_pushnumber(L, xUnit);
    lua_pushnumber(L, yUnit);
    // return the number of parameters
    return 2;
}

// void GetVirtualSize(int* x, int* y) const
static int LUACALL wxScrolledWindow_GetVirtualSize(lua_State *L)
{
    int y;
    int x;
    // get this
    wxScrolledWindow *self = ( wxScrolledWindow * ) getuserdatatype(L, 1, s_wxScrolledWindow );
    // call GetVirtualSize
    self->GetVirtualSize(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

// bool IsRetained() const
static int LUACALL wxScrolledWindow_IsRetained(lua_State *L)
{    
    bool returns;
    wxScrolledWindow *self = (wxScrolledWindow*)getuserdatatype(L, 1, s_wxScrolledWindow);
    returns = self->IsRetained();
    lua_pushboolean(L, returns);
    return 1;
}

// void PrepareDC(wxDC& dc)
static int LUACALL wxScrolledWindow_PrepareDC(lua_State *L)
{        
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    wxScrolledWindow *self = (wxScrolledWindow*)getuserdatatype(L, 1, s_wxScrolledWindow);
    self->PrepareDC(*dc);
    return 0;
}

// void Scroll(int x, int y)
static int LUACALL wxScrolledWindow_Scroll(lua_State *L)
{        
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxScrolledWindow *self = (wxScrolledWindow*)getuserdatatype(L, 1, s_wxScrolledWindow);
    self->Scroll(x, y);
    return 0;
}

// void SetScrollbars(int pixelsPerUnitX, int pixelsPerUnitY, int noUnitsX, int noUnitsY, int xPos = 0, int yPos = 0, bool noRefresh = FALSE)
static int LUACALL wxScrolledWindow_SetScrollbars(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool noRefresh = (argCount >= 8 ? getbooleantype(L, 8) : FALSE);
    int yPos = (argCount >= 7 ? (int) getnumbertype(L, 7) : 0);
    int xPos = (argCount >= 6 ? (int) getnumbertype(L, 6) : 0);
    int noUnitsY = (int) getnumbertype(L, 5);
    int noUnitsX = (int) getnumbertype(L, 4);
    int pixelsPerUnitY = (int) getnumbertype(L, 3);
    int pixelsPerUnitX = (int) getnumbertype(L, 2);
    wxScrolledWindow *self = (wxScrolledWindow*)getuserdatatype(L, 1, s_wxScrolledWindow);
    self->SetScrollbars(pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos, yPos, noRefresh);
    return 0;
}

// void SetTargetWindow(wxWindow* window)
static int LUACALL wxScrolledWindow_SetTargetWindow(lua_State *L)
{        
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxScrolledWindow *self = (wxScrolledWindow*)getuserdatatype(L, 1, s_wxScrolledWindow);
    self->SetTargetWindow(window);
    return 0;
}

// void GetViewStart(int* x, int* y) const
static int LUACALL wxScrolledWindow_GetViewStart(lua_State *L)
{
    int y;
    int x;
    // get this
    wxScrolledWindow *self = ( wxScrolledWindow * ) getuserdatatype(L, 1, s_wxScrolledWindow );
    // call GetViewStart
    self->GetViewStart(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

static int LUACALL wxSplitterWindow_destructor(lua_State *)
{
    return 0;
}

// wxSplitterWindow(wxWindow* parent, wxWindowID id, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style=wxSP_3D, const wxString& name = "splitterWindow")
static int LUACALL wxSplitterWindow_constructor(lua_State *L)
{    
    wxSplitterWindow *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("splitterWindow"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxSP_3D);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *point = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxSplitterWindow(parent, id, *point, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxSplitterWindow, returns);
    return 1;
}

// %constructor wxSplitterWindowDefault()
static int LUACALL wxSplitterWindowDefault_constructor(lua_State *L)
{    
    wxSplitterWindow *returns;
    returns = new wxSplitterWindow();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxSplitterWindow, returns);
    return 1;
}

// bool     Create(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_3D|wxCLIP_CHILDREN, const wxString& name = "splitter")
static int LUACALL wxSplitterWindow_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("splitter"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxSP_3D|wxCLIP_CHILDREN);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 3 ? (wxWindowID) getnumbertype(L, 3) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->Create(parent, id, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// int      GetMinimumPaneSize() const
static int LUACALL wxSplitterWindow_GetMinimumPaneSize(lua_State *L)
{    
    int returns;
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->GetMinimumPaneSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetSashPosition()
static int LUACALL wxSplitterWindow_GetSashPosition(lua_State *L)
{    
    int returns;
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->GetSashPosition();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetSplitMode() const
static int LUACALL wxSplitterWindow_GetSplitMode(lua_State *L)
{    
    int returns;
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->GetSplitMode();
    lua_pushnumber(L, returns);
    return 1;
}

// wxWindow *GetWindow1() const
static int LUACALL wxSplitterWindow_GetWindow1(lua_State *L)
{    
    wxWindow *returns;
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->GetWindow1();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// wxWindow *GetWindow2() const
static int LUACALL wxSplitterWindow_GetWindow2(lua_State *L)
{    
    wxWindow *returns;
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->GetWindow2();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// void     Initialize(wxWindow* window)
static int LUACALL wxSplitterWindow_Initialize(lua_State *L)
{        
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    self->Initialize(window);
    return 0;
}

// bool     IsSplit() const
static int LUACALL wxSplitterWindow_IsSplit(lua_State *L)
{    
    bool returns;
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->IsSplit();
    lua_pushboolean(L, returns);
    return 1;
}

// bool     ReplaceWindow(wxWindow * winOld, wxWindow * winNew)
static int LUACALL wxSplitterWindow_ReplaceWindow(lua_State *L)
{    
    bool returns;    
    wxWindow *winNew = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    wxWindow *winOld = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->ReplaceWindow(winOld, winNew);
    lua_pushboolean(L, returns);
    return 1;
}

// void     SetSashPosition(int position, const bool redraw = TRUE)
static int LUACALL wxSplitterWindow_SetSashPosition(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const bool redraw = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    int position = (int) getnumbertype(L, 2);
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    self->SetSashPosition(position, redraw);
    return 0;
}

// void     SetMinimumPaneSize(int paneSize)
static int LUACALL wxSplitterWindow_SetMinimumPaneSize(lua_State *L)
{        
    int paneSize = (int) getnumbertype(L, 2);
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    self->SetMinimumPaneSize(paneSize);
    return 0;
}

// void     SetSplitMode(int mode)
static int LUACALL wxSplitterWindow_SetSplitMode(lua_State *L)
{        
    int mode = (int) getnumbertype(L, 2);
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    self->SetSplitMode(mode);
    return 0;
}

// bool     SplitHorizontally(wxWindow* window1, wxWindow* window2, int sashPosition = 0)
static int LUACALL wxSplitterWindow_SplitHorizontally(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int sashPosition = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    wxWindow *window2 = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    wxWindow *window1 = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->SplitHorizontally(window1, window2, sashPosition);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     SplitVertically(wxWindow* window1, wxWindow* window2, int sashPosition = 0)
static int LUACALL wxSplitterWindow_SplitVertically(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int sashPosition = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    wxWindow *window2 = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    wxWindow *window1 = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->SplitVertically(window1, window2, sashPosition);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     Unsplit(wxWindow* toRemove = NULL)
static int LUACALL wxSplitterWindow_Unsplit(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxWindow *toRemove = (argCount >= 2 ? (wxWindow*)getuserdatatype(L, 2, s_wxWindow) : NULL);
    wxSplitterWindow *self = (wxSplitterWindow*)getuserdatatype(L, 1, s_wxSplitterWindow);
    returns = self->Unsplit(toRemove);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxSplitterEvent_destructor(lua_State *L)
{
    wxSplitterEvent * self = (wxSplitterEvent*)getuserdatatype(L, 1, s_wxSplitterEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxSplitterEvent_Delete(lua_State *L)
{
    wxSplitterEvent * self = (wxSplitterEvent*)getuserdatatype(L, 1, s_wxSplitterEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxSplitterEvent(wxEventType type = wxEVT_NULL, wxSplitterWindow *splitter = NULL)
static int LUACALL wxSplitterEvent_constructor(lua_State *L)
{    
    wxSplitterEvent *returns;
    int argCount = lua_gettop(L);    
    wxSplitterWindow *splitter = (argCount >= 2 ? (wxSplitterWindow*)getuserdatatype(L, 2, s_wxSplitterWindow) : NULL);
    wxEventType type = (argCount >= 1 ? (wxEventType) getnumbertype(L, 1) : wxEVT_NULL);
    returns = new wxSplitterEvent(type, splitter);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSplitterEvent, returns);
    return 1;
}

// int GetSashPosition()
static int LUACALL wxSplitterEvent_GetSashPosition(lua_State *L)
{    
    int returns;
    wxSplitterEvent *self = (wxSplitterEvent*)getuserdatatype(L, 1, s_wxSplitterEvent);
    returns = self->GetSashPosition();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetX()
static int LUACALL wxSplitterEvent_GetX(lua_State *L)
{    
    int returns;
    wxSplitterEvent *self = (wxSplitterEvent*)getuserdatatype(L, 1, s_wxSplitterEvent);
    returns = self->GetX();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetY()
static int LUACALL wxSplitterEvent_GetY(lua_State *L)
{    
    int returns;
    wxSplitterEvent *self = (wxSplitterEvent*)getuserdatatype(L, 1, s_wxSplitterEvent);
    returns = self->GetY();
    lua_pushnumber(L, returns);
    return 1;
}

// wxWindow* GetWindowBeingRemoved()
static int LUACALL wxSplitterEvent_GetWindowBeingRemoved(lua_State *L)
{    
    wxWindow *returns;
    wxSplitterEvent *self = (wxSplitterEvent*)getuserdatatype(L, 1, s_wxSplitterEvent);
    returns = self->GetWindowBeingRemoved();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// void SetSashPosition(int pos)
static int LUACALL wxSplitterEvent_SetSashPosition(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxSplitterEvent *self = (wxSplitterEvent*)getuserdatatype(L, 1, s_wxSplitterEvent);
    self->SetSashPosition(pos);
    return 0;
}

static int LUACALL wxStaticBox_destructor(lua_State *)
{
    return 0;
}

// wxStaticBox(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "staticBox")
static int LUACALL wxStaticBox_constructor(lua_State *L)
{    
    wxStaticBox *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("staticBox"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString label = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxStaticBox(parent, id, label, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxStaticBox, returns);
    return 1;
}

// bool     Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "staticBox")
static int LUACALL wxStaticBox_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("staticBox"));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : 0);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString label = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxStaticBox *self = (wxStaticBox*)getuserdatatype(L, 1, s_wxStaticBox);
    returns = self->Create(parent, id, label, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxStaticBitmap_destructor(lua_State *)
{
    return 0;
}

// wxStaticBitmap(wxWindow* parent, wxWindowID id, const wxBitmap& label = wxNullBitmap, const wxPoint& pos, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "staticBitmap")
static int LUACALL wxStaticBitmap_constructor(lua_State *L)
{    
    wxStaticBitmap *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("staticBitmap"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 4, s_wxPoint);
    const wxBitmap *label = (argCount >= 3 ? (wxBitmap*)getuserdatatype(L, 3, s_wxBitmap) : &wxNullBitmap);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxStaticBitmap(parent, id, *label, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxStaticBitmap, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxBitmap& label = wxNullBitmap, const wxPoint& pos, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "staticBitmap")
static int LUACALL wxStaticBitmap_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("staticBitmap"));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : 0);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 5, s_wxPoint);
    const wxBitmap *label = (argCount >= 4 ? (wxBitmap*)getuserdatatype(L, 4, s_wxBitmap) : &wxNullBitmap);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxStaticBitmap *self = (wxStaticBitmap*)getuserdatatype(L, 1, s_wxStaticBitmap);
    returns = self->Create(parent, id, *label, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxBitmap GetBitmap() const
static int LUACALL wxStaticBitmap_GetBitmap(lua_State *L)
{    
    wxBitmap *returns;
    wxStaticBitmap *self = (wxStaticBitmap*)getuserdatatype(L, 1, s_wxStaticBitmap);
    returns = new wxBitmap(self->GetBitmap());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// virtual void SetBitmap(const wxBitmap& label)
static int LUACALL wxStaticBitmap_SetBitmap(lua_State *L)
{        
    const wxBitmap *label = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxStaticBitmap *self = (wxStaticBitmap*)getuserdatatype(L, 1, s_wxStaticBitmap);
    self->SetBitmap(*label);
    return 0;
}

static int LUACALL wxStaticText_destructor(lua_State *)
{
    return 0;
}

// wxStaticText(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "staticText")
static int LUACALL wxStaticText_constructor(lua_State *L)
{    
    wxStaticText *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("staticText"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 4, s_wxPoint);
    wxString label = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxStaticText(parent, id, label, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxStaticText, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "staticText")
static int LUACALL wxStaticText_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("staticText"));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : 0);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 5, s_wxPoint);
    wxString label = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxStaticText *self = (wxStaticText*)getuserdatatype(L, 1, s_wxStaticText);
    returns = self->Create(parent, id, label, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetLabel() const
static int LUACALL wxStaticText_GetLabel(lua_State *L)
{    
    wxString returns;
    wxStaticText *self = (wxStaticText*)getuserdatatype(L, 1, s_wxStaticText);
    returns = self->GetLabel();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// virtual void SetLabel(const wxString& label)
static int LUACALL wxStaticText_SetLabel(lua_State *L)
{        
    wxString label = lua2wx(getstringtype(L, 2));
    wxStaticText *self = (wxStaticText*)getuserdatatype(L, 1, s_wxStaticText);
    self->SetLabel(label);
    return 0;
}

static int LUACALL wxStaticLine_destructor(lua_State *)
{
    return 0;
}

// wxStaticLine(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxLI_HORIZONTAL, const wxString& name = "staticLine")
static int LUACALL wxStaticLine_constructor(lua_State *L)
{    
    wxStaticLine *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("staticLine"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxLI_HORIZONTAL);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxStaticLine(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxStaticLine, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "staticLine")
static int LUACALL wxStaticLine_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("staticLine"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxStaticLine *self = (wxStaticLine*)getuserdatatype(L, 1, s_wxStaticLine);
    returns = self->Create(parent, id, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsVertical() const
static int LUACALL wxStaticLine_IsVertical(lua_State *L)
{    
    bool returns;
    wxStaticLine *self = (wxStaticLine*)getuserdatatype(L, 1, s_wxStaticLine);
    returns = self->IsVertical();
    lua_pushboolean(L, returns);
    return 1;
}

// static int GetDefaultSize()
static int LUACALL wxStaticLine_GetDefaultSize(lua_State *L)
{    
    int returns;
    returns = wxStaticLine::GetDefaultSize();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxPoint_destructor(lua_State *L)
{
    wxPoint * self = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPoint_Delete(lua_State *L)
{
    wxPoint * self = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPoint(int x, int y)
static int LUACALL wxPoint_constructor(lua_State *L)
{    
    wxPoint *returns;    
    int y = (int) getnumbertype(L, 2);
    int x = (int) getnumbertype(L, 1);
    returns = new wxPoint(x, y);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// int GetX()
static int LUACALL wxPoint_GetX(lua_State *L)
{
    // get this
    wxPoint *self = ( wxPoint * ) getuserdatatype(L, 1, s_wxPoint );
    // push the result number
    lua_pushnumber(L, self->x);
    // return the number of parameters
    return 1;
}

// int GetY()
static int LUACALL wxPoint_GetY(lua_State *L)
{
    // get this
    wxPoint *self = ( wxPoint * ) getuserdatatype(L, 1, s_wxPoint );
    // push the result number
    lua_pushnumber(L, self->y);
    // return the number of parameters
    return 1;
}

// int GetXY()
static int LUACALL wxPoint_GetXY(lua_State *L)
{
    // get this
    wxPoint *self = ( wxPoint * ) getuserdatatype(L, 1, s_wxPoint );
    // push the result number
    lua_pushnumber(L, self->x);
    lua_pushnumber(L, self->y);
    // return the number of parameters
    return 2;
}

// void SetX(int x)
static int LUACALL wxPoint_SetX(lua_State *L)
{
    // int x
    int x = (int) getnumbertype(L, 2);
    // get this
    wxPoint *self = ( wxPoint * ) getuserdatatype(L, 1, s_wxPoint );
    self->x = x;
    // return the number of parameters
    return 0;
}

// void SetY(int y)
static int LUACALL wxPoint_SetY(lua_State *L)
{
    // int y
    int y = (int) getnumbertype(L, 2);
    // get this
    wxPoint *self = ( wxPoint * ) getuserdatatype(L, 1, s_wxPoint );
    self->y = y;
    // return the number of parameters
    return 0;
}

// void Set(int x, int y)
static int LUACALL wxPoint_Set(lua_State *L)
{
    // int y
    int y = (int) getnumbertype(L, 3);
    // int x
    int x = (int) getnumbertype(L, 2);
    // get this
    wxPoint *self = ( wxPoint * ) getuserdatatype(L, 1, s_wxPoint );
    self->x = x;
    self->y = y;
    // return the number of parameters
    return 0;
}

static int LUACALL wxSize_destructor(lua_State *L)
{
    wxSize * self = (wxSize*)getuserdatatype(L, 1, s_wxSize);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxSize_Delete(lua_State *L)
{
    wxSize * self = (wxSize*)getuserdatatype(L, 1, s_wxSize);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxSize(int width, int height)
static int LUACALL wxSize_constructor(lua_State *L)
{    
    wxSize *returns;    
    int height = (int) getnumbertype(L, 2);
    int width = (int) getnumbertype(L, 1);
    returns = new wxSize(width, height);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// int GetWidth() const
static int LUACALL wxSize_GetWidth(lua_State *L)
{    
    int returns;
    wxSize *self = (wxSize*)getuserdatatype(L, 1, s_wxSize);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetHeight() const
static int LUACALL wxSize_GetHeight(lua_State *L)
{    
    int returns;
    wxSize *self = (wxSize*)getuserdatatype(L, 1, s_wxSize);
    returns = self->GetHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// void Set(int width, int height)
static int LUACALL wxSize_Set(lua_State *L)
{        
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxSize *self = (wxSize*)getuserdatatype(L, 1, s_wxSize);
    self->Set(width, height);
    return 0;
}

// void SetHeight(int height)
static int LUACALL wxSize_SetHeight(lua_State *L)
{        
    int height = (int) getnumbertype(L, 2);
    wxSize *self = (wxSize*)getuserdatatype(L, 1, s_wxSize);
    self->SetHeight(height);
    return 0;
}

// void SetWidth(int width)
static int LUACALL wxSize_SetWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxSize *self = (wxSize*)getuserdatatype(L, 1, s_wxSize);
    self->SetWidth(width);
    return 0;
}

static int LUACALL wxRect_destructor(lua_State *L)
{
    wxRect * self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxRect_Delete(lua_State *L)
{
    wxRect * self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxRect(int x = 0, int y = 0, int w = 0, int h = 0)
static int LUACALL wxRect_constructor(lua_State *L)
{    
    wxRect *returns;
    int argCount = lua_gettop(L);    
    int h = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int w = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    int y = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    int x = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxRect(x, y, w, h);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// %constructor wxRectFromPoints(const wxPoint& topLeft, const wxPoint& bottomRight)
static int LUACALL wxRectFromPoints_constructor(lua_State *L)
{    
    wxRect *returns;    
    const wxPoint *bottomRight = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    const wxPoint *topLeft = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new wxRect(*topLeft, *bottomRight);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// %constructor wxRectFromPosSize(const wxPoint& pos, const wxSize& size)
static int LUACALL wxRectFromPosSize_constructor(lua_State *L)
{    
    wxRect *returns;    
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new wxRect(*pos, *size);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// int     GetX()
static int LUACALL wxRect_GetX(lua_State *L)
{    
    int returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = self->GetX();
    lua_pushnumber(L, returns);
    return 1;
}

// void    SetX(int X)
static int LUACALL wxRect_SetX(lua_State *L)
{        
    int X = (int) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    self->SetX(X);
    return 0;
}

// int     GetY()
static int LUACALL wxRect_GetY(lua_State *L)
{    
    int returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = self->GetY();
    lua_pushnumber(L, returns);
    return 1;
}

// void    SetY(int Y)
static int LUACALL wxRect_SetY(lua_State *L)
{        
    int Y = (int) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    self->SetY(Y);
    return 0;
}

// int     GetWidth()
static int LUACALL wxRect_GetWidth(lua_State *L)
{    
    int returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetHeight()
static int LUACALL wxRect_GetHeight(lua_State *L)
{    
    int returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = self->GetHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPoint GetPosition()
static int LUACALL wxRect_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// wxSize  GetSize()
static int LUACALL wxRect_GetSize(lua_State *L)
{    
    wxSize *returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = new wxSize(self->GetSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// int     GetLeft()
static int LUACALL wxRect_GetLeft(lua_State *L)
{    
    int returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = self->GetLeft();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetTop()
static int LUACALL wxRect_GetTop(lua_State *L)
{    
    int returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = self->GetTop();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetBottom()
static int LUACALL wxRect_GetBottom(lua_State *L)
{    
    int returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = self->GetBottom();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetRight()
static int LUACALL wxRect_GetRight(lua_State *L)
{    
    int returns;
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = self->GetRight();
    lua_pushnumber(L, returns);
    return 1;
}

// void    SetWidth(int width)
static int LUACALL wxRect_SetWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    self->SetWidth(width);
    return 0;
}

// void    SetHeight(int height)
static int LUACALL wxRect_SetHeight(lua_State *L)
{        
    int height = (int) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    self->SetHeight(height);
    return 0;
}

// void    SetLeft(int left)
static int LUACALL wxRect_SetLeft(lua_State *L)
{        
    int left = (int) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    self->SetLeft(left);
    return 0;
}

// void    SetTop(int top)
static int LUACALL wxRect_SetTop(lua_State *L)
{        
    int top = (int) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    self->SetTop(top);
    return 0;
}

// void    SetRight(int right)
static int LUACALL wxRect_SetRight(lua_State *L)
{        
    int right = (int) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    self->SetRight(right);
    return 0;
}

// void    SetBottom(int bottom)
static int LUACALL wxRect_SetBottom(lua_State *L)
{        
    int bottom = (int) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    self->SetBottom(bottom);
    return 0;
}

// void    Inflate(wxCoord dx, wxCoord dy)
static int LUACALL wxRect_Inflate(lua_State *L)
{        
    wxCoord dy = (wxCoord) getnumbertype(L, 3);
    wxCoord dx = (wxCoord) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    self->Inflate(dx, dy);
    return 0;
}

// bool    Inside(wxCoord cx, wxCoord cy)
static int LUACALL wxRect_Inside(lua_State *L)
{    
    bool returns;    
    wxCoord cy = (wxCoord) getnumbertype(L, 3);
    wxCoord cx = (wxCoord) getnumbertype(L, 2);
    wxRect *self = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = self->Inside(cx, cy);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxGDIObject_destructor(lua_State *L)
{
    wxGDIObject * self = (wxGDIObject*)getuserdatatype(L, 1, s_wxGDIObject);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxGDIObject_Delete(lua_State *L)
{
    wxGDIObject * self = (wxGDIObject*)getuserdatatype(L, 1, s_wxGDIObject);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxGDIObject()
static int LUACALL wxGDIObject_constructor(lua_State *L)
{    
    wxGDIObject *returns;
    returns = new wxGDIObject();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxGDIObject, returns);
    return 1;
}

// bool GetVisible()
static int LUACALL wxGDIObject_GetVisible(lua_State *L)
{    
    bool returns;
    wxGDIObject *self = (wxGDIObject*)getuserdatatype(L, 1, s_wxGDIObject);
    returns = self->GetVisible();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetVisible(bool visible)
static int LUACALL wxGDIObject_SetVisible(lua_State *L)
{        
    bool visible = getbooleantype(L, 2);
    wxGDIObject *self = (wxGDIObject*)getuserdatatype(L, 1, s_wxGDIObject);
    self->SetVisible(visible);
    return 0;
}

// bool IsNull()
static int LUACALL wxGDIObject_IsNull(lua_State *L)
{    
    bool returns;
    wxGDIObject *self = (wxGDIObject*)getuserdatatype(L, 1, s_wxGDIObject);
    returns = self->IsNull();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxRegion_destructor(lua_State *)
{
    return 0;
}

// wxRegion(long x = 0, long y = 0, long width = 0, long height = 0)
static int LUACALL wxRegion_constructor(lua_State *L)
{    
    wxRegion *returns;
    int argCount = lua_gettop(L);    
    long height = (argCount >= 4 ? (long) getnumbertype(L, 4) : 0);
    long width = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    long y = (argCount >= 2 ? (long) getnumbertype(L, 2) : 0);
    long x = (argCount >= 1 ? (long) getnumbertype(L, 1) : 0);
    returns = new wxRegion(x, y, width, height);
    pushuserdatatype(L, s_wxRegion, returns);
    return 1;
}

// %constructor wxRegionFromPoints(const wxPoint& topLeft, const wxPoint& bottomRight)
static int LUACALL wxRegionFromPoints_constructor(lua_State *L)
{    
    wxRegion *returns;    
    const wxPoint *bottomRight = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    const wxPoint *topLeft = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new wxRegion(*topLeft, *bottomRight);
    pushuserdatatype(L, s_wxRegion, returns);
    return 1;
}

// %constructor wxRegionFromRect(const wxRect& rect)
static int LUACALL wxRegionFromRect_constructor(lua_State *L)
{    
    wxRegion *returns;    
    const wxRect *rect = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = new wxRegion(*rect);
    pushuserdatatype(L, s_wxRegion, returns);
    return 1;
}

// void Clear()
static int LUACALL wxRegion_Clear(lua_State *L)
{    
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    self->Clear();
    return 0;
}

// wxRegionContain Contains(long x, long y)
static int LUACALL wxRegion_Contains(lua_State *L)
{    
    wxRegionContain returns;    
    long y = (long) getnumbertype(L, 3);
    long x = (long) getnumbertype(L, 2);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Contains(x, y);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename ContainsPoint wxRegionContain Contains(const wxPoint& pt)
static int LUACALL wxRegion_ContainsPoint(lua_State *L)
{    
    wxRegionContain returns;    
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Contains(*pt);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename ContainsRect  wxRegionContain Contains(const wxRect& rect)
static int LUACALL wxRegion_ContainsRect(lua_State *L)
{    
    wxRegionContain returns;    
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Contains(*rect);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename ContainsRectDim wxRegionContain Contains(long x, long y, long w, long h)
static int LUACALL wxRegion_ContainsRectDim(lua_State *L)
{    
    wxRegionContain returns;    
    long h = (long) getnumbertype(L, 5);
    long w = (long) getnumbertype(L, 4);
    long y = (long) getnumbertype(L, 3);
    long x = (long) getnumbertype(L, 2);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Contains(x, y, w, h);
    lua_pushnumber(L, returns);
    return 1;
}

// wxRect GetBox() const
static int LUACALL wxRegion_GetBox(lua_State *L)
{    
    wxRect *returns;
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = new wxRect(self->GetBox());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// %rename GetBoxCoords void GetBox(int &x, int &y, int &width, int &height)
static int LUACALL wxRegion_GetBoxCoords(lua_State *L)
{
    int height;
    int width;
    int y;
    int x;
    // get this
    wxRegion *self = ( wxRegion * ) getuserdatatype(L, 1, s_wxRegion );
    // call GetBox
    self->GetBox(x, y, width, height);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 4;
}

// bool Intersect(long x, long y, long width, long height)
static int LUACALL wxRegion_Intersect(lua_State *L)
{    
    bool returns;    
    long height = (long) getnumbertype(L, 5);
    long width = (long) getnumbertype(L, 4);
    long y = (long) getnumbertype(L, 3);
    long x = (long) getnumbertype(L, 2);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Intersect(x, y, width, height);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename IntersectRect bool Intersect(const wxRect& rect)
static int LUACALL wxRegion_IntersectRect(lua_State *L)
{    
    bool returns;    
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Intersect(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename IntersectRegion bool Intersect(const wxRegion& region)
static int LUACALL wxRegion_IntersectRegion(lua_State *L)
{    
    bool returns;    
    const wxRegion *region = (wxRegion*)getuserdatatype(L, 2, s_wxRegion);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Intersect(*region);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEmpty() const
static int LUACALL wxRegion_IsEmpty(lua_State *L)
{    
    bool returns;
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->IsEmpty();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Subtract(long x, long y, long width, long height)
static int LUACALL wxRegion_Subtract(lua_State *L)
{    
    bool returns;    
    long height = (long) getnumbertype(L, 5);
    long width = (long) getnumbertype(L, 4);
    long y = (long) getnumbertype(L, 3);
    long x = (long) getnumbertype(L, 2);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Subtract(x, y, width, height);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename SubtractRect bool Subtract(const wxRect& rect)
static int LUACALL wxRegion_SubtractRect(lua_State *L)
{    
    bool returns;    
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Subtract(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename SubtractRegion bool Subtract(const wxRegion& region)
static int LUACALL wxRegion_SubtractRegion(lua_State *L)
{    
    bool returns;    
    const wxRegion *region = (wxRegion*)getuserdatatype(L, 2, s_wxRegion);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Subtract(*region);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Union(long x, long y, long width, long height)
static int LUACALL wxRegion_Union(lua_State *L)
{    
    bool returns;    
    long height = (long) getnumbertype(L, 5);
    long width = (long) getnumbertype(L, 4);
    long y = (long) getnumbertype(L, 3);
    long x = (long) getnumbertype(L, 2);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Union(x, y, width, height);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename UnionRect bool Union(const wxRect& rect)
static int LUACALL wxRegion_UnionRect(lua_State *L)
{    
    bool returns;    
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Union(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename UnionRegion bool Union(const wxRegion& region)
static int LUACALL wxRegion_UnionRegion(lua_State *L)
{    
    bool returns;    
    const wxRegion *region = (wxRegion*)getuserdatatype(L, 2, s_wxRegion);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Union(*region);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Xor(long x, long y, long width, long height)
static int LUACALL wxRegion_Xor(lua_State *L)
{    
    bool returns;    
    long height = (long) getnumbertype(L, 5);
    long width = (long) getnumbertype(L, 4);
    long y = (long) getnumbertype(L, 3);
    long x = (long) getnumbertype(L, 2);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Xor(x, y, width, height);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename XorRect bool Xor(const wxRect& rect)
static int LUACALL wxRegion_XorRect(lua_State *L)
{    
    bool returns;    
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Xor(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename XorRegion bool Xor(const wxRegion& region)
static int LUACALL wxRegion_XorRegion(lua_State *L)
{    
    bool returns;    
    const wxRegion *region = (wxRegion*)getuserdatatype(L, 2, s_wxRegion);
    wxRegion *self = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = self->Xor(*region);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxRegionIterator_destructor(lua_State *)
{
    return 0;
}

// wxRegionIterator(const wxRegion& region)
static int LUACALL wxRegionIterator_constructor(lua_State *L)
{    
    wxRegionIterator *returns;    
    const wxRegion *region = (wxRegion*)getuserdatatype(L, 1, s_wxRegion);
    returns = new wxRegionIterator(*region);
    pushuserdatatype(L, s_wxRegionIterator, returns);
    return 1;
}

// long GetX()
static int LUACALL wxRegionIterator_GetX(lua_State *L)
{    
    long returns;
    wxRegionIterator *self = (wxRegionIterator*)getuserdatatype(L, 1, s_wxRegionIterator);
    returns = self->GetX();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetY()
static int LUACALL wxRegionIterator_GetY(lua_State *L)
{    
    long returns;
    wxRegionIterator *self = (wxRegionIterator*)getuserdatatype(L, 1, s_wxRegionIterator);
    returns = self->GetY();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetW()
static int LUACALL wxRegionIterator_GetW(lua_State *L)
{    
    long returns;
    wxRegionIterator *self = (wxRegionIterator*)getuserdatatype(L, 1, s_wxRegionIterator);
    returns = self->GetW();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetWidth()
static int LUACALL wxRegionIterator_GetWidth(lua_State *L)
{    
    long returns;
    wxRegionIterator *self = (wxRegionIterator*)getuserdatatype(L, 1, s_wxRegionIterator);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetH()
static int LUACALL wxRegionIterator_GetH(lua_State *L)
{    
    long returns;
    wxRegionIterator *self = (wxRegionIterator*)getuserdatatype(L, 1, s_wxRegionIterator);
    returns = self->GetH();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetHeight()
static int LUACALL wxRegionIterator_GetHeight(lua_State *L)
{    
    long returns;
    wxRegionIterator *self = (wxRegionIterator*)getuserdatatype(L, 1, s_wxRegionIterator);
    returns = self->GetHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// wxRect GetRect()
static int LUACALL wxRegionIterator_GetRect(lua_State *L)
{    
    wxRect *returns;
    wxRegionIterator *self = (wxRegionIterator*)getuserdatatype(L, 1, s_wxRegionIterator);
    returns = new wxRect(self->GetRect());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// bool HaveRects()
static int LUACALL wxRegionIterator_HaveRects(lua_State *L)
{    
    bool returns;
    wxRegionIterator *self = (wxRegionIterator*)getuserdatatype(L, 1, s_wxRegionIterator);
    returns = self->HaveRects();
    lua_pushboolean(L, returns);
    return 1;
}

// void Reset()
static int LUACALL wxRegionIterator_Reset(lua_State *L)
{    
    wxRegionIterator *self = (wxRegionIterator*)getuserdatatype(L, 1, s_wxRegionIterator);
    self->Reset();
    return 0;
}

static int LUACALL wxFont_destructor(lua_State *L)
{
    wxFont * self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFont_Delete(lua_State *L)
{
    wxFont * self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxFont(int pointSize, int family, int style, int weight, const bool underline = FALSE, const wxString& faceName = "", wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
static int LUACALL wxFont_constructor(lua_State *L)
{    
    wxFont *returns;
    int argCount = lua_gettop(L);    
    wxFontEncoding encoding = (argCount >= 7 ? (wxFontEncoding) getenumerationtype(L, 7) : wxFONTENCODING_DEFAULT);
    wxString faceName = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT(""));
    const bool underline = (argCount >= 5 ? getbooleantype(L, 5) : FALSE);
    int weight = (int) getnumbertype(L, 4);
    int style = (int) getnumbertype(L, 3);
    int family = (int) getnumbertype(L, 2);
    int pointSize = (int) getnumbertype(L, 1);
    returns = new wxFont(pointSize, family, style, weight, underline, faceName, encoding);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// static wxFontEncoding GetDefaultEncoding()
static int LUACALL wxFont_GetDefaultEncoding(lua_State *L)
{    
    wxFontEncoding returns;
    returns = wxFont::GetDefaultEncoding();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetFaceName() const
static int LUACALL wxFont_GetFaceName(lua_State *L)
{    
    wxString returns;
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    returns = self->GetFaceName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int      GetFamily() const
static int LUACALL wxFont_GetFamily(lua_State *L)
{    
    int returns;
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    returns = self->GetFamily();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetPointSize() const
static int LUACALL wxFont_GetPointSize(lua_State *L)
{    
    int returns;
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    returns = self->GetPointSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetStyle() const
static int LUACALL wxFont_GetStyle(lua_State *L)
{    
    int returns;
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    returns = self->GetStyle();
    lua_pushnumber(L, returns);
    return 1;
}

// bool     GetUnderlined() const
static int LUACALL wxFont_GetUnderlined(lua_State *L)
{    
    bool returns;
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    returns = self->GetUnderlined();
    lua_pushboolean(L, returns);
    return 1;
}

// int      GetWeight() const
static int LUACALL wxFont_GetWeight(lua_State *L)
{    
    int returns;
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    returns = self->GetWeight();
    lua_pushnumber(L, returns);
    return 1;
}

// static void SetDefaultEncoding(wxFontEncoding encoding)
static int LUACALL wxFont_SetDefaultEncoding(lua_State *L)
{        
    wxFontEncoding encoding = (wxFontEncoding) getenumerationtype(L, 2);
    wxFont::SetDefaultEncoding(encoding);
    return 0;
}

// void     SetFaceName(const wxString& faceName)
static int LUACALL wxFont_SetFaceName(lua_State *L)
{        
    wxString faceName = lua2wx(getstringtype(L, 2));
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    self->SetFaceName(faceName);
    return 0;
}

// void     SetFamily(int family)
static int LUACALL wxFont_SetFamily(lua_State *L)
{        
    int family = (int) getnumbertype(L, 2);
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    self->SetFamily(family);
    return 0;
}

// void     SetPointSize(int pointSize)
static int LUACALL wxFont_SetPointSize(lua_State *L)
{        
    int pointSize = (int) getnumbertype(L, 2);
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    self->SetPointSize(pointSize);
    return 0;
}

// void     SetStyle(int style)
static int LUACALL wxFont_SetStyle(lua_State *L)
{        
    int style = (int) getnumbertype(L, 2);
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    self->SetStyle(style);
    return 0;
}

// void     SetUnderlined(const bool underlined)
static int LUACALL wxFont_SetUnderlined(lua_State *L)
{        
    const bool underlined = getbooleantype(L, 2);
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    self->SetUnderlined(underlined);
    return 0;
}

// void     SetWeight(int weight)
static int LUACALL wxFont_SetWeight(lua_State *L)
{        
    int weight = (int) getnumbertype(L, 2);
    wxFont *self = (wxFont*)getuserdatatype(L, 1, s_wxFont);
    self->SetWeight(weight);
    return 0;
}

static int LUACALL wxFontEnumerator_destructor(lua_State *L)
{
    wxFontEnumerator * self = (wxFontEnumerator*)getuserdatatype(L, 1, s_wxFontEnumerator);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFontEnumerator_Delete(lua_State *L)
{
    wxFontEnumerator * self = (wxFontEnumerator*)getuserdatatype(L, 1, s_wxFontEnumerator);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxFontEnumerator()
static int LUACALL wxFontEnumerator_constructor(lua_State *L)
{    
    wxFontEnumerator *returns;
    returns = new wxFontEnumerator();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFontEnumerator, returns);
    return 1;
}

// virtual bool EnumerateFacenames( wxFontEncoding encoding = wxFONTENCODING_SYSTEM, bool fixedWidthOnly = FALSE)
static int LUACALL wxFontEnumerator_EnumerateFacenames(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool fixedWidthOnly = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    wxFontEncoding encoding = (argCount >= 2 ? (wxFontEncoding) getenumerationtype(L, 2) : wxFONTENCODING_SYSTEM);
    wxFontEnumerator *self = (wxFontEnumerator*)getuserdatatype(L, 1, s_wxFontEnumerator);
    returns = self->EnumerateFacenames(encoding, fixedWidthOnly);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool EnumerateEncodings( const wxString &font = "" )
static int LUACALL wxFontEnumerator_EnumerateEncodings(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString font = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT(""));
    wxFontEnumerator *self = (wxFontEnumerator*)getuserdatatype(L, 1, s_wxFontEnumerator);
    returns = self->EnumerateEncodings(font);
    lua_pushboolean(L, returns);
    return 1;
}

// wxArrayString *GetEncodings()
static int LUACALL wxFontEnumerator_GetEncodings(lua_State *L)
{    
    wxArrayString *returns;
    wxFontEnumerator *self = (wxFontEnumerator*)getuserdatatype(L, 1, s_wxFontEnumerator);
    returns = self->GetEncodings();
    pushuserdatatype(L, s_wxArrayString, returns);
    return 1;
}

// wxArrayString *GetFacenames()
static int LUACALL wxFontEnumerator_GetFacenames(lua_State *L)
{    
    wxArrayString *returns;
    wxFontEnumerator *self = (wxFontEnumerator*)getuserdatatype(L, 1, s_wxFontEnumerator);
    returns = self->GetFacenames();
    pushuserdatatype(L, s_wxArrayString, returns);
    return 1;
}

static int LUACALL wxFontList_destructor(lua_State *)
{
    return 0;
}

// void AddFont(wxFont *font)
static int LUACALL wxFontList_AddFont(lua_State *L)
{        
    wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxFontList *self = (wxFontList*)getuserdatatype(L, 1, s_wxFontList);
    self->AddFont(font);
    return 0;
}

// wxFont *FindOrCreateFont(int pointSize, int family, int style, int weight, bool underline = FALSE, const wxString &faceName = "", wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
static int LUACALL wxFontList_FindOrCreateFont(lua_State *L)
{    
    wxFont *returns;
    int argCount = lua_gettop(L);    
    wxFontEncoding encoding = (argCount >= 8 ? (wxFontEncoding) getenumerationtype(L, 8) : wxFONTENCODING_DEFAULT);
    wxString faceName = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT(""));
    bool underline = (argCount >= 6 ? getbooleantype(L, 6) : FALSE);
    int weight = (int) getnumbertype(L, 5);
    int style = (int) getnumbertype(L, 4);
    int family = (int) getnumbertype(L, 3);
    int pointSize = (int) getnumbertype(L, 2);
    wxFontList *self = (wxFontList*)getuserdatatype(L, 1, s_wxFontList);
    returns = self->FindOrCreateFont(pointSize, family, style, weight, underline, faceName, encoding);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// void RemoveFont(wxFont *font)
static int LUACALL wxFontList_RemoveFont(lua_State *L)
{        
    wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxFontList *self = (wxFontList*)getuserdatatype(L, 1, s_wxFontList);
    self->RemoveFont(font);
    return 0;
}

static int LUACALL wxFontMapper_destructor(lua_State *)
{
    return 0;
}

// bool GetAltForEncoding(wxFontEncoding encoding, wxFontEncoding *altEncoding, const wxString &faceName = wxEmptyString, bool interactive = TRUE)
static int LUACALL wxFontMapper_GetAltForEncoding(lua_State *L)
{
    bool returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool interactive = TRUE
    bool interactive = (argCount >= 5 ? getbooleantype(L, 4) : TRUE);
    // const wxString &faceName = wxEmptyString
    wxString faceName = (argCount >= 4 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    // wxFontEncoding *altEncoding
    wxFontEncoding altEncoding;
    // wxFontEncoding encoding
    wxFontEncoding encoding = (wxFontEncoding) getenumerationtype(L, 2);
    // get this
    wxFontMapper *self = ( wxFontMapper * ) getuserdatatype(L, 1, s_wxFontMapper );
    // call GetAltForEncoding
    returns = self->GetAltForEncoding(encoding, &altEncoding, faceName, interactive);
    // push the result number
    lua_pushboolean(L, returns);
    // push the result encoding
    lua_pushnumber(L, altEncoding);
    // return the number of parameters
    return 2;
}

// bool IsEncodingAvailable(wxFontEncoding encoding, const wxString &facename = wxEmptyString)
static int LUACALL wxFontMapper_IsEncodingAvailable(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString facename = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxFontEncoding encoding = (wxFontEncoding) getenumerationtype(L, 2);
    wxFontMapper *self = (wxFontMapper*)getuserdatatype(L, 1, s_wxFontMapper);
    returns = self->IsEncodingAvailable(encoding, facename);
    lua_pushboolean(L, returns);
    return 1;
}

// wxFontEncoding CharsetToEncoding(const wxString &charset, bool interactive = TRUE)
static int LUACALL wxFontMapper_CharsetToEncoding(lua_State *L)
{    
    wxFontEncoding returns;
    int argCount = lua_gettop(L);    
    bool interactive = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    wxString charset = lua2wx(getstringtype(L, 2));
    wxFontMapper *self = (wxFontMapper*)getuserdatatype(L, 1, s_wxFontMapper);
    returns = self->CharsetToEncoding(charset, interactive);
    lua_pushnumber(L, returns);
    return 1;
}

// static wxString GetEncodingName(wxFontEncoding encoding)
static int LUACALL wxFontMapper_GetEncodingName(lua_State *L)
{    
    wxString returns;    
    wxFontEncoding encoding = (wxFontEncoding) getenumerationtype(L, 2);
    returns = wxFontMapper::GetEncodingName(encoding);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// static wxString GetEncodingDescription(wxFontEncoding encoding)
static int LUACALL wxFontMapper_GetEncodingDescription(lua_State *L)
{    
    wxString returns;    
    wxFontEncoding encoding = (wxFontEncoding) getenumerationtype(L, 2);
    returns = wxFontMapper::GetEncodingDescription(encoding);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetDialogParent(wxWindow *parent)
static int LUACALL wxFontMapper_SetDialogParent(lua_State *L)
{        
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxFontMapper *self = (wxFontMapper*)getuserdatatype(L, 1, s_wxFontMapper);
    self->SetDialogParent(parent);
    return 0;
}

// void SetDialogTitle(const wxString &title)
static int LUACALL wxFontMapper_SetDialogTitle(lua_State *L)
{        
    wxString title = lua2wx(getstringtype(L, 2));
    wxFontMapper *self = (wxFontMapper*)getuserdatatype(L, 1, s_wxFontMapper);
    self->SetDialogTitle(title);
    return 0;
}

// void SetConfig(wxConfigBase *config = NULL)
static int LUACALL wxFontMapper_SetConfig(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxConfigBase *config = (argCount >= 2 ? (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase) : NULL);
    wxFontMapper *self = (wxFontMapper*)getuserdatatype(L, 1, s_wxFontMapper);
    self->SetConfig(config);
    return 0;
}

// void SetConfigPath(const wxString &prefix)
static int LUACALL wxFontMapper_SetConfigPath(lua_State *L)
{        
    wxString prefix = lua2wx(getstringtype(L, 2));
    wxFontMapper *self = (wxFontMapper*)getuserdatatype(L, 1, s_wxFontMapper);
    self->SetConfigPath(prefix);
    return 0;
}

// static wxFontMapper *Get()
static int LUACALL wxFontMapper_Get(lua_State *L)
{    
    wxFontMapper *returns;
    returns = wxFontMapper::Get();
    pushuserdatatype(L, s_wxFontMapper, returns);
    return 1;
}

// static wxFontMapper *Set(wxFontMapper *mapper)
static int LUACALL wxFontMapper_Set(lua_State *L)
{    
    wxFontMapper *returns;    
    wxFontMapper *mapper = (wxFontMapper*)getuserdatatype(L, 2, s_wxFontMapper);
    returns = wxFontMapper::Set(mapper);
    pushuserdatatype(L, s_wxFontMapper, returns);
    return 1;
}

static int LUACALL wxColour_destructor(lua_State *L)
{
    wxColour * self = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxColour_Delete(lua_State *L)
{
    wxColour * self = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxColour(const unsigned char red, const unsigned char green, const unsigned char blue)
static int LUACALL wxColour_constructor(lua_State *L)
{    
    wxColour *returns;    
    const unsigned char blue = (unsigned char) getnumbertype(L, 3);
    const unsigned char green = (unsigned char) getnumbertype(L, 2);
    const unsigned char red = (unsigned char) getnumbertype(L, 1);
    returns = new wxColour(red, green, blue);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// unsigned char Blue() const
static int LUACALL wxColour_Blue(lua_State *L)
{    
    unsigned char returns;
    wxColour *self = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    returns = self->Blue();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetPixel() const
static int LUACALL wxColour_GetPixel(lua_State *L)
{    
    long returns;
    wxColour *self = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    returns = self->GetPixel();
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned char Green() const
static int LUACALL wxColour_Green(lua_State *L)
{    
    unsigned char returns;
    wxColour *self = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    returns = self->Green();
    lua_pushnumber(L, returns);
    return 1;
}

// bool Ok() const
static int LUACALL wxColour_Ok(lua_State *L)
{    
    bool returns;
    wxColour *self = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// unsigned char Red() const
static int LUACALL wxColour_Red(lua_State *L)
{    
    unsigned char returns;
    wxColour *self = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    returns = self->Red();
    lua_pushnumber(L, returns);
    return 1;
}

// void Set(const unsigned char red, const unsigned char green, const unsigned char blue)
static int LUACALL wxColour_Set(lua_State *L)
{        
    const unsigned char blue = (unsigned char) getnumbertype(L, 4);
    const unsigned char green = (unsigned char) getnumbertype(L, 3);
    const unsigned char red = (unsigned char) getnumbertype(L, 2);
    wxColour *self = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    self->Set(red, green, blue);
    return 0;
}

static int LUACALL wxPen_destructor(lua_State *L)
{
    wxPen * self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPen_Delete(lua_State *L)
{
    wxPen * self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPen()
static int LUACALL wxPen_constructor(lua_State *L)
{    
    wxPen *returns;
    returns = new wxPen();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPen, returns);
    return 1;
}

// int GetCap() const
static int LUACALL wxPen_GetCap(lua_State *L)
{    
    int returns;
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    returns = self->GetCap();
    lua_pushnumber(L, returns);
    return 1;
}

// wxColour& GetColour() const
static int LUACALL wxPen_GetColour(lua_State *L)
{    
    wxColour *returns;
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    returns = &self->GetColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// int GetJoin() const
static int LUACALL wxPen_GetJoin(lua_State *L)
{    
    int returns;
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    returns = self->GetJoin();
    lua_pushnumber(L, returns);
    return 1;
}

// %win wxBitmap* GetStipple() const
static int LUACALL wxPen_GetStipple(lua_State *L)
{    
    wxBitmap *returns;
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    returns = self->GetStipple();
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// int GetStyle() const
static int LUACALL wxPen_GetStyle(lua_State *L)
{    
    int returns;
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    returns = self->GetStyle();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetWidth() const
static int LUACALL wxPen_GetWidth(lua_State *L)
{    
    int returns;
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// bool Ok() const
static int LUACALL wxPen_Ok(lua_State *L)
{    
    bool returns;
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetCap(int capStyle)
static int LUACALL wxPen_SetCap(lua_State *L)
{        
    int capStyle = (int) getnumbertype(L, 2);
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    self->SetCap(capStyle);
    return 0;
}

// void SetColour(wxColour& colour)
static int LUACALL wxPen_SetColour(lua_State *L)
{        
    wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    self->SetColour(*colour);
    return 0;
}

// %rename SetColourString void SetColour(const wxString& colourName)
static int LUACALL wxPen_SetColourString(lua_State *L)
{        
    wxString colourName = lua2wx(getstringtype(L, 2));
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    self->SetColour(colourName);
    return 0;
}

// %rename SetColourRGB void SetColour(int red, int green, int blue)
static int LUACALL wxPen_SetColourRGB(lua_State *L)
{        
    int blue = (int) getnumbertype(L, 4);
    int green = (int) getnumbertype(L, 3);
    int red = (int) getnumbertype(L, 2);
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    self->SetColour(red, green, blue);
    return 0;
}

// void SetJoin(int join_style)
static int LUACALL wxPen_SetJoin(lua_State *L)
{        
    int join_style = (int) getnumbertype(L, 2);
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    self->SetJoin(join_style);
    return 0;
}

// void SetStyle(int style)
static int LUACALL wxPen_SetStyle(lua_State *L)
{        
    int style = (int) getnumbertype(L, 2);
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    self->SetStyle(style);
    return 0;
}

// void SetWidth(int width)
static int LUACALL wxPen_SetWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxPen *self = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    self->SetWidth(width);
    return 0;
}

// %constructor wxPenFromColour(const wxColour& colour, int width, int style)
static int LUACALL wxPenFromColour_constructor(lua_State *L)
{    
    wxPen *returns;    
    int style = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    const wxColour *colour = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    returns = new wxPen(*colour, width, style);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPen, returns);
    return 1;
}

// %constructor wxPenFromColourName(const wxString& colourName, int width, int style)
static int LUACALL wxPenFromColourName_constructor(lua_State *L)
{    
    wxPen *returns;    
    int style = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxString colourName = lua2wx(getstringtype(L, 1));
    returns = new wxPen(colourName, width, style);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPen, returns);
    return 1;
}

// %win %constructor wxPenFromBitmap(const wxBitmap& stipple, int width)
static int LUACALL wxPenFromBitmap_constructor(lua_State *L)
{    
    wxPen *returns;    
    int width = (int) getnumbertype(L, 2);
    const wxBitmap *stipple = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = new wxPen(*stipple, width);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPen, returns);
    return 1;
}

// %constructor wxPenCopy(const wxPen& pen)
static int LUACALL wxPenCopy_constructor(lua_State *L)
{    
    wxPen *returns;    
    const wxPen *pen = (wxPen*)getuserdatatype(L, 1, s_wxPen);
    returns = new wxPen(*pen);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPen, returns);
    return 1;
}

static int LUACALL wxPenList_destructor(lua_State *)
{
    return 0;
}

// void AddPen(wxPen *pen)
static int LUACALL wxPenList_AddPen(lua_State *L)
{        
    wxPen *pen = (wxPen*)getuserdatatype(L, 2, s_wxPen);
    wxPenList *self = (wxPenList*)getuserdatatype(L, 1, s_wxPenList);
    self->AddPen(pen);
    return 0;
}

// void RemovePen(wxPen *pen)
static int LUACALL wxPenList_RemovePen(lua_State *L)
{        
    wxPen *pen = (wxPen*)getuserdatatype(L, 2, s_wxPen);
    wxPenList *self = (wxPenList*)getuserdatatype(L, 1, s_wxPenList);
    self->RemovePen(pen);
    return 0;
}

// wxPen *FindOrCreatePen(const wxColour& colour, int width, int style)
static int LUACALL wxPenList_FindOrCreatePen(lua_State *L)
{    
    wxPen *returns;    
    int style = (int) getnumbertype(L, 4);
    int width = (int) getnumbertype(L, 3);
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxPenList *self = (wxPenList*)getuserdatatype(L, 1, s_wxPenList);
    returns = self->FindOrCreatePen(*colour, width, style);
    pushuserdatatype(L, s_wxPen, returns);
    return 1;
}

static int LUACALL wxBrush_destructor(lua_State *L)
{
    wxBrush * self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxBrush_Delete(lua_State *L)
{
    wxBrush * self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxBrush(const wxColour& colour, int style)
static int LUACALL wxBrush_constructor(lua_State *L)
{    
    wxBrush *returns;    
    int style = (int) getnumbertype(L, 2);
    const wxColour *colour = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    returns = new wxBrush(*colour, style);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBrush, returns);
    return 1;
}

// %constructor wxBrushFromColourName(const wxString& colourName, int style)
static int LUACALL wxBrushFromColourName_constructor(lua_State *L)
{    
    wxBrush *returns;    
    int style = (int) getnumbertype(L, 2);
    wxString colourName = lua2wx(getstringtype(L, 1));
    returns = new wxBrush(colourName, style);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBrush, returns);
    return 1;
}

// %constructor wxBrushFromBitmap(const wxBitmap& stippleBitmap)
static int LUACALL wxBrushFromBitmap_constructor(lua_State *L)
{    
    wxBrush *returns;    
    const wxBitmap *stippleBitmap = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = new wxBrush(*stippleBitmap);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBrush, returns);
    return 1;
}

// %constructor wxBrushCopy(const wxBrush& brush)
static int LUACALL wxBrushCopy_constructor(lua_State *L)
{    
    wxBrush *returns;    
    const wxBrush *brush = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    returns = new wxBrush(*brush);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBrush, returns);
    return 1;
}

// wxColour GetColour() const
static int LUACALL wxBrush_GetColour(lua_State *L)
{    
    wxColour *returns;
    wxBrush *self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    returns = new wxColour(self->GetColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxBitmap * GetStipple() const
static int LUACALL wxBrush_GetStipple(lua_State *L)
{    
    wxBitmap *returns;
    wxBrush *self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    returns = self->GetStipple();
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// int GetStyle() const
static int LUACALL wxBrush_GetStyle(lua_State *L)
{    
    int returns;
    wxBrush *self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    returns = self->GetStyle();
    lua_pushnumber(L, returns);
    return 1;
}

// bool Ok() const
static int LUACALL wxBrush_Ok(lua_State *L)
{    
    bool returns;
    wxBrush *self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetColour(wxColour& colour)
static int LUACALL wxBrush_SetColour(lua_State *L)
{        
    wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxBrush *self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    self->SetColour(*colour);
    return 0;
}

// %rename SetColourString void SetColour(const wxString& colourName)
static int LUACALL wxBrush_SetColourString(lua_State *L)
{        
    wxString colourName = lua2wx(getstringtype(L, 2));
    wxBrush *self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    self->SetColour(colourName);
    return 0;
}

// %rename SetColourRGB void SetColour(const unsigned char red, const unsigned char green, const unsigned char blue)
static int LUACALL wxBrush_SetColourRGB(lua_State *L)
{        
    const unsigned char blue = (unsigned char) getnumbertype(L, 4);
    const unsigned char green = (unsigned char) getnumbertype(L, 3);
    const unsigned char red = (unsigned char) getnumbertype(L, 2);
    wxBrush *self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    self->SetColour(red, green, blue);
    return 0;
}

// void SetStipple(const wxBitmap& bitmap)
static int LUACALL wxBrush_SetStipple(lua_State *L)
{        
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxBrush *self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    self->SetStipple(*bitmap);
    return 0;
}

// void SetStyle(int style)
static int LUACALL wxBrush_SetStyle(lua_State *L)
{        
    int style = (int) getnumbertype(L, 2);
    wxBrush *self = (wxBrush*)getuserdatatype(L, 1, s_wxBrush);
    self->SetStyle(style);
    return 0;
}

static int LUACALL wxBrushList_destructor(lua_State *)
{
    return 0;
}

// wxBrushList()
static int LUACALL wxBrushList_constructor(lua_State *L)
{    
    wxBrushList *returns;
    returns = new wxBrushList();
    pushuserdatatype(L, s_wxBrushList, returns);
    return 1;
}

// void AddBrush(wxBrush *brush)
static int LUACALL wxBrushList_AddBrush(lua_State *L)
{        
    wxBrush *brush = (wxBrush*)getuserdatatype(L, 2, s_wxBrush);
    wxBrushList *self = (wxBrushList*)getuserdatatype(L, 1, s_wxBrushList);
    self->AddBrush(brush);
    return 0;
}

// void RemoveBrush(wxBrush *brush)
static int LUACALL wxBrushList_RemoveBrush(lua_State *L)
{        
    wxBrush *brush = (wxBrush*)getuserdatatype(L, 2, s_wxBrush);
    wxBrushList *self = (wxBrushList*)getuserdatatype(L, 1, s_wxBrushList);
    self->RemoveBrush(brush);
    return 0;
}

// wxBrush * FindOrCreateBrush(const wxColour& colour, int style)
static int LUACALL wxBrushList_FindOrCreateBrush(lua_State *L)
{    
    wxBrush *returns;    
    int style = (int) getnumbertype(L, 3);
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxBrushList *self = (wxBrushList*)getuserdatatype(L, 1, s_wxBrushList);
    returns = self->FindOrCreateBrush(*colour, style);
    pushuserdatatype(L, s_wxBrush, returns);
    return 1;
}

static int LUACALL wxPalette_destructor(lua_State *L)
{
    wxPalette * self = (wxPalette*)getuserdatatype(L, 1, s_wxPalette);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPalette_Delete(lua_State *L)
{
    wxPalette * self = (wxPalette*)getuserdatatype(L, 1, s_wxPalette);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// bool Create(int n, const unsigned char* red, const unsigned char* green, const unsigned char* blue)
static int LUACALL wxPalette_Create(lua_State *L)
{
    bool returns;
    // const unsigned char* blue
    const unsigned char *blue = (unsigned char *) lua_tostring(L, 5);
    // const unsigned char* green
    const unsigned char *green = (unsigned char *) lua_tostring(L, 4);
    // const unsigned char* red
    const unsigned char *red = (unsigned char *) lua_tostring(L, 3);
    // int n
    int n = (int) getnumbertype(L, 2);
    // get this
    wxPalette *self = ( wxPalette * ) getuserdatatype(L, 1, s_wxPalette );
    // call Create
    returns = self->Create(n, red, green, blue);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}

// bool Ok() const
static int LUACALL wxPalette_Ok(lua_State *L)
{    
    bool returns;
    wxPalette *self = (wxPalette*)getuserdatatype(L, 1, s_wxPalette);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxIcon_destructor(lua_State *L)
{
    wxIcon * self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxIcon_Delete(lua_State *L)
{
    wxIcon * self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxIcon(const wxString& name, long type, int desiredWidth = -1, int desiredHeight = -1)
static int LUACALL wxIcon_constructor(lua_State *L)
{    
    wxIcon *returns;
    int argCount = lua_gettop(L);    
    int desiredHeight = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    int desiredWidth = (argCount >= 3 ? (int) getnumbertype(L, 3) : -1);
    long type = (long) getnumbertype(L, 2);
    wxString name = lua2wx(getstringtype(L, 1));
    returns = new wxIcon(name, type, desiredWidth, desiredHeight);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxIcon, returns);
    return 1;
}

// %constructor wxDefaultIcon()
static int LUACALL wxDefaultIcon_constructor(lua_State *L)
{    
    wxIcon *returns;
    returns = new wxIcon();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxIcon, returns);
    return 1;
}

// %win void CopyFromBitmap(const wxBitmap& bmp)
static int LUACALL wxIcon_CopyFromBitmap(lua_State *L)
{        
    const wxBitmap *bmp = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    self->CopyFromBitmap(*bmp);
    return 0;
}

// int     GetDepth()
static int LUACALL wxIcon_GetDepth(lua_State *L)
{    
    int returns;
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    returns = self->GetDepth();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetWidth()
static int LUACALL wxIcon_GetWidth(lua_State *L)
{    
    int returns;
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetHeight()
static int LUACALL wxIcon_GetHeight(lua_State *L)
{    
    int returns;
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    returns = self->GetHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// bool    LoadFile(const wxString& name, long flags)
static int LUACALL wxIcon_LoadFile(lua_State *L)
{    
    bool returns;    
    long flags = (long) getnumbertype(L, 3);
    wxString name = lua2wx(getstringtype(L, 2));
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    returns = self->LoadFile(name, flags);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    Ok()
static int LUACALL wxIcon_Ok(lua_State *L)
{    
    bool returns;
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// void    SetWidth(int w)
static int LUACALL wxIcon_SetWidth(lua_State *L)
{        
    int w = (int) getnumbertype(L, 2);
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    self->SetWidth(w);
    return 0;
}

// void    SetHeight(int h)
static int LUACALL wxIcon_SetHeight(lua_State *L)
{        
    int h = (int) getnumbertype(L, 2);
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    self->SetHeight(h);
    return 0;
}

// void    SetDepth(int d)
static int LUACALL wxIcon_SetDepth(lua_State *L)
{        
    int d = (int) getnumbertype(L, 2);
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    self->SetDepth(d);
    return 0;
}

// %win void SetSize(const wxSize& size)
static int LUACALL wxIcon_SetSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxIcon *self = (wxIcon*)getuserdatatype(L, 1, s_wxIcon);
    self->SetSize(*size);
    return 0;
}

static int LUACALL wxBitmapHandler_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxGDIImageHandler_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxGDIImageHandlerList_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxBitmap_destructor(lua_State *L)
{
    wxBitmap * self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxBitmap_Delete(lua_State *L)
{
    wxBitmap * self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %constructor wxDefaultBitmap()
static int LUACALL wxDefaultBitmap_constructor(lua_State *L)
{    
    wxBitmap *returns;
    returns = new wxBitmap();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// wxBitmap(void* data, int type, int width, int height, int depth = -1)
#ifdef __WXMSW__
static int LUACALL wxBitmap_constructor(lua_State *L)
{
    wxBitmap *returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // int depth = -1
    int depth = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    // int height
    int height = (int) getnumbertype(L, 4);
    // int width
    int width = (int) getnumbertype(L, 3);
    // int type
    int type = (int) getnumbertype(L, 2);
    // void* data
    void *data = (void *) lua_tostring(L, 1);
    // call constructor
    returns = new wxBitmap(data, type, width, height, depth);
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxBitmap, returns );
    // return the number of parameters
    return 1;
}
#endif

// %constructor wxBitmapCopy(const wxBitmap& bitmap)
static int LUACALL wxBitmapCopy_constructor(lua_State *L)
{    
    wxBitmap *returns;    
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = new wxBitmap(*bitmap);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// %constructor wxEmptyBitmap( int width, int height, int depth = -1)
static int LUACALL wxEmptyBitmap_constructor(lua_State *L)
{    
    wxBitmap *returns;
    int argCount = lua_gettop(L);    
    int depth = (argCount >= 3 ? (int) getnumbertype(L, 3) : -1);
    int height = (int) getnumbertype(L, 2);
    int width = (int) getnumbertype(L, 1);
    returns = new wxBitmap(width, height, depth);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// %constructor wxBitmapFromFile( const wxString& name, long type)
static int LUACALL wxBitmapFromFile_constructor(lua_State *L)
{    
    wxBitmap *returns;    
    long type = (long) getnumbertype(L, 2);
    wxString name = lua2wx(getstringtype(L, 1));
    returns = new wxBitmap(name, type);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// %constructor wxXmlResourceGetDefault()
static int LUACALL wxBitmapFromXPMData_constructor(lua_State *L)
{
    wxBitmap *returns;
    if (lua_istable(L, 1))
    {
        int count = 0;
        const char **sizeArray = tochararray(L, 1, count);
        if (sizeArray != NULL)
        {
            // call constructor
            returns = new wxBitmap(sizeArray);
            // add to tracked memory list
            addToTrackedMemoryList(L, returns);
            // push the constructed class pointer
            pushuserdatatype(L, s_wxBitmap, returns );
            // return the number of parameters
            delete [] sizeArray;
            return 1;
        }
    }
    return 0;
}

// ~%wxver22 %constructor wxBitmapFromImage(const wxImage &image, int depth = -1)
static int LUACALL wxBitmapFromImage_constructor(lua_State *L)
{    
    wxBitmap *returns;
    int argCount = lua_gettop(L);    
    int depth = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    const wxImage *image = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = new wxBitmap(*image, depth);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// %win static void AddHandler(wxBitmapHandler* handler)
static int LUACALL wxBitmap_AddHandler(lua_State *L)
{        
    wxBitmapHandler *handler = (wxBitmapHandler*)getuserdatatype(L, 2, s_wxBitmapHandler);
    wxBitmap::AddHandler(handler);
    return 0;
}

// %win static void CleanUpHandlers()
static int LUACALL wxBitmap_CleanUpHandlers(lua_State *L)
{    
    wxBitmap::CleanUpHandlers();
    return 0;
}

// virtual bool Create(int width, int height, int depth = -1)
static int LUACALL wxBitmap_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int depth = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = self->Create(width, height, depth);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetDepth() const
static int LUACALL wxBitmap_GetDepth(lua_State *L)
{    
    int returns;
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = self->GetDepth();
    lua_pushnumber(L, returns);
    return 1;
}

// ~<wxver25 %win static wxGDIImageHandlerList& GetHandlers()
static int LUACALL wxBitmap_GetHandlers(lua_State *L)
{    
    wxGDIImageHandlerList *returns;
    returns = &wxBitmap::GetHandlers();
    pushuserdatatype(L, s_wxGDIImageHandlerList, returns);
    return 1;
}

// int GetHeight() const
static int LUACALL wxBitmap_GetHeight(lua_State *L)
{    
    int returns;
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = self->GetHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPalette* GetPalette() const
static int LUACALL wxBitmap_GetPalette(lua_State *L)
{    
    wxPalette *returns;
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = self->GetPalette();
    pushuserdatatype(L, s_wxPalette, returns);
    return 1;
}

// wxMask* GetMask() const
static int LUACALL wxBitmap_GetMask(lua_State *L)
{    
    wxMask *returns;
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = self->GetMask();
    pushuserdatatype(L, s_wxMask, returns);
    return 1;
}

// int GetWidth() const
static int LUACALL wxBitmap_GetWidth(lua_State *L)
{    
    int returns;
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// wxBitmap GetSubBitmap(const wxRect&rect) const
static int LUACALL wxBitmap_GetSubBitmap(lua_State *L)
{    
    wxBitmap *returns;    
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = new wxBitmap(self->GetSubBitmap(*rect));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// %win static void InitStandardHandlers()
static int LUACALL wxBitmap_InitStandardHandlers(lua_State *L)
{    
    wxBitmap::InitStandardHandlers();
    return 0;
}

// %win static void InsertHandler(wxBitmapHandler* handler)
static int LUACALL wxBitmap_InsertHandler(lua_State *L)
{        
    wxBitmapHandler *handler = (wxBitmapHandler*)getuserdatatype(L, 2, s_wxBitmapHandler);
    wxBitmap::InsertHandler(handler);
    return 0;
}

// bool LoadFile(const wxString& name, long type)
static int LUACALL wxBitmap_LoadFile(lua_State *L)
{    
    bool returns;    
    long type = (long) getnumbertype(L, 3);
    wxString name = lua2wx(getstringtype(L, 2));
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = self->LoadFile(name, type);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Ok() const
static int LUACALL wxBitmap_Ok(lua_State *L)
{    
    bool returns;
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// %win static bool RemoveHandler(const wxString& name)
static int LUACALL wxBitmap_RemoveHandler(lua_State *L)
{    
    bool returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    returns = wxBitmap::RemoveHandler(name);
    lua_pushboolean(L, returns);
    return 1;
}

// bool SaveFile(const wxString& name, int type, wxPalette* palette = NULL)
static int LUACALL wxBitmap_SaveFile(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxPalette *palette = (argCount >= 4 ? (wxPalette*)getuserdatatype(L, 4, s_wxPalette) : NULL);
    int type = (int) getnumbertype(L, 3);
    wxString name = lua2wx(getstringtype(L, 2));
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = self->SaveFile(name, type, palette);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetDepth(int depth)
static int LUACALL wxBitmap_SetDepth(lua_State *L)
{        
    int depth = (int) getnumbertype(L, 2);
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    self->SetDepth(depth);
    return 0;
}

// void SetHeight(int height)
static int LUACALL wxBitmap_SetHeight(lua_State *L)
{        
    int height = (int) getnumbertype(L, 2);
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    self->SetHeight(height);
    return 0;
}

// void SetMask(wxMask* mask)
static int LUACALL wxBitmap_SetMask(lua_State *L)
{        
    wxMask *mask = (wxMask*)getuserdatatype(L, 2, s_wxMask);
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    self->SetMask(mask);
    return 0;
}

// %win void SetPalette(const wxPalette& palette)
static int LUACALL wxBitmap_SetPalette(lua_State *L)
{        
    const wxPalette *palette = (wxPalette*)getuserdatatype(L, 2, s_wxPalette);
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    self->SetPalette(*palette);
    return 0;
}

// void SetWidth(int width)
static int LUACALL wxBitmap_SetWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxBitmap *self = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    self->SetWidth(width);
    return 0;
}

static int LUACALL wxCursor_destructor(lua_State *L)
{
    wxCursor * self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxCursor_Delete(lua_State *L)
{
    wxCursor * self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %win wxCursor(const wxString& cursorName, long type, int hotSpotX = 0, int hotSpotY = 0)
static int LUACALL wxCursor_constructor(lua_State *L)
{    
    wxCursor *returns;
    int argCount = lua_gettop(L);    
    int hotSpotY = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int hotSpotX = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    long type = (long) getnumbertype(L, 2);
    wxString cursorName = lua2wx(getstringtype(L, 1));
    returns = new wxCursor(cursorName, type, hotSpotX, hotSpotY);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCursor, returns);
    return 1;
}

// %constructor wxDefaultCursor()
static int LUACALL wxDefaultCursor_constructor(lua_State *L)
{    
    wxCursor *returns;
    returns = new wxCursor();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCursor, returns);
    return 1;
}

// %constructor wxStockCursor(int id)
static int LUACALL wxStockCursor_constructor(lua_State *L)
{    
    wxCursor *returns;    
    int id = (int) getnumbertype(L, 1);
    returns = new wxCursor(id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCursor, returns);
    return 1;
}

// bool Ok()
static int LUACALL wxCursor_Ok(lua_State *L)
{    
    bool returns;
    wxCursor *self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// %win int GetWidth()
static int LUACALL wxCursor_GetWidth(lua_State *L)
{    
    int returns;
    wxCursor *self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// %win int GetHeight()
static int LUACALL wxCursor_GetHeight(lua_State *L)
{    
    int returns;
    wxCursor *self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    returns = self->GetHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// %win int GetDepth()
static int LUACALL wxCursor_GetDepth(lua_State *L)
{    
    int returns;
    wxCursor *self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    returns = self->GetDepth();
    lua_pushnumber(L, returns);
    return 1;
}

// %win void SetWidth(int width)
static int LUACALL wxCursor_SetWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxCursor *self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    self->SetWidth(width);
    return 0;
}

// %win void SetHeight(int height)
static int LUACALL wxCursor_SetHeight(lua_State *L)
{        
    int height = (int) getnumbertype(L, 2);
    wxCursor *self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    self->SetHeight(height);
    return 0;
}

// %win void SetDepth(int depth)
static int LUACALL wxCursor_SetDepth(lua_State *L)
{        
    int depth = (int) getnumbertype(L, 2);
    wxCursor *self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    self->SetDepth(depth);
    return 0;
}

// %win void SetSize(const wxSize& size)
static int LUACALL wxCursor_SetSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxCursor *self = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    self->SetSize(*size);
    return 0;
}

static int LUACALL wxMask_destructor(lua_State *)
{
    return 0;
}

// wxMask(const wxBitmap& bitmap)
static int LUACALL wxMask_constructor(lua_State *L)
{    
    wxMask *returns;    
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = new wxMask(*bitmap);
    pushuserdatatype(L, s_wxMask, returns);
    return 1;
}

// %constructor wxEmptyMask()
static int LUACALL wxEmptyMask_constructor(lua_State *L)
{    
    wxMask *returns;
    returns = new wxMask();
    pushuserdatatype(L, s_wxMask, returns);
    return 1;
}

// %constructor wxMaskColour(const wxBitmap& bitmap, const wxColour& colour)
static int LUACALL wxMaskColour_constructor(lua_State *L)
{    
    wxMask *returns;    
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = new wxMask(*bitmap, *colour);
    pushuserdatatype(L, s_wxMask, returns);
    return 1;
}

// %win %constructor wxMaskIndex(const wxBitmap& bitmap, int index)
static int LUACALL wxMaskIndex_constructor(lua_State *L)
{    
    wxMask *returns;    
    int index = (int) getnumbertype(L, 2);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap);
    returns = new wxMask(*bitmap, index);
    pushuserdatatype(L, s_wxMask, returns);
    return 1;
}

// bool Create(const wxBitmap& bitmap)
static int LUACALL wxMask_Create(lua_State *L)
{    
    bool returns;    
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxMask *self = (wxMask*)getuserdatatype(L, 1, s_wxMask);
    returns = self->Create(*bitmap);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename CreateColour bool Create(const wxBitmap& bitmap, const wxColour& colour)
static int LUACALL wxMask_CreateColour(lua_State *L)
{    
    bool returns;    
    const wxColour *colour = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxMask *self = (wxMask*)getuserdatatype(L, 1, s_wxMask);
    returns = self->Create(*bitmap, *colour);
    lua_pushboolean(L, returns);
    return 1;
}

// %win %rename CreateIndex bool Create(const wxBitmap& bitmap, int index)
static int LUACALL wxMask_CreateIndex(lua_State *L)
{    
    bool returns;    
    int index = (int) getnumbertype(L, 3);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxMask *self = (wxMask*)getuserdatatype(L, 1, s_wxMask);
    returns = self->Create(*bitmap, index);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxImageList_destructor(lua_State *)
{
    return 0;
}

// wxImageList(int width, int height, bool mask = TRUE, int initialCount = 1)
static int LUACALL wxImageList_constructor(lua_State *L)
{    
    wxImageList *returns;
    int argCount = lua_gettop(L);    
    int initialCount = (argCount >= 4 ? (int) getnumbertype(L, 4) : 1);
    bool mask = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    int height = (int) getnumbertype(L, 2);
    int width = (int) getnumbertype(L, 1);
    returns = new wxImageList(width, height, mask, initialCount);
    pushuserdatatype(L, s_wxImageList, returns);
    return 1;
}

// int     Add(const wxBitmap& bitmap, const wxBitmap& mask = wxNullBitmap)
static int LUACALL wxImageList_Add(lua_State *L)
{    
    int returns;
    int argCount = lua_gettop(L);    
    const wxBitmap *mask = (argCount >= 3 ? (wxBitmap*)getuserdatatype(L, 3, s_wxBitmap) : &wxNullBitmap);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxImageList *self = (wxImageList*)getuserdatatype(L, 1, s_wxImageList);
    returns = self->Add(*bitmap, *mask);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename AddWithColourMask int Add(const wxBitmap& bitmap, const wxColour& maskColour)
static int LUACALL wxImageList_AddWithColourMask(lua_State *L)
{    
    int returns;    
    const wxColour *maskColour = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxImageList *self = (wxImageList*)getuserdatatype(L, 1, s_wxImageList);
    returns = self->Add(*bitmap, *maskColour);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename AddIcon int Add(const wxIcon& icon)
static int LUACALL wxImageList_AddIcon(lua_State *L)
{    
    int returns;    
    const wxIcon *icon = (wxIcon*)getuserdatatype(L, 2, s_wxIcon);
    wxImageList *self = (wxImageList*)getuserdatatype(L, 1, s_wxImageList);
    returns = self->Add(*icon);
    lua_pushnumber(L, returns);
    return 1;
}

// bool    Draw(int index, wxDC& dc, int x, int y, int flags = wxIMAGELIST_DRAW_NORMAL, const bool solidBackground = FALSE)
static int LUACALL wxImageList_Draw(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    const bool solidBackground = (argCount >= 7 ? getbooleantype(L, 7) : FALSE);
    int flags = (argCount >= 6 ? (int) getnumbertype(L, 6) : wxIMAGELIST_DRAW_NORMAL);
    int y = (int) getnumbertype(L, 5);
    int x = (int) getnumbertype(L, 4);
    wxDC *dc = (wxDC*)getuserdatatype(L, 3, s_wxDC);
    int index = (int) getnumbertype(L, 2);
    wxImageList *self = (wxImageList*)getuserdatatype(L, 1, s_wxImageList);
    returns = self->Draw(index, *dc, x, y, flags, solidBackground);
    lua_pushboolean(L, returns);
    return 1;
}

// int     GetImageCount()
static int LUACALL wxImageList_GetImageCount(lua_State *L)
{    
    int returns;
    wxImageList *self = (wxImageList*)getuserdatatype(L, 1, s_wxImageList);
    returns = self->GetImageCount();
    lua_pushnumber(L, returns);
    return 1;
}

// void    GetSize(int index, int& width, int& height)
static int LUACALL wxImageList_GetSize(lua_State *L)
{
    // int& height
    int height;
    // int& width
    int width;
    // int index
    int index = (int) getnumbertype(L, 2);
    // get this
    wxImageList *self = ( wxImageList * ) getuserdatatype(L, 1, s_wxImageList );
    // call GetSize
    self->GetSize(index, width, height);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 2;
}

// bool    Remove(int index)
static int LUACALL wxImageList_Remove(lua_State *L)
{    
    bool returns;    
    int index = (int) getnumbertype(L, 2);
    wxImageList *self = (wxImageList*)getuserdatatype(L, 1, s_wxImageList);
    returns = self->Remove(index);
    lua_pushboolean(L, returns);
    return 1;
}

// %win bool Replace(int index, const wxBitmap& bitmap, const wxBitmap& mask = wxNullBitmap)
static int LUACALL wxImageList_Replace(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    const wxBitmap *mask = (argCount >= 4 ? (wxBitmap*)getuserdatatype(L, 4, s_wxBitmap) : &wxNullBitmap);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 3, s_wxBitmap);
    int index = (int) getnumbertype(L, 2);
    wxImageList *self = (wxImageList*)getuserdatatype(L, 1, s_wxImageList);
    returns = self->Replace(index, *bitmap, *mask);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    RemoveAll()
static int LUACALL wxImageList_RemoveAll(lua_State *L)
{    
    bool returns;
    wxImageList *self = (wxImageList*)getuserdatatype(L, 1, s_wxImageList);
    returns = self->RemoveAll();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxDC_destructor(lua_State *L)
{
    wxDC * self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxDC_Delete(lua_State *L)
{
    wxDC * self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %win wxDC()
static int LUACALL wxDC_constructor(lua_State *L)
{    
    wxDC *returns;
    returns = new wxDC();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDC, returns);
    return 1;
}

// void BeginDrawing()
static int LUACALL wxDC_BeginDrawing(lua_State *L)
{    
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->BeginDrawing();
    return 0;
}

// bool Blit(wxCoord xdest, wxCoord ydest, wxCoord width, wxCoord height, wxDC* source, wxCoord xsrc, wxCoord ysrc, int logicalFunc = wxCOPY, bool useMask = FALSE)
static int LUACALL wxDC_Blit(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool useMask = (argCount >= 10 ? getbooleantype(L, 10) : FALSE);
    int logicalFunc = (argCount >= 9 ? (int) getnumbertype(L, 9) : wxCOPY);
    wxCoord ysrc = (wxCoord) getnumbertype(L, 8);
    wxCoord xsrc = (wxCoord) getnumbertype(L, 7);
    wxDC *source = (wxDC*)getuserdatatype(L, 6, s_wxDC);
    wxCoord height = (wxCoord) getnumbertype(L, 5);
    wxCoord width = (wxCoord) getnumbertype(L, 4);
    wxCoord ydest = (wxCoord) getnumbertype(L, 3);
    wxCoord xdest = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->Blit(xdest, ydest, width, height, source, xsrc, ysrc, logicalFunc, useMask);
    lua_pushboolean(L, returns);
    return 1;
}

// void CalcBoundingBox(wxCoord x, wxCoord y)
static int LUACALL wxDC_CalcBoundingBox(lua_State *L)
{        
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->CalcBoundingBox(x, y);
    return 0;
}

// void Clear()
static int LUACALL wxDC_Clear(lua_State *L)
{    
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->Clear();
    return 0;
}

// void CrossHair(wxCoord x, wxCoord y)
static int LUACALL wxDC_CrossHair(lua_State *L)
{        
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->CrossHair(x, y);
    return 0;
}

// void DestroyClippingRegion()
static int LUACALL wxDC_DestroyClippingRegion(lua_State *L)
{    
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DestroyClippingRegion();
    return 0;
}

// wxCoord DeviceToLogicalX(wxCoord x)
static int LUACALL wxDC_DeviceToLogicalX(lua_State *L)
{    
    wxCoord returns;    
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->DeviceToLogicalX(x);
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord DeviceToLogicalXRel(wxCoord x)
static int LUACALL wxDC_DeviceToLogicalXRel(lua_State *L)
{    
    wxCoord returns;    
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->DeviceToLogicalXRel(x);
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord DeviceToLogicalY(wxCoord y)
static int LUACALL wxDC_DeviceToLogicalY(lua_State *L)
{    
    wxCoord returns;    
    wxCoord y = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->DeviceToLogicalY(y);
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord DeviceToLogicalYRel(wxCoord y)
static int LUACALL wxDC_DeviceToLogicalYRel(lua_State *L)
{    
    wxCoord returns;    
    wxCoord y = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->DeviceToLogicalYRel(y);
    lua_pushnumber(L, returns);
    return 1;
}

// void DrawArc(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2, wxCoord xc, wxCoord yc)
static int LUACALL wxDC_DrawArc(lua_State *L)
{        
    wxCoord yc = (wxCoord) getnumbertype(L, 7);
    wxCoord xc = (wxCoord) getnumbertype(L, 6);
    wxCoord y2 = (wxCoord) getnumbertype(L, 5);
    wxCoord x2 = (wxCoord) getnumbertype(L, 4);
    wxCoord y1 = (wxCoord) getnumbertype(L, 3);
    wxCoord x1 = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawArc(x1, y1, x2, y2, xc, yc);
    return 0;
}

// void DrawBitmap(const wxBitmap& bitmap, wxCoord x, wxCoord y, bool transparent)
static int LUACALL wxDC_DrawBitmap(lua_State *L)
{        
    bool transparent = getbooleantype(L, 5);
    wxCoord y = (wxCoord) getnumbertype(L, 4);
    wxCoord x = (wxCoord) getnumbertype(L, 3);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawBitmap(*bitmap, x, y, transparent);
    return 0;
}

// void DrawCheckMark(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
static int LUACALL wxDC_DrawCheckMark(lua_State *L)
{        
    wxCoord height = (wxCoord) getnumbertype(L, 5);
    wxCoord width = (wxCoord) getnumbertype(L, 4);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawCheckMark(x, y, width, height);
    return 0;
}

// %rename DrawCheckMarkRect void DrawCheckMark(const wxRect &rect)
static int LUACALL wxDC_DrawCheckMarkRect(lua_State *L)
{        
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawCheckMark(*rect);
    return 0;
}

// void DrawEllipse(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
static int LUACALL wxDC_DrawEllipse(lua_State *L)
{        
    wxCoord height = (wxCoord) getnumbertype(L, 5);
    wxCoord width = (wxCoord) getnumbertype(L, 4);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawEllipse(x, y, width, height);
    return 0;
}

// void DrawEllipticArc(wxCoord x, wxCoord y, wxCoord width, wxCoord height, double start, double end)
static int LUACALL wxDC_DrawEllipticArc(lua_State *L)
{        
    double end = (double) getnumbertype(L, 7);
    double start = (double) getnumbertype(L, 6);
    wxCoord height = (wxCoord) getnumbertype(L, 5);
    wxCoord width = (wxCoord) getnumbertype(L, 4);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawEllipticArc(x, y, width, height, start, end);
    return 0;
}

// void DrawIcon(const wxIcon& icon, wxCoord x, wxCoord y)
static int LUACALL wxDC_DrawIcon(lua_State *L)
{        
    wxCoord y = (wxCoord) getnumbertype(L, 4);
    wxCoord x = (wxCoord) getnumbertype(L, 3);
    const wxIcon *icon = (wxIcon*)getuserdatatype(L, 2, s_wxIcon);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawIcon(*icon, x, y);
    return 0;
}

// void DrawLine(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2)
static int LUACALL wxDC_DrawLine(lua_State *L)
{        
    wxCoord y2 = (wxCoord) getnumbertype(L, 5);
    wxCoord x2 = (wxCoord) getnumbertype(L, 4);
    wxCoord y1 = (wxCoord) getnumbertype(L, 3);
    wxCoord x1 = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawLine(x1, y1, x2, y2);
    return 0;
}

// void DrawLines(int n, wxPoint points[], wxCoord xoffset = 0, wxCoord yoffset = 0)
static int LUACALL wxDC_DrawLines(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxCoord yoffset = (argCount >= 5 ? (wxCoord) getnumbertype(L, 5) : 0);
    wxCoord xoffset = (argCount >= 4 ? (wxCoord) getnumbertype(L, 4) : 0);
    wxPoint *points = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    int n = (int) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawLines(n, points, xoffset, yoffset);
    return 0;
}

// %rename DrawLinesList void DrawLines(wxList *points, wxCoord xoffset = 0, wxCoord yoffset = 0)
static int LUACALL wxDC_DrawLinesList(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxCoord yoffset = (argCount >= 4 ? (wxCoord) getnumbertype(L, 4) : 0);
    wxCoord xoffset = (argCount >= 3 ? (wxCoord) getnumbertype(L, 3) : 0);
    wxList *points = (wxList*)getuserdatatype(L, 2, s_wxList);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawLines(points, xoffset, yoffset);
    return 0;
}

// void DrawPolygon(int n, wxPoint points[], wxCoord xoffset = 0, wxCoord yoffset = 0, int fill_style = wxODDEVEN_RULE)
static int LUACALL wxDC_DrawPolygon(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int fill_style = (argCount >= 6 ? (int) getnumbertype(L, 6) : wxODDEVEN_RULE);
    wxCoord yoffset = (argCount >= 5 ? (wxCoord) getnumbertype(L, 5) : 0);
    wxCoord xoffset = (argCount >= 4 ? (wxCoord) getnumbertype(L, 4) : 0);
    wxPoint *points = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    int n = (int) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawPolygon(n, points, xoffset, yoffset, fill_style);
    return 0;
}

// %rename DrawPolygonList void DrawPolygon(wxList *points, wxCoord xoffset = 0, wxCoord yoffset = 0, int fill_style = wxODDEVEN_RULE)
static int LUACALL wxDC_DrawPolygonList(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int fill_style = (argCount >= 5 ? (int) getnumbertype(L, 5) : wxODDEVEN_RULE);
    wxCoord yoffset = (argCount >= 4 ? (wxCoord) getnumbertype(L, 4) : 0);
    wxCoord xoffset = (argCount >= 3 ? (wxCoord) getnumbertype(L, 3) : 0);
    wxList *points = (wxList*)getuserdatatype(L, 2, s_wxList);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawPolygon(points, xoffset, yoffset, fill_style);
    return 0;
}

// void DrawPoint(wxCoord x, wxCoord y)
static int LUACALL wxDC_DrawPoint(lua_State *L)
{        
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawPoint(x, y);
    return 0;
}

// void DrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
static int LUACALL wxDC_DrawRectangle(lua_State *L)
{        
    wxCoord height = (wxCoord) getnumbertype(L, 5);
    wxCoord width = (wxCoord) getnumbertype(L, 4);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawRectangle(x, y, width, height);
    return 0;
}

// void DrawRotatedText(const wxString& text, wxCoord x, wxCoord y, double angle)
static int LUACALL wxDC_DrawRotatedText(lua_State *L)
{        
    double angle = (double) getnumbertype(L, 5);
    wxCoord y = (wxCoord) getnumbertype(L, 4);
    wxCoord x = (wxCoord) getnumbertype(L, 3);
    wxString text = lua2wx(getstringtype(L, 2));
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawRotatedText(text, x, y, angle);
    return 0;
}

// void DrawRoundedRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height, double radius = 20)
static int LUACALL wxDC_DrawRoundedRectangle(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    double radius = (argCount >= 6 ? (double) getnumbertype(L, 6) : 20);
    wxCoord height = (wxCoord) getnumbertype(L, 5);
    wxCoord width = (wxCoord) getnumbertype(L, 4);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawRoundedRectangle(x, y, width, height, radius);
    return 0;
}

// void DrawText(const wxString& text, wxCoord x, wxCoord y)
static int LUACALL wxDC_DrawText(lua_State *L)
{        
    wxCoord y = (wxCoord) getnumbertype(L, 4);
    wxCoord x = (wxCoord) getnumbertype(L, 3);
    wxString text = lua2wx(getstringtype(L, 2));
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->DrawText(text, x, y);
    return 0;
}

// void EndDoc()
static int LUACALL wxDC_EndDoc(lua_State *L)
{    
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->EndDoc();
    return 0;
}

// void EndDrawing()
static int LUACALL wxDC_EndDrawing(lua_State *L)
{    
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->EndDrawing();
    return 0;
}

// void EndPage()
static int LUACALL wxDC_EndPage(lua_State *L)
{    
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->EndPage();
    return 0;
}

// void FloodFill(wxCoord x, wxCoord y, const wxColour& colour, int style=wxFLOOD_SURFACE)
static int LUACALL wxDC_FloodFill(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int style = (argCount >= 5 ? (int) getnumbertype(L, 5) : wxFLOOD_SURFACE);
    const wxColour *colour = (wxColour*)getuserdatatype(L, 4, s_wxColour);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->FloodFill(x, y, *colour, style);
    return 0;
}

// const wxBrush& GetBackground() const
static int LUACALL wxDC_GetBackground(lua_State *L)
{    
    const wxBrush *returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = &self->GetBackground();
    pushuserdatatype(L, s_wxBrush, returns);
    return 1;
}

// int GetBackgroundMode() const
static int LUACALL wxDC_GetBackgroundMode(lua_State *L)
{    
    int returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->GetBackgroundMode();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxBrush& GetBrush() const
static int LUACALL wxDC_GetBrush(lua_State *L)
{    
    const wxBrush *returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = &self->GetBrush();
    pushuserdatatype(L, s_wxBrush, returns);
    return 1;
}

// wxCoord GetCharHeight()
static int LUACALL wxDC_GetCharHeight(lua_State *L)
{    
    wxCoord returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->GetCharHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord GetCharWidth()
static int LUACALL wxDC_GetCharWidth(lua_State *L)
{    
    wxCoord returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->GetCharWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// void GetClippingBox(wxCoord *x, wxCoord *y, wxCoord *width, wxCoord *height)
static int LUACALL wxDC_GetClippingBox(lua_State *L)
{
    wxCoord height;
    wxCoord width;
    wxCoord y;
    wxCoord x;
    // get this
    wxDC *self = ( wxDC * ) getuserdatatype(L, 1, s_wxDC );
    // call GetClippingBox
    self->GetClippingBox(&x, &y, &width, &height);
    // push results
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 4;
}

// const wxFont& GetFont() const
static int LUACALL wxDC_GetFont(lua_State *L)
{    
    const wxFont *returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = &self->GetFont();
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// int GetLogicalFunction()
static int LUACALL wxDC_GetLogicalFunction(lua_State *L)
{    
    int returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->GetLogicalFunction();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMapMode()
static int LUACALL wxDC_GetMapMode(lua_State *L)
{    
    int returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->GetMapMode();
    lua_pushnumber(L, returns);
    return 1;
}

// bool GetOptimization()
static int LUACALL wxDC_GetOptimization(lua_State *L)
{    
    bool returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->GetOptimization();
    lua_pushboolean(L, returns);
    return 1;
}

// const wxPen& GetPen() const
static int LUACALL wxDC_GetPen(lua_State *L)
{    
    const wxPen *returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = &self->GetPen();
    pushuserdatatype(L, s_wxPen, returns);
    return 1;
}

// bool GetPixel(wxCoord x, wxCoord y, wxColour *colour)
static int LUACALL wxDC_GetPixel(lua_State *L)
{    
    bool returns;    
    wxColour *colour = (wxColour*)getuserdatatype(L, 4, s_wxColour);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->GetPixel(x, y, colour);
    lua_pushboolean(L, returns);
    return 1;
}

// void GetSize(wxCoord *width, wxCoord *height)
int LUACALL wxDC_GetSize(lua_State *L)
{
    wxCoord width;
    wxCoord height;
    // get this
    wxDC *self = ( wxDC * ) getuserdatatype(L, 1, s_wxDC );
    // call ClientToScreen
    self->GetSize(&width, &height);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 2;
}

// const wxColour& GetTextBackground() const
static int LUACALL wxDC_GetTextBackground(lua_State *L)
{    
    const wxColour *returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = &self->GetTextBackground();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// void GetTextExtent(const wxString& string, wxCoord *w, wxCoord *h, wxCoord *descent = NULL, wxCoord *externalLeading = NULL, wxFont *font = NULL)
static int LUACALL wxDC_GetTextExtent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFont *font = NULL
    wxFont *font = (argCount >= 3 ? (wxFont *) getuserdatatype(L, 3, s_wxFont) : NULL);
    wxCoord externalLeading;
    wxCoord descent;
    wxCoord h;
    wxCoord w;
    wxString string = lua2wx(lua_tostring(L, 2));
    // get this
    wxDC *self = ( wxDC * ) getuserdatatype(L, 1, s_wxDC );
    // call GetTextExtent
    self->GetTextExtent(string, &w, &h, &descent, &externalLeading, font);
    lua_pushnumber(L, w);
    lua_pushnumber(L, h);
    lua_pushnumber(L, descent);
    lua_pushnumber(L, externalLeading);
    // return the number of parameters
    return 4;
}

// const wxColour& GetTextForeground() const
static int LUACALL wxDC_GetTextForeground(lua_State *L)
{    
    const wxColour *returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = &self->GetTextForeground();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// void GetUserScale(double *x, double *y)
static int LUACALL wxDC_GetUserScale(lua_State *L)
{
    double y;
    double x;
    // get this
    wxDC *self = ( wxDC * ) getuserdatatype(L, 1, s_wxDC );
    // call GetUserScale
    self->GetUserScale(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

// wxCoord LogicalToDeviceX(wxCoord x)
static int LUACALL wxDC_LogicalToDeviceX(lua_State *L)
{    
    wxCoord returns;    
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->LogicalToDeviceX(x);
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord LogicalToDeviceXRel(wxCoord x)
static int LUACALL wxDC_LogicalToDeviceXRel(lua_State *L)
{    
    wxCoord returns;    
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->LogicalToDeviceXRel(x);
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord LogicalToDeviceY(wxCoord y)
static int LUACALL wxDC_LogicalToDeviceY(lua_State *L)
{    
    wxCoord returns;    
    wxCoord y = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->LogicalToDeviceY(y);
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord LogicalToDeviceYRel(wxCoord y)
static int LUACALL wxDC_LogicalToDeviceYRel(lua_State *L)
{    
    wxCoord returns;    
    wxCoord y = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->LogicalToDeviceYRel(y);
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord MaxX()
static int LUACALL wxDC_MaxX(lua_State *L)
{    
    wxCoord returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->MaxX();
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord MaxY()
static int LUACALL wxDC_MaxY(lua_State *L)
{    
    wxCoord returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->MaxY();
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord MinX()
static int LUACALL wxDC_MinX(lua_State *L)
{    
    wxCoord returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->MinX();
    lua_pushnumber(L, returns);
    return 1;
}

// wxCoord MinY()
static int LUACALL wxDC_MinY(lua_State *L)
{    
    wxCoord returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->MinY();
    lua_pushnumber(L, returns);
    return 1;
}

// bool Ok()
static int LUACALL wxDC_Ok(lua_State *L)
{    
    bool returns;
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// void ResetBoundingBox()
static int LUACALL wxDC_ResetBoundingBox(lua_State *L)
{    
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->ResetBoundingBox();
    return 0;
}

// void SetDeviceOrigin(wxCoord x, wxCoord y)
static int LUACALL wxDC_SetDeviceOrigin(lua_State *L)
{        
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetDeviceOrigin(x, y);
    return 0;
}

// void SetBackground(const wxBrush& brush)
static int LUACALL wxDC_SetBackground(lua_State *L)
{        
    const wxBrush *brush = (wxBrush*)getuserdatatype(L, 2, s_wxBrush);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetBackground(*brush);
    return 0;
}

// void SetBackgroundMode(int mode)
static int LUACALL wxDC_SetBackgroundMode(lua_State *L)
{        
    int mode = (int) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetBackgroundMode(mode);
    return 0;
}

// %rename SetClippingRegionXY void SetClippingRegion(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
static int LUACALL wxDC_SetClippingRegionXY(lua_State *L)
{        
    wxCoord height = (wxCoord) getnumbertype(L, 5);
    wxCoord width = (wxCoord) getnumbertype(L, 4);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetClippingRegion(x, y, width, height);
    return 0;
}

// void SetClippingRegion(const wxRegion& region)
static int LUACALL wxDC_SetClippingRegion(lua_State *L)
{        
    const wxRegion *region = (wxRegion*)getuserdatatype(L, 2, s_wxRegion);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetClippingRegion(*region);
    return 0;
}

// void SetPalette(const wxPalette& palette)
static int LUACALL wxDC_SetPalette(lua_State *L)
{        
    const wxPalette *palette = (wxPalette*)getuserdatatype(L, 2, s_wxPalette);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetPalette(*palette);
    return 0;
}

// void SetBrush(const wxBrush& brush)
static int LUACALL wxDC_SetBrush(lua_State *L)
{        
    const wxBrush *brush = (wxBrush*)getuserdatatype(L, 2, s_wxBrush);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetBrush(*brush);
    return 0;
}

// void SetFont(const wxFont& font)
static int LUACALL wxDC_SetFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetFont(*font);
    return 0;
}

// void SetOptimization(bool optimize)
static int LUACALL wxDC_SetOptimization(lua_State *L)
{        
    bool optimize = getbooleantype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetOptimization(optimize);
    return 0;
}

// void SetPen(const wxPen& pen)
static int LUACALL wxDC_SetPen(lua_State *L)
{        
    const wxPen *pen = (wxPen*)getuserdatatype(L, 2, s_wxPen);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetPen(*pen);
    return 0;
}

// void SetTextBackground(const wxColour& colour)
static int LUACALL wxDC_SetTextBackground(lua_State *L)
{        
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetTextBackground(*colour);
    return 0;
}

// void SetTextForeground(const wxColour& colour)
static int LUACALL wxDC_SetTextForeground(lua_State *L)
{        
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetTextForeground(*colour);
    return 0;
}

// void SetUserScale(double xScale, double yScale)
static int LUACALL wxDC_SetUserScale(lua_State *L)
{        
    double yScale = (double) getnumbertype(L, 3);
    double xScale = (double) getnumbertype(L, 2);
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->SetUserScale(xScale, yScale);
    return 0;
}

// bool StartDoc(const wxString& message)
static int LUACALL wxDC_StartDoc(lua_State *L)
{    
    bool returns;    
    wxString message = lua2wx(getstringtype(L, 2));
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = self->StartDoc(message);
    lua_pushboolean(L, returns);
    return 1;
}

// void StartPage()
static int LUACALL wxDC_StartPage(lua_State *L)
{    
    wxDC *self = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    self->StartPage();
    return 0;
}

static int LUACALL wxMemoryDC_destructor(lua_State *L)
{
    wxMemoryDC * self = (wxMemoryDC*)getuserdatatype(L, 1, s_wxMemoryDC);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxMemoryDC_Delete(lua_State *L)
{
    wxMemoryDC * self = (wxMemoryDC*)getuserdatatype(L, 1, s_wxMemoryDC);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxMemoryDC()
static int LUACALL wxMemoryDC_constructor(lua_State *L)
{    
    wxMemoryDC *returns;
    returns = new wxMemoryDC();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxMemoryDC, returns);
    return 1;
}

// void SelectObject(const wxBitmap& bitmap)
static int LUACALL wxMemoryDC_SelectObject(lua_State *L)
{        
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxMemoryDC *self = (wxMemoryDC*)getuserdatatype(L, 1, s_wxMemoryDC);
    self->SelectObject(*bitmap);
    return 0;
}

static int LUACALL wxWindowDC_destructor(lua_State *L)
{
    wxWindowDC * self = (wxWindowDC*)getuserdatatype(L, 1, s_wxWindowDC);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxWindowDC_Delete(lua_State *L)
{
    wxWindowDC * self = (wxWindowDC*)getuserdatatype(L, 1, s_wxWindowDC);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxWindowDC(wxWindow* window)
static int LUACALL wxWindowDC_constructor(lua_State *L)
{    
    wxWindowDC *returns;    
    wxWindow *window = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxWindowDC(window);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxWindowDC, returns);
    return 1;
}

static int LUACALL wxClientDC_destructor(lua_State *L)
{
    wxClientDC * self = (wxClientDC*)getuserdatatype(L, 1, s_wxClientDC);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxClientDC_Delete(lua_State *L)
{
    wxClientDC * self = (wxClientDC*)getuserdatatype(L, 1, s_wxClientDC);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxClientDC(wxWindow* window)
static int LUACALL wxClientDC_constructor(lua_State *L)
{    
    wxClientDC *returns;    
    wxWindow *window = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxClientDC(window);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxClientDC, returns);
    return 1;
}

static int LUACALL wxPaintDC_destructor(lua_State *L)
{
    wxPaintDC * self = (wxPaintDC*)getuserdatatype(L, 1, s_wxPaintDC);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPaintDC_Delete(lua_State *L)
{
    wxPaintDC * self = (wxPaintDC*)getuserdatatype(L, 1, s_wxPaintDC);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPaintDC(wxWindow* window)
static int LUACALL wxPaintDC_constructor(lua_State *L)
{    
    wxPaintDC *returns;    
    wxWindow *window = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxPaintDC(window);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPaintDC, returns);
    return 1;
}

static int LUACALL wxScreenDC_destructor(lua_State *L)
{
    wxScreenDC * self = (wxScreenDC*)getuserdatatype(L, 1, s_wxScreenDC);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxScreenDC_Delete(lua_State *L)
{
    wxScreenDC * self = (wxScreenDC*)getuserdatatype(L, 1, s_wxScreenDC);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxScreenDC()
static int LUACALL wxScreenDC_constructor(lua_State *L)
{    
    wxScreenDC *returns;
    returns = new wxScreenDC();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxScreenDC, returns);
    return 1;
}

// static bool StartDrawingOnTop(wxWindow* window)
static int LUACALL wxScreenDC_StartDrawingOnTop(lua_State *L)
{    
    bool returns;    
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    returns = wxScreenDC::StartDrawingOnTop(window);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename StartDrawingOnTopRect static bool StartDrawingOnTop(wxRect* rect = NULL)
static int LUACALL wxScreenDC_StartDrawingOnTopRect(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxRect *rect = (argCount >= 2 ? (wxRect*)getuserdatatype(L, 2, s_wxRect) : NULL);
    returns = wxScreenDC::StartDrawingOnTop(rect);
    lua_pushboolean(L, returns);
    return 1;
}

// static bool EndDrawingOnTop()
static int LUACALL wxScreenDC_EndDrawingOnTop(lua_State *L)
{    
    bool returns;
    returns = wxScreenDC::EndDrawingOnTop();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxCaret_destructor(lua_State *)
{
    return 0;
}

// wxCaret(wxWindow* window, const wxSize& size)
static int LUACALL wxCaret_constructor(lua_State *L)
{    
    wxCaret *returns;    
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxWindow *window = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxCaret(window, *size);
    pushuserdatatype(L, s_wxCaret, returns);
    return 1;
}

// %constructor wxDefaultCaret()
static int LUACALL wxDefaultCaret_constructor(lua_State *L)
{    
    wxCaret *returns;
    returns = new wxCaret();
    pushuserdatatype(L, s_wxCaret, returns);
    return 1;
}

// %constructor wxCaretFromWidthHeight(wxWindow* window, int width, int height)
static int LUACALL wxCaretFromWidthHeight_constructor(lua_State *L)
{    
    wxCaret *returns;    
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxWindow *window = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxCaret(window, width, height);
    pushuserdatatype(L, s_wxCaret, returns);
    return 1;
}

// bool Create(wxWindow* window, const wxSize& size)
static int LUACALL wxCaret_Create(lua_State *L)
{    
    bool returns;    
    const wxSize *size = (wxSize*)getuserdatatype(L, 3, s_wxSize);
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    returns = self->Create(window, *size);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename CreateFromWidthHeight bool Create(wxWindow* window, int width, int height)
static int LUACALL wxCaret_CreateFromWidthHeight(lua_State *L)
{    
    bool returns;    
    int height = (int) getnumbertype(L, 4);
    int width = (int) getnumbertype(L, 3);
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    returns = self->Create(window, width, height);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename GetPositionXY void GetPosition(int *x, int *y)
static int LUACALL wxCaret_GetPositionXY(lua_State *L)
{
    int x;
    int y;
    // get this
    wxCaret *self = ( wxCaret * ) getuserdatatype(L, 1, s_wxCaret );
    // call GetPosition
    self->GetPosition(&x, &y);
    // return the number of parameters
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

// wxPoint GetPosition()
static int LUACALL wxCaret_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// %rename GetSizeXY void GetSize(int *x, int *y)
static int LUACALL wxCaret_GetSizeXY(lua_State *L)
{
    int x;
    int y;
    // get this
    wxCaret *self = ( wxCaret * ) getuserdatatype(L, 1, s_wxCaret );
    // call GetSize
    self->GetSize(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}

// wxSize GetSize()
static int LUACALL wxCaret_GetSize(lua_State *L)
{    
    wxSize *returns;
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    returns = new wxSize(self->GetSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// wxWindow *GetWindow()
static int LUACALL wxCaret_GetWindow(lua_State *L)
{    
    wxWindow *returns;
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    returns = self->GetWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// bool IsOk()
static int LUACALL wxCaret_IsOk(lua_State *L)
{    
    bool returns;
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    returns = self->IsOk();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsVisible()
static int LUACALL wxCaret_IsVisible(lua_State *L)
{    
    bool returns;
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    returns = self->IsVisible();
    lua_pushboolean(L, returns);
    return 1;
}

// %rename MoveXY void Move(int x, int y)
static int LUACALL wxCaret_MoveXY(lua_State *L)
{        
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    self->Move(x, y);
    return 0;
}

// void Move(const wxPoint& pt)
static int LUACALL wxCaret_Move(lua_State *L)
{        
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    self->Move(*pt);
    return 0;
}

// %rename SetSizeWH void SetSize(int width, int height)
static int LUACALL wxCaret_SetSizeWH(lua_State *L)
{        
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    self->SetSize(width, height);
    return 0;
}

// void SetSize(const wxSize& size)
static int LUACALL wxCaret_SetSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    self->SetSize(*size);
    return 0;
}

// void Show(bool show = TRUE)
static int LUACALL wxCaret_Show(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool show = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    self->Show(show);
    return 0;
}

// void Hide()
static int LUACALL wxCaret_Hide(lua_State *L)
{    
    wxCaret *self = (wxCaret*)getuserdatatype(L, 1, s_wxCaret);
    self->Hide();
    return 0;
}

// static int GetBlinkTime()
static int LUACALL wxCaret_GetBlinkTime(lua_State *L)
{    
    int returns;
    returns = wxCaret::GetBlinkTime();
    lua_pushnumber(L, returns);
    return 1;
}

// static void SetBlinkTime(int ms)
static int LUACALL wxCaret_SetBlinkTime(lua_State *L)
{        
    int ms = (int) getnumbertype(L, 2);
    wxCaret::SetBlinkTime(ms);
    return 0;
}

static int LUACALL wxApp_destructor(lua_State *)
{
    return 0;
}

// %builtin wxApp* wxGetBaseApp()
static int LUACALL builtin_wxGetBaseApp(lua_State *L)
{
    wxApp *returns;
    // call wxGetBaseApp
    returns = wxTheApp;
    // push the result datatype
    pushuserdatatype(L, s_wxApp, returns );
    // return the number of parameters
    return 1;
}

// void Dispatch()
static int LUACALL wxApp_Dispatch(lua_State *L)
{    
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    self->Dispatch();
    return 0;
}

// wxString GetAppName() const
static int LUACALL wxApp_GetAppName(lua_State *L)
{    
    wxString returns;
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->GetAppName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetClassName() const
static int LUACALL wxApp_GetClassName(lua_State *L)
{    
    wxString returns;
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->GetClassName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool GetExitOnFrameDelete() const
static int LUACALL wxApp_GetExitOnFrameDelete(lua_State *L)
{    
    bool returns;
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->GetExitOnFrameDelete();
    lua_pushboolean(L, returns);
    return 1;
}

// wxWindow * GetTopWindow() const
static int LUACALL wxApp_GetTopWindow(lua_State *L)
{    
    wxWindow *returns;
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->GetTopWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// bool GetUseBestVisual() const
static int LUACALL wxApp_GetUseBestVisual(lua_State *L)
{    
    bool returns;
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->GetUseBestVisual();
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetVendorName() const
static int LUACALL wxApp_GetVendorName(lua_State *L)
{    
    wxString returns;
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->GetVendorName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void ExitMainLoop()
static int LUACALL wxApp_ExitMainLoop(lua_State *L)
{    
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    self->ExitMainLoop();
    return 0;
}

// bool Initialized()
static int LUACALL wxApp_Initialized(lua_State *L)
{    
    bool returns;
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->Initialized();
    lua_pushboolean(L, returns);
    return 1;
}

// int MainLoop()
static int LUACALL wxApp_MainLoop(lua_State *L)
{    
    int returns;
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->MainLoop();
    lua_pushnumber(L, returns);
    return 1;
}

// bool Pending()
static int LUACALL wxApp_Pending(lua_State *L)
{    
    bool returns;
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->Pending();
    lua_pushboolean(L, returns);
    return 1;
}

// ~<wxver25 bool SendIdleEvents(wxWindow* win, wxIdleEvent& event)
static int LUACALL wxApp_SendIdleEvents(lua_State *L)
{    
    bool returns;    
    wxIdleEvent *event = (wxIdleEvent*)getuserdatatype(L, 3, s_wxIdleEvent);
    wxWindow *win = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    returns = self->SendIdleEvents(win, *event);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetAppName(const wxString& name)
static int LUACALL wxApp_SetAppName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    self->SetAppName(name);
    return 0;
}

// void SetClassName(const wxString& name)
static int LUACALL wxApp_SetClassName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    self->SetClassName(name);
    return 0;
}

// void SetExitOnFrameDelete(bool flag)
static int LUACALL wxApp_SetExitOnFrameDelete(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    self->SetExitOnFrameDelete(flag);
    return 0;
}

// void SetTopWindow(wxWindow* window)
static int LUACALL wxApp_SetTopWindow(lua_State *L)
{        
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    self->SetTopWindow(window);
    return 0;
}

// void SetVendorName(const wxString& name)
static int LUACALL wxApp_SetVendorName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    self->SetVendorName(name);
    return 0;
}

// void SetUseBestVisual(bool flag)
static int LUACALL wxApp_SetUseBestVisual(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxApp *self = (wxApp*)getuserdatatype(L, 1, s_wxApp);
    self->SetUseBestVisual(flag);
    return 0;
}

static int LUACALL wxFrame_destructor(lua_State *)
{
    return 0;
}

// %constructor wxFrameDefault()
static int LUACALL wxFrameDefault_constructor(lua_State *L)
{    
    wxFrame *returns;
    returns = new wxFrame();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxFrame, returns);
    return 1;
}

// wxFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
static int LUACALL wxFrame_constructor(lua_State *L)
{    
    wxFrame *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("frame"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxDEFAULT_FRAME_STYLE);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxFrame(parent, id, title, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxFrame, returns);
    return 1;
}

// void Centre(int direction = wxBOTH)
static int LUACALL wxFrame_Centre(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int direction = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxBOTH);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    self->Centre(direction);
    return 0;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
static int LUACALL wxFrame_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("frame"));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : wxDEFAULT_FRAME_STYLE);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->Create(parent, id, title, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual wxStatusBar* CreateStatusBar(int number = 1, long style = 0, wxWindowID id = -1, const wxString& name = "statusBar")
static int LUACALL wxFrame_CreateStatusBar(lua_State *L)
{    
    wxStatusBar *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 5 ? lua2wx(getstringtype(L, 5)) : wxT("statusBar"));
    wxWindowID id = (argCount >= 4 ? (wxWindowID) getnumbertype(L, 4) : -1);
    long style = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    int number = (argCount >= 2 ? (int) getnumbertype(L, 2) : 1);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->CreateStatusBar(number, style, id, name);
    pushuserdatatype(L, s_wxStatusBar, returns);
    return 1;
}

// virtual wxToolBar* CreateToolBar(long style = wxNO_BORDER | wxTB_HORIZONTAL, wxWindowID id = -1, const wxString& name = "toolBar")
static int LUACALL wxFrame_CreateToolBar(lua_State *L)
{    
    wxToolBar *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxT("toolBar"));
    wxWindowID id = (argCount >= 3 ? (wxWindowID) getnumbertype(L, 3) : -1);
    long style = (argCount >= 2 ? (long) getnumbertype(L, 2) : wxNO_BORDER | wxTB_HORIZONTAL);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->CreateToolBar(style, id, name);
    pushuserdatatype(L, s_wxToolBar, returns);
    return 1;
}

// wxPoint GetClientAreaOrigin() const
static int LUACALL wxFrame_GetClientAreaOrigin(lua_State *L)
{    
    wxPoint *returns;
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = new wxPoint(self->GetClientAreaOrigin());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// wxMenuBar* GetMenuBar() const
static int LUACALL wxFrame_GetMenuBar(lua_State *L)
{    
    wxMenuBar *returns;
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->GetMenuBar();
    pushuserdatatype(L, s_wxMenuBar, returns);
    return 1;
}

// wxStatusBar* GetStatusBar() const
static int LUACALL wxFrame_GetStatusBar(lua_State *L)
{    
    wxStatusBar *returns;
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->GetStatusBar();
    pushuserdatatype(L, s_wxStatusBar, returns);
    return 1;
}

// wxString GetTitle() const
static int LUACALL wxFrame_GetTitle(lua_State *L)
{    
    wxString returns;
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->GetTitle();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxToolBar* GetToolBar() const
static int LUACALL wxFrame_GetToolBar(lua_State *L)
{    
    wxToolBar *returns;
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->GetToolBar();
    pushuserdatatype(L, s_wxToolBar, returns);
    return 1;
}

// void Iconize(bool iconize)
static int LUACALL wxFrame_Iconize(lua_State *L)
{        
    bool iconize = getbooleantype(L, 2);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    self->Iconize(iconize);
    return 0;
}

// bool IsIconized() const
static int LUACALL wxFrame_IsIconized(lua_State *L)
{    
    bool returns;
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->IsIconized();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsMaximized() const
static int LUACALL wxFrame_IsMaximized(lua_State *L)
{    
    bool returns;
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->IsMaximized();
    lua_pushboolean(L, returns);
    return 1;
}

// void Maximize(bool maximize)
static int LUACALL wxFrame_Maximize(lua_State *L)
{        
    bool maximize = getbooleantype(L, 2);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    self->Maximize(maximize);
    return 0;
}

// void SetIcon(const wxIcon& icon)
static int LUACALL wxFrame_SetIcon(lua_State *L)
{        
    const wxIcon *icon = (wxIcon*)getuserdatatype(L, 2, s_wxIcon);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    self->SetIcon(*icon);
    return 0;
}

// void SetMenuBar(wxMenuBar* menuBar)
static int LUACALL wxFrame_SetMenuBar(lua_State *L)
{        
    wxMenuBar *menuBar = (wxMenuBar*)getuserdatatype(L, 2, s_wxMenuBar);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    self->SetMenuBar(menuBar);
    return 0;
}

// void SetStatusBar(wxStatusBar* statusBar)
static int LUACALL wxFrame_SetStatusBar(lua_State *L)
{        
    wxStatusBar *statusBar = (wxStatusBar*)getuserdatatype(L, 2, s_wxStatusBar);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    self->SetStatusBar(statusBar);
    return 0;
}

// virtual void SetStatusText(const wxString& text, int number = 0)
static int LUACALL wxFrame_SetStatusText(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int number = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxString text = lua2wx(getstringtype(L, 2));
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    self->SetStatusText(text, number);
    return 0;
}

// virtual void SetStatusWidths(int n, int *widths)
static int LUACALL wxFrame_SetStatusWidths(lua_State *L)
{
    int count = 0; SmartIntArray ptr; int *choices; ptr = choices = tointarray(L, 2, count);
    // get this
    wxFrame *self = ( wxFrame * ) getuserdatatype(L, 1, s_wxFrame );
    // call SetStatusWidths
    self->SetStatusWidths(count, choices);
    // return the number of parameters
    return 0;
}

// void SetToolBar(wxToolBar* toolBar)
static int LUACALL wxFrame_SetToolBar(lua_State *L)
{        
    wxToolBar *toolBar = (wxToolBar*)getuserdatatype(L, 2, s_wxToolBar);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    self->SetToolBar(toolBar);
    return 0;
}

// virtual void SetTitle(const wxString& title)
static int LUACALL wxFrame_SetTitle(lua_State *L)
{        
    wxString title = lua2wx(getstringtype(L, 2));
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    self->SetTitle(title);
    return 0;
}

// %win bool ShowFullScreen(bool show, long style = wxFULLSCREEN_ALL)
static int LUACALL wxFrame_ShowFullScreen(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    long style = (argCount >= 3 ? (long) getnumbertype(L, 3) : wxFULLSCREEN_ALL);
    bool show = getbooleantype(L, 2);
    wxFrame *self = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = self->ShowFullScreen(show, style);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxMiniFrame_destructor(lua_State *)
{
    return 0;
}

// %constructor wxMiniFrameDefault()
static int LUACALL wxMiniFrameDefault_constructor(lua_State *L)
{    
    wxMiniFrame *returns;
    returns = new wxMiniFrame();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxMiniFrame, returns);
    return 1;
}

// wxMiniFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
static int LUACALL wxMiniFrame_constructor(lua_State *L)
{    
    wxMiniFrame *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("frame"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxDEFAULT_FRAME_STYLE);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxMiniFrame(parent, id, title, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxMiniFrame, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
static int LUACALL wxMiniFrame_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("frame"));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : wxDEFAULT_FRAME_STYLE);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxMiniFrame *self = (wxMiniFrame*)getuserdatatype(L, 1, s_wxMiniFrame);
    returns = self->Create(parent, id, title, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxStatusBar_destructor(lua_State *)
{
    return 0;
}

// wxStatusBar(wxWindow* parent, wxWindowID id, long style = 0, const wxString& name = "statusBar")
static int LUACALL wxStatusBar_constructor(lua_State *L)
{    
    wxStatusBar *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxT("statusBar"));
    long style = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxStatusBar(parent, id, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxStatusBar, returns);
    return 1;
}

// %constructor wxStatusBarDefault()
static int LUACALL wxStatusBarDefault_constructor(lua_State *L)
{    
    wxStatusBar *returns;
    returns = new wxStatusBar();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxStatusBar, returns);
    return 1;
}

// bool         Create(wxWindow *parent, wxWindowID id, long style, const wxString& name = wxPanelNameStr)
static int LUACALL wxStatusBar_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 5 ? lua2wx(getstringtype(L, 5)) : wxString(wxPanelNameStr));
    long style = (long) getnumbertype(L, 4);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxStatusBar *self = (wxStatusBar*)getuserdatatype(L, 1, s_wxStatusBar);
    returns = self->Create(parent, id, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool GetFieldRect(int i, wxRect& rect) const
static int LUACALL wxStatusBar_GetFieldRect(lua_State *L)
{    
    bool returns;    
    wxRect *rect = (wxRect*)getuserdatatype(L, 3, s_wxRect);
    int i = (int) getnumbertype(L, 2);
    wxStatusBar *self = (wxStatusBar*)getuserdatatype(L, 1, s_wxStatusBar);
    returns = self->GetFieldRect(i, *rect);
    lua_pushboolean(L, returns);
    return 1;
}

// int          GetFieldsCount() const
static int LUACALL wxStatusBar_GetFieldsCount(lua_State *L)
{    
    int returns;
    wxStatusBar *self = (wxStatusBar*)getuserdatatype(L, 1, s_wxStatusBar);
    returns = self->GetFieldsCount();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual wxString GetStatusText(int ir = 0) const
static int LUACALL wxStatusBar_GetStatusText(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    int ir = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxStatusBar *self = (wxStatusBar*)getuserdatatype(L, 1, s_wxStatusBar);
    returns = self->GetStatusText(ir);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// virtual void SetFieldsCount(int number = 1, int* widths = NULL)
static int LUACALL wxStatusBar_SetFieldsCount(lua_State *L)
{
    int  count  = 0;
    int *widths = NULL;
    SmartIntArray ptr;
    if (lua_istable(L, 2))
        ptr = widths = tointarray(L, 2, count);
    else
        count = (int) lua_tonumber(L, 2);
    // get this
    wxStatusBar *self = ( wxStatusBar * ) getuserdatatype(L, 1, s_wxStatusBar );
    // call SetFieldsCount
    self->SetFieldsCount(count, widths);
    // return the number of parameters
    return 0;
}

// void     SetMinHeight(int height)
static int LUACALL wxStatusBar_SetMinHeight(lua_State *L)
{        
    int height = (int) getnumbertype(L, 2);
    wxStatusBar *self = (wxStatusBar*)getuserdatatype(L, 1, s_wxStatusBar);
    self->SetMinHeight(height);
    return 0;
}

// virtual void SetStatusText(const wxString& text, int i = 0)
static int LUACALL wxStatusBar_SetStatusText(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int i = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxString text = lua2wx(getstringtype(L, 2));
    wxStatusBar *self = (wxStatusBar*)getuserdatatype(L, 1, s_wxStatusBar);
    self->SetStatusText(text, i);
    return 0;
}

// virtual void SetStatusWidths(int n, int *widths)
static int LUACALL wxStatusBar_SetStatusWidths(lua_State *L)
{
    int count = 0; SmartIntArray ptr; int *choices; ptr = choices = tointarray(L, 2, count);
    // get this
    wxStatusBar *self = ( wxStatusBar * ) getuserdatatype(L, 1, s_wxStatusBar );
    // call SetStatusWidths
    self->SetStatusWidths(count, choices);
    // return the number of parameters
    return 0;
}

static int LUACALL wxToolTip_destructor(lua_State *)
{
    return 0;
}

// wxToolTip(const wxString &tip)
static int LUACALL wxToolTip_constructor(lua_State *L)
{    
    wxToolTip *returns;    
    wxString tip = lua2wx(getstringtype(L, 1));
    returns = new wxToolTip(tip);
    pushuserdatatype(L, s_wxToolTip, returns);
    return 1;
}

// static void Enable(bool flag)
static int LUACALL wxToolTip_Enable(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxToolTip::Enable(flag);
    return 0;
}

// static void SetDelay(long milliseconds)
static int LUACALL wxToolTip_SetDelay(lua_State *L)
{        
    long milliseconds = (long) getnumbertype(L, 2);
    wxToolTip::SetDelay(milliseconds);
    return 0;
}

// void    SetTip(const wxString& tip)
static int LUACALL wxToolTip_SetTip(lua_State *L)
{        
    wxString tip = lua2wx(getstringtype(L, 2));
    wxToolTip *self = (wxToolTip*)getuserdatatype(L, 1, s_wxToolTip);
    self->SetTip(tip);
    return 0;
}

// wxString GetTip()
static int LUACALL wxToolTip_GetTip(lua_State *L)
{    
    wxString returns;
    wxToolTip *self = (wxToolTip*)getuserdatatype(L, 1, s_wxToolTip);
    returns = self->GetTip();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxWindow *GetWindow()
static int LUACALL wxToolTip_GetWindow(lua_State *L)
{    
    wxWindow *returns;
    wxToolTip *self = (wxToolTip*)getuserdatatype(L, 1, s_wxToolTip);
    returns = self->GetWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

static int LUACALL wxAcceleratorTable_destructor(lua_State *L)
{
    wxAcceleratorTable * self = (wxAcceleratorTable*)getuserdatatype(L, 1, s_wxAcceleratorTable);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxAcceleratorTable_Delete(lua_State *L)
{
    wxAcceleratorTable * self = (wxAcceleratorTable*)getuserdatatype(L, 1, s_wxAcceleratorTable);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxAcceleratorTable(int n, wxAcceleratorEntry* entries)
static int LUACALL wxAcceleratorTable_constructor(lua_State *L)
{
    wxAcceleratorEntry *pItems  = NULL;
    int                 nItems  = 0;
    if (lua_istable(L, 1))
    {
        nItems = luaL_getn(L, 1);
        if (nItems > 0)
            pItems = new wxAcceleratorEntry[nItems];
        if (pItems != NULL)
        {
            int idx, idxMax = nItems;
            nItems = 0;
            for (idx = 1; idx <= idxMax; ++idx)
            {
                lua_pushnumber(L, idx);
                lua_gettable(L, -2);
                int  iFlags  = 0;
                int  keyCode = 0;
                int  cmd     = 0;
                bool fValid  = false;
                if (lua_istable(L, -1))
                {
                    lua_pushnumber(L, 1);
                    lua_gettable(L, -2);
                    iFlags = (int) lua_tonumber(L, -1);
                    lua_pop(L, 1);
                    lua_pushnumber(L, 2);
                    lua_gettable(L, -2);
                    keyCode = (int) lua_tonumber(L, -1);
                    lua_pop(L, 1);
                    lua_pushnumber(L, 3);
                    lua_gettable(L, -2);
                    cmd = (int) lua_tonumber(L, -1);
                    lua_pop(L, 1);
                    fValid = true;
                }
                else
                if (lua_isuserdata(L, -1))
                {
                    wxAcceleratorEntry *pEntry = (wxAcceleratorEntry *) getuserdatatype(L, -1, s_wxAcceleratorEntry);
                    if (pEntry != NULL)
                    {
                        iFlags  = pEntry->GetFlags();
                        keyCode = pEntry->GetKeyCode();
                        cmd     = pEntry->GetCommand();
                        fValid = true;
                    }
                }
                lua_pop(L, 1);
                if (fValid)
                {
                    pItems[nItems].Set(iFlags, keyCode, cmd);
                    ++nItems;
                }
            }
        }
    }
    // call constructor
    if (pItems != NULL)
    {
        wxAcceleratorTable *returns = NULL;
        if (nItems > 0)
            returns = new wxAcceleratorTable(nItems, pItems);
        delete[] pItems;
        if (returns != NULL)
        {
		    addToTrackedMemoryList(L, returns);
            // push the constructed class pointer
            pushuserdatatype(L, s_wxAcceleratorTable, returns );
            // return the number of parameters
            return 1;
        }
    }
    return 0;
}

// bool Ok() const
static int LUACALL wxAcceleratorTable_Ok(lua_State *L)
{    
    bool returns;
    wxAcceleratorTable *self = (wxAcceleratorTable*)getuserdatatype(L, 1, s_wxAcceleratorTable);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin wxAcceleratorEntry* wxGetAccelFromString(const wxString& label)
static int LUACALL builtin_wxGetAccelFromString(lua_State *L)
{    
    wxAcceleratorEntry *returns;    
    wxString label = lua2wx(getstringtype(L, 2));
    returns = wxGetAccelFromString(label);
    pushuserdatatype(L, s_wxAcceleratorEntry, returns);
    return 1;
}

static int LUACALL wxAcceleratorEntry_destructor(lua_State *L)
{
    wxAcceleratorEntry * self = (wxAcceleratorEntry*)getuserdatatype(L, 1, s_wxAcceleratorEntry);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxAcceleratorEntry_Delete(lua_State *L)
{
    wxAcceleratorEntry * self = (wxAcceleratorEntry*)getuserdatatype(L, 1, s_wxAcceleratorEntry);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxAcceleratorEntry(int flags = 0, int keyCode = 0, int cmd = 0)
static int LUACALL wxAcceleratorEntry_constructor(lua_State *L)
{    
    wxAcceleratorEntry *returns;
    int argCount = lua_gettop(L);    
    int cmd = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    int keyCode = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    int flags = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxAcceleratorEntry(flags, keyCode, cmd);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxAcceleratorEntry, returns);
    return 1;
}

// int GetCommand()
static int LUACALL wxAcceleratorEntry_GetCommand(lua_State *L)
{    
    int returns;
    wxAcceleratorEntry *self = (wxAcceleratorEntry*)getuserdatatype(L, 1, s_wxAcceleratorEntry);
    returns = self->GetCommand();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetFlags()
static int LUACALL wxAcceleratorEntry_GetFlags(lua_State *L)
{    
    int returns;
    wxAcceleratorEntry *self = (wxAcceleratorEntry*)getuserdatatype(L, 1, s_wxAcceleratorEntry);
    returns = self->GetFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetKeyCode()
static int LUACALL wxAcceleratorEntry_GetKeyCode(lua_State *L)
{    
    int returns;
    wxAcceleratorEntry *self = (wxAcceleratorEntry*)getuserdatatype(L, 1, s_wxAcceleratorEntry);
    returns = self->GetKeyCode();
    lua_pushnumber(L, returns);
    return 1;
}

// void Set(int flags, int keyCode, int Cmd)
static int LUACALL wxAcceleratorEntry_Set(lua_State *L)
{        
    int Cmd = (int) getnumbertype(L, 4);
    int keyCode = (int) getnumbertype(L, 3);
    int flags = (int) getnumbertype(L, 2);
    wxAcceleratorEntry *self = (wxAcceleratorEntry*)getuserdatatype(L, 1, s_wxAcceleratorEntry);
    self->Set(flags, keyCode, Cmd);
    return 0;
}

static int LUACALL wxTaskBarIcon_destructor(lua_State *)
{
    return 0;
}

// wxTaskBarIcon()
static int LUACALL wxTaskBarIcon_constructor(lua_State *L)
{    
    wxTaskBarIcon *returns;
    returns = new wxTaskBarIcon();
    pushuserdatatype(L, s_wxTaskBarIcon, returns);
    return 1;
}

// bool IsIconInstalled()
static int LUACALL wxTaskBarIcon_IsIconInstalled(lua_State *L)
{    
    bool returns;
    wxTaskBarIcon *self = (wxTaskBarIcon*)getuserdatatype(L, 1, s_wxTaskBarIcon);
    returns = self->IsIconInstalled();
    lua_pushboolean(L, returns);
    return 1;
}

// bool RemoveIcon()
static int LUACALL wxTaskBarIcon_RemoveIcon(lua_State *L)
{    
    bool returns;
    wxTaskBarIcon *self = (wxTaskBarIcon*)getuserdatatype(L, 1, s_wxTaskBarIcon);
    returns = self->RemoveIcon();
    lua_pushboolean(L, returns);
    return 1;
}

// bool SetIcon(const wxIcon& icon, const wxString& tooltip)
static int LUACALL wxTaskBarIcon_SetIcon(lua_State *L)
{    
    bool returns;    
    wxString tooltip = lua2wx(getstringtype(L, 3));
    const wxIcon *icon = (wxIcon*)getuserdatatype(L, 2, s_wxIcon);
    wxTaskBarIcon *self = (wxTaskBarIcon*)getuserdatatype(L, 1, s_wxTaskBarIcon);
    returns = self->SetIcon(*icon, tooltip);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxTaskBarIconEvent_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxSystemSettings_destructor(lua_State *)
{
    return 0;
}

// ~%wxver22 static wxColour GetColour(wxSystemColour index)
static int LUACALL wxSystemSettings_GetColour(lua_State *L)
{    
    wxColour *returns;    
    wxSystemColour index = (wxSystemColour) getenumerationtype(L, 2);
    returns = new wxColour(wxSystemSettings::GetColour(index));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// ~%wxver22 static wxFont   GetFont(wxSystemFont index)
static int LUACALL wxSystemSettings_GetFont(lua_State *L)
{    
    wxFont *returns;    
    wxSystemFont index = (wxSystemFont) getenumerationtype(L, 2);
    returns = new wxFont(wxSystemSettings::GetFont(index));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// ~%wxver22 static int GetMetric(wxSystemMetric index)
static int LUACALL wxSystemSettings_GetMetric(lua_State *L)
{    
    int returns;    
    wxSystemMetric index = (wxSystemMetric) getenumerationtype(L, 2);
    returns = wxSystemSettings::GetMetric(index);
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxSystemOptions_destructor(lua_State *L)
{
    wxSystemOptions * self = (wxSystemOptions*)getuserdatatype(L, 1, s_wxSystemOptions);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxSystemOptions_Delete(lua_State *L)
{
    wxSystemOptions * self = (wxSystemOptions*)getuserdatatype(L, 1, s_wxSystemOptions);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxSystemOptions()
static int LUACALL wxSystemOptions_constructor(lua_State *L)
{    
    wxSystemOptions *returns;
    returns = new wxSystemOptions();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSystemOptions, returns);
    return 1;
}

// static wxString GetOption(const wxString& name) const
static int LUACALL wxSystemOptions_GetOption(lua_State *L)
{    
    wxString returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    returns = wxSystemOptions::GetOption(name);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// static int GetOptionInt(const wxString& name) const
static int LUACALL wxSystemOptions_GetOptionInt(lua_State *L)
{    
    int returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    returns = wxSystemOptions::GetOptionInt(name);
    lua_pushnumber(L, returns);
    return 1;
}

// static bool HasOption(const wxString& name) const
static int LUACALL wxSystemOptions_HasOption(lua_State *L)
{    
    bool returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    returns = wxSystemOptions::HasOption(name);
    lua_pushboolean(L, returns);
    return 1;
}

// static void SetOption(const wxString& name, const wxString& value)
static int LUACALL wxSystemOptions_SetOption(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 3));
    wxString name = lua2wx(getstringtype(L, 2));
    wxSystemOptions::SetOption(name, value);
    return 0;
}

// %rename SetOptionInt static void SetOption(const wxString& name, int value)
static int LUACALL wxSystemOptions_SetOptionInt(lua_State *L)
{        
    int value = (int) getnumbertype(L, 3);
    wxString name = lua2wx(getstringtype(L, 2));
    wxSystemOptions::SetOption(name, value);
    return 0;
}

// %builtin wxString wxFileSelector(const wxString& message, const wxString& default_path = "", const wxString& default_filename = "", const wxString& default_extension = "", const wxString& wildcard = "*.*", int flags = 0, wxWindow *parent = NULL, int x = -1, int y = -1)
static int LUACALL builtin_wxFileSelector(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    int y = (argCount >= 10 ? (int) getnumbertype(L, 10) : -1);
    int x = (argCount >= 9 ? (int) getnumbertype(L, 9) : -1);
    wxWindow *parent = (argCount >= 8 ? (wxWindow*)getuserdatatype(L, 8, s_wxWindow) : NULL);
    int flags = (argCount >= 7 ? (int) getnumbertype(L, 7) : 0);
    wxString wildcard = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("*.*"));
    wxString default_extension = (argCount >= 5 ? lua2wx(getstringtype(L, 5)) : wxT(""));
    wxString default_filename = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxT(""));
    wxString default_path = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    wxString message = lua2wx(getstringtype(L, 2));
    returns = wxFileSelector(message, default_path, default_filename, default_extension, wildcard, flags, parent, x, y);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin wxColour wxGetColourFromUser(wxWindow *parent, const wxColour& colInit)
static int LUACALL builtin_wxGetColourFromUser(lua_State *L)
{    
    wxColour *returns;    
    const wxColour *colInit = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxColour(wxGetColourFromUser(parent, *colInit));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// %builtin long wxGetNumberFromUser( const wxString& message, const wxString& prompt, const wxString& caption, long value, long min = 0, long max = 100, wxWindow *parent = NULL, const wxPoint& pos = wxDefaultPosition)
static int LUACALL builtin_wxGetNumberFromUser(lua_State *L)
{    
    long returns;
    int argCount = lua_gettop(L);    
    const wxPoint *pos = (argCount >= 8 ? (wxPoint*)getuserdatatype(L, 8, s_wxPoint) : &wxDefaultPosition);
    wxWindow *parent = (argCount >= 7 ? (wxWindow*)getuserdatatype(L, 7, s_wxWindow) : NULL);
    long max = (argCount >= 6 ? (long) getnumbertype(L, 6) : 100);
    long min = (argCount >= 5 ? (long) getnumbertype(L, 5) : 0);
    long value = (long) getnumbertype(L, 4);
    wxString caption = lua2wx(getstringtype(L, 3));
    wxString prompt = lua2wx(getstringtype(L, 2));
    wxString message = lua2wx(getstringtype(L, 1));
    returns = wxGetNumberFromUser(message, prompt, caption, value, min, max, parent, *pos);
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin wxString wxGetPasswordFromUser(const wxString& message, const wxString& caption = "Input text", const wxString& default_value = "", wxWindow *parent = NULL)
static int LUACALL builtin_wxGetPasswordFromUser(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxWindow *parent = (argCount >= 4 ? (wxWindow*)getuserdatatype(L, 4, s_wxWindow) : NULL);
    wxString default_value = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    wxString caption = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT("Input text"));
    wxString message = lua2wx(getstringtype(L, 1));
    returns = wxGetPasswordFromUser(message, caption, default_value, parent);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin wxString wxGetTextFromUser(const wxString& message, const wxString& caption = "Input text", const wxString& default_value = "", wxWindow *parent = NULL, int x = -1, int y = -1, bool centre = TRUE)
static int LUACALL builtin_wxGetTextFromUser(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    bool centre = (argCount >= 7 ? getbooleantype(L, 7) : TRUE);
    int y = (argCount >= 6 ? (int) getnumbertype(L, 6) : -1);
    int x = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    wxWindow *parent = (argCount >= 4 ? (wxWindow*)getuserdatatype(L, 4, s_wxWindow) : NULL);
    wxString default_value = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    wxString caption = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT("Input text"));
    wxString message = lua2wx(getstringtype(L, 1));
    returns = wxGetTextFromUser(message, caption, default_value, parent, x, y, centre);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin int wxMessageBox(const wxString& message, const wxString& caption = "Message", int style = wxOK | wxCENTRE, wxWindow *parent = NULL, int x = -1, int y = -1)
static int LUACALL builtin_wxMessageBox(lua_State *L)
{    
    int returns;
    int argCount = lua_gettop(L);    
    int y = (argCount >= 6 ? (int) getnumbertype(L, 6) : -1);
    int x = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    wxWindow *parent = (argCount >= 4 ? (wxWindow*)getuserdatatype(L, 4, s_wxWindow) : NULL);
    int style = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxOK | wxCENTRE);
    wxString caption = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT("Message"));
    wxString message = lua2wx(getstringtype(L, 1));
    returns = wxMessageBox(message, caption, style, parent, x, y);
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxDialog_destructor(lua_State *)
{
    return 0;
}

// wxDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE, const wxString& name = "dialogBox")
static int LUACALL wxDialog_constructor(lua_State *L)
{    
    wxDialog *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("dialogBox"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxDEFAULT_DIALOG_STYLE);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxDialog(parent, id, title, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxDialog, returns);
    return 1;
}

// %constructor wxEmptyDialog()
static int LUACALL wxEmptyDialog_constructor(lua_State *L)
{    
    wxDialog *returns;
    returns = new wxDialog();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxDialog, returns);
    return 1;
}

// void Centre(int direction = wxBOTH)
static int LUACALL wxDialog_Centre(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int direction = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxBOTH);
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    self->Centre(direction);
    return 0;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE, const wxString& name = "dialogBox")
static int LUACALL wxDialog_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("dialogBox"));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : wxDEFAULT_DIALOG_STYLE);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    returns = self->Create(parent, id, title, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// void EndModal(int retCode)
static int LUACALL wxDialog_EndModal(lua_State *L)
{        
    int retCode = (int) getnumbertype(L, 2);
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    self->EndModal(retCode);
    return 0;
}

// int GetReturnCode()
static int LUACALL wxDialog_GetReturnCode(lua_State *L)
{    
    int returns;
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    returns = self->GetReturnCode();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetTitle() const
static int LUACALL wxDialog_GetTitle(lua_State *L)
{    
    wxString returns;
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    returns = self->GetTitle();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void Iconize(const bool iconize)
static int LUACALL wxDialog_Iconize(lua_State *L)
{        
    const bool iconize = getbooleantype(L, 2);
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    self->Iconize(iconize);
    return 0;
}

// bool IsIconized() const
static int LUACALL wxDialog_IsIconized(lua_State *L)
{    
    bool returns;
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    returns = self->IsIconized();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsModal() const
static int LUACALL wxDialog_IsModal(lua_State *L)
{    
    bool returns;
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    returns = self->IsModal();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetModal(const bool flag)
static int LUACALL wxDialog_SetModal(lua_State *L)
{        
    const bool flag = getbooleantype(L, 2);
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    self->SetModal(flag);
    return 0;
}

// void SetReturnCode(int retCode)
static int LUACALL wxDialog_SetReturnCode(lua_State *L)
{        
    int retCode = (int) getnumbertype(L, 2);
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    self->SetReturnCode(retCode);
    return 0;
}

// void SetTitle(const wxString& title)
static int LUACALL wxDialog_SetTitle(lua_State *L)
{        
    wxString title = lua2wx(getstringtype(L, 2));
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    self->SetTitle(title);
    return 0;
}

// bool Show(const bool show)
static int LUACALL wxDialog_Show(lua_State *L)
{    
    bool returns;    
    const bool show = getbooleantype(L, 2);
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    returns = self->Show(show);
    lua_pushboolean(L, returns);
    return 1;
}

// int ShowModal()
static int LUACALL wxDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

// ~%wxver22 void SetIcon(const wxIcon& icon)
static int LUACALL wxDialog_SetIcon(lua_State *L)
{        
    const wxIcon *icon = (wxIcon*)getuserdatatype(L, 2, s_wxIcon);
    wxDialog *self = (wxDialog*)getuserdatatype(L, 1, s_wxDialog);
    self->SetIcon(*icon);
    return 0;
}

static int LUACALL wxColourDialog_destructor(lua_State *)
{
    return 0;
}

// wxColourDialog(wxWindow* parent, wxColourData* data = NULL)
static int LUACALL wxColourDialog_constructor(lua_State *L)
{    
    wxColourDialog *returns;
    int argCount = lua_gettop(L);    
    wxColourData *data = (argCount >= 2 ? (wxColourData*)getuserdatatype(L, 2, s_wxColourData) : NULL);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxColourDialog(parent, data);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxColourDialog, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxColourData* data = NULL)
static int LUACALL wxColourDialog_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxColourData *data = (argCount >= 3 ? (wxColourData*)getuserdatatype(L, 3, s_wxColourData) : NULL);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxColourDialog *self = (wxColourDialog*)getuserdatatype(L, 1, s_wxColourDialog);
    returns = self->Create(parent, data);
    lua_pushboolean(L, returns);
    return 1;
}

// wxColourData& GetColourData()
static int LUACALL wxColourDialog_GetColourData(lua_State *L)
{    
    wxColourData *returns;
    wxColourDialog *self = (wxColourDialog*)getuserdatatype(L, 1, s_wxColourDialog);
    returns = &self->GetColourData();
    pushuserdatatype(L, s_wxColourData, returns);
    return 1;
}

// int ShowModal()
static int LUACALL wxColourDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxColourDialog *self = (wxColourDialog*)getuserdatatype(L, 1, s_wxColourDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxColourData_destructor(lua_State *L)
{
    wxColourData * self = (wxColourData*)getuserdatatype(L, 1, s_wxColourData);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxColourData_Delete(lua_State *L)
{
    wxColourData * self = (wxColourData*)getuserdatatype(L, 1, s_wxColourData);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxColourData()
static int LUACALL wxColourData_constructor(lua_State *L)
{    
    wxColourData *returns;
    returns = new wxColourData();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColourData, returns);
    return 1;
}

// bool GetChooseFull() const
static int LUACALL wxColourData_GetChooseFull(lua_State *L)
{    
    bool returns;
    wxColourData *self = (wxColourData*)getuserdatatype(L, 1, s_wxColourData);
    returns = self->GetChooseFull();
    lua_pushboolean(L, returns);
    return 1;
}

// wxColour& GetColour() const
static int LUACALL wxColourData_GetColour(lua_State *L)
{    
    wxColour *returns;
    wxColourData *self = (wxColourData*)getuserdatatype(L, 1, s_wxColourData);
    returns = &self->GetColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxColour GetCustomColour(int i) const
static int LUACALL wxColourData_GetCustomColour(lua_State *L)
{    
    wxColour *returns;    
    int i = (int) getnumbertype(L, 2);
    wxColourData *self = (wxColourData*)getuserdatatype(L, 1, s_wxColourData);
    returns = new wxColour(self->GetCustomColour(i));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// void SetChooseFull(bool flag)
static int LUACALL wxColourData_SetChooseFull(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxColourData *self = (wxColourData*)getuserdatatype(L, 1, s_wxColourData);
    self->SetChooseFull(flag);
    return 0;
}

// void SetColour(wxColour &colour)
static int LUACALL wxColourData_SetColour(lua_State *L)
{        
    wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxColourData *self = (wxColourData*)getuserdatatype(L, 1, s_wxColourData);
    self->SetColour(*colour);
    return 0;
}

// void SetCustomColour(int i, wxColour &colour)
static int LUACALL wxColourData_SetCustomColour(lua_State *L)
{        
    wxColour *colour = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    int i = (int) getnumbertype(L, 2);
    wxColourData *self = (wxColourData*)getuserdatatype(L, 1, s_wxColourData);
    self->SetCustomColour(i, *colour);
    return 0;
}

static int LUACALL wxFileDialog_destructor(lua_State *)
{
    return 0;
}

// wxFileDialog(wxWindow* parent, const wxString& message = "Choose a file", const wxString& defaultDir = "", const wxString& defaultFile = "", const wxString& wildcard = "*.*", long style = 0, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxFileDialog_constructor(lua_State *L)
{    
    wxFileDialog *returns;
    int argCount = lua_gettop(L);    
    const wxPoint *pos = (argCount >= 7 ? (wxPoint*)getuserdatatype(L, 7, s_wxPoint) : &wxDefaultPosition);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    wxString wildcard = (argCount >= 5 ? lua2wx(getstringtype(L, 5)) : wxT("*.*"));
    wxString defaultFile = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxT(""));
    wxString defaultDir = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    wxString message = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT("Choose a file"));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxFileDialog(parent, message, defaultDir, defaultFile, wildcard, style, *pos);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxFileDialog, returns);
    return 1;
}

// wxString GetDirectory() const
static int LUACALL wxFileDialog_GetDirectory(lua_State *L)
{    
    wxString returns;
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    returns = self->GetDirectory();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetFilename() const
static int LUACALL wxFileDialog_GetFilename(lua_State *L)
{    
    wxString returns;
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    returns = self->GetFilename();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void GetFilenames(wxArrayString& filenames) const
static int LUACALL wxFileDialog_GetFilenames(lua_State *L)
{        
    wxArrayString *filenames = (wxArrayString*)getuserdatatype(L, 2, s_wxArrayString);
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    self->GetFilenames(*filenames);
    return 0;
}

// int GetFilterIndex() const
static int LUACALL wxFileDialog_GetFilterIndex(lua_State *L)
{    
    int returns;
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    returns = self->GetFilterIndex();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetMessage() const
static int LUACALL wxFileDialog_GetMessage(lua_State *L)
{    
    wxString returns;
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    returns = self->GetMessage();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetPath() const
static int LUACALL wxFileDialog_GetPath(lua_State *L)
{    
    wxString returns;
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    returns = self->GetPath();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void GetPaths(wxArrayString& paths) const
static int LUACALL wxFileDialog_GetPaths(lua_State *L)
{        
    wxArrayString *paths = (wxArrayString*)getuserdatatype(L, 2, s_wxArrayString);
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    self->GetPaths(*paths);
    return 0;
}

// long GetStyle() const
static int LUACALL wxFileDialog_GetStyle(lua_State *L)
{    
    long returns;
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    returns = self->GetStyle();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetWildcard() const
static int LUACALL wxFileDialog_GetWildcard(lua_State *L)
{    
    wxString returns;
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    returns = self->GetWildcard();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetDirectory(const wxString& directory)
static int LUACALL wxFileDialog_SetDirectory(lua_State *L)
{        
    wxString directory = lua2wx(getstringtype(L, 2));
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    self->SetDirectory(directory);
    return 0;
}

// void SetFilename(const wxString& setfilename)
static int LUACALL wxFileDialog_SetFilename(lua_State *L)
{        
    wxString setfilename = lua2wx(getstringtype(L, 2));
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    self->SetFilename(setfilename);
    return 0;
}

// void SetFilterIndex(int filterIndex)
static int LUACALL wxFileDialog_SetFilterIndex(lua_State *L)
{        
    int filterIndex = (int) getnumbertype(L, 2);
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    self->SetFilterIndex(filterIndex);
    return 0;
}

// void SetMessage(const wxString& message)
static int LUACALL wxFileDialog_SetMessage(lua_State *L)
{        
    wxString message = lua2wx(getstringtype(L, 2));
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    self->SetMessage(message);
    return 0;
}

// void SetPath(const wxString& path)
static int LUACALL wxFileDialog_SetPath(lua_State *L)
{        
    wxString path = lua2wx(getstringtype(L, 2));
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    self->SetPath(path);
    return 0;
}

// void SetStyle(long style)
static int LUACALL wxFileDialog_SetStyle(lua_State *L)
{        
    long style = (long) getnumbertype(L, 2);
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    self->SetStyle(style);
    return 0;
}

// void SetWildcard(const wxString& wildCard)
static int LUACALL wxFileDialog_SetWildcard(lua_State *L)
{        
    wxString wildCard = lua2wx(getstringtype(L, 2));
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    self->SetWildcard(wildCard);
    return 0;
}

// int ShowModal()
static int LUACALL wxFileDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxFileDialog *self = (wxFileDialog*)getuserdatatype(L, 1, s_wxFileDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxDirDialog_destructor(lua_State *)
{
    return 0;
}

// wxDirDialog(wxWindow* parent, const wxString& message = "Choose a directory", const wxString& defaultPath = "", long style = 0, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxDirDialog_constructor(lua_State *L)
{    
    wxDirDialog *returns;
    int argCount = lua_gettop(L);    
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    long style = (argCount >= 4 ? (long) getnumbertype(L, 4) : 0);
    wxString defaultPath = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    wxString message = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT("Choose a directory"));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxDirDialog(parent, message, defaultPath, style, *pos);
    pushuserdatatype(L, s_wxDirDialog, returns);
    return 1;
}

// wxString GetPath() const
static int LUACALL wxDirDialog_GetPath(lua_State *L)
{    
    wxString returns;
    wxDirDialog *self = (wxDirDialog*)getuserdatatype(L, 1, s_wxDirDialog);
    returns = self->GetPath();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetMessage() const
static int LUACALL wxDirDialog_GetMessage(lua_State *L)
{    
    wxString returns;
    wxDirDialog *self = (wxDirDialog*)getuserdatatype(L, 1, s_wxDirDialog);
    returns = self->GetMessage();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// long GetStyle() const
static int LUACALL wxDirDialog_GetStyle(lua_State *L)
{    
    long returns;
    wxDirDialog *self = (wxDirDialog*)getuserdatatype(L, 1, s_wxDirDialog);
    returns = self->GetStyle();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetMessage(const wxString& message)
static int LUACALL wxDirDialog_SetMessage(lua_State *L)
{        
    wxString message = lua2wx(getstringtype(L, 2));
    wxDirDialog *self = (wxDirDialog*)getuserdatatype(L, 1, s_wxDirDialog);
    self->SetMessage(message);
    return 0;
}

// void SetPath(const wxString& path)
static int LUACALL wxDirDialog_SetPath(lua_State *L)
{        
    wxString path = lua2wx(getstringtype(L, 2));
    wxDirDialog *self = (wxDirDialog*)getuserdatatype(L, 1, s_wxDirDialog);
    self->SetPath(path);
    return 0;
}

// void SetStyle(long style)
static int LUACALL wxDirDialog_SetStyle(lua_State *L)
{        
    long style = (long) getnumbertype(L, 2);
    wxDirDialog *self = (wxDirDialog*)getuserdatatype(L, 1, s_wxDirDialog);
    self->SetStyle(style);
    return 0;
}

// int ShowModal()
static int LUACALL wxDirDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxDirDialog *self = (wxDirDialog*)getuserdatatype(L, 1, s_wxDirDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxMessageDialog_destructor(lua_State *)
{
    return 0;
}

// wxMessageDialog(wxWindow* parent, const wxString& message, const wxString& caption = "Message box", long style = wxOK | wxCANCEL | wxCENTRE, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxMessageDialog_constructor(lua_State *L)
{    
    wxMessageDialog *returns;
    int argCount = lua_gettop(L);    
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    long style = (argCount >= 4 ? (long) getnumbertype(L, 4) : wxOK | wxCANCEL | wxCENTRE);
    wxString caption = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT("Message box"));
    wxString message = lua2wx(getstringtype(L, 2));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxMessageDialog(parent, message, caption, style, *pos);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxMessageDialog, returns);
    return 1;
}

// int ShowModal()
static int LUACALL wxMessageDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxMessageDialog *self = (wxMessageDialog*)getuserdatatype(L, 1, s_wxMessageDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxSingleChoiceDialog_destructor(lua_State *)
{
    return 0;
}

// int GetSelection() const
static int LUACALL wxSingleChoiceDialog_GetSelection(lua_State *L)
{    
    int returns;
    wxSingleChoiceDialog *self = (wxSingleChoiceDialog*)getuserdatatype(L, 1, s_wxSingleChoiceDialog);
    returns = self->GetSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetStringSelection() const
static int LUACALL wxSingleChoiceDialog_GetStringSelection(lua_State *L)
{    
    wxString returns;
    wxSingleChoiceDialog *self = (wxSingleChoiceDialog*)getuserdatatype(L, 1, s_wxSingleChoiceDialog);
    returns = self->GetStringSelection();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetSelection(int selection) const
static int LUACALL wxSingleChoiceDialog_SetSelection(lua_State *L)
{        
    int selection = (int) getnumbertype(L, 2);
    wxSingleChoiceDialog *self = (wxSingleChoiceDialog*)getuserdatatype(L, 1, s_wxSingleChoiceDialog);
    self->SetSelection(selection);
    return 0;
}

// int ShowModal()
static int LUACALL wxSingleChoiceDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxSingleChoiceDialog *self = (wxSingleChoiceDialog*)getuserdatatype(L, 1, s_wxSingleChoiceDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxTextEntryDialog_destructor(lua_State *)
{
    return 0;
}

// wxTextEntryDialog(wxWindow* parent, const wxString& message, const wxString& caption = "Please enter text", const wxString& defaultValue = "", long style = wxOK | wxCANCEL | wxCENTRE, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxTextEntryDialog_constructor(lua_State *L)
{    
    wxTextEntryDialog *returns;
    int argCount = lua_gettop(L);    
    const wxPoint *pos = (argCount >= 6 ? (wxPoint*)getuserdatatype(L, 6, s_wxPoint) : &wxDefaultPosition);
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxOK | wxCANCEL | wxCENTRE);
    wxString defaultValue = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxT(""));
    wxString caption = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT("Please enter text"));
    wxString message = lua2wx(getstringtype(L, 2));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxTextEntryDialog(parent, message, caption, defaultValue, style, *pos);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxTextEntryDialog, returns);
    return 1;
}

// wxString GetValue() const
static int LUACALL wxTextEntryDialog_GetValue(lua_State *L)
{    
    wxString returns;
    wxTextEntryDialog *self = (wxTextEntryDialog*)getuserdatatype(L, 1, s_wxTextEntryDialog);
    returns = self->GetValue();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetValue(const wxString& value)
static int LUACALL wxTextEntryDialog_SetValue(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 2));
    wxTextEntryDialog *self = (wxTextEntryDialog*)getuserdatatype(L, 1, s_wxTextEntryDialog);
    self->SetValue(value);
    return 0;
}

// int ShowModal()
static int LUACALL wxTextEntryDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxTextEntryDialog *self = (wxTextEntryDialog*)getuserdatatype(L, 1, s_wxTextEntryDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxFontDialog_destructor(lua_State *)
{
    return 0;
}

// wxFontDialog(wxWindow* parent, wxFontData* data = NULL)
static int LUACALL wxFontDialog_constructor(lua_State *L)
{    
    wxFontDialog *returns;
    int argCount = lua_gettop(L);    
    wxFontData *data = (argCount >= 2 ? (wxFontData*)getuserdatatype(L, 2, s_wxFontData) : NULL);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxFontDialog(parent, data);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxFontDialog, returns);
    return 1;
}

// wxFontData& GetFontData()
static int LUACALL wxFontDialog_GetFontData(lua_State *L)
{    
    wxFontData *returns;
    wxFontDialog *self = (wxFontDialog*)getuserdatatype(L, 1, s_wxFontDialog);
    returns = &self->GetFontData();
    pushuserdatatype(L, s_wxFontData, returns);
    return 1;
}

// int ShowModal()
static int LUACALL wxFontDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxFontDialog *self = (wxFontDialog*)getuserdatatype(L, 1, s_wxFontDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxFontData_destructor(lua_State *L)
{
    wxFontData * self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFontData_Delete(lua_State *L)
{
    wxFontData * self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxFontData()
static int LUACALL wxFontData_constructor(lua_State *L)
{    
    wxFontData *returns;
    returns = new wxFontData();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFontData, returns);
    return 1;
}

// void EnableEffects(bool enable)
static int LUACALL wxFontData_EnableEffects(lua_State *L)
{        
    bool enable = getbooleantype(L, 2);
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    self->EnableEffects(enable);
    return 0;
}

// bool GetAllowSymbols()
static int LUACALL wxFontData_GetAllowSymbols(lua_State *L)
{    
    bool returns;
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    returns = self->GetAllowSymbols();
    lua_pushboolean(L, returns);
    return 1;
}

// wxColour& GetColour()
static int LUACALL wxFontData_GetColour(lua_State *L)
{    
    wxColour *returns;
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    returns = &self->GetColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxFont GetChosenFont()
static int LUACALL wxFontData_GetChosenFont(lua_State *L)
{    
    wxFont *returns;
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    returns = new wxFont(self->GetChosenFont());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// bool GetEnableEffects()
static int LUACALL wxFontData_GetEnableEffects(lua_State *L)
{    
    bool returns;
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    returns = self->GetEnableEffects();
    lua_pushboolean(L, returns);
    return 1;
}

// wxFont GetInitialFont()
static int LUACALL wxFontData_GetInitialFont(lua_State *L)
{    
    wxFont *returns;
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    returns = new wxFont(self->GetInitialFont());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// %win bool GetShowHelp()
static int LUACALL wxFontData_GetShowHelp(lua_State *L)
{    
    bool returns;
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    returns = self->GetShowHelp();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetAllowSymbols(bool allowSymbols)
static int LUACALL wxFontData_SetAllowSymbols(lua_State *L)
{        
    bool allowSymbols = getbooleantype(L, 2);
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    self->SetAllowSymbols(allowSymbols);
    return 0;
}

// void SetChosenFont(const wxFont &font)
static int LUACALL wxFontData_SetChosenFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    self->SetChosenFont(*font);
    return 0;
}

// void SetColour(const wxColour &colour)
static int LUACALL wxFontData_SetColour(lua_State *L)
{        
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    self->SetColour(*colour);
    return 0;
}

// void SetInitialFont(const wxFont &font)
static int LUACALL wxFontData_SetInitialFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    self->SetInitialFont(*font);
    return 0;
}

// void SetRange(int minimum, int maximum)
static int LUACALL wxFontData_SetRange(lua_State *L)
{        
    int maximum = (int) getnumbertype(L, 3);
    int minimum = (int) getnumbertype(L, 2);
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    self->SetRange(minimum, maximum);
    return 0;
}

// %win void SetShowHelp(bool showHelp)
static int LUACALL wxFontData_SetShowHelp(lua_State *L)
{        
    bool showHelp = getbooleantype(L, 2);
    wxFontData *self = (wxFontData*)getuserdatatype(L, 1, s_wxFontData);
    self->SetShowHelp(showHelp);
    return 0;
}

static int LUACALL wxFindReplaceDialog_destructor(lua_State *)
{
    return 0;
}

// wxFindReplaceDialog(wxWindow *parent, wxFindReplaceData *findData, const wxString &title, int style = 0)
static int LUACALL wxFindReplaceDialog_constructor(lua_State *L)
{    
    wxFindReplaceDialog *returns;
    int argCount = lua_gettop(L);    
    int style = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    wxString title = lua2wx(getstringtype(L, 3));
    wxFindReplaceData *findData = (wxFindReplaceData*)getuserdatatype(L, 2, s_wxFindReplaceData);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxFindReplaceDialog(parent, findData, title, style);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxFindReplaceDialog, returns);
    return 1;
}

// %constructor wxFindReplaceDialogDefault()
static int LUACALL wxFindReplaceDialogDefault_constructor(lua_State *L)
{    
    wxFindReplaceDialog *returns;
    returns = new wxFindReplaceDialog();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxFindReplaceDialog, returns);
    return 1;
}

// bool    Create(wxWindow *parent, wxFindReplaceData *findData, const wxString &title, int style = 0)
static int LUACALL wxFindReplaceDialog_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int style = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    wxString title = lua2wx(getstringtype(L, 4));
    wxFindReplaceData *findData = (wxFindReplaceData*)getuserdatatype(L, 3, s_wxFindReplaceData);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxFindReplaceDialog *self = (wxFindReplaceDialog*)getuserdatatype(L, 1, s_wxFindReplaceDialog);
    returns = self->Create(parent, findData, title, style);
    lua_pushboolean(L, returns);
    return 1;
}

// const wxFindReplaceData *GetData()
static int LUACALL wxFindReplaceDialog_GetData(lua_State *L)
{    
    const wxFindReplaceData *returns;
    wxFindReplaceDialog *self = (wxFindReplaceDialog*)getuserdatatype(L, 1, s_wxFindReplaceDialog);
    returns = self->GetData();
    pushuserdatatype(L, s_wxFindReplaceData, returns);
    return 1;
}

// void    SetData(wxFindReplaceData *findData)
static int LUACALL wxFindReplaceDialog_SetData(lua_State *L)
{        
    wxFindReplaceData *findData = (wxFindReplaceData*)getuserdatatype(L, 2, s_wxFindReplaceData);
    wxFindReplaceDialog *self = (wxFindReplaceDialog*)getuserdatatype(L, 1, s_wxFindReplaceDialog);
    self->SetData(findData);
    return 0;
}

static int LUACALL wxFindReplaceData_destructor(lua_State *L)
{
    wxFindReplaceData * self = (wxFindReplaceData*)getuserdatatype(L, 1, s_wxFindReplaceData);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFindReplaceData_Delete(lua_State *L)
{
    wxFindReplaceData * self = (wxFindReplaceData*)getuserdatatype(L, 1, s_wxFindReplaceData);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxFindReplaceData(int flags = 0)
static int LUACALL wxFindReplaceData_constructor(lua_State *L)
{    
    wxFindReplaceData *returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxFindReplaceData(flags);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFindReplaceData, returns);
    return 1;
}

// int     GetFlags()
static int LUACALL wxFindReplaceData_GetFlags(lua_State *L)
{    
    int returns;
    wxFindReplaceData *self = (wxFindReplaceData*)getuserdatatype(L, 1, s_wxFindReplaceData);
    returns = self->GetFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxString& GetFindString()
static int LUACALL wxFindReplaceData_GetFindString(lua_State *L)
{    
    const wxString *returns;
    wxFindReplaceData *self = (wxFindReplaceData*)getuserdatatype(L, 1, s_wxFindReplaceData);
    returns = &self->GetFindString();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// const wxString& GetReplaceString()
static int LUACALL wxFindReplaceData_GetReplaceString(lua_State *L)
{    
    const wxString *returns;
    wxFindReplaceData *self = (wxFindReplaceData*)getuserdatatype(L, 1, s_wxFindReplaceData);
    returns = &self->GetReplaceString();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// void    SetFlags(int flags)
static int LUACALL wxFindReplaceData_SetFlags(lua_State *L)
{        
    int flags = (int) getnumbertype(L, 2);
    wxFindReplaceData *self = (wxFindReplaceData*)getuserdatatype(L, 1, s_wxFindReplaceData);
    self->SetFlags(flags);
    return 0;
}

// void    SetFindString(const wxString& string)
static int LUACALL wxFindReplaceData_SetFindString(lua_State *L)
{        
    wxString string = lua2wx(getstringtype(L, 2));
    wxFindReplaceData *self = (wxFindReplaceData*)getuserdatatype(L, 1, s_wxFindReplaceData);
    self->SetFindString(string);
    return 0;
}

// void    SetReplaceString(const wxString& string)
static int LUACALL wxFindReplaceData_SetReplaceString(lua_State *L)
{        
    wxString string = lua2wx(getstringtype(L, 2));
    wxFindReplaceData *self = (wxFindReplaceData*)getuserdatatype(L, 1, s_wxFindReplaceData);
    self->SetReplaceString(string);
    return 0;
}

static int LUACALL wxFindDialogEvent_destructor(lua_State *L)
{
    wxFindDialogEvent * self = (wxFindDialogEvent*)getuserdatatype(L, 1, s_wxFindDialogEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFindDialogEvent_Delete(lua_State *L)
{
    wxFindDialogEvent * self = (wxFindDialogEvent*)getuserdatatype(L, 1, s_wxFindDialogEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxFindDialogEvent(wxEventType commandType = wxEVT_NULL, int id = 0)
static int LUACALL wxFindDialogEvent_constructor(lua_State *L)
{    
    wxFindDialogEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxEventType commandType = (argCount >= 1 ? (wxEventType) getnumbertype(L, 1) : wxEVT_NULL);
    returns = new wxFindDialogEvent(commandType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFindDialogEvent, returns);
    return 1;
}

// int     GetFlags()
static int LUACALL wxFindDialogEvent_GetFlags(lua_State *L)
{    
    int returns;
    wxFindDialogEvent *self = (wxFindDialogEvent*)getuserdatatype(L, 1, s_wxFindDialogEvent);
    returns = self->GetFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetFindString()
static int LUACALL wxFindDialogEvent_GetFindString(lua_State *L)
{    
    wxString returns;
    wxFindDialogEvent *self = (wxFindDialogEvent*)getuserdatatype(L, 1, s_wxFindDialogEvent);
    returns = self->GetFindString();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// const wxString& GetReplaceString()
static int LUACALL wxFindDialogEvent_GetReplaceString(lua_State *L)
{    
    const wxString *returns;
    wxFindDialogEvent *self = (wxFindDialogEvent*)getuserdatatype(L, 1, s_wxFindDialogEvent);
    returns = &self->GetReplaceString();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// void    SetFlags(int flags)
static int LUACALL wxFindDialogEvent_SetFlags(lua_State *L)
{        
    int flags = (int) getnumbertype(L, 2);
    wxFindDialogEvent *self = (wxFindDialogEvent*)getuserdatatype(L, 1, s_wxFindDialogEvent);
    self->SetFlags(flags);
    return 0;
}

// void    SetFindString(const wxString& str)
static int LUACALL wxFindDialogEvent_SetFindString(lua_State *L)
{        
    wxString str = lua2wx(getstringtype(L, 2));
    wxFindDialogEvent *self = (wxFindDialogEvent*)getuserdatatype(L, 1, s_wxFindDialogEvent);
    self->SetFindString(str);
    return 0;
}

// void    SetReplaceString(const wxString& str)
static int LUACALL wxFindDialogEvent_SetReplaceString(lua_State *L)
{        
    wxString str = lua2wx(getstringtype(L, 2));
    wxFindDialogEvent *self = (wxFindDialogEvent*)getuserdatatype(L, 1, s_wxFindDialogEvent);
    self->SetReplaceString(str);
    return 0;
}

// wxFindReplaceDialog *GetDialog()
static int LUACALL wxFindDialogEvent_GetDialog(lua_State *L)
{    
    wxFindReplaceDialog *returns;
    wxFindDialogEvent *self = (wxFindDialogEvent*)getuserdatatype(L, 1, s_wxFindDialogEvent);
    returns = self->GetDialog();
    pushuserdatatype(L, s_wxFindReplaceDialog, returns);
    return 1;
}

static int LUACALL wxProgressDialog_destructor(lua_State *)
{
    return 0;
}

// wxProgressDialog(const wxString& title, const wxString& message, int maximum = 100, wxWindow* parent = NULL, int style = wxPD_AUTO_HIDE | wxPD_APP_MODAL)
static int LUACALL wxProgressDialog_constructor(lua_State *L)
{    
    wxProgressDialog *returns;
    int argCount = lua_gettop(L);    
    int style = (argCount >= 5 ? (int) getnumbertype(L, 5) : wxPD_AUTO_HIDE | wxPD_APP_MODAL);
    wxWindow *parent = (argCount >= 4 ? (wxWindow*)getuserdatatype(L, 4, s_wxWindow) : NULL);
    int maximum = (argCount >= 3 ? (int) getnumbertype(L, 3) : 100);
    wxString message = lua2wx(getstringtype(L, 2));
    wxString title = lua2wx(getstringtype(L, 1));
    returns = new wxProgressDialog(title, message, maximum, parent, style);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxProgressDialog, returns);
    return 1;
}

// bool    Update(int value = -1, const wxString &newmsg = "")
static int LUACALL wxProgressDialog_Update(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString newmsg = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    int value = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    wxProgressDialog *self = (wxProgressDialog*)getuserdatatype(L, 1, s_wxProgressDialog);
    returns = self->Update(value, newmsg);
    lua_pushboolean(L, returns);
    return 1;
}

// void    Resume()
static int LUACALL wxProgressDialog_Resume(lua_State *L)
{    
    wxProgressDialog *self = (wxProgressDialog*)getuserdatatype(L, 1, s_wxProgressDialog);
    self->Resume();
    return 0;
}

static int LUACALL wxPrintout_destructor(lua_State *)
{
    return 0;
}

// wxDC * GetDC()
static int LUACALL wxPrintout_GetDC(lua_State *L)
{    
    wxDC *returns;
    wxPrintout *self = (wxPrintout*)getuserdatatype(L, 1, s_wxPrintout);
    returns = self->GetDC();
    pushuserdatatype(L, s_wxDC, returns);
    return 1;
}

// void GetPageSizeMM(int *w, int *h)
static int LUACALL wxPrintout_GetPageSizeMM(lua_State *L)
{
    int h;
    int w;
    // get this
    wxPrintout *self = ( wxPrintout * ) getuserdatatype(L, 1, s_wxPrintout );
    // call GetPageSizeMM
    self->GetPageSizeMM(&w, &h);
    // return the number of parameters
    lua_pushnumber(L, w);
    lua_pushnumber(L, h);
    return 2;
}

// void GetPageSizePixels(int *w, int *h)
static int LUACALL wxPrintout_GetPageSizePixels(lua_State *L)
{
    int h;
    int w;
    // get this
    wxPrintout *self = ( wxPrintout * ) getuserdatatype(L, 1, s_wxPrintout );
    // call GetPageSizePixels
    self->GetPageSizePixels(&w, &h);
    // return the number of parameters
    lua_pushnumber(L, w);
    lua_pushnumber(L, h);
    return 2;
}

// void GetPPIPrinter(int *w, int *h)
static int LUACALL wxPrintout_GetPPIPrinter(lua_State *L)
{
    int h;
    int w;
    // get this
    wxPrintout *self = ( wxPrintout * ) getuserdatatype(L, 1, s_wxPrintout );
    // call GetPPIPrinter
    self->GetPPIPrinter(&w, &h);
    // return the number of parameters
    lua_pushnumber(L, w);
    lua_pushnumber(L, h);
    return 2;
}

// void GetPPIScreen(int *w, int *h)
static int LUACALL wxPrintout_GetPPIScreen(lua_State *L)
{
    int h;
    int w;
    // get this
    wxPrintout *self = ( wxPrintout * ) getuserdatatype(L, 1, s_wxPrintout );
    // call GetPPIScreen
    self->GetPPIScreen(&w, &h);
    // return the number of parameters
    lua_pushnumber(L, w);
    lua_pushnumber(L, h);
    return 2;
}

// bool IsPreview()
static int LUACALL wxPrintout_IsPreview(lua_State *L)
{    
    bool returns;
    wxPrintout *self = (wxPrintout*)getuserdatatype(L, 1, s_wxPrintout);
    returns = self->IsPreview();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasPage(int pageNum)
static int LUACALL wxPrintout_HasPage(lua_State *L)
{    
    bool returns;    
    int pageNum = (int) getnumbertype(L, 2);
    wxPrintout *self = (wxPrintout*)getuserdatatype(L, 1, s_wxPrintout);
    returns = self->HasPage(pageNum);
    lua_pushboolean(L, returns);
    return 1;
}

// bool OnBeginDocument(int startPage, int endPage);
static int LUACALL wxPrintout_OnBeginDocument(lua_State *L)
{
    bool returns;
    // int endPage
    int endPage = (int) getnumbertype(L, 3);
    // int startPagest
    int startPage = (int) getnumbertype(L, 2);
    // get this
    wxPrintout *self = ( wxPrintout * ) getuserdatatype(L, 1, s_wxPrintout );
    // call OnBeginDocument
    returns = self->wxPrintout::OnBeginDocument(startPage, endPage);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}

// void OnEndDocument()
static int LUACALL wxPrintout_OnEndDocument(lua_State *L)
{    
    wxPrintout *self = (wxPrintout*)getuserdatatype(L, 1, s_wxPrintout);
    self->OnEndDocument();
    return 0;
}

// void OnBeginPrinting()
static int LUACALL wxPrintout_OnBeginPrinting(lua_State *L)
{    
    wxPrintout *self = (wxPrintout*)getuserdatatype(L, 1, s_wxPrintout);
    self->OnBeginPrinting();
    return 0;
}

// void OnEndPrinting()
static int LUACALL wxPrintout_OnEndPrinting(lua_State *L)
{    
    wxPrintout *self = (wxPrintout*)getuserdatatype(L, 1, s_wxPrintout);
    self->OnEndPrinting();
    return 0;
}

// void OnPreparePrinting()
static int LUACALL wxPrintout_OnPreparePrinting(lua_State *L)
{    
    wxPrintout *self = (wxPrintout*)getuserdatatype(L, 1, s_wxPrintout);
    self->OnPreparePrinting();
    return 0;
}

// bool OnPrintPage(int pageNum)
static int LUACALL wxPrintout_OnPrintPage(lua_State *L)
{    
    bool returns;    
    int pageNum = (int) getnumbertype(L, 2);
    wxPrintout *self = (wxPrintout*)getuserdatatype(L, 1, s_wxPrintout);
    returns = self->OnPrintPage(pageNum);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxPrinter_destructor(lua_State *L)
{
    wxPrinter * self = (wxPrinter*)getuserdatatype(L, 1, s_wxPrinter);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPrinter_Delete(lua_State *L)
{
    wxPrinter * self = (wxPrinter*)getuserdatatype(L, 1, s_wxPrinter);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPrinter(wxPrintDialogData* data = NULL)
static int LUACALL wxPrinter_constructor(lua_State *L)
{    
    wxPrinter *returns;
    int argCount = lua_gettop(L);    
    wxPrintDialogData *data = (argCount >= 1 ? (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData) : NULL);
    returns = new wxPrinter(data);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPrinter, returns);
    return 1;
}

// void CreateAbortWindow(wxWindow* parent, wxLuaPrintout* printout)
static int LUACALL wxPrinter_CreateAbortWindow(lua_State *L)
{        
    wxLuaPrintout *printout = (wxLuaPrintout*)getuserdatatype(L, 3, s_wxLuaPrintout);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxPrinter *self = (wxPrinter*)getuserdatatype(L, 1, s_wxPrinter);
    self->CreateAbortWindow(parent, printout);
    return 0;
}

// static wxPrinterError GetLastError()
static int LUACALL wxPrinter_GetLastError(lua_State *L)
{    
    wxPrinterError returns;
    returns = wxPrinter::GetLastError();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPrintDialogData& GetPrintDialogData()
static int LUACALL wxPrinter_GetPrintDialogData(lua_State *L)
{    
    wxPrintDialogData *returns;
    wxPrinter *self = (wxPrinter*)getuserdatatype(L, 1, s_wxPrinter);
    returns = &self->GetPrintDialogData();
    pushuserdatatype(L, s_wxPrintDialogData, returns);
    return 1;
}

// bool Print(wxWindow *parent, wxLuaPrintout *printout, bool prompt=TRUE)
static int LUACALL wxPrinter_Print(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool prompt = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    wxLuaPrintout *printout = (wxLuaPrintout*)getuserdatatype(L, 3, s_wxLuaPrintout);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxPrinter *self = (wxPrinter*)getuserdatatype(L, 1, s_wxPrinter);
    returns = self->Print(parent, printout, prompt);
    lua_pushboolean(L, returns);
    return 1;
}

// wxDC* PrintDialog(wxWindow *parent)
static int LUACALL wxPrinter_PrintDialog(lua_State *L)
{    
    wxDC *returns;    
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxPrinter *self = (wxPrinter*)getuserdatatype(L, 1, s_wxPrinter);
    returns = self->PrintDialog(parent);
    pushuserdatatype(L, s_wxDC, returns);
    return 1;
}

// ~%wxver22 void ReportError(wxWindow *parent, wxLuaPrintout *printout, const wxString& message)
static int LUACALL wxPrinter_ReportError(lua_State *L)
{        
    wxString message = lua2wx(getstringtype(L, 4));
    wxLuaPrintout *printout = (wxLuaPrintout*)getuserdatatype(L, 3, s_wxLuaPrintout);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxPrinter *self = (wxPrinter*)getuserdatatype(L, 1, s_wxPrinter);
    self->ReportError(parent, printout, message);
    return 0;
}

// bool Setup(wxWindow *parent)
static int LUACALL wxPrinter_Setup(lua_State *L)
{    
    bool returns;    
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxPrinter *self = (wxPrinter*)getuserdatatype(L, 1, s_wxPrinter);
    returns = self->Setup(parent);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxPrintData_destructor(lua_State *L)
{
    wxPrintData * self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPrintData_Delete(lua_State *L)
{
    wxPrintData * self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPrintData()
static int LUACALL wxPrintData_constructor(lua_State *L)
{    
    wxPrintData *returns;
    returns = new wxPrintData();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPrintData, returns);
    return 1;
}

// wxPrintData *Copy()
static int LUACALL wxPrintData_Copy(lua_State *L)
{
    wxPrintData *self    = ( wxPrintData * ) getuserdatatype(L, 1, s_wxPrintData );
    wxPrintData *returns = new wxPrintData;
    // Copy data over
    *returns = *self;
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxPrintData, returns );
    // return the number of parameters
    return 1;
}

// bool GetCollate()
static int LUACALL wxPrintData_GetCollate(lua_State *L)
{    
    bool returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetCollate();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetColour()
static int LUACALL wxPrintData_GetColour(lua_State *L)
{    
    bool returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetColour();
    lua_pushboolean(L, returns);
    return 1;
}

// wxDuplexMode GetDuplex()
static int LUACALL wxPrintData_GetDuplex(lua_State *L)
{    
    wxDuplexMode returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetDuplex();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetNoCopies()
static int LUACALL wxPrintData_GetNoCopies(lua_State *L)
{    
    int returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetNoCopies();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetOrientation()
static int LUACALL wxPrintData_GetOrientation(lua_State *L)
{    
    int returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetOrientation();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPaperSize GetPaperId()
static int LUACALL wxPrintData_GetPaperId(lua_State *L)
{    
    wxPaperSize returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetPaperId();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxString& GetPrinterName()
static int LUACALL wxPrintData_GetPrinterName(lua_State *L)
{    
    const wxString *returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = &self->GetPrinterName();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// wxPrintQuality GetQuality()
static int LUACALL wxPrintData_GetQuality(lua_State *L)
{    
    wxPrintQuality returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetQuality();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxSize& GetPaperSize()
static int LUACALL wxPrintData_GetPaperSize(lua_State *L)
{    
    const wxSize *returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = &self->GetPaperSize();
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// const wxString& GetPrinterCommand()
static int LUACALL wxPrintData_GetPrinterCommand(lua_State *L)
{    
    const wxString *returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = &self->GetPrinterCommand();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// const wxString& GetPrinterOptions()
static int LUACALL wxPrintData_GetPrinterOptions(lua_State *L)
{    
    const wxString *returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = &self->GetPrinterOptions();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// const wxString& GetPreviewCommand()
static int LUACALL wxPrintData_GetPreviewCommand(lua_State *L)
{    
    const wxString *returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = &self->GetPreviewCommand();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// const wxString& GetFilename()
static int LUACALL wxPrintData_GetFilename(lua_State *L)
{    
    const wxString *returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = &self->GetFilename();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// const wxString& GetFontMetricPath()
static int LUACALL wxPrintData_GetFontMetricPath(lua_State *L)
{    
    const wxString *returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = &self->GetFontMetricPath();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// double GetPrinterScaleX()
static int LUACALL wxPrintData_GetPrinterScaleX(lua_State *L)
{    
    double returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetPrinterScaleX();
    lua_pushnumber(L, returns);
    return 1;
}

// double GetPrinterScaleY()
static int LUACALL wxPrintData_GetPrinterScaleY(lua_State *L)
{    
    double returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetPrinterScaleY();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetPrinterTranslateX()
static int LUACALL wxPrintData_GetPrinterTranslateX(lua_State *L)
{    
    long returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetPrinterTranslateX();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetPrinterTranslateY()
static int LUACALL wxPrintData_GetPrinterTranslateY(lua_State *L)
{    
    long returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetPrinterTranslateY();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPrintMode GetPrintMode()
static int LUACALL wxPrintData_GetPrintMode(lua_State *L)
{    
    wxPrintMode returns;
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = self->GetPrintMode();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetCollate(bool flag)
static int LUACALL wxPrintData_SetCollate(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetCollate(flag);
    return 0;
}

// void SetColour(bool flag)
static int LUACALL wxPrintData_SetColour(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetColour(flag);
    return 0;
}

// void SetDuplex(wxDuplexMode duplex)
static int LUACALL wxPrintData_SetDuplex(lua_State *L)
{        
    wxDuplexMode duplex = (wxDuplexMode) getenumerationtype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetDuplex(duplex);
    return 0;
}

// void SetNoCopies(int v)
static int LUACALL wxPrintData_SetNoCopies(lua_State *L)
{        
    int v = (int) getnumbertype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetNoCopies(v);
    return 0;
}

// void SetOrientation(int orientation)
static int LUACALL wxPrintData_SetOrientation(lua_State *L)
{        
    int orientation = (int) getnumbertype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetOrientation(orientation);
    return 0;
}

// void SetPaperId(wxPaperSize sizeId)
static int LUACALL wxPrintData_SetPaperId(lua_State *L)
{        
    wxPaperSize sizeId = (wxPaperSize) getenumerationtype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPaperId(sizeId);
    return 0;
}

// void SetPrinterName(const wxString& printerName)
static int LUACALL wxPrintData_SetPrinterName(lua_State *L)
{        
    wxString printerName = lua2wx(getstringtype(L, 2));
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrinterName(printerName);
    return 0;
}

// void SetQuality(wxPrintQuality quality)
static int LUACALL wxPrintData_SetQuality(lua_State *L)
{        
    wxPrintQuality quality = (wxPrintQuality) getenumerationtype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetQuality(quality);
    return 0;
}

// void SetPaperSize(const wxSize& paperSize)
static int LUACALL wxPrintData_SetPaperSize(lua_State *L)
{        
    const wxSize *paperSize = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPaperSize(*paperSize);
    return 0;
}

// void SetPrinterCommand(const wxString& command)
static int LUACALL wxPrintData_SetPrinterCommand(lua_State *L)
{        
    wxString command = lua2wx(getstringtype(L, 2));
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrinterCommand(command);
    return 0;
}

// void SetPrinterOptions(const wxString& options)
static int LUACALL wxPrintData_SetPrinterOptions(lua_State *L)
{        
    wxString options = lua2wx(getstringtype(L, 2));
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrinterOptions(options);
    return 0;
}

// void SetPreviewCommand(const wxString& command)
static int LUACALL wxPrintData_SetPreviewCommand(lua_State *L)
{        
    wxString command = lua2wx(getstringtype(L, 2));
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPreviewCommand(command);
    return 0;
}

// void SetFilename(const wxString& filename)
static int LUACALL wxPrintData_SetFilename(lua_State *L)
{        
    wxString filename = lua2wx(getstringtype(L, 2));
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetFilename(filename);
    return 0;
}

// void SetFontMetricPath(const wxString& path)
static int LUACALL wxPrintData_SetFontMetricPath(lua_State *L)
{        
    wxString path = lua2wx(getstringtype(L, 2));
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetFontMetricPath(path);
    return 0;
}

// void SetPrinterScaleX(double x)
static int LUACALL wxPrintData_SetPrinterScaleX(lua_State *L)
{        
    double x = (double) getnumbertype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrinterScaleX(x);
    return 0;
}

// void SetPrinterScaleY(double y)
static int LUACALL wxPrintData_SetPrinterScaleY(lua_State *L)
{        
    double y = (double) getnumbertype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrinterScaleY(y);
    return 0;
}

// void SetPrinterScaling(double x, double y)
static int LUACALL wxPrintData_SetPrinterScaling(lua_State *L)
{        
    double y = (double) getnumbertype(L, 3);
    double x = (double) getnumbertype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrinterScaling(x, y);
    return 0;
}

// void SetPrinterTranslateX(long x)
static int LUACALL wxPrintData_SetPrinterTranslateX(lua_State *L)
{        
    long x = (long) getnumbertype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrinterTranslateX(x);
    return 0;
}

// void SetPrinterTranslateY(long y)
static int LUACALL wxPrintData_SetPrinterTranslateY(lua_State *L)
{        
    long y = (long) getnumbertype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrinterTranslateY(y);
    return 0;
}

// void SetPrinterTranslation(long x, long y)
static int LUACALL wxPrintData_SetPrinterTranslation(lua_State *L)
{        
    long y = (long) getnumbertype(L, 3);
    long x = (long) getnumbertype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrinterTranslation(x, y);
    return 0;
}

// void SetPrintMode(wxPrintMode printMode)
static int LUACALL wxPrintData_SetPrintMode(lua_State *L)
{        
    wxPrintMode printMode = (wxPrintMode) getenumerationtype(L, 2);
    wxPrintData *self = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    self->SetPrintMode(printMode);
    return 0;
}

static int LUACALL wxPageSetupDialogData_destructor(lua_State *L)
{
    wxPageSetupDialogData * self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPageSetupDialogData_Delete(lua_State *L)
{
    wxPageSetupDialogData * self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPageSetupDialogData()
static int LUACALL wxPageSetupDialogData_constructor(lua_State *L)
{    
    wxPageSetupDialogData *returns;
    returns = new wxPageSetupDialogData();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPageSetupDialogData, returns);
    return 1;
}

// void EnableHelp(bool flag)
static int LUACALL wxPageSetupDialogData_EnableHelp(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->EnableHelp(flag);
    return 0;
}

// void EnableMargins(bool flag)
static int LUACALL wxPageSetupDialogData_EnableMargins(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->EnableMargins(flag);
    return 0;
}

// void EnableOrientation(bool flag)
static int LUACALL wxPageSetupDialogData_EnableOrientation(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->EnableOrientation(flag);
    return 0;
}

// void EnablePaper(bool flag)
static int LUACALL wxPageSetupDialogData_EnablePaper(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->EnablePaper(flag);
    return 0;
}

// void EnablePrinter(bool flag)
static int LUACALL wxPageSetupDialogData_EnablePrinter(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->EnablePrinter(flag);
    return 0;
}

// bool GetDefaultMinMargins()
static int LUACALL wxPageSetupDialogData_GetDefaultMinMargins(lua_State *L)
{    
    bool returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = self->GetDefaultMinMargins();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetEnableMargins()
static int LUACALL wxPageSetupDialogData_GetEnableMargins(lua_State *L)
{    
    bool returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = self->GetEnableMargins();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetEnableOrientation()
static int LUACALL wxPageSetupDialogData_GetEnableOrientation(lua_State *L)
{    
    bool returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = self->GetEnableOrientation();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetEnablePaper()
static int LUACALL wxPageSetupDialogData_GetEnablePaper(lua_State *L)
{    
    bool returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = self->GetEnablePaper();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetEnablePrinter()
static int LUACALL wxPageSetupDialogData_GetEnablePrinter(lua_State *L)
{    
    bool returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = self->GetEnablePrinter();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetEnableHelp()
static int LUACALL wxPageSetupDialogData_GetEnableHelp(lua_State *L)
{    
    bool returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = self->GetEnableHelp();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetDefaultInfo()
static int LUACALL wxPageSetupDialogData_GetDefaultInfo(lua_State *L)
{    
    bool returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = self->GetDefaultInfo();
    lua_pushboolean(L, returns);
    return 1;
}

// wxPoint GetMarginTopLeft()
static int LUACALL wxPageSetupDialogData_GetMarginTopLeft(lua_State *L)
{    
    wxPoint *returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = new wxPoint(self->GetMarginTopLeft());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// wxPoint GetMarginBottomRight()
static int LUACALL wxPageSetupDialogData_GetMarginBottomRight(lua_State *L)
{    
    wxPoint *returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = new wxPoint(self->GetMarginBottomRight());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// wxPoint GetMinMarginTopLeft()
static int LUACALL wxPageSetupDialogData_GetMinMarginTopLeft(lua_State *L)
{    
    wxPoint *returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = new wxPoint(self->GetMinMarginTopLeft());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// wxPoint GetMinMarginBottomRight()
static int LUACALL wxPageSetupDialogData_GetMinMarginBottomRight(lua_State *L)
{    
    wxPoint *returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = new wxPoint(self->GetMinMarginBottomRight());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// wxPaperSize GetPaperId()
static int LUACALL wxPageSetupDialogData_GetPaperId(lua_State *L)
{    
    wxPaperSize returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = self->GetPaperId();
    lua_pushnumber(L, returns);
    return 1;
}

// wxSize GetPaperSize()
static int LUACALL wxPageSetupDialogData_GetPaperSize(lua_State *L)
{    
    wxSize *returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = new wxSize(self->GetPaperSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// const wxPrintData& GetPrintData()
static int LUACALL wxPageSetupDialogData_GetPrintData(lua_State *L)
{    
    const wxPrintData *returns;
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    returns = &self->GetPrintData();
    pushuserdatatype(L, s_wxPrintData, returns);
    return 1;
}

// void SetDefaultInfo(bool flag)
static int LUACALL wxPageSetupDialogData_SetDefaultInfo(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->SetDefaultInfo(flag);
    return 0;
}

// void SetDefaultMinMargins(bool flag)
static int LUACALL wxPageSetupDialogData_SetDefaultMinMargins(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->SetDefaultMinMargins(flag);
    return 0;
}

// void SetMarginTopLeft(const wxPoint& pt)
static int LUACALL wxPageSetupDialogData_SetMarginTopLeft(lua_State *L)
{        
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->SetMarginTopLeft(*pt);
    return 0;
}

// void SetMarginBottomRight(const wxPoint& pt)
static int LUACALL wxPageSetupDialogData_SetMarginBottomRight(lua_State *L)
{        
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->SetMarginBottomRight(*pt);
    return 0;
}

// void SetMinMarginTopLeft(const wxPoint& pt)
static int LUACALL wxPageSetupDialogData_SetMinMarginTopLeft(lua_State *L)
{        
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->SetMinMarginTopLeft(*pt);
    return 0;
}

// void SetMinMarginBottomRight(const wxPoint& pt)
static int LUACALL wxPageSetupDialogData_SetMinMarginBottomRight(lua_State *L)
{        
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->SetMinMarginBottomRight(*pt);
    return 0;
}

// void SetPaperId(wxPaperSize id)
static int LUACALL wxPageSetupDialogData_SetPaperId(lua_State *L)
{        
    wxPaperSize id = (wxPaperSize) getenumerationtype(L, 2);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->SetPaperId(id);
    return 0;
}

// void SetPaperSize(const wxSize& size)
static int LUACALL wxPageSetupDialogData_SetPaperSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->SetPaperSize(*size);
    return 0;
}

// void SetPrintData(const wxPrintData& printData)
static int LUACALL wxPageSetupDialogData_SetPrintData(lua_State *L)
{        
    const wxPrintData *printData = (wxPrintData*)getuserdatatype(L, 2, s_wxPrintData);
    wxPageSetupDialogData *self = (wxPageSetupDialogData*)getuserdatatype(L, 1, s_wxPageSetupDialogData);
    self->SetPrintData(*printData);
    return 0;
}

// wxPrintData *Copy()
static int LUACALL wxPageSetupDialogData_Copy(lua_State *L)
{
    wxPageSetupDialogData *self    = ( wxPageSetupDialogData * ) getuserdatatype(L, 1, s_wxPageSetupDialogData );
    wxPageSetupDialogData *returns = new wxPageSetupDialogData;
    // Copy data over
    *returns = *self;
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxPageSetupDialogData, returns );
    // return the number of parameters
    return 1;
}

static int LUACALL wxPageSetupDialog_destructor(lua_State *)
{
    return 0;
}

// wxPageSetupDialog(wxWindow* parent, wxPageSetupDialogData* data = NULL)
static int LUACALL wxPageSetupDialog_constructor(lua_State *L)
{    
    wxPageSetupDialog *returns;
    int argCount = lua_gettop(L);    
    wxPageSetupDialogData *data = (argCount >= 2 ? (wxPageSetupDialogData*)getuserdatatype(L, 2, s_wxPageSetupDialogData) : NULL);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxPageSetupDialog(parent, data);
    pushuserdatatype(L, s_wxPageSetupDialog, returns);
    return 1;
}

// wxPageSetupDialogData& GetPageSetupData()
static int LUACALL wxPageSetupDialog_GetPageSetupData(lua_State *L)
{    
    wxPageSetupDialogData *returns;
    wxPageSetupDialog *self = (wxPageSetupDialog*)getuserdatatype(L, 1, s_wxPageSetupDialog);
    returns = &self->GetPageSetupData();
    pushuserdatatype(L, s_wxPageSetupDialogData, returns);
    return 1;
}

// int ShowModal()
static int LUACALL wxPageSetupDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxPageSetupDialog *self = (wxPageSetupDialog*)getuserdatatype(L, 1, s_wxPageSetupDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxPrintDialog_destructor(lua_State *)
{
    return 0;
}

// wxPrintDialog(wxWindow* parent, wxPrintDialogData* data = NULL)
static int LUACALL wxPrintDialog_constructor(lua_State *L)
{    
    wxPrintDialog *returns;
    int argCount = lua_gettop(L);    
    wxPrintDialogData *data = (argCount >= 2 ? (wxPrintDialogData*)getuserdatatype(L, 2, s_wxPrintDialogData) : NULL);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxPrintDialog(parent, data);
    pushuserdatatype(L, s_wxPrintDialog, returns);
    return 1;
}

// wxPrintDialogData& GetPrintDialogData()
static int LUACALL wxPrintDialog_GetPrintDialogData(lua_State *L)
{    
    wxPrintDialogData *returns;
    wxPrintDialog *self = (wxPrintDialog*)getuserdatatype(L, 1, s_wxPrintDialog);
    returns = &self->GetPrintDialogData();
    pushuserdatatype(L, s_wxPrintDialogData, returns);
    return 1;
}

// wxDC* GetPrintDC()
static int LUACALL wxPrintDialog_GetPrintDC(lua_State *L)
{    
    wxDC *returns;
    wxPrintDialog *self = (wxPrintDialog*)getuserdatatype(L, 1, s_wxPrintDialog);
    returns = self->GetPrintDC();
    pushuserdatatype(L, s_wxDC, returns);
    return 1;
}

// int ShowModal()
static int LUACALL wxPrintDialog_ShowModal(lua_State *L)
{    
    int returns;
    wxPrintDialog *self = (wxPrintDialog*)getuserdatatype(L, 1, s_wxPrintDialog);
    returns = self->ShowModal();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxPrintDialogData_destructor(lua_State *L)
{
    wxPrintDialogData * self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPrintDialogData_Delete(lua_State *L)
{
    wxPrintDialogData * self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPrintDialogData()
static int LUACALL wxPrintDialogData_constructor(lua_State *L)
{    
    wxPrintDialogData *returns;
    returns = new wxPrintDialogData();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPrintDialogData, returns);
    return 1;
}

// %constructor wxPrintDialogDataFromDialogData(wxPrintDialogData& dialogData)
static int LUACALL wxPrintDialogDataFromDialogData_constructor(lua_State *L)
{    
    wxPrintDialogData *returns;    
    wxPrintDialogData *dialogData = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = new wxPrintDialogData(*dialogData);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPrintDialogData, returns);
    return 1;
}

// %constructor wxPrintDialogDataFromPrintData(wxPrintData& data)
static int LUACALL wxPrintDialogDataFromPrintData_constructor(lua_State *L)
{    
    wxPrintDialogData *returns;    
    wxPrintData *data = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = new wxPrintDialogData(*data);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPrintDialogData, returns);
    return 1;
}

// void EnableHelp(bool flag)
static int LUACALL wxPrintDialogData_EnableHelp(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->EnableHelp(flag);
    return 0;
}

// void EnablePageNumbers(bool flag)
static int LUACALL wxPrintDialogData_EnablePageNumbers(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->EnablePageNumbers(flag);
    return 0;
}

// void EnablePrintToFile(bool flag)
static int LUACALL wxPrintDialogData_EnablePrintToFile(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->EnablePrintToFile(flag);
    return 0;
}

// void EnableSelection(bool flag)
static int LUACALL wxPrintDialogData_EnableSelection(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->EnableSelection(flag);
    return 0;
}

// bool GetAllPages()
static int LUACALL wxPrintDialogData_GetAllPages(lua_State *L)
{    
    bool returns;
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = self->GetAllPages();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetCollate()
static int LUACALL wxPrintDialogData_GetCollate(lua_State *L)
{    
    bool returns;
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = self->GetCollate();
    lua_pushboolean(L, returns);
    return 1;
}

// int GetFromPage()
static int LUACALL wxPrintDialogData_GetFromPage(lua_State *L)
{    
    int returns;
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = self->GetFromPage();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMinPage()
static int LUACALL wxPrintDialogData_GetMinPage(lua_State *L)
{    
    int returns;
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = self->GetMinPage();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMaxPage()
static int LUACALL wxPrintDialogData_GetMaxPage(lua_State *L)
{    
    int returns;
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = self->GetMaxPage();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetNoCopies()
static int LUACALL wxPrintDialogData_GetNoCopies(lua_State *L)
{    
    int returns;
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = self->GetNoCopies();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxPrintData& GetPrintData()
static int LUACALL wxPrintDialogData_GetPrintData(lua_State *L)
{    
    const wxPrintData *returns;
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = &self->GetPrintData();
    pushuserdatatype(L, s_wxPrintData, returns);
    return 1;
}

// bool GetPrintToFile()
static int LUACALL wxPrintDialogData_GetPrintToFile(lua_State *L)
{    
    bool returns;
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = self->GetPrintToFile();
    lua_pushboolean(L, returns);
    return 1;
}

// int GetToPage()
static int LUACALL wxPrintDialogData_GetToPage(lua_State *L)
{    
    int returns;
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    returns = self->GetToPage();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetCollate(bool flag)
static int LUACALL wxPrintDialogData_SetCollate(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetCollate(flag);
    return 0;
}

// void SetFromPage(int page)
static int LUACALL wxPrintDialogData_SetFromPage(lua_State *L)
{        
    int page = (int) getnumbertype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetFromPage(page);
    return 0;
}

// void SetMinPage(int page)
static int LUACALL wxPrintDialogData_SetMinPage(lua_State *L)
{        
    int page = (int) getnumbertype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetMinPage(page);
    return 0;
}

// void SetMaxPage(int page)
static int LUACALL wxPrintDialogData_SetMaxPage(lua_State *L)
{        
    int page = (int) getnumbertype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetMaxPage(page);
    return 0;
}

// void SetNoCopies(int n)
static int LUACALL wxPrintDialogData_SetNoCopies(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetNoCopies(n);
    return 0;
}

// void SetPrintData(const wxPrintData& printData)
static int LUACALL wxPrintDialogData_SetPrintData(lua_State *L)
{        
    const wxPrintData *printData = (wxPrintData*)getuserdatatype(L, 2, s_wxPrintData);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetPrintData(*printData);
    return 0;
}

// void SetPrintToFile(bool flag)
static int LUACALL wxPrintDialogData_SetPrintToFile(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetPrintToFile(flag);
    return 0;
}

// void SetSelection(bool flag)
static int LUACALL wxPrintDialogData_SetSelection(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetSelection(flag);
    return 0;
}

// void SetSetupDialog(bool flag)
static int LUACALL wxPrintDialogData_SetSetupDialog(lua_State *L)
{        
    bool flag = getbooleantype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetSetupDialog(flag);
    return 0;
}

// void SetToPage(int page)
static int LUACALL wxPrintDialogData_SetToPage(lua_State *L)
{        
    int page = (int) getnumbertype(L, 2);
    wxPrintDialogData *self = (wxPrintDialogData*)getuserdatatype(L, 1, s_wxPrintDialogData);
    self->SetToPage(page);
    return 0;
}

static int LUACALL wxPreviewCanvas_destructor(lua_State *)
{
    return 0;
}

// wxPreviewCanvas(wxPrintPreview *preview, wxWindow *parent, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "canvas")
static int LUACALL wxPreviewCanvas_constructor(lua_State *L)
{    
    wxPreviewCanvas *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("canvas"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : 0);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxPrintPreview *preview = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = new wxPreviewCanvas(preview, parent, *pos, *size, style, name);
    pushuserdatatype(L, s_wxPreviewCanvas, returns);
    return 1;
}

static int LUACALL wxPrintPreview_destructor(lua_State *)
{
    return 0;
}

// wxPrintPreview(wxLuaPrintout* printout, wxLuaPrintout* printoutForPrinting, wxPrintData* data=NULL)
static int LUACALL wxPrintPreview_constructor(lua_State *L)
{
    wxPrintPreview *returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPrintData* data=NULL
    wxPrintData *data = (argCount >= 3 ? (wxPrintData *) getuserdatatype(L, 3, s_wxPrintData) : NULL);
    // wxLuaPrintout* printoutForPrinting
    wxLuaPrintout *printoutForPrinting = (argCount >= 2 ? (wxLuaPrintout *) getuserdatatype(L, 2, s_wxLuaPrintout) : NULL);
    // wxLuaPrintout* printout
    wxLuaPrintout *printout = (wxLuaPrintout *) getuserdatatype(L, 1, s_wxLuaPrintout);
    // when the wxPrintPreview constructor is called, the
    // object takes over ownership of the wxPrintout objects, therefore
    // we must disconnect them from our tracking list
    if (printoutForPrinting != NULL)
        removeTrackedMemory(L, printoutForPrinting, false);
    removeTrackedMemory(L, printout, false);
    // call constructor
    returns = new wxPrintPreview(printout, printoutForPrinting, data);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxPrintPreview, returns );
    // return the number of parameters
    return 1;
}

// bool DrawBlankPage(wxPreviewCanvas* window, wxDC& dc)
static int LUACALL wxPrintPreview_DrawBlankPage(lua_State *L)
{    
    bool returns;    
    wxDC *dc = (wxDC*)getuserdatatype(L, 3, s_wxDC);
    wxPreviewCanvas *window = (wxPreviewCanvas*)getuserdatatype(L, 2, s_wxPreviewCanvas);
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->DrawBlankPage(window, *dc);
    lua_pushboolean(L, returns);
    return 1;
}

// wxWindow* GetCanvas()
static int LUACALL wxPrintPreview_GetCanvas(lua_State *L)
{    
    wxWindow *returns;
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->GetCanvas();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// int GetCurrentPage()
static int LUACALL wxPrintPreview_GetCurrentPage(lua_State *L)
{    
    int returns;
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->GetCurrentPage();
    lua_pushnumber(L, returns);
    return 1;
}

// wxFrame * GetFrame()
static int LUACALL wxPrintPreview_GetFrame(lua_State *L)
{    
    wxFrame *returns;
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->GetFrame();
    pushuserdatatype(L, s_wxFrame, returns);
    return 1;
}

// int GetMaxPage()
static int LUACALL wxPrintPreview_GetMaxPage(lua_State *L)
{    
    int returns;
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->GetMaxPage();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMinPage()
static int LUACALL wxPrintPreview_GetMinPage(lua_State *L)
{    
    int returns;
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->GetMinPage();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPrintout * GetPrintout()
static int LUACALL wxPrintPreview_GetPrintout(lua_State *L)
{    
    wxPrintout *returns;
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->GetPrintout();
    pushuserdatatype(L, s_wxPrintout, returns);
    return 1;
}

// wxPrintout * GetPrintoutForPrinting()
static int LUACALL wxPrintPreview_GetPrintoutForPrinting(lua_State *L)
{    
    wxPrintout *returns;
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->GetPrintoutForPrinting();
    pushuserdatatype(L, s_wxPrintout, returns);
    return 1;
}

// bool Ok()
static int LUACALL wxPrintPreview_Ok(lua_State *L)
{    
    bool returns;
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// bool PaintPage(wxPreviewCanvas* window, wxDC &dc)
static int LUACALL wxPrintPreview_PaintPage(lua_State *L)
{    
    bool returns;    
    wxDC *dc = (wxDC*)getuserdatatype(L, 3, s_wxDC);
    wxPreviewCanvas *window = (wxPreviewCanvas*)getuserdatatype(L, 2, s_wxPreviewCanvas);
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->PaintPage(window, *dc);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Print(bool prompt)
static int LUACALL wxPrintPreview_Print(lua_State *L)
{    
    bool returns;    
    bool prompt = getbooleantype(L, 2);
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->Print(prompt);
    lua_pushboolean(L, returns);
    return 1;
}

// bool RenderPage(int pageNum)
static int LUACALL wxPrintPreview_RenderPage(lua_State *L)
{    
    bool returns;    
    int pageNum = (int) getnumbertype(L, 2);
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = self->RenderPage(pageNum);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetCanvas(wxPreviewCanvas* window)
static int LUACALL wxPrintPreview_SetCanvas(lua_State *L)
{        
    wxPreviewCanvas *window = (wxPreviewCanvas*)getuserdatatype(L, 2, s_wxPreviewCanvas);
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    self->SetCanvas(window);
    return 0;
}

// void SetCurrentPage(int pageNum)
static int LUACALL wxPrintPreview_SetCurrentPage(lua_State *L)
{        
    int pageNum = (int) getnumbertype(L, 2);
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    self->SetCurrentPage(pageNum);
    return 0;
}

// void SetFrame(wxFrame *frame)
static int LUACALL wxPrintPreview_SetFrame(lua_State *L)
{        
    wxFrame *frame = (wxFrame*)getuserdatatype(L, 2, s_wxFrame);
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    self->SetFrame(frame);
    return 0;
}

// void SetPrintout(wxLuaPrintout *printout)
static int LUACALL wxPrintPreview_SetPrintout(lua_State *L)
{        
    wxLuaPrintout *printout = (wxLuaPrintout*)getuserdatatype(L, 2, s_wxLuaPrintout);
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    self->SetPrintout(printout);
    return 0;
}

// void SetZoom(int percent)
static int LUACALL wxPrintPreview_SetZoom(lua_State *L)
{        
    int percent = (int) getnumbertype(L, 2);
    wxPrintPreview *self = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    self->SetZoom(percent);
    return 0;
}

static int LUACALL wxPreviewFrame_destructor(lua_State *)
{
    return 0;
}

// wxPreviewFrame(wxPrintPreview *preview, wxFrame *parent, const wxString &title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString &name = "frame")
static int LUACALL wxPreviewFrame_constructor(lua_State *L)
{    
    wxPreviewFrame *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("frame"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxDEFAULT_FRAME_STYLE);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 3));
    wxFrame *parent = (wxFrame*)getuserdatatype(L, 2, s_wxFrame);
    wxPrintPreview *preview = (wxPrintPreview*)getuserdatatype(L, 1, s_wxPrintPreview);
    returns = new wxPreviewFrame(preview, parent, title, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxPreviewFrame, returns);
    return 1;
}

// void CreateControlBar()
static int LUACALL wxPreviewFrame_CreateControlBar(lua_State *L)
{    
    wxPreviewFrame *self = (wxPreviewFrame*)getuserdatatype(L, 1, s_wxPreviewFrame);
    self->CreateControlBar();
    return 0;
}

// void CreateCanvas()
static int LUACALL wxPreviewFrame_CreateCanvas(lua_State *L)
{    
    wxPreviewFrame *self = (wxPreviewFrame*)getuserdatatype(L, 1, s_wxPreviewFrame);
    self->CreateCanvas();
    return 0;
}

// void Initialize()
static int LUACALL wxPreviewFrame_Initialize(lua_State *L)
{    
    wxPreviewFrame *self = (wxPreviewFrame*)getuserdatatype(L, 1, s_wxPreviewFrame);
    self->Initialize();
    return 0;
}

static int LUACALL wxPrinterDC_destructor(lua_State *L)
{
    wxPrinterDC * self = (wxPrinterDC*)getuserdatatype(L, 1, s_wxPrinterDC);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPrinterDC_Delete(lua_State *L)
{
    wxPrinterDC * self = (wxPrinterDC*)getuserdatatype(L, 1, s_wxPrinterDC);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPrinterDC(const wxPrintData& printData)
static int LUACALL wxPrinterDC_constructor(lua_State *L)
{    
    wxPrinterDC *returns;    
    const wxPrintData *printData = (wxPrintData*)getuserdatatype(L, 1, s_wxPrintData);
    returns = new wxPrinterDC(*printData);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPrinterDC, returns);
    return 1;
}

static int LUACALL wxClipboard_destructor(lua_State *)
{
    return 0;
}

// void UsePrimarySelection( bool primary = FALSE )
static int LUACALL wxClipboard_UsePrimarySelection(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool primary = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    self->UsePrimarySelection(primary);
    return 0;
}

// bool Flush()
static int LUACALL wxClipboard_Flush(lua_State *L)
{    
    bool returns;
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    returns = self->Flush();
    lua_pushboolean(L, returns);
    return 1;
}

// void Clear()
static int LUACALL wxClipboard_Clear(lua_State *L)
{    
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    self->Clear();
    return 0;
}

// bool GetData( wxDataObject& data )
static int LUACALL wxClipboard_GetData(lua_State *L)
{    
    bool returns;    
    wxDataObject *data = (wxDataObject*)getuserdatatype(L, 2, s_wxDataObject);
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    returns = self->GetData(*data);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsSupported( const wxDataFormat& format )
static int LUACALL wxClipboard_IsSupported(lua_State *L)
{    
    bool returns;    
    const wxDataFormat *format = (wxDataFormat*)getuserdatatype(L, 2, s_wxDataFormat);
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    returns = self->IsSupported(*format);
    lua_pushboolean(L, returns);
    return 1;
}

// bool SetData( wxDataObject *data )
static int LUACALL wxClipboard_SetData(lua_State *L)
{    
    bool returns;    
    wxDataObject *data = (wxDataObject*)getuserdatatype(L, 2, s_wxDataObject);
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    returns = self->SetData(data);
    lua_pushboolean(L, returns);
    return 1;
}

// bool AddData( wxDataObject *data )
static int LUACALL wxClipboard_AddData(lua_State *L)
{    
    bool returns;    
    wxDataObject *data = (wxDataObject*)getuserdatatype(L, 2, s_wxDataObject);
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    returns = self->AddData(data);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsOpened() const
static int LUACALL wxClipboard_IsOpened(lua_State *L)
{    
    bool returns;
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    returns = self->IsOpened();
    lua_pushboolean(L, returns);
    return 1;
}

// void Close()
static int LUACALL wxClipboard_Close(lua_State *L)
{    
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    self->Close();
    return 0;
}

// bool Open()
static int LUACALL wxClipboard_Open(lua_State *L)
{    
    bool returns;
    wxClipboard *self = (wxClipboard*)getuserdatatype(L, 1, s_wxClipboard);
    returns = self->Open();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxDataFormat_destructor(lua_State *L)
{
    wxDataFormat * self = (wxDataFormat*)getuserdatatype(L, 1, s_wxDataFormat);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxDataFormat_Delete(lua_State *L)
{
    wxDataFormat * self = (wxDataFormat*)getuserdatatype(L, 1, s_wxDataFormat);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxDataFormat(wxDataFormatId format = wxDF_INVALID)
static int LUACALL wxDataFormat_constructor(lua_State *L)
{    
    wxDataFormat *returns;
    int argCount = lua_gettop(L);    
    wxDataFormatId format = (argCount >= 1 ? (wxDataFormatId) getenumerationtype(L, 1) : wxDF_INVALID);
    returns = new wxDataFormat(format);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDataFormat, returns);
    return 1;
}

// %constructor wxDataFormatUser(const wxString &format)
static int LUACALL wxDataFormatUser_constructor(lua_State *L)
{    
    wxDataFormat *returns;    
    wxString format = lua2wx(getstringtype(L, 1));
    returns = new wxDataFormat(format);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDataFormat, returns);
    return 1;
}

// wxString GetId() const
static int LUACALL wxDataFormat_GetId(lua_State *L)
{    
    wxString returns;
    wxDataFormat *self = (wxDataFormat*)getuserdatatype(L, 1, s_wxDataFormat);
    returns = self->GetId();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxDataFormatId GetType() const
static int LUACALL wxDataFormat_GetType(lua_State *L)
{
    wxDataFormatId returns;
    // get this
    wxDataFormat *self = ( wxDataFormat * ) getuserdatatype(L, 1, s_wxDataFormat );
    // call GetType
    returns = (wxDataFormatId) self->GetType();
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}

// void SetId(const wxString &format)
static int LUACALL wxDataFormat_SetId(lua_State *L)
{        
    wxString format = lua2wx(getstringtype(L, 2));
    wxDataFormat *self = (wxDataFormat*)getuserdatatype(L, 1, s_wxDataFormat);
    self->SetId(format);
    return 0;
}

// void SetType(wxDataFormatId format)
static int LUACALL wxDataFormat_SetType(lua_State *L)
{        
    wxDataFormatId format = (wxDataFormatId) getenumerationtype(L, 2);
    wxDataFormat *self = (wxDataFormat*)getuserdatatype(L, 1, s_wxDataFormat);
    self->SetType(format);
    return 0;
}

static int LUACALL wxDataObject_destructor(lua_State *)
{
    return 0;
}

// virtual void GetAllFormats( wxDataFormat *formats, wxDataObject::Direction dir = wxDataObject::Get) const
static int LUACALL wxDataObject_GetAllFormats(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDataObject::Direction dir = wxDataObject::Get
    wxDataObject::Direction dir = (argCount >= 2 ? (wxDataObject::Direction)(int) getnumbertype(L, 2) : wxDataObject::Get);
    // get this
    wxDataObject *self = ( wxDataObject * ) getuserdatatype(L, 1, s_wxDataObject );
    // wxDataFormat *formats
    int idx, formatCount = self->GetFormatCount(dir);
    if (formatCount > 0)
    {
        wxDataFormat *formats = new wxDataFormat[formatCount];
        if (formats != NULL)
        {
            // call GetAllFormats
            self->GetAllFormats(formats, dir);
            // return the number of parameters
            lua_newtable(L);
            for (idx = 0; idx < formatCount; ++idx)
            {
                wxDataFormat *pFormat = new wxDataFormat(formats[idx]);
                pushuserdatatype(L, s_wxDataFormat, pFormat);
                lua_rawseti(L, -2, idx + 1);
            }
            delete[] formats;
            return 1;
        }
    }
    return 0;
}

// virtual bool GetDataHere(const wxDataFormat& format, void *buf ) const
static int LUACALL wxDataObject_GetDataHere(lua_State *L)
{
    bool returns;
    // const wxDataFormat& format
    const wxDataFormat *format = (wxDataFormat *) getuserdatatype(L, 2, s_wxDataFormat);
    // get this
    wxDataObject *self = ( wxDataObject * ) getuserdatatype(L, 1, s_wxDataObject );
    size_t size = self->GetDataSize(*format);
    void *buf = malloc(size);
    if (buf != NULL)
    {
        // call GetDataHere
        returns = self->GetDataHere(*format, buf);
        // push the result number
        lua_pushboolean(L, returns);
        // push the result string
        lua_pushlstring(L, (const char *) buf, size);
        free(buf);
        // return the number of parameters
        return 2;
    }
    return 0;
}

// virtual int GetDataSize(const wxDataFormat& format ) const
static int LUACALL wxDataObject_GetDataSize(lua_State *L)
{    
    int returns;    
    const wxDataFormat *format = (wxDataFormat*)getuserdatatype(L, 2, s_wxDataFormat);
    wxDataObject *self = (wxDataObject*)getuserdatatype(L, 1, s_wxDataObject);
    returns = self->GetDataSize(*format);
    lua_pushnumber(L, returns);
    return 1;
}

// virtual int GetFormatCount(wxDataObject::Direction dir = wxDataObject::Get) const
static int LUACALL wxDataObject_GetFormatCount(lua_State *L)
{    
    int returns;
    int argCount = lua_gettop(L);    
    wxDataObject::Direction dir = (argCount >= 2 ? (wxDataObject::Direction) getenumerationtype(L, 2) : wxDataObject::Get);
    wxDataObject *self = (wxDataObject*)getuserdatatype(L, 1, s_wxDataObject);
    returns = self->GetFormatCount(dir);
    lua_pushnumber(L, returns);
    return 1;
}

// virtual wxDataFormat GetPreferredFormat(wxDataObject::Direction dir = wxDataObject::Get) const
static int LUACALL wxDataObject_GetPreferredFormat(lua_State *L)
{    
    wxDataFormat *returns;
    int argCount = lua_gettop(L);    
    wxDataObject::Direction dir = (argCount >= 2 ? (wxDataObject::Direction) getenumerationtype(L, 2) : wxDataObject::Get);
    wxDataObject *self = (wxDataObject*)getuserdatatype(L, 1, s_wxDataObject);
    returns = new wxDataFormat(self->GetPreferredFormat(dir));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDataFormat, returns);
    return 1;
}

// virtual bool SetData( const wxDataFormat& format, int len, const void *buf )
static int LUACALL wxDataObject_SetData(lua_State *L)
{
    bool returns;
    // const void *buf
    const void *buf = lua_tostring(L, 3);
    // int len
    int len = lua_strlen(L, 3);
    // const wxDataFormat& format
    const wxDataFormat *format = (wxDataFormat *) getuserdatatype(L, 2, s_wxDataFormat);
    // get this
    wxDataObject *self = ( wxDataObject * ) getuserdatatype(L, 1, s_wxDataObject );
    // call SetData
    returns = self->SetData(*format, len, buf);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}

static int LUACALL wxDataObjectSimple_destructor(lua_State *L)
{
    wxDataObjectSimple * self = (wxDataObjectSimple*)getuserdatatype(L, 1, s_wxDataObjectSimple);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxDataObjectSimple_Delete(lua_State *L)
{
    wxDataObjectSimple * self = (wxDataObjectSimple*)getuserdatatype(L, 1, s_wxDataObjectSimple);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxDataObjectSimple(const wxDataFormat& format = wxFormatInvalid)
static int LUACALL wxDataObjectSimple_constructor(lua_State *L)
{    
    wxDataObjectSimple *returns;
    int argCount = lua_gettop(L);    
    const wxDataFormat *format = (argCount >= 1 ? (wxDataFormat*)getuserdatatype(L, 1, s_wxDataFormat) : &wxFormatInvalid);
    returns = new wxDataObjectSimple(*format);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDataObjectSimple, returns);
    return 1;
}

// const wxDataFormat& GetFormat() const
static int LUACALL wxDataObjectSimple_GetFormat(lua_State *L)
{    
    const wxDataFormat *returns;
    wxDataObjectSimple *self = (wxDataObjectSimple*)getuserdatatype(L, 1, s_wxDataObjectSimple);
    returns = &self->GetFormat();
    pushuserdatatype(L, s_wxDataFormat, returns);
    return 1;
}

// void SetFormat(const wxDataFormat& format)
static int LUACALL wxDataObjectSimple_SetFormat(lua_State *L)
{        
    const wxDataFormat *format = (wxDataFormat*)getuserdatatype(L, 2, s_wxDataFormat);
    wxDataObjectSimple *self = (wxDataObjectSimple*)getuserdatatype(L, 1, s_wxDataObjectSimple);
    self->SetFormat(*format);
    return 0;
}

// virtual size_t GetDataSize() const
static int LUACALL wxDataObjectSimple_GetDataSize(lua_State *L)
{    
    size_t returns;
    wxDataObjectSimple *self = (wxDataObjectSimple*)getuserdatatype(L, 1, s_wxDataObjectSimple);
    returns = self->GetDataSize();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual bool GetDataHere(void *buf) const
static int LUACALL wxDataObjectSimple_GetDataHere(lua_State *L)
{
    bool returns;
    // get this
    wxDataObjectSimple *self = ( wxDataObjectSimple * ) getuserdatatype(L, 1, s_wxDataObjectSimple );
    size_t size = self->GetDataSize();
    void *buf = malloc(size);
    if (buf != NULL)
    {
        // call GetDataHere
        returns = self->GetDataHere(buf);
        // push the result number
        lua_pushboolean(L, returns);
        // push the result string
        lua_pushlstring(L, (const char *) buf, size);
        free(buf);
        // return the number of parameters
        return 2;
    }
    return 0;
}

// virtual bool SetData(size_t len, const void *buf)
static int LUACALL wxDataObjectSimple_SetData(lua_State *L)
{
    bool returns;
    // const void *buf
    const void *buf = lua_tostring(L, 2);
    // size_t len
    size_t len = (size_t) lua_strlen(L, 2);
    // get this
    wxDataObjectSimple *self = ( wxDataObjectSimple * ) getuserdatatype(L, 1, s_wxDataObjectSimple );
    // call SetData
    returns = self->SetData(len, buf);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}

static int LUACALL wxDataObjectComposite_destructor(lua_State *L)
{
    wxDataObjectComposite * self = (wxDataObjectComposite*)getuserdatatype(L, 1, s_wxDataObjectComposite);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxDataObjectComposite_Delete(lua_State *L)
{
    wxDataObjectComposite * self = (wxDataObjectComposite*)getuserdatatype(L, 1, s_wxDataObjectComposite);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxDataObjectComposite()
static int LUACALL wxDataObjectComposite_constructor(lua_State *L)
{    
    wxDataObjectComposite *returns;
    returns = new wxDataObjectComposite();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDataObjectComposite, returns);
    return 1;
}

// void Add( wxDataObjectSimple *dataObject, bool preferred = FALSE)
static int LUACALL wxDataObjectComposite_Add(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool preferred = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    wxDataObjectSimple *dataObject = (wxDataObjectSimple*)getuserdatatype(L, 2, s_wxDataObjectSimple);
    wxDataObjectComposite *self = (wxDataObjectComposite*)getuserdatatype(L, 1, s_wxDataObjectComposite);
    self->Add(dataObject, preferred);
    return 0;
}

static int LUACALL wxFileDataObject_destructor(lua_State *L)
{
    wxFileDataObject * self = (wxFileDataObject*)getuserdatatype(L, 1, s_wxFileDataObject);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFileDataObject_Delete(lua_State *L)
{
    wxFileDataObject * self = (wxFileDataObject*)getuserdatatype(L, 1, s_wxFileDataObject);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxFileDataObject()
static int LUACALL wxFileDataObject_constructor(lua_State *L)
{    
    wxFileDataObject *returns;
    returns = new wxFileDataObject();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFileDataObject, returns);
    return 1;
}

// const wxArrayString& GetFilenames() const
static int LUACALL wxFileDataObject_GetFilenames(lua_State *L)
{    
    const wxArrayString *returns;
    wxFileDataObject *self = (wxFileDataObject*)getuserdatatype(L, 1, s_wxFileDataObject);
    returns = &self->GetFilenames();
    pushuserdatatype(L, s_wxArrayString, returns);
    return 1;
}

static int LUACALL wxTextDataObject_destructor(lua_State *)
{
    return 0;
}

// wxTextDataObject(const wxString& text = "")
static int LUACALL wxTextDataObject_constructor(lua_State *L)
{    
    wxTextDataObject *returns;
    int argCount = lua_gettop(L);    
    wxString text = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxT(""));
    returns = new wxTextDataObject(text);
    pushuserdatatype(L, s_wxTextDataObject, returns);
    return 1;
}

// virtual size_t GetTextLength() const
static int LUACALL wxTextDataObject_GetTextLength(lua_State *L)
{    
    size_t returns;
    wxTextDataObject *self = (wxTextDataObject*)getuserdatatype(L, 1, s_wxTextDataObject);
    returns = self->GetTextLength();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual wxString GetText() const
static int LUACALL wxTextDataObject_GetText(lua_State *L)
{    
    wxString returns;
    wxTextDataObject *self = (wxTextDataObject*)getuserdatatype(L, 1, s_wxTextDataObject);
    returns = self->GetText();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// virtual void SetText(const wxString& text)
static int LUACALL wxTextDataObject_SetText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxTextDataObject *self = (wxTextDataObject*)getuserdatatype(L, 1, s_wxTextDataObject);
    self->SetText(text);
    return 0;
}

static int LUACALL wxBitmapDataObject_destructor(lua_State *)
{
    return 0;
}

// wxBitmapDataObject(const wxBitmap& bitmap = wxNullBitmap)
static int LUACALL wxBitmapDataObject_constructor(lua_State *L)
{    
    wxBitmapDataObject *returns;
    int argCount = lua_gettop(L);    
    const wxBitmap *bitmap = (argCount >= 1 ? (wxBitmap*)getuserdatatype(L, 1, s_wxBitmap) : &wxNullBitmap);
    returns = new wxBitmapDataObject(*bitmap);
    pushuserdatatype(L, s_wxBitmapDataObject, returns);
    return 1;
}

// virtual wxBitmap GetBitmap() const
static int LUACALL wxBitmapDataObject_GetBitmap(lua_State *L)
{    
    wxBitmap *returns;
    wxBitmapDataObject *self = (wxBitmapDataObject*)getuserdatatype(L, 1, s_wxBitmapDataObject);
    returns = new wxBitmap(self->GetBitmap());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// virtual void SetBitmap(const wxBitmap& bitmap)
static int LUACALL wxBitmapDataObject_SetBitmap(lua_State *L)
{        
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxBitmapDataObject *self = (wxBitmapDataObject*)getuserdatatype(L, 1, s_wxBitmapDataObject);
    self->SetBitmap(*bitmap);
    return 0;
}

static int LUACALL wxCustomDataObject_destructor(lua_State *)
{
    return 0;
}

// wxCustomDataObject(const wxDataFormat& format = wxFormatInvalid)
static int LUACALL wxCustomDataObject_constructor(lua_State *L)
{    
    wxCustomDataObject *returns;
    int argCount = lua_gettop(L);    
    const wxDataFormat *format = (argCount >= 1 ? (wxDataFormat*)getuserdatatype(L, 1, s_wxDataFormat) : &wxFormatInvalid);
    returns = new wxCustomDataObject(*format);
    pushuserdatatype(L, s_wxCustomDataObject, returns);
    return 1;
}

// void TakeData(size_t size, void *data);
static int LUACALL wxCustomDataObject_TakeData(lua_State *L)
{        
    void *data = (void*)ttouserdata(L, 3);
    size_t size = (size_t) getnumbertype(L, 2);
    wxCustomDataObject *self = (wxCustomDataObject*)getuserdatatype(L, 1, s_wxCustomDataObject);
    self->TakeData(size, data);
    return 0;
}

// virtual void *Alloc(size_t size);
static int LUACALL wxCustomDataObject_Alloc(lua_State *L)
{    
    void * returns;    
    size_t size = (size_t) getnumbertype(L, 2);
    wxCustomDataObject *self = (wxCustomDataObject*)getuserdatatype(L, 1, s_wxCustomDataObject);
    returns = self->Alloc(size);
    lua_pushlightuserdata(L, returns);
    return 1;
}

// virtual void Free();
static int LUACALL wxCustomDataObject_Free(lua_State *L)
{    
    wxCustomDataObject *self = (wxCustomDataObject*)getuserdatatype(L, 1, s_wxCustomDataObject);
    self->Free();
    return 0;
}

// virtual size_t GetSize() const { return m_size; }
static int LUACALL wxCustomDataObject_GetSize(lua_State *L)
{    
    size_t returns;
    wxCustomDataObject *self = (wxCustomDataObject*)getuserdatatype(L, 1, s_wxCustomDataObject);
    returns = self->GetSize();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual void *GetData() const { return m_data; }
static int LUACALL wxCustomDataObject_GetData(lua_State *L)
{    
    void * returns;
    wxCustomDataObject *self = (wxCustomDataObject*)getuserdatatype(L, 1, s_wxCustomDataObject);
    returns = self->GetData();
    lua_pushlightuserdata(L, returns);
    return 1;
}

// %builtin bool wxIsDragResultOk(wxDragResult res)
static int LUACALL builtin_wxIsDragResultOk(lua_State *L)
{    
    bool returns;    
    wxDragResult res = (wxDragResult) getenumerationtype(L, 2);
    returns = wxIsDragResultOk(res);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxDropTarget_destructor(lua_State *)
{
    return 0;
}

// virtual void GetData()
static int LUACALL wxDropTarget_GetData(lua_State *L)
{    
    wxDropTarget *self = (wxDropTarget*)getuserdatatype(L, 1, s_wxDropTarget);
    self->GetData();
    return 0;
}

// virtual wxDragResult OnData(wxCoord x, wxCoord y, wxDragResult def)
static int LUACALL wxDropTarget_OnData(lua_State *L)
{    
    wxDragResult returns;    
    wxDragResult def = (wxDragResult) getenumerationtype(L, 4);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDropTarget *self = (wxDropTarget*)getuserdatatype(L, 1, s_wxDropTarget);
    returns = self->OnData(x, y, def);
    lua_pushnumber(L, returns);
    return 1;
}

// virtual bool OnDrop(wxCoord x, wxCoord y)
static int LUACALL wxDropTarget_OnDrop(lua_State *L)
{    
    bool returns;    
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDropTarget *self = (wxDropTarget*)getuserdatatype(L, 1, s_wxDropTarget);
    returns = self->OnDrop(x, y);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual wxDragResult OnEnter(wxCoord x, wxCoord y, wxDragResult def)
static int LUACALL wxDropTarget_OnEnter(lua_State *L)
{    
    wxDragResult returns;    
    wxDragResult def = (wxDragResult) getenumerationtype(L, 4);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDropTarget *self = (wxDropTarget*)getuserdatatype(L, 1, s_wxDropTarget);
    returns = self->OnEnter(x, y, def);
    lua_pushnumber(L, returns);
    return 1;
}

// virtual wxDragResult OnDragOver(wxCoord x, wxCoord y, wxDragResult def)
static int LUACALL wxDropTarget_OnDragOver(lua_State *L)
{    
    wxDragResult returns;    
    wxDragResult def = (wxDragResult) getenumerationtype(L, 4);
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDropTarget *self = (wxDropTarget*)getuserdatatype(L, 1, s_wxDropTarget);
    returns = self->OnDragOver(x, y, def);
    lua_pushnumber(L, returns);
    return 1;
}

// virtual void OnLeave()
static int LUACALL wxDropTarget_OnLeave(lua_State *L)
{    
    wxDropTarget *self = (wxDropTarget*)getuserdatatype(L, 1, s_wxDropTarget);
    self->OnLeave();
    return 0;
}

// void SetDataObject(wxDataObject* data)
static int LUACALL wxDropTarget_SetDataObject(lua_State *L)
{        
    wxDataObject *data = (wxDataObject*)getuserdatatype(L, 2, s_wxDataObject);
    wxDropTarget *self = (wxDropTarget*)getuserdatatype(L, 1, s_wxDropTarget);
    self->SetDataObject(data);
    return 0;
}

static int LUACALL wxDropSource_destructor(lua_State *L)
{
    wxDropSource * self = (wxDropSource*)getuserdatatype(L, 1, s_wxDropSource);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxDropSource_Delete(lua_State *L)
{
    wxDropSource * self = (wxDropSource*)getuserdatatype(L, 1, s_wxDropSource);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %win wxDropSource(wxWindow* win = NULL, const wxCursor& iconCopy = wxNullCursor, const wxCursor& iconMove = wxNullCursor, const wxCursor& iconStop = wxNullCursor)
static int LUACALL wxDropSource_constructor(lua_State *L)
{    
    wxDropSource *returns;
    int argCount = lua_gettop(L);    
    const wxCursor *iconStop = (argCount >= 4 ? (wxCursor*)getuserdatatype(L, 4, s_wxCursor) : &wxNullCursor);
    const wxCursor *iconMove = (argCount >= 3 ? (wxCursor*)getuserdatatype(L, 3, s_wxCursor) : &wxNullCursor);
    const wxCursor *iconCopy = (argCount >= 2 ? (wxCursor*)getuserdatatype(L, 2, s_wxCursor) : &wxNullCursor);
    wxWindow *win = (argCount >= 1 ? (wxWindow*)getuserdatatype(L, 1, s_wxWindow) : NULL);
    returns = new wxDropSource(win, *iconCopy, *iconMove, *iconStop);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDropSource, returns);
    return 1;
}

// %win %constructor wxDropSourceData(wxDataObject& data, wxWindow* win = NULL, const wxCursor& iconCopy = wxNullCursor, const wxCursor& iconMove = wxNullCursor, const wxCursor& iconStop = wxNullCursor)
static int LUACALL wxDropSourceData_constructor(lua_State *L)
{    
    wxDropSource *returns;
    int argCount = lua_gettop(L);    
    const wxCursor *iconStop = (argCount >= 5 ? (wxCursor*)getuserdatatype(L, 5, s_wxCursor) : &wxNullCursor);
    const wxCursor *iconMove = (argCount >= 4 ? (wxCursor*)getuserdatatype(L, 4, s_wxCursor) : &wxNullCursor);
    const wxCursor *iconCopy = (argCount >= 3 ? (wxCursor*)getuserdatatype(L, 3, s_wxCursor) : &wxNullCursor);
    wxWindow *win = (argCount >= 2 ? (wxWindow*)getuserdatatype(L, 2, s_wxWindow) : NULL);
    wxDataObject *data = (wxDataObject*)getuserdatatype(L, 1, s_wxDataObject);
    returns = new wxDropSource(*data, win, *iconCopy, *iconMove, *iconStop);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDropSource, returns);
    return 1;
}

// void SetData(wxDataObject& data)
static int LUACALL wxDropSource_SetData(lua_State *L)
{        
    wxDataObject *data = (wxDataObject*)getuserdatatype(L, 2, s_wxDataObject);
    wxDropSource *self = (wxDropSource*)getuserdatatype(L, 1, s_wxDropSource);
    self->SetData(*data);
    return 0;
}

// virtual wxDragResult DoDragDrop(bool allowMove = FALSE)
static int LUACALL wxDropSource_DoDragDrop(lua_State *L)
{    
    wxDragResult returns;
    int argCount = lua_gettop(L);    
    bool allowMove = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxDropSource *self = (wxDropSource*)getuserdatatype(L, 1, s_wxDropSource);
    returns = self->DoDragDrop(allowMove);
    lua_pushnumber(L, returns);
    return 1;
}

// virtual bool GiveFeedback(wxDragResult effect)
static int LUACALL wxDropSource_GiveFeedback(lua_State *L)
{    
    bool returns;    
    wxDragResult effect = (wxDragResult) getenumerationtype(L, 2);
    wxDropSource *self = (wxDropSource*)getuserdatatype(L, 1, s_wxDropSource);
    returns = self->GiveFeedback(effect);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxDropFilesEvent_destructor(lua_State *L)
{
    wxDropFilesEvent * self = (wxDropFilesEvent*)getuserdatatype(L, 1, s_wxDropFilesEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxDropFilesEvent_Delete(lua_State *L)
{
    wxDropFilesEvent * self = (wxDropFilesEvent*)getuserdatatype(L, 1, s_wxDropFilesEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxString* GetFiles() const
static int LUACALL wxDropFilesEvent_GetFiles(lua_State *L)
{
    // get this
    wxDropFilesEvent *self = ( wxDropFilesEvent * ) getuserdatatype(L, 1, s_wxDropFilesEvent );
    // call GetFiles
    int       numFiles = self->GetNumberOfFiles();
    wxString *files    = self->GetFiles();
    lua_newtable(L);
    int idx;
    for (idx = 0; idx < numFiles; ++idx)
    {
        lua_pushstring(L, wx2lua(files[idx]));
        lua_rawseti(L, -2, idx + 1);
    }
    // return the number of parameters
    return 1;
}

// int GetNumberOfFiles() const
static int LUACALL wxDropFilesEvent_GetNumberOfFiles(lua_State *L)
{    
    int returns;
    wxDropFilesEvent *self = (wxDropFilesEvent*)getuserdatatype(L, 1, s_wxDropFilesEvent);
    returns = self->GetNumberOfFiles();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPoint GetPosition() const
static int LUACALL wxDropFilesEvent_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxDropFilesEvent *self = (wxDropFilesEvent*)getuserdatatype(L, 1, s_wxDropFilesEvent);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

static int LUACALL wxMetafile_destructor(lua_State *)
{
    return 0;
}

// wxMetafile(const wxString& filename = "")
static int LUACALL wxMetafile_constructor(lua_State *L)
{    
    wxMetafile *returns;
    int argCount = lua_gettop(L);    
    wxString filename = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxT(""));
    returns = new wxMetafile(filename);
    pushuserdatatype(L, s_wxMetafile, returns);
    return 1;
}

// bool Ok()
static int LUACALL wxMetafile_Ok(lua_State *L)
{    
    bool returns;
    wxMetafile *self = (wxMetafile*)getuserdatatype(L, 1, s_wxMetafile);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Play(wxDC *dc)
static int LUACALL wxMetafile_Play(lua_State *L)
{    
    bool returns;    
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    wxMetafile *self = (wxMetafile*)getuserdatatype(L, 1, s_wxMetafile);
    returns = self->Play(dc);
    lua_pushboolean(L, returns);
    return 1;
}

// bool SetClipboard(int width = 0, int height = 0)
static int LUACALL wxMetafile_SetClipboard(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int height = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    int width = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxMetafile *self = (wxMetafile*)getuserdatatype(L, 1, s_wxMetafile);
    returns = self->SetClipboard(width, height);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxMetafileDC_destructor(lua_State *L)
{
    wxMetafileDC * self = (wxMetafileDC*)getuserdatatype(L, 1, s_wxMetafileDC);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxMetafileDC_Delete(lua_State *L)
{
    wxMetafileDC * self = (wxMetafileDC*)getuserdatatype(L, 1, s_wxMetafileDC);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxMetafileDC(const wxString& filename = "")
static int LUACALL wxMetafileDC_constructor(lua_State *L)
{    
    wxMetafileDC *returns;
    int argCount = lua_gettop(L);    
    wxString filename = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxT(""));
    returns = new wxMetafileDC(filename);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxMetafileDC, returns);
    return 1;
}

// %win wxMetafile * Close()
static int LUACALL wxMetafileDC_Close(lua_State *L)
{    
    wxMetafile *returns;
    wxMetafileDC *self = (wxMetafileDC*)getuserdatatype(L, 1, s_wxMetafileDC);
    returns = self->Close();
    pushuserdatatype(L, s_wxMetafile, returns);
    return 1;
}

static int LUACALL wxConfigBase_destructor(lua_State *L)
{
    wxConfigBase * self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxConfigBase_Delete(lua_State *L)
{
    wxConfigBase * self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %constructor wxConfigGet(bool CreateOnDemand = TRUE)
static int LUACALL wxConfigGet_constructor(lua_State *L)
{
    wxConfigBase *returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool CreateOnDemand = TRUE
    bool CreateOnDemand = (argCount >= 1 ? getbooleantype(L, 1) : TRUE);
    // call constructor
    returns = wxConfigBase::Get(CreateOnDemand);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxConfig, returns );
    // return the number of parameters
    return 1;
}

// %constructor wxConfigCreate()
static int LUACALL wxConfigCreate_constructor(lua_State *L)
{
    wxConfigBase *returns;
    // call constructor
    returns = wxConfigBase::Create();
    // push the constructed class pointer
    pushuserdatatype(L, s_wxConfig, returns );
    // return the number of parameters
    return 1;
}

// static wxConfigBase * Set(wxConfigBase *pConfig = NULL)
static int LUACALL wxConfigBase_Set(lua_State *L)
{    
    wxConfigBase *returns;
    int argCount = lua_gettop(L);    
    wxConfigBase *pConfig = (argCount >= 2 ? (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase) : NULL);
    returns = wxConfigBase::Set(pConfig);
    pushuserdatatype(L, s_wxConfigBase, returns);
    return 1;
}

// static void DontCreateOnDemand()
static int LUACALL wxConfigBase_DontCreateOnDemand(lua_State *L)
{    
    wxConfigBase::DontCreateOnDemand();
    return 0;
}

// void Destroy()
static int LUACALL wxConfigBase_Destroy(lua_State *L)
{
    // get this
    wxConfigBase *self = ( wxConfigBase * ) getuserdatatype(L, 1, s_wxConfigBase );
    // call Destroy
    delete self;
    // return the number of parameters
    return 0;
}

// bool DeleteAll()
static int LUACALL wxConfigBase_DeleteAll(lua_State *L)
{    
    bool returns;
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->DeleteAll();
    lua_pushboolean(L, returns);
    return 1;
}

// bool DeleteEntry(const wxString& key, bool bDeleteGroupIfEmpty = TRUE)
static int LUACALL wxConfigBase_DeleteEntry(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool bDeleteGroupIfEmpty = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    wxString key = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->DeleteEntry(key, bDeleteGroupIfEmpty);
    lua_pushboolean(L, returns);
    return 1;
}

// bool DeleteGroup(const wxString& key)
static int LUACALL wxConfigBase_DeleteGroup(lua_State *L)
{    
    bool returns;    
    wxString key = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->DeleteGroup(key);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Exists(wxString& strName) const
static int LUACALL wxConfigBase_Exists(lua_State *L)
{    
    bool returns;    
    wxString strName = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->Exists(strName);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Flush(bool bCurrentOnly = FALSE)
static int LUACALL wxConfigBase_Flush(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool bCurrentOnly = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->Flush(bCurrentOnly);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetAppName() const
static int LUACALL wxConfigBase_GetAppName(lua_State *L)
{    
    wxString returns;
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->GetAppName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxConfigBase::EntryType GetEntryType(const wxString& name) const
static int LUACALL wxConfigBase_GetEntryType(lua_State *L)
{    
    wxConfigBase::EntryType returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->GetEntryType(name);
    lua_pushnumber(L, returns);
    return 1;
}

// bool GetFirstGroup(wxString& str, long& index) const
static int LUACALL wxConfigBase_GetFirstGroup(lua_State *L)
{    
    bool returns;    
    // long& index
    long index = (long) getnumbertype(L, 3);
    // wxString& str
    wxString str = lua2wx(getstringtype(L, 2));
    // get this
    wxConfigBase *self = ( wxConfigBase * ) getuserdatatype(L, 1, s_wxConfigBase );
    // call GetFirstGroup
    returns = self->GetFirstGroup(str, index);
    // push the result flag
    lua_pushnumber(L, index);
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 2;
}

// bool GetFirstEntry(wxString& str, long& index) const
static int LUACALL wxConfigBase_GetFirstEntry(lua_State *L)
{    
    bool returns;    
    // long& index
    long index = (long) getnumbertype(L, 3);
    // wxString& str
    wxString str = lua2wx(getstringtype(L, 2));
    // get this
    wxConfigBase *self = ( wxConfigBase * ) getuserdatatype(L, 1, s_wxConfigBase );
    // call GetFirstEntry
    returns = self->GetFirstEntry(str, index);
    // push the result flag
    lua_pushnumber(L, index);
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 2;
}

// bool GetNextGroup(wxString& str, long& index) const
static int LUACALL wxConfigBase_GetNextGroup(lua_State *L)
{    
    bool returns;    
    // long& index
    long index = (long) getnumbertype(L, 3);
    // wxString& str
    wxString str = lua2wx(getstringtype(L, 2));
    // get this
    wxConfigBase *self = ( wxConfigBase * ) getuserdatatype(L, 1, s_wxConfigBase );
    // call GetNextGroup
    returns = self->GetNextGroup(str, index);
    // push the result flag
    lua_pushnumber(L, index);
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 2;
}

// bool GetNextEntry(wxString& str, long& index) const
static int LUACALL wxConfigBase_GetNextEntry(lua_State *L)
{    
    bool returns;    
    // long& index
    long index = (long) getnumbertype(L, 3);
    // wxString& str
    wxString str = lua2wx(getstringtype(L, 2));
    // get this
    wxConfigBase *self = ( wxConfigBase * ) getuserdatatype(L, 1, s_wxConfigBase );
    // call GetNextEntry
    returns = self->GetNextEntry(str, index);
    // push the result flag
    lua_pushnumber(L, index);
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 2;
}

// unsigned int GetNumberOfEntries(bool bRecursive = FALSE) const
static int LUACALL wxConfigBase_GetNumberOfEntries(lua_State *L)
{    
    unsigned int returns;
    int argCount = lua_gettop(L);    
    bool bRecursive = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->GetNumberOfEntries(bRecursive);
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned int GetNumberOfGroups(bool bRecursive = FALSE) const
static int LUACALL wxConfigBase_GetNumberOfGroups(lua_State *L)
{    
    unsigned int returns;
    int argCount = lua_gettop(L);    
    bool bRecursive = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->GetNumberOfGroups(bRecursive);
    lua_pushnumber(L, returns);
    return 1;
}

// const wxString& GetPath() const
static int LUACALL wxConfigBase_GetPath(lua_State *L)
{    
    const wxString *returns;
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = &self->GetPath();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// wxString GetVendorName() const
static int LUACALL wxConfigBase_GetVendorName(lua_State *L)
{    
    wxString returns;
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->GetVendorName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool HasEntry(wxString& strName) const
static int LUACALL wxConfigBase_HasEntry(lua_State *L)
{    
    bool returns;    
    wxString strName = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->HasEntry(strName);
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasGroup(const wxString& strName) const
static int LUACALL wxConfigBase_HasGroup(lua_State *L)
{    
    bool returns;    
    wxString strName = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->HasGroup(strName);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsExpandingEnvVars() const
static int LUACALL wxConfigBase_IsExpandingEnvVars(lua_State *L)
{    
    bool returns;
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->IsExpandingEnvVars();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsRecordingDefaults() const
static int LUACALL wxConfigBase_IsRecordingDefaults(lua_State *L)
{    
    bool returns;
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->IsRecordingDefaults();
    lua_pushboolean(L, returns);
    return 1;
}

// wxString Read(const wxString& key, const wxString& defaultVal = "") const
static int LUACALL wxConfigBase_Read(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxString defaultVal = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    wxString key = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->Read(key, defaultVal);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %rename ReadInt long Read(const wxString& key, long defaultVal = 0) const
static int LUACALL wxConfigBase_ReadInt(lua_State *L)
{    
    long returns;
    int argCount = lua_gettop(L);    
    long defaultVal = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    wxString key = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->Read(key, defaultVal);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename ReadFloat double Read(const wxString& key, double defaultVal = 0) const
static int LUACALL wxConfigBase_ReadFloat(lua_State *L)
{
    double returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // double defaultVal = 0
    long defaultVal = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    // const wxString& key
    wxString key = lua2wx(getstringtype(L, 2));
    // get this
    wxConfigBase *self = ( wxConfigBase * ) getuserdatatype(L, 1, s_wxConfigBase );
    // call Read
    returns = self->Read(key, defaultVal);
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}

// bool RenameEntry(const wxString& oldName, const wxString& newName)
static int LUACALL wxConfigBase_RenameEntry(lua_State *L)
{    
    bool returns;    
    wxString newName = lua2wx(getstringtype(L, 3));
    wxString oldName = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->RenameEntry(oldName, newName);
    lua_pushboolean(L, returns);
    return 1;
}

// bool RenameGroup(const wxString& oldName, const wxString& newName)
static int LUACALL wxConfigBase_RenameGroup(lua_State *L)
{    
    bool returns;    
    wxString newName = lua2wx(getstringtype(L, 3));
    wxString oldName = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->RenameGroup(oldName, newName);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetExpandEnvVars (bool bDoIt = TRUE)
static int LUACALL wxConfigBase_SetExpandEnvVars(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool bDoIt = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    self->SetExpandEnvVars(bDoIt);
    return 0;
}

// void SetPath(const wxString& strPath)
static int LUACALL wxConfigBase_SetPath(lua_State *L)
{        
    wxString strPath = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    self->SetPath(strPath);
    return 0;
}

// void SetRecordDefaults(bool bDoIt = TRUE)
static int LUACALL wxConfigBase_SetRecordDefaults(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool bDoIt = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    self->SetRecordDefaults(bDoIt);
    return 0;
}

// bool Write(const wxString& key, wxString &value)
static int LUACALL wxConfigBase_Write(lua_State *L)
{    
    bool returns;    
    wxString value = lua2wx(getstringtype(L, 3));
    wxString key = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->Write(key, value);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename WriteInt bool Write(const wxString &key, long value)
static int LUACALL wxConfigBase_WriteInt(lua_State *L)
{    
    bool returns;    
    long value = (long) getnumbertype(L, 3);
    wxString key = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->Write(key, value);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename WriteFloat bool Write(const wxString &key, double value)
static int LUACALL wxConfigBase_WriteFloat(lua_State *L)
{    
    bool returns;    
    double value = (double) getnumbertype(L, 3);
    wxString key = lua2wx(getstringtype(L, 2));
    wxConfigBase *self = (wxConfigBase*)getuserdatatype(L, 1, s_wxConfigBase);
    returns = self->Write(key, value);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxConfig_destructor(lua_State *)
{
    return 0;
}

// wxConfig(const wxString& appName = wxEmptyString, const wxString& vendorName = wxEmptyString, const wxString& localFilename = wxEmptyString, const wxString& globalFilename = wxEmptyString, long style = 0)
static int LUACALL wxConfig_constructor(lua_State *L)
{    
    wxConfig *returns;
    int argCount = lua_gettop(L);    
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : 0);
    wxString globalFilename = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxString(wxEmptyString));
    wxString localFilename = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxString vendorName = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxString(wxEmptyString));
    wxString appName = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxString(wxEmptyString));
    returns = new wxConfig(appName, vendorName, localFilename, globalFilename, style);
    pushuserdatatype(L, s_wxConfig, returns);
    return 1;
}

static int LUACALL wxButton_destructor(lua_State *)
{
    return 0;
}

// wxButton(wxWindow *parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxButtonNameStr)
static int LUACALL wxButton_constructor(lua_State *L)
{    
    wxButton *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxString(wxButtonNameStr));
    const wxValidator *validator = (argCount >= 7 ? (wxValidator*)getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString label = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxButton(parent, id, label, *pos, *size, style, *validator, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxButton, returns);
    return 1;
}

// bool     Create(wxWindow *parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxButtonNameStr)
static int LUACALL wxButton_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxString(wxButtonNameStr));
    const wxValidator *validator = (argCount >= 8 ? (wxValidator*)getuserdatatype(L, 8, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : 0);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString label = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxButton *self = (wxButton*)getuserdatatype(L, 1, s_wxButton);
    returns = self->Create(parent, id, label, *pos, *size, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetLabel() const
static int LUACALL wxButton_GetLabel(lua_State *L)
{    
    wxString returns;
    wxButton *self = (wxButton*)getuserdatatype(L, 1, s_wxButton);
    returns = self->GetLabel();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// static wxSize GetDefaultSize()
static int LUACALL wxButton_GetDefaultSize(lua_State *L)
{    
    wxSize *returns;
    returns = new wxSize(wxButton::GetDefaultSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// void     SetDefault()
static int LUACALL wxButton_SetDefault(lua_State *L)
{    
    wxButton *self = (wxButton*)getuserdatatype(L, 1, s_wxButton);
    self->SetDefault();
    return 0;
}

// void     SetLabel(const wxString& label)
static int LUACALL wxButton_SetLabel(lua_State *L)
{        
    wxString label = lua2wx(getstringtype(L, 2));
    wxButton *self = (wxButton*)getuserdatatype(L, 1, s_wxButton);
    self->SetLabel(label);
    return 0;
}

static int LUACALL wxBitmapButton_destructor(lua_State *)
{
    return 0;
}

// wxBitmapButton( wxWindow* parent, wxWindowID id, const wxBitmap& bitmap, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxBU_AUTODRAW, const wxValidator& validator = wxDefaultValidator, const wxString& name = "button")
static int LUACALL wxBitmapButton_constructor(lua_State *L)
{    
    wxBitmapButton *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("button"));
    const wxValidator *validator = (argCount >= 7 ? (wxValidator*)getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxBU_AUTODRAW);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 3, s_wxBitmap);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxBitmapButton(parent, id, *bitmap, *pos, *size, style, *validator, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxBitmapButton, returns);
    return 1;
}

// bool      Create(wxWindow* parent, wxWindowID id, const wxBitmap& bitmap, const wxPoint& pos, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "button")
static int LUACALL wxBitmapButton_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxT("button"));
    const wxValidator *validator = (argCount >= 8 ? (wxValidator*)getuserdatatype(L, 8, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : 0);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 5, s_wxPoint);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 4, s_wxBitmap);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxBitmapButton *self = (wxBitmapButton*)getuserdatatype(L, 1, s_wxBitmapButton);
    returns = self->Create(parent, id, *bitmap, *pos, *size, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxBitmap& GetBitmapDisabled() const
static int LUACALL wxBitmapButton_GetBitmapDisabled(lua_State *L)
{    
    wxBitmap *returns;
    wxBitmapButton *self = (wxBitmapButton*)getuserdatatype(L, 1, s_wxBitmapButton);
    returns = &self->GetBitmapDisabled();
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// wxBitmap& GetBitmapFocus() const
static int LUACALL wxBitmapButton_GetBitmapFocus(lua_State *L)
{    
    wxBitmap *returns;
    wxBitmapButton *self = (wxBitmapButton*)getuserdatatype(L, 1, s_wxBitmapButton);
    returns = &self->GetBitmapFocus();
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// wxBitmap& GetBitmapLabel() const
static int LUACALL wxBitmapButton_GetBitmapLabel(lua_State *L)
{    
    wxBitmap *returns;
    wxBitmapButton *self = (wxBitmapButton*)getuserdatatype(L, 1, s_wxBitmapButton);
    returns = &self->GetBitmapLabel();
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// wxBitmap& GetBitmapSelected() const
static int LUACALL wxBitmapButton_GetBitmapSelected(lua_State *L)
{    
    wxBitmap *returns;
    wxBitmapButton *self = (wxBitmapButton*)getuserdatatype(L, 1, s_wxBitmapButton);
    returns = &self->GetBitmapSelected();
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// void      SetBitmapDisabled(const wxBitmap& bitmap)
static int LUACALL wxBitmapButton_SetBitmapDisabled(lua_State *L)
{        
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxBitmapButton *self = (wxBitmapButton*)getuserdatatype(L, 1, s_wxBitmapButton);
    self->SetBitmapDisabled(*bitmap);
    return 0;
}

// void      SetBitmapFocus(const wxBitmap& bitmap)
static int LUACALL wxBitmapButton_SetBitmapFocus(lua_State *L)
{        
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxBitmapButton *self = (wxBitmapButton*)getuserdatatype(L, 1, s_wxBitmapButton);
    self->SetBitmapFocus(*bitmap);
    return 0;
}

// void      SetBitmapLabel(const wxBitmap& bitmap)
static int LUACALL wxBitmapButton_SetBitmapLabel(lua_State *L)
{        
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxBitmapButton *self = (wxBitmapButton*)getuserdatatype(L, 1, s_wxBitmapButton);
    self->SetBitmapLabel(*bitmap);
    return 0;
}

// void      SetBitmapSelected(const wxBitmap& bitmap)
static int LUACALL wxBitmapButton_SetBitmapSelected(lua_State *L)
{        
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxBitmapButton *self = (wxBitmapButton*)getuserdatatype(L, 1, s_wxBitmapButton);
    self->SetBitmapSelected(*bitmap);
    return 0;
}

static int LUACALL wxCheckBox_destructor(lua_State *)
{
    return 0;
}

// wxCheckBox(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& val = wxDefaultValidator, const wxString& name = "checkBox")
static int LUACALL wxCheckBox_constructor(lua_State *L)
{    
    wxCheckBox *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("checkBox"));
    const wxValidator *val = (argCount >= 7 ? (wxValidator*)getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString label = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxCheckBox(parent, id, label, *pos, *size, style, *val, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxCheckBox, returns);
    return 1;
}

// bool     Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& val = wxDefaultValidator, const wxString& name = "checkBox")
static int LUACALL wxCheckBox_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxT("checkBox"));
    const wxValidator *val = (argCount >= 8 ? (wxValidator*)getuserdatatype(L, 8, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : 0);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString label = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxCheckBox *self = (wxCheckBox*)getuserdatatype(L, 1, s_wxCheckBox);
    returns = self->Create(parent, id, label, *pos, *size, style, *val, name);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     GetValue() const
static int LUACALL wxCheckBox_GetValue(lua_State *L)
{    
    bool returns;
    wxCheckBox *self = (wxCheckBox*)getuserdatatype(L, 1, s_wxCheckBox);
    returns = self->GetValue();
    lua_pushboolean(L, returns);
    return 1;
}

// void     SetValue(const bool state)
static int LUACALL wxCheckBox_SetValue(lua_State *L)
{        
    const bool state = getbooleantype(L, 2);
    wxCheckBox *self = (wxCheckBox*)getuserdatatype(L, 1, s_wxCheckBox);
    self->SetValue(state);
    return 0;
}

// ~%wxver22 bool     IsChecked() const
static int LUACALL wxCheckBox_IsChecked(lua_State *L)
{    
    bool returns;
    wxCheckBox *self = (wxCheckBox*)getuserdatatype(L, 1, s_wxCheckBox);
    returns = self->IsChecked();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxChoice_destructor(lua_State *)
{
    return 0;
}

// wxChoice(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxChoiceNameStr)
int LUACALL wxChoice_constructor(lua_State *L)
{
    wxChoice *returns;
    // get number of arguments
    int   argCount = lua_gettop(L);
    // const wxString& name = wxChoiceNameStr
    wxString name = (argCount >= 8 ? lua2wx(lua_tostring(L, 8)) : wxString(wxChoiceNameStr));
    // const wxValidator& validator = wxDefaultValidator
    const wxValidator *validator = (argCount >= 7 ? (wxValidator *) getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long) lua_tonumber(L, 6) : 0);
    // const wxString choices[] = NULL
    int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = (argCount >= 5 ? tostringarray(L, 5, count) : NULL);
    // const wxSize& size = wxDefaultSize
    const wxSize *size = (argCount >= 4 ? (wxSize *) getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    // const wxPoint& pos = wxDefaultPosition
    const wxPoint *pos = (argCount >= 3 ? (wxPoint *) getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID) lua_tonumber(L, 2);
    // wxWindow *parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 1, s_wxWindow);
    // call constructor
    returns = new wxChoice(parent, id, *pos, *size, count, choices, style, *validator, name);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxChoice, returns );
    // return the number of parameters
    return 1;
}

// void     Append(const wxString& item)
static int LUACALL wxChoice_Append(lua_State *L)
{        
    wxString item = lua2wx(getstringtype(L, 2));
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    self->Append(item);
    return 0;
}

// void     Clear()
static int LUACALL wxChoice_Clear(lua_State *L)
{    
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    self->Clear();
    return 0;
}

// bool     Create(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxChoiceNameStr)
int LUACALL wxChoice_Create(lua_State *L)
{
    bool  returns;
    // get number of arguments
    int   argCount = lua_gettop(L);
    // const wxString& name = wxChoiceNameStr
    wxString name = (argCount >= 9 ? lua2wx(lua_tostring(L, 9)) : wxString(wxChoiceNameStr));
    // const wxValidator& validator = wxDefaultValidator
    const wxValidator *validator = (argCount >= 8 ? (wxValidator *) getuserdatatype(L, 8, s_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long) lua_tonumber(L, 7) : 0);
    // const wxString choices[] = NULL
    int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = (argCount >= 6 ? tostringarray(L, 6, count) : NULL);
    // const wxSize& size = wxDefaultSize
    const wxSize *size = (argCount >= 5 ? (wxSize *) getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    // const wxPoint& pos = wxDefaultPosition
    const wxPoint *pos = (argCount >= 4 ? (wxPoint *) getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID) lua_tonumber(L, 3);
    // wxWindow *parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 2, s_wxWindow);
    // get this
    wxChoice *self = ( wxChoice * ) getuserdatatype(L, 1, s_wxChoice );
    // call Create
    returns = self->Create(parent, id, *pos, *size, count, choices, style, *validator, name);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}

// int      FindString(const wxString& string) const
static int LUACALL wxChoice_FindString(lua_State *L)
{    
    int returns;    
    wxString string = lua2wx(getstringtype(L, 2));
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    returns = self->FindString(string);
    lua_pushnumber(L, returns);
    return 1;
}

// void    *GetClientData(int n) const
static int LUACALL wxChoice_GetClientData(lua_State *L)
{    
    void * returns;    
    int n = (int) getnumbertype(L, 2);
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    returns = self->GetClientData(n);
    lua_pushlightuserdata(L, returns);
    return 1;
}

// int      GetSelection() const
static int LUACALL wxChoice_GetSelection(lua_State *L)
{    
    int returns;
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    returns = self->GetSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetString(int n) const
static int LUACALL wxChoice_GetString(lua_State *L)
{    
    wxString returns;    
    int n = (int) getnumbertype(L, 2);
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    returns = self->GetString(n);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetStringSelection() const
static int LUACALL wxChoice_GetStringSelection(lua_State *L)
{    
    wxString returns;
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    returns = self->GetStringSelection();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int      GetCount() const
static int LUACALL wxChoice_GetCount(lua_State *L)
{    
    int returns;
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

// void     SetClientData(int n, wxObject * data)
static int LUACALL wxChoice_SetClientData(lua_State *L)
{        
    wxObject *data = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    int n = (int) getnumbertype(L, 2);
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    self->SetClientData(n, data);
    return 0;
}

// void     SetSelection(int n)
static int LUACALL wxChoice_SetSelection(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    self->SetSelection(n);
    return 0;
}

// void     SetStringSelection(const wxString& string)
static int LUACALL wxChoice_SetStringSelection(lua_State *L)
{        
    wxString string = lua2wx(getstringtype(L, 2));
    wxChoice *self = (wxChoice*)getuserdatatype(L, 1, s_wxChoice);
    self->SetStringSelection(string);
    return 0;
}

static int LUACALL wxComboBox_destructor(lua_State *)
{
    return 0;
}

// wxComboBox(wxWindow* parent, wxWindowID id, const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
int LUACALL wxComboBox_constructor(lua_State *L)
{
    wxComboBox *returns;
    // get number of arguments
    int   argCount = lua_gettop(L);
    // const wxString& name = "comboBox"
    wxString name = (argCount >= 9 ? lua2wx(lua_tostring(L, 9)) : wxT("comboBox"));
    // const wxValidator& validator = wxDefaultValidator
    const wxValidator *validator = (argCount >= 8 ? (wxValidator *) getuserdatatype(L, 8, s_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long) lua_tonumber(L, 7) : 0);
    // const wxString choices[] = NULL
    int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = (argCount >= 6 ? tostringarray(L, 6, count) : NULL);
    // const wxSize& size = wxDefaultSize
    const wxSize *size = (argCount >= 5 ? (wxSize *) getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    // const wxPoint& pos = wxDefaultPosition
    const wxPoint *pos = (argCount >= 4 ? (wxPoint *) getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    // const wxString& value = ""
    wxString value = (argCount >= 3 ? lua2wx(lua_tostring(L, 3)) : wxT(""));
    // wxWindowID id
    wxWindowID id = (wxWindowID) lua_tonumber(L, 2);
    // wxWindow* parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 1, s_wxWindow);
    // call constructor
    returns = new wxComboBox(parent, id, value, *pos, *size, count, choices, style, *validator, name);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxComboBox, returns );
    // return the number of parameters
    return 1;
}

// void     Append(const wxString& item)
static int LUACALL wxComboBox_Append(lua_State *L)
{        
    wxString item = lua2wx(getstringtype(L, 2));
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->Append(item);
    return 0;
}

// void     Clear()
static int LUACALL wxComboBox_Clear(lua_State *L)
{    
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->Clear();
    return 0;
}

// bool     Create(wxWindow* parent, wxWindowID id, const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
int LUACALL wxComboBox_Create(lua_State *L)
{
    bool  returns;
    // get number of arguments
    int   argCount = lua_gettop(L);
    // const wxString& name = "comboBox"
    wxString name = (argCount >= 10 ? lua2wx(lua_tostring(L, 10)) : wxT("comboBox"));
    // const wxValidator& validator = wxDefaultValidator
    const wxValidator *validator = (argCount >= 9 ? (wxValidator *) getuserdatatype(L, 9, s_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 8 ? (long) lua_tonumber(L, 8) : 0);
    // const wxString choices[] = NULL
    int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = (argCount >= 7 ? tostringarray(L, 7, count) : NULL);
    // const wxSize& size = wxDefaultSize
    const wxSize *size = (argCount >= 6 ? (wxSize *) getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    // const wxPoint& pos = wxDefaultPosition
    const wxPoint *pos = (argCount >= 5 ? (wxPoint *) getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    // const wxString& value = ""
    wxString value = (argCount >= 4 ? lua2wx(lua_tostring(L, 4)) : wxT(""));
    // wxWindowID id
    wxWindowID id = (wxWindowID) lua_tonumber(L, 3);
    // wxWindow* parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 2, s_wxWindow);
    // get this
    wxComboBox *self = ( wxComboBox * ) getuserdatatype(L, 1, s_wxComboBox );
    // call Create
    returns = self->Create(parent, id, value, *pos, *size, count, choices, style, *validator, name);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}

// void     Copy()
static int LUACALL wxComboBox_Copy(lua_State *L)
{    
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->Copy();
    return 0;
}

// void     Cut()
static int LUACALL wxComboBox_Cut(lua_State *L)
{    
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->Cut();
    return 0;
}

// void     Delete(int n)
static int LUACALL wxComboBox_Delete(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->Delete(n);
    return 0;
}

// int      FindString(const wxString& string)
static int LUACALL wxComboBox_FindString(lua_State *L)
{    
    int returns;    
    wxString string = lua2wx(getstringtype(L, 2));
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    returns = self->FindString(string);
    lua_pushnumber(L, returns);
    return 1;
}

// void    *GetClientData(int n) const
static int LUACALL wxComboBox_GetClientData(lua_State *L)
{    
    void * returns;    
    int n = (int) getnumbertype(L, 2);
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    returns = self->GetClientData(n);
    lua_pushlightuserdata(L, returns);
    return 1;
}

// long     GetInsertionPoint() const
static int LUACALL wxComboBox_GetInsertionPoint(lua_State *L)
{    
    long returns;
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    returns = self->GetInsertionPoint();
    lua_pushnumber(L, returns);
    return 1;
}

// long     GetLastPosition() const
static int LUACALL wxComboBox_GetLastPosition(lua_State *L)
{    
    long returns;
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    returns = self->GetLastPosition();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetSelection() const
static int LUACALL wxComboBox_GetSelection(lua_State *L)
{    
    int returns;
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    returns = self->GetSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetString(int n) const
static int LUACALL wxComboBox_GetString(lua_State *L)
{    
    wxString returns;    
    int n = (int) getnumbertype(L, 2);
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    returns = self->GetString(n);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetStringSelection() const
static int LUACALL wxComboBox_GetStringSelection(lua_State *L)
{    
    wxString returns;
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    returns = self->GetStringSelection();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetValue() const
static int LUACALL wxComboBox_GetValue(lua_State *L)
{    
    wxString returns;
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    returns = self->GetValue();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int      GetCount() const
static int LUACALL wxComboBox_GetCount(lua_State *L)
{    
    int returns;
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

// void     Paste()
static int LUACALL wxComboBox_Paste(lua_State *L)
{    
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->Paste();
    return 0;
}

// void     Replace(long from, long to, const wxString& text)
static int LUACALL wxComboBox_Replace(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 4));
    long to = (long) getnumbertype(L, 3);
    long from = (long) getnumbertype(L, 2);
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->Replace(from, to, text);
    return 0;
}

// void     Remove(long from, long to)
static int LUACALL wxComboBox_Remove(lua_State *L)
{        
    long to = (long) getnumbertype(L, 3);
    long from = (long) getnumbertype(L, 2);
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->Remove(from, to);
    return 0;
}

// void     SetClientData(int n, wxObject * data)
static int LUACALL wxComboBox_SetClientData(lua_State *L)
{        
    wxObject *data = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    int n = (int) getnumbertype(L, 2);
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->SetClientData(n, data);
    return 0;
}

// void     SetInsertionPoint(long pos)
static int LUACALL wxComboBox_SetInsertionPoint(lua_State *L)
{        
    long pos = (long) getnumbertype(L, 2);
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->SetInsertionPoint(pos);
    return 0;
}

// void     SetInsertionPointEnd()
static int LUACALL wxComboBox_SetInsertionPointEnd(lua_State *L)
{    
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->SetInsertionPointEnd();
    return 0;
}

// void     SetSelection(int n)
static int LUACALL wxComboBox_SetSelection(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->SetSelection(n);
    return 0;
}

// %rename SetMark void SetSelection(long from, long to)
static int LUACALL wxComboBox_SetMark(lua_State *L)
{        
    long to = (long) getnumbertype(L, 3);
    long from = (long) getnumbertype(L, 2);
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->SetSelection(from, to);
    return 0;
}

// void     SetValue(const wxString& text)
static int LUACALL wxComboBox_SetValue(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxComboBox *self = (wxComboBox*)getuserdatatype(L, 1, s_wxComboBox);
    self->SetValue(text);
    return 0;
}

static int LUACALL wxGauge_destructor(lua_State *)
{
    return 0;
}

// wxGauge(wxWindow* parent, wxWindowID id, int range, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxGA_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "gauge")
static int LUACALL wxGauge_constructor(lua_State *L)
{    
    wxGauge *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("gauge"));
    const wxValidator *validator = (argCount >= 7 ? (wxValidator*)getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxGA_HORIZONTAL);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    int range = (int) getnumbertype(L, 3);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxGauge(parent, id, range, *pos, *size, style, *validator, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxGauge, returns);
    return 1;
}

// bool     Create(wxWindow* parent, wxWindowID id, int range, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxGA_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "gauge")
static int LUACALL wxGauge_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxT("gauge"));
    const wxValidator *validator = (argCount >= 8 ? (wxValidator*)getuserdatatype(L, 8, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : wxGA_HORIZONTAL);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    int range = (int) getnumbertype(L, 4);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxGauge *self = (wxGauge*)getuserdatatype(L, 1, s_wxGauge);
    returns = self->Create(parent, id, range, *pos, *size, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// int      GetBezelFace() const
static int LUACALL wxGauge_GetBezelFace(lua_State *L)
{    
    int returns;
    wxGauge *self = (wxGauge*)getuserdatatype(L, 1, s_wxGauge);
    returns = self->GetBezelFace();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetRange() const
static int LUACALL wxGauge_GetRange(lua_State *L)
{    
    int returns;
    wxGauge *self = (wxGauge*)getuserdatatype(L, 1, s_wxGauge);
    returns = self->GetRange();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetShadowWidth() const
static int LUACALL wxGauge_GetShadowWidth(lua_State *L)
{    
    int returns;
    wxGauge *self = (wxGauge*)getuserdatatype(L, 1, s_wxGauge);
    returns = self->GetShadowWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetValue() const
static int LUACALL wxGauge_GetValue(lua_State *L)
{    
    int returns;
    wxGauge *self = (wxGauge*)getuserdatatype(L, 1, s_wxGauge);
    returns = self->GetValue();
    lua_pushnumber(L, returns);
    return 1;
}

// void     SetBezelFace(int width)
static int LUACALL wxGauge_SetBezelFace(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxGauge *self = (wxGauge*)getuserdatatype(L, 1, s_wxGauge);
    self->SetBezelFace(width);
    return 0;
}

// void     SetRange(int range)
static int LUACALL wxGauge_SetRange(lua_State *L)
{        
    int range = (int) getnumbertype(L, 2);
    wxGauge *self = (wxGauge*)getuserdatatype(L, 1, s_wxGauge);
    self->SetRange(range);
    return 0;
}

// void     SetShadowWidth(int width)
static int LUACALL wxGauge_SetShadowWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxGauge *self = (wxGauge*)getuserdatatype(L, 1, s_wxGauge);
    self->SetShadowWidth(width);
    return 0;
}

// void     SetValue(int pos)
static int LUACALL wxGauge_SetValue(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxGauge *self = (wxGauge*)getuserdatatype(L, 1, s_wxGauge);
    self->SetValue(pos);
    return 0;
}

static int LUACALL wxListBox_destructor(lua_State *)
{
    return 0;
}

// wxListBox(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listBox")
int LUACALL wxListBox_constructor(lua_State *L)
{
    wxListBox *returns;
    // get number of arguments
    int   argCount = lua_gettop(L);
    // const wxString& name = "listBox"
    wxString name = (argCount >= 8 ? lua2wx(lua_tostring(L, 8)) : wxT("listBox"));
    // const wxValidator& validator = wxDefaultValidator
    const wxValidator *validator = (argCount >= 7 ? (wxValidator *) getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long) lua_tonumber(L, 6) : 0);
    // const wxString choices[] = NULL
    int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = (argCount >= 5 ? tostringarray(L, 5, count) : NULL);
    // const wxSize& size = wxDefaultSize
    const wxSize *size = (argCount >= 4 ? (wxSize *) getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    // const wxPoint& pos = wxDefaultPosition
    const wxPoint *pos = (argCount >= 3 ? (wxPoint *) getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID) lua_tonumber(L, 2);
    // wxWindow* parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 1, s_wxWindow);
    // call constructor
    returns = new wxListBox(parent, id, *pos, *size, count, choices, style, *validator, name);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxListBox, returns );
    // return the number of parameters
    return 1;
}

// void     Append(const wxString& item)
static int LUACALL wxListBox_Append(lua_State *L)
{        
    wxString item = lua2wx(getstringtype(L, 2));
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    self->Append(item);
    return 0;
}

// void     Clear()
static int LUACALL wxListBox_Clear(lua_State *L)
{    
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    self->Clear();
    return 0;
}

// bool     Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listBox")
int LUACALL wxListBox_Create(lua_State *L)
{
    bool  returns;
    // get number of arguments
    int   argCount = lua_gettop(L);
    // const wxString& name = "listBox"
    wxString name = (argCount >= 9 ? lua2wx(lua_tostring(L, 9)) : wxT("listBox"));
    // const wxValidator& validator = wxDefaultValidator
    const wxValidator *validator = (argCount >= 8 ? (wxValidator *) getuserdatatype(L, 8, s_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long) lua_tonumber(L, 7) : 0);
    // const wxString choices[] = NULL
    int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = (argCount >= 6 ? tostringarray(L, 6, count) : NULL);
    // const wxSize& size = wxDefaultSize
    const wxSize *size = (argCount >= 5 ? (wxSize *) getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    // const wxPoint& pos = wxDefaultPosition
    const wxPoint *pos = (argCount >= 4 ? (wxPoint *) getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID) lua_tonumber(L, 3);
    // wxWindow* parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 2, s_wxWindow);
    // get this
    wxListBox *self = ( wxListBox * ) getuserdatatype(L, 1, s_wxListBox );
    // call Create
    returns = self->Create(parent, id, *pos, *size, count, choices, style, *validator, name);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}

// void     Delete(int n)
static int LUACALL wxListBox_Delete(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    self->Delete(n);
    return 0;
}

// void     Deselect(int n)
static int LUACALL wxListBox_Deselect(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    self->Deselect(n);
    return 0;
}

// int      FindString(const wxString& string)
static int LUACALL wxListBox_FindString(lua_State *L)
{    
    int returns;    
    wxString string = lua2wx(getstringtype(L, 2));
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    returns = self->FindString(string);
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxListBox_GetClientData(lua_State *L)
{
    wxObject *returns;
    // int n
    int n = (int) getnumbertype(L, 2);
    // get this
    wxListBox *self = ( wxListBox * ) getuserdatatype(L, 1, s_wxListBox );
    // call GetClientData
    returns = (wxObject *) self->GetClientData(n);
    // push the result datatype
    pushuserdatatype(L, s_wxObject, returns );
    // return the number of parameters
    return 1;
}

// int      GetSelection() const
static int LUACALL wxListBox_GetSelection(lua_State *L)
{    
    int returns;
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    returns = self->GetSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetSelections(wxArrayInt& selections) const
static int LUACALL wxListBox_GetSelections(lua_State *L)
{    
    int returns;    
    wxArrayInt *selections = (wxArrayInt*)getuserdatatype(L, 2, s_wxArrayInt);
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    returns = self->GetSelections(*selections);
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetString(int n) const
static int LUACALL wxListBox_GetString(lua_State *L)
{    
    wxString returns;    
    int n = (int) getnumbertype(L, 2);
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    returns = self->GetString(n);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetStringSelection() const
static int LUACALL wxListBox_GetStringSelection(lua_State *L)
{    
    wxString returns;
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    returns = self->GetStringSelection();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetCount() const
static int LUACALL wxListBox_GetCount(lua_State *L)
{    
    int returns;
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

// bool     Selected(int n) const
static int LUACALL wxListBox_Selected(lua_State *L)
{    
    bool returns;    
    int n = (int) getnumbertype(L, 2);
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    returns = self->Selected(n);
    lua_pushboolean(L, returns);
    return 1;
}

// void     SetClientData(int n, wxObject *data)
static int LUACALL wxListBox_SetClientData(lua_State *L)
{        
    wxObject *data = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    int n = (int) getnumbertype(L, 2);
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    self->SetClientData(n, data);
    return 0;
}

// void     SetFirstItem(int n)
static int LUACALL wxListBox_SetFirstItem(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    self->SetFirstItem(n);
    return 0;
}

// void     SetSelection(int n, const bool select = TRUE)
static int LUACALL wxListBox_SetSelection(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const bool select = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    int n = (int) getnumbertype(L, 2);
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    self->SetSelection(n, select);
    return 0;
}

// void     SetString(int n, const wxString& string)
static int LUACALL wxListBox_SetString(lua_State *L)
{        
    wxString string = lua2wx(getstringtype(L, 3));
    int n = (int) getnumbertype(L, 2);
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    self->SetString(n, string);
    return 0;
}

// void     SetStringSelection(const wxString& string, const bool select = TRUE)
static int LUACALL wxListBox_SetStringSelection(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const bool select = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    wxString string = lua2wx(getstringtype(L, 2));
    wxListBox *self = (wxListBox*)getuserdatatype(L, 1, s_wxListBox);
    self->SetStringSelection(string, select);
    return 0;
}

static int LUACALL wxCheckListBox_destructor(lua_State *)
{
    return 0;
}

// wxCheckListBox(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listBox")
int LUACALL wxCheckListBox_constructor(lua_State *L)
{
    wxCheckListBox *returns;
    // get number of arguments
    int   argCount = lua_gettop(L);
    // const wxString& name = "listBox"
    wxString name = (argCount >= 8 ? lua2wx(lua_tostring(L, 8)) : wxT("listBox"));
    // const wxValidator& validator = wxDefaultValidator
    const wxValidator *validator = (argCount >= 7 ? (wxValidator *) getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long) lua_tonumber(L, 6) : 0);
    // const wxString choices[] = NULL
    int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = (argCount >= 5 ? tostringarray(L, 5, count) : NULL);
    // const wxSize& size = wxDefaultSize
    const wxSize *size = (argCount >= 4 ? (wxSize *) getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    // const wxPoint& pos = wxDefaultPosition
    const wxPoint *pos = (argCount >= 3 ? (wxPoint *) getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID) lua_tonumber(L, 2);
    // wxWindow* parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 1, s_wxWindow);
    // call constructor
    returns = new wxCheckListBox(parent, id, *pos, *size, count, choices, style, *validator, name);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxCheckListBox, returns );
    // return the number of parameters
    return 1;
}

// void     Check(int item, bool check = TRUE)
static int LUACALL wxCheckListBox_Check(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool check = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    int item = (int) getnumbertype(L, 2);
    wxCheckListBox *self = (wxCheckListBox*)getuserdatatype(L, 1, s_wxCheckListBox);
    self->Check(item, check);
    return 0;
}

// bool     IsChecked(int item) const
static int LUACALL wxCheckListBox_IsChecked(lua_State *L)
{    
    bool returns;    
    int item = (int) getnumbertype(L, 2);
    wxCheckListBox *self = (wxCheckListBox*)getuserdatatype(L, 1, s_wxCheckListBox);
    returns = self->IsChecked(item);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxListCtrl_destructor(lua_State *)
{
    return 0;
}

// wxListCtrl(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxLC_ICON, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listCtrl")
static int LUACALL wxListCtrl_constructor(lua_State *L)
{    
    wxListCtrl *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("listCtrl"));
    const wxValidator *validator = (argCount >= 6 ? (wxValidator*)getuserdatatype(L, 6, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxLC_ICON);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxListCtrl(parent, id, *pos, *size, style, *validator, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxListCtrl, returns);
    return 1;
}

// bool     Arrange(int flag = wxLIST_ALIGN_DEFAULT)
static int LUACALL wxListCtrl_Arrange(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int flag = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxLIST_ALIGN_DEFAULT);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->Arrange(flag);
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 void AssignImageList(wxImageList *imageList, int which)
static int LUACALL wxListCtrl_AssignImageList(lua_State *L)
{        
    int which = (int) getnumbertype(L, 3);
    wxImageList *imageList = (wxImageList*)getuserdatatype(L, 2, s_wxImageList);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    self->AssignImageList(imageList, which);
    return 0;
}

// void     ClearAll()
static int LUACALL wxListCtrl_ClearAll(lua_State *L)
{    
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    self->ClearAll();
    return 0;
}

// bool     Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxLC_ICON, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listCtrl")
static int LUACALL wxListCtrl_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("listCtrl"));
    const wxValidator *validator = (argCount >= 7 ? (wxValidator*)getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxLC_ICON);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->Create(parent, id, *pos, *size, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     DeleteAllItems()
static int LUACALL wxListCtrl_DeleteAllItems(lua_State *L)
{    
    bool returns;
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->DeleteAllItems();
    lua_pushboolean(L, returns);
    return 1;
}

// bool     DeleteColumn(int col)
static int LUACALL wxListCtrl_DeleteColumn(lua_State *L)
{    
    bool returns;    
    int col = (int) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->DeleteColumn(col);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     DeleteItem(long item)
static int LUACALL wxListCtrl_DeleteItem(lua_State *L)
{    
    bool returns;    
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->DeleteItem(item);
    lua_pushboolean(L, returns);
    return 1;
}

// void     EditLabel(long item)
static int LUACALL wxListCtrl_EditLabel(lua_State *L)
{        
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    self->EditLabel(item);
    return 0;
}

// bool     EnsureVisible(long item)
static int LUACALL wxListCtrl_EnsureVisible(lua_State *L)
{    
    bool returns;    
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->EnsureVisible(item);
    lua_pushboolean(L, returns);
    return 1;
}

// long     FindItem(long start, const wxString& str, const bool partial = FALSE)
static int LUACALL wxListCtrl_FindItem(lua_State *L)
{    
    long returns;
    int argCount = lua_gettop(L);    
    const bool partial = (argCount >= 4 ? getbooleantype(L, 4) : FALSE);
    wxString str = lua2wx(getstringtype(L, 3));
    long start = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->FindItem(start, str, partial);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename FindItemData long FindItem(long start, long data)
static int LUACALL wxListCtrl_FindItemData(lua_State *L)
{    
    long returns;    
    long data = (long) getnumbertype(L, 3);
    long start = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->FindItem(start, data);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename FindItemAtPos long FindItem(long start, const wxPoint& pt, int direction)
static int LUACALL wxListCtrl_FindItemAtPos(lua_State *L)
{    
    long returns;    
    int direction = (int) getnumbertype(L, 4);
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    long start = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->FindItem(start, *pt, direction);
    lua_pushnumber(L, returns);
    return 1;
}

// bool     GetColumn(int col, wxListItem& item) const
static int LUACALL wxListCtrl_GetColumn(lua_State *L)
{    
    bool returns;    
    wxListItem *item = (wxListItem*)getuserdatatype(L, 3, s_wxListItem);
    int col = (int) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetColumn(col, *item);
    lua_pushboolean(L, returns);
    return 1;
}

// int      GetColumnWidth(int col) const
static int LUACALL wxListCtrl_GetColumnWidth(lua_State *L)
{    
    int returns;    
    int col = (int) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetColumnWidth(col);
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetCountPerPage() const
static int LUACALL wxListCtrl_GetCountPerPage(lua_State *L)
{    
    int returns;
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetCountPerPage();
    lua_pushnumber(L, returns);
    return 1;
}

// wxImageList* GetImageList(int which) const
static int LUACALL wxListCtrl_GetImageList(lua_State *L)
{    
    wxImageList *returns;    
    int which = (int) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetImageList(which);
    pushuserdatatype(L, s_wxImageList, returns);
    return 1;
}

// bool     GetItem(wxListItem& info) const
static int LUACALL wxListCtrl_GetItem(lua_State *L)
{    
    bool returns;    
    wxListItem *info = (wxListItem*)getuserdatatype(L, 2, s_wxListItem);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetItem(*info);
    lua_pushboolean(L, returns);
    return 1;
}

// long     GetItemData(long item) const
static int LUACALL wxListCtrl_GetItemData(lua_State *L)
{    
    long returns;    
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetItemData(item);
    lua_pushnumber(L, returns);
    return 1;
}

// bool     GetItemPosition(long item, wxPoint& pos) const
static int LUACALL wxListCtrl_GetItemPosition(lua_State *L)
{    
    bool returns;    
    wxPoint *pos = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetItemPosition(item, *pos);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     GetItemRect(long item, wxRect& rect, int code = wxLIST_RECT_BOUNDS) const
static int LUACALL wxListCtrl_GetItemRect(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int code = (argCount >= 4 ? (int) getnumbertype(L, 4) : wxLIST_RECT_BOUNDS);
    wxRect *rect = (wxRect*)getuserdatatype(L, 3, s_wxRect);
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetItemRect(item, *rect, code);
    lua_pushboolean(L, returns);
    return 1;
}

// int      GetItemState(long item, long stateMask) const
static int LUACALL wxListCtrl_GetItemState(lua_State *L)
{    
    int returns;    
    long stateMask = (long) getnumbertype(L, 3);
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetItemState(item, stateMask);
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetItemCount() const
static int LUACALL wxListCtrl_GetItemCount(lua_State *L)
{    
    int returns;
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetItemCount();
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetItemSpacing(bool isSmall) const
static int LUACALL wxListCtrl_GetItemSpacing(lua_State *L)
{    
    int returns;    
    bool isSmall = getbooleantype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetItemSpacing(isSmall);
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetItemText(long item) const
static int LUACALL wxListCtrl_GetItemText(lua_State *L)
{    
    wxString returns;    
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetItemText(item);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// long     GetNextItem(long item, int geometry = wxLIST_NEXT_ALL, int state = wxLIST_STATE_DONTCARE) const
static int LUACALL wxListCtrl_GetNextItem(lua_State *L)
{    
    long returns;
    int argCount = lua_gettop(L);    
    int state = (argCount >= 4 ? (int) getnumbertype(L, 4) : wxLIST_STATE_DONTCARE);
    int geometry = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxLIST_NEXT_ALL);
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetNextItem(item, geometry, state);
    lua_pushnumber(L, returns);
    return 1;
}

// int      GetSelectedItemCount() const
static int LUACALL wxListCtrl_GetSelectedItemCount(lua_State *L)
{    
    int returns;
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetSelectedItemCount();
    lua_pushnumber(L, returns);
    return 1;
}

// wxColour GetTextColour() const
static int LUACALL wxListCtrl_GetTextColour(lua_State *L)
{    
    wxColour *returns;
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = new wxColour(self->GetTextColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// long     GetTopItem() const
static int LUACALL wxListCtrl_GetTopItem(lua_State *L)
{    
    long returns;
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->GetTopItem();
    lua_pushnumber(L, returns);
    return 1;
}

// long     HitTest(const wxPoint& point, int& flags)
static int LUACALL wxListCtrl_HitTest(lua_State *L)
{
    long returns;
    // int& flags
    int flags;
    // const wxPoint& point
    const wxPoint *point = (wxPoint *) getuserdatatype(L, 2, s_wxPoint);
    // get this
    wxListCtrl *self = ( wxListCtrl * ) getuserdatatype(L, 1, s_wxListCtrl );
    // call HitTest
    returns = self->HitTest(*point, flags);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result flags
    lua_pushnumber(L, flags);
    // return the number of parameters
    return 2;
}

// long     InsertColumn(long col, wxListItem& info)
static int LUACALL wxListCtrl_InsertColumn(lua_State *L)
{    
    long returns;    
    wxListItem *info = (wxListItem*)getuserdatatype(L, 3, s_wxListItem);
    long col = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->InsertColumn(col, *info);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename  InsertColumnInfo long InsertColumn(long col, const wxString& heading, int format = wxLIST_FORMAT_LEFT, int width = -1)
static int LUACALL wxListCtrl_InsertColumnInfo(lua_State *L)
{    
    long returns;
    int argCount = lua_gettop(L);    
    int width = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    int format = (argCount >= 4 ? (int) getnumbertype(L, 4) : wxLIST_FORMAT_LEFT);
    wxString heading = lua2wx(getstringtype(L, 3));
    long col = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->InsertColumn(col, heading, format, width);
    lua_pushnumber(L, returns);
    return 1;
}

// long     InsertItem(wxListItem& info)
static int LUACALL wxListCtrl_InsertItem(lua_State *L)
{    
    long returns;    
    wxListItem *info = (wxListItem*)getuserdatatype(L, 2, s_wxListItem);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->InsertItem(*info);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename  InsertStringItem long InsertItem(long index, const wxString& label)
static int LUACALL wxListCtrl_InsertStringItem(lua_State *L)
{    
    long returns;    
    wxString label = lua2wx(getstringtype(L, 3));
    long index = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->InsertItem(index, label);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename  InsertImageItem long InsertItem(long index, int imageIndex)
static int LUACALL wxListCtrl_InsertImageItem(lua_State *L)
{    
    long returns;    
    int imageIndex = (int) getnumbertype(L, 3);
    long index = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->InsertItem(index, imageIndex);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename  InsertImageStringItem long InsertItem(long index, const wxString& label, int imageIndex)
static int LUACALL wxListCtrl_InsertImageStringItem(lua_State *L)
{    
    long returns;    
    int imageIndex = (int) getnumbertype(L, 4);
    wxString label = lua2wx(getstringtype(L, 3));
    long index = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->InsertItem(index, label, imageIndex);
    lua_pushnumber(L, returns);
    return 1;
}

// bool     ScrollList(int dx, int dy)
static int LUACALL wxListCtrl_ScrollList(lua_State *L)
{    
    bool returns;    
    int dy = (int) getnumbertype(L, 3);
    int dx = (int) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->ScrollList(dx, dy);
    lua_pushboolean(L, returns);
    return 1;
}

// void     SetBackgroundColour(const wxColour& col)
static int LUACALL wxListCtrl_SetBackgroundColour(lua_State *L)
{        
    const wxColour *col = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    self->SetBackgroundColour(*col);
    return 0;
}

// bool     SetColumn(int col, wxListItem& item)
static int LUACALL wxListCtrl_SetColumn(lua_State *L)
{    
    bool returns;    
    wxListItem *item = (wxListItem*)getuserdatatype(L, 3, s_wxListItem);
    int col = (int) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->SetColumn(col, *item);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     SetColumnWidth(int col, int width)
static int LUACALL wxListCtrl_SetColumnWidth(lua_State *L)
{    
    bool returns;    
    int width = (int) getnumbertype(L, 3);
    int col = (int) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->SetColumnWidth(col, width);
    lua_pushboolean(L, returns);
    return 1;
}

// void     SetImageList(wxImageList* imageList, int which)
static int LUACALL wxListCtrl_SetImageList(lua_State *L)
{        
    int which = (int) getnumbertype(L, 3);
    wxImageList *imageList = (wxImageList*)getuserdatatype(L, 2, s_wxImageList);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    self->SetImageList(imageList, which);
    return 0;
}

// bool     SetItem(wxListItem& info)
static int LUACALL wxListCtrl_SetItem(lua_State *L)
{    
    bool returns;    
    wxListItem *info = (wxListItem*)getuserdatatype(L, 2, s_wxListItem);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->SetItem(*info);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename SetStringItem long SetItem(long index, int col, const wxString& label, int imageId = -1)
static int LUACALL wxListCtrl_SetStringItem(lua_State *L)
{    
    long returns;
    int argCount = lua_gettop(L);    
    int imageId = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    wxString label = lua2wx(getstringtype(L, 4));
    int col = (int) getnumbertype(L, 3);
    long index = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->SetItem(index, col, label, imageId);
    lua_pushnumber(L, returns);
    return 1;
}

// bool     SetItemData(long item, long data)
static int LUACALL wxListCtrl_SetItemData(lua_State *L)
{    
    bool returns;    
    long data = (long) getnumbertype(L, 3);
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->SetItemData(item, data);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     SetItemImage(long item, int image, int selImage)
static int LUACALL wxListCtrl_SetItemImage(lua_State *L)
{    
    bool returns;    
    int selImage = (int) getnumbertype(L, 4);
    int image = (int) getnumbertype(L, 3);
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->SetItemImage(item, image, selImage);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     SetItemPosition(long item, const wxPoint& pos)
static int LUACALL wxListCtrl_SetItemPosition(lua_State *L)
{    
    bool returns;    
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->SetItemPosition(item, *pos);
    lua_pushboolean(L, returns);
    return 1;
}

// bool     SetItemState(long item, long state, long stateMask)
static int LUACALL wxListCtrl_SetItemState(lua_State *L)
{    
    bool returns;    
    long stateMask = (long) getnumbertype(L, 4);
    long state = (long) getnumbertype(L, 3);
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    returns = self->SetItemState(item, state, stateMask);
    lua_pushboolean(L, returns);
    return 1;
}

// void     SetItemText(long item, const wxString& text)
static int LUACALL wxListCtrl_SetItemText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 3));
    long item = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    self->SetItemText(item, text);
    return 0;
}

// void     SetSingleStyle(long style, const bool add = TRUE)
static int LUACALL wxListCtrl_SetSingleStyle(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const bool add = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    long style = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    self->SetSingleStyle(style, add);
    return 0;
}

// void     SetTextColour(const wxColour& col)
static int LUACALL wxListCtrl_SetTextColour(lua_State *L)
{        
    const wxColour *col = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    self->SetTextColour(*col);
    return 0;
}

// void     SetWindowStyleFlag(long style)
static int LUACALL wxListCtrl_SetWindowStyleFlag(lua_State *L)
{        
    long style = (long) getnumbertype(L, 2);
    wxListCtrl *self = (wxListCtrl*)getuserdatatype(L, 1, s_wxListCtrl);
    self->SetWindowStyleFlag(style);
    return 0;
}

static int LUACALL wxListItemAttr_destructor(lua_State *L)
{
    wxListItemAttr * self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxListItemAttr_Delete(lua_State *L)
{
    wxListItemAttr * self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxListItemAttr(const wxColour& colText = wxNullColour, const wxColour& colBack = wxNullColour, const wxFont& font = wxNullFont)
static int LUACALL wxListItemAttr_constructor(lua_State *L)
{    
    wxListItemAttr *returns;
    int argCount = lua_gettop(L);    
    const wxFont *font = (argCount >= 3 ? (wxFont*)getuserdatatype(L, 3, s_wxFont) : &wxNullFont);
    const wxColour *colBack = (argCount >= 2 ? (wxColour*)getuserdatatype(L, 2, s_wxColour) : &wxNullColour);
    const wxColour *colText = (argCount >= 1 ? (wxColour*)getuserdatatype(L, 1, s_wxColour) : &wxNullColour);
    returns = new wxListItemAttr(*colText, *colBack, *font);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxListItemAttr, returns);
    return 1;
}

// void SetTextColour(const wxColour& colText)
static int LUACALL wxListItemAttr_SetTextColour(lua_State *L)
{        
    const wxColour *colText = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxListItemAttr *self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    self->SetTextColour(*colText);
    return 0;
}

// void SetBackgroundColour(const wxColour& colBack)
static int LUACALL wxListItemAttr_SetBackgroundColour(lua_State *L)
{        
    const wxColour *colBack = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxListItemAttr *self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    self->SetBackgroundColour(*colBack);
    return 0;
}

// void SetFont(const wxFont& font)
static int LUACALL wxListItemAttr_SetFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxListItemAttr *self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    self->SetFont(*font);
    return 0;
}

// bool HasTextColour()
static int LUACALL wxListItemAttr_HasTextColour(lua_State *L)
{    
    bool returns;
    wxListItemAttr *self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    returns = self->HasTextColour();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasBackgroundColour()
static int LUACALL wxListItemAttr_HasBackgroundColour(lua_State *L)
{    
    bool returns;
    wxListItemAttr *self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    returns = self->HasBackgroundColour();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasFont()
static int LUACALL wxListItemAttr_HasFont(lua_State *L)
{    
    bool returns;
    wxListItemAttr *self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    returns = self->HasFont();
    lua_pushboolean(L, returns);
    return 1;
}

// const wxColour& GetTextColour()
static int LUACALL wxListItemAttr_GetTextColour(lua_State *L)
{    
    const wxColour *returns;
    wxListItemAttr *self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    returns = &self->GetTextColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxColour& GetBackgroundColour()
static int LUACALL wxListItemAttr_GetBackgroundColour(lua_State *L)
{    
    const wxColour *returns;
    wxListItemAttr *self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    returns = &self->GetBackgroundColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxFont& GetFont()
static int LUACALL wxListItemAttr_GetFont(lua_State *L)
{    
    const wxFont *returns;
    wxListItemAttr *self = (wxListItemAttr*)getuserdatatype(L, 1, s_wxListItemAttr);
    returns = &self->GetFont();
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

static int LUACALL wxListItem_destructor(lua_State *L)
{
    wxListItem * self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxListItem_Delete(lua_State *L)
{
    wxListItem * self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxListItem()
static int LUACALL wxListItem_constructor(lua_State *L)
{    
    wxListItem *returns;
    returns = new wxListItem();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxListItem, returns);
    return 1;
}

// void Clear()
static int LUACALL wxListItem_Clear(lua_State *L)
{    
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->Clear();
    return 0;
}

// void ClearAttributes()
static int LUACALL wxListItem_ClearAttributes(lua_State *L)
{    
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->ClearAttributes();
    return 0;
}

// void SetMask(long mask)
static int LUACALL wxListItem_SetMask(lua_State *L)
{        
    long mask = (long) getnumbertype(L, 2);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetMask(mask);
    return 0;
}

// void SetId(long id)
static int LUACALL wxListItem_SetId(lua_State *L)
{        
    long id = (long) getnumbertype(L, 2);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetId(id);
    return 0;
}

// void SetColumn(int col)
static int LUACALL wxListItem_SetColumn(lua_State *L)
{        
    int col = (int) getnumbertype(L, 2);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetColumn(col);
    return 0;
}

// void SetState(long state)
static int LUACALL wxListItem_SetState(lua_State *L)
{        
    long state = (long) getnumbertype(L, 2);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetState(state);
    return 0;
}

// void SetStateMask(long stateMask)
static int LUACALL wxListItem_SetStateMask(lua_State *L)
{        
    long stateMask = (long) getnumbertype(L, 2);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetStateMask(stateMask);
    return 0;
}

// void SetText(const wxString& text)
static int LUACALL wxListItem_SetText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetText(text);
    return 0;
}

// void SetImage(int image)
static int LUACALL wxListItem_SetImage(lua_State *L)
{        
    int image = (int) getnumbertype(L, 2);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetImage(image);
    return 0;
}

// void SetData(long data)
static int LUACALL wxListItem_SetData(lua_State *L)
{        
    long data = (long) getnumbertype(L, 2);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetData(data);
    return 0;
}

// void SetWidth(int width)
static int LUACALL wxListItem_SetWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetWidth(width);
    return 0;
}

// void SetAlign(wxListColumnFormat align)
static int LUACALL wxListItem_SetAlign(lua_State *L)
{        
    wxListColumnFormat align = (wxListColumnFormat) getenumerationtype(L, 2);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetAlign(align);
    return 0;
}

// void SetTextColour(const wxColour& colText)
static int LUACALL wxListItem_SetTextColour(lua_State *L)
{        
    const wxColour *colText = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetTextColour(*colText);
    return 0;
}

// void SetBackgroundColour(const wxColour& colBack)
static int LUACALL wxListItem_SetBackgroundColour(lua_State *L)
{        
    const wxColour *colBack = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetBackgroundColour(*colBack);
    return 0;
}

// void SetFont(const wxFont& font)
static int LUACALL wxListItem_SetFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    self->SetFont(*font);
    return 0;
}

// long GetMask()
static int LUACALL wxListItem_GetMask(lua_State *L)
{    
    long returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->GetMask();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetId()
static int LUACALL wxListItem_GetId(lua_State *L)
{    
    long returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->GetId();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetColumn()
static int LUACALL wxListItem_GetColumn(lua_State *L)
{    
    int returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->GetColumn();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetState()
static int LUACALL wxListItem_GetState(lua_State *L)
{    
    long returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->GetState();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxString& GetText()
static int LUACALL wxListItem_GetText(lua_State *L)
{    
    const wxString *returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = &self->GetText();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// int GetImage()
static int LUACALL wxListItem_GetImage(lua_State *L)
{    
    int returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->GetImage();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetData()
static int LUACALL wxListItem_GetData(lua_State *L)
{    
    long returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->GetData();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetWidth()
static int LUACALL wxListItem_GetWidth(lua_State *L)
{    
    int returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// wxListColumnFormat GetAlign()
static int LUACALL wxListItem_GetAlign(lua_State *L)
{    
    wxListColumnFormat returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->GetAlign();
    lua_pushnumber(L, returns);
    return 1;
}

// wxListItemAttr *GetAttributes()
static int LUACALL wxListItem_GetAttributes(lua_State *L)
{    
    wxListItemAttr *returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->GetAttributes();
    pushuserdatatype(L, s_wxListItemAttr, returns);
    return 1;
}

// bool HasAttributes()
static int LUACALL wxListItem_HasAttributes(lua_State *L)
{    
    bool returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = self->HasAttributes();
    lua_pushboolean(L, returns);
    return 1;
}

// wxColour GetTextColour() const
static int LUACALL wxListItem_GetTextColour(lua_State *L)
{    
    wxColour *returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = new wxColour(self->GetTextColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxColour GetBackgroundColour() const
static int LUACALL wxListItem_GetBackgroundColour(lua_State *L)
{    
    wxColour *returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = new wxColour(self->GetBackgroundColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxFont GetFont() const
static int LUACALL wxListItem_GetFont(lua_State *L)
{    
    wxFont *returns;
    wxListItem *self = (wxListItem*)getuserdatatype(L, 1, s_wxListItem);
    returns = new wxFont(self->GetFont());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

static int LUACALL wxListEvent_destructor(lua_State *L)
{
    wxListEvent * self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxListEvent_Delete(lua_State *L)
{
    wxListEvent * self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxListEvent(WXTYPE commandType = 0, int id = 0)
static int LUACALL wxListEvent_constructor(lua_State *L)
{    
    wxListEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    WXTYPE commandType = (argCount >= 1 ? (WXTYPE) getnumbertype(L, 1) : 0);
    returns = new wxListEvent(commandType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxListEvent, returns);
    return 1;
}

// ~%wxver22 int GetKeyCode() const
static int LUACALL wxListEvent_GetKeyCode(lua_State *L)
{    
    int returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = self->GetKeyCode();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetIndex() const
static int LUACALL wxListEvent_GetIndex(lua_State *L)
{    
    long returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = self->GetIndex();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetColumn() const
static int LUACALL wxListEvent_GetColumn(lua_State *L)
{    
    int returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = self->GetColumn();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPoint GetPoint() const
static int LUACALL wxListEvent_GetPoint(lua_State *L)
{    
    wxPoint *returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = new wxPoint(self->GetPoint());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// const wxString& GetLabel() const
static int LUACALL wxListEvent_GetLabel(lua_State *L)
{    
    const wxString *returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = &self->GetLabel();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// const wxString& GetText() const
static int LUACALL wxListEvent_GetText(lua_State *L)
{    
    const wxString *returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = &self->GetText();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// int GetImage() const
static int LUACALL wxListEvent_GetImage(lua_State *L)
{    
    int returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = self->GetImage();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetData() const
static int LUACALL wxListEvent_GetData(lua_State *L)
{    
    long returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = self->GetData();
    lua_pushnumber(L, returns);
    return 1;
}

// long GetMask() const
static int LUACALL wxListEvent_GetMask(lua_State *L)
{    
    long returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = self->GetMask();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxListItem& GetItem() const
static int LUACALL wxListEvent_GetItem(lua_State *L)
{    
    const wxListItem *returns;
    wxListEvent *self = (wxListEvent*)getuserdatatype(L, 1, s_wxListEvent);
    returns = &self->GetItem();
    pushuserdatatype(L, s_wxListItem, returns);
    return 1;
}

static int LUACALL wxRadioBox_destructor(lua_State *)
{
    return 0;
}

// wxRadioBox(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, int majorDimension = 0, long style = wxRA_SPECIFY_COLS, const wxValidator& validator = wxDefaultValidator, const wxString& name = "radioBox")
int LUACALL wxRadioBox_constructor(lua_State *L)
{
    wxRadioBox *returns;
    // get number of arguments
    int   argCount = lua_gettop(L);
    // const wxString& name = "radioBox"
    wxString name = (argCount >= 10 ? lua2wx(lua_tostring(L, 10)) : wxT("radioBox"));
    // const wxValidator& validator = wxDefaultValidator
    const wxValidator *validator = (argCount >= 9 ? (wxValidator *) getuserdatatype(L, 9, s_wxValidator) : &wxDefaultValidator);
    // long style = wxRA_SPECIFY_COLS
    long style = (argCount >= 8 ? (long) lua_tonumber(L, 8) : wxRA_SPECIFY_COLS);
    // int majorDimension = 0
    int majorDimension = (argCount >= 7 ? (int) lua_tonumber(L, 7) : 0);
    // const wxString choices[] = NULL
    int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = (argCount >= 6 ? tostringarray(L, 6, count) : NULL);
    // const wxSize& size = wxDefaultSize
    const wxSize *size = (argCount >= 5 ? (wxSize *) getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    // const wxPoint& point = wxDefaultPosition
    const wxPoint *point = (argCount >= 4 ? (wxPoint *) getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    // const wxString& label
    wxString label = lua2wx(lua_tostring(L, 3));
    // wxWindowID id
    wxWindowID id = (wxWindowID) lua_tonumber(L, 2);
    // wxWindow* parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 1, s_wxWindow);
    // call constructor
    returns = new wxRadioBox(parent, id, label, *point, *size, count, choices, majorDimension, style, *validator, name);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxRadioBox, returns );
    // return the number of parameters
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, int majorDimension = 0, long style = wxRA_SPECIFY_COLS, const wxValidator& validator = wxDefaultValidator, const wxString& name = "radioBox")
static int LUACALL wxRadioBox_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 12 ? lua2wx(getstringtype(L, 12)) : wxT("radioBox"));
    const wxValidator *validator = (argCount >= 11 ? (wxValidator*)getuserdatatype(L, 11, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 10 ? (long) getnumbertype(L, 10) : wxRA_SPECIFY_COLS);
    int majorDimension = (argCount >= 9 ? (int) getnumbertype(L, 9) : 0);
    int count = 0; SmartStringArray ptr; wxString *choices; ptr = choices = (argCount >= 8 ? tostringarray(L, 8, count) : NULL);
    int n = (argCount >= 7 ? (int) getnumbertype(L, 7) : 0);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *point = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString label = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    returns = self->Create(parent, id, label, *point, *size, n, choices, majorDimension, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// void Enable(const bool enable)
static int LUACALL wxRadioBox_Enable(lua_State *L)
{        
    const bool enable = getbooleantype(L, 2);
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    self->Enable(enable);
    return 0;
}

// %rename EnableItem void Enable(int n, const bool enable)
static int LUACALL wxRadioBox_EnableItem(lua_State *L)
{        
    const bool enable = getbooleantype(L, 3);
    int n = (int) getnumbertype(L, 2);
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    self->Enable(n, enable);
    return 0;
}

// int FindString(const wxString& string) const
static int LUACALL wxRadioBox_FindString(lua_State *L)
{    
    int returns;    
    wxString string = lua2wx(getstringtype(L, 2));
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    returns = self->FindString(string);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename GetItemString wxString GetString(int n) const
static int LUACALL wxRadioBox_GetItemString(lua_State *L)
{    
    wxString returns;    
    int n = (int) getnumbertype(L, 2);
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    returns = self->GetString(n);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetSelection() const
static int LUACALL wxRadioBox_GetSelection(lua_State *L)
{    
    int returns;
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    returns = self->GetSelection();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetStringSelection() const
static int LUACALL wxRadioBox_GetStringSelection(lua_State *L)
{    
    wxString returns;
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    returns = self->GetStringSelection();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// ~%wxver22 int GetCount() const
static int LUACALL wxRadioBox_GetCount(lua_State *L)
{    
    int returns;
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

// ~%wxver22 %rename SetItemString void SetString(int n, const wxString &label)
static int LUACALL wxRadioBox_SetItemString(lua_State *L)
{        
    wxString label = lua2wx(getstringtype(L, 3));
    int n = (int) getnumbertype(L, 2);
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    self->SetString(n, label);
    return 0;
}

// void SetSelection(int n)
static int LUACALL wxRadioBox_SetSelection(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    self->SetSelection(n);
    return 0;
}

// void SetStringSelection(const wxString& string)
static int LUACALL wxRadioBox_SetStringSelection(lua_State *L)
{        
    wxString string = lua2wx(getstringtype(L, 2));
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    self->SetStringSelection(string);
    return 0;
}

// void Show(const bool show)
static int LUACALL wxRadioBox_Show(lua_State *L)
{        
    const bool show = getbooleantype(L, 2);
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    self->Show(show);
    return 0;
}

// %rename ShowItem void Show(int item, const bool show)
static int LUACALL wxRadioBox_ShowItem(lua_State *L)
{        
    const bool show = getbooleantype(L, 3);
    int item = (int) getnumbertype(L, 2);
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    self->Show(item, show);
    return 0;
}

// wxString GetString(int n) const
static int LUACALL wxRadioBox_GetString(lua_State *L)
{    
    wxString returns;    
    int n = (int) getnumbertype(L, 2);
    wxRadioBox *self = (wxRadioBox*)getuserdatatype(L, 1, s_wxRadioBox);
    returns = self->GetString(n);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

static int LUACALL wxRadioButton_destructor(lua_State *)
{
    return 0;
}

// wxRadioButton(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "radioButton")
static int LUACALL wxRadioButton_constructor(lua_State *L)
{    
    wxRadioButton *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("radioButton"));
    const wxValidator *validator = (argCount >= 7 ? (wxValidator*)getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString label = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxRadioButton(parent, id, label, *pos, *size, style, *validator, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxRadioButton, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "radioButton")
static int LUACALL wxRadioButton_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxT("radioButton"));
    const wxValidator *validator = (argCount >= 8 ? (wxValidator*)getuserdatatype(L, 8, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : 0);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString label = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxRadioButton *self = (wxRadioButton*)getuserdatatype(L, 1, s_wxRadioButton);
    returns = self->Create(parent, id, label, *pos, *size, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetValue() const
static int LUACALL wxRadioButton_GetValue(lua_State *L)
{    
    bool returns;
    wxRadioButton *self = (wxRadioButton*)getuserdatatype(L, 1, s_wxRadioButton);
    returns = self->GetValue();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetValue(const bool value)
static int LUACALL wxRadioButton_SetValue(lua_State *L)
{        
    const bool value = getbooleantype(L, 2);
    wxRadioButton *self = (wxRadioButton*)getuserdatatype(L, 1, s_wxRadioButton);
    self->SetValue(value);
    return 0;
}

static int LUACALL wxScrollBar_destructor(lua_State *)
{
    return 0;
}

// wxScrollBar(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSB_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "scrollBar")
static int LUACALL wxScrollBar_constructor(lua_State *L)
{    
    wxScrollBar *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("scrollBar"));
    const wxValidator *validator = (argCount >= 6 ? (wxValidator*)getuserdatatype(L, 6, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxSB_HORIZONTAL);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxScrollBar(parent, id, *pos, *size, style, *validator, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxScrollBar, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSB_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "scrollBar")
static int LUACALL wxScrollBar_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("scrollBar"));
    const wxValidator *validator = (argCount >= 7 ? (wxValidator*)getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxSB_HORIZONTAL);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxScrollBar *self = (wxScrollBar*)getuserdatatype(L, 1, s_wxScrollBar);
    returns = self->Create(parent, id, *pos, *size, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetRange() const
static int LUACALL wxScrollBar_GetRange(lua_State *L)
{    
    int returns;
    wxScrollBar *self = (wxScrollBar*)getuserdatatype(L, 1, s_wxScrollBar);
    returns = self->GetRange();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetPageSize() const
static int LUACALL wxScrollBar_GetPageSize(lua_State *L)
{    
    int returns;
    wxScrollBar *self = (wxScrollBar*)getuserdatatype(L, 1, s_wxScrollBar);
    returns = self->GetPageSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetThumbPosition() const
static int LUACALL wxScrollBar_GetThumbPosition(lua_State *L)
{    
    int returns;
    wxScrollBar *self = (wxScrollBar*)getuserdatatype(L, 1, s_wxScrollBar);
    returns = self->GetThumbPosition();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetThumbPosition(int viewStart)
static int LUACALL wxScrollBar_SetThumbPosition(lua_State *L)
{        
    int viewStart = (int) getnumbertype(L, 2);
    wxScrollBar *self = (wxScrollBar*)getuserdatatype(L, 1, s_wxScrollBar);
    self->SetThumbPosition(viewStart);
    return 0;
}

// virtual void SetScrollbar(int position, int thumbSize, int range, int pageSize, const bool refresh = TRUE)
static int LUACALL wxScrollBar_SetScrollbar(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const bool refresh = (argCount >= 6 ? getbooleantype(L, 6) : TRUE);
    int pageSize = (int) getnumbertype(L, 5);
    int range = (int) getnumbertype(L, 4);
    int thumbSize = (int) getnumbertype(L, 3);
    int position = (int) getnumbertype(L, 2);
    wxScrollBar *self = (wxScrollBar*)getuserdatatype(L, 1, s_wxScrollBar);
    self->SetScrollbar(position, thumbSize, range, pageSize, refresh);
    return 0;
}

static int LUACALL wxSlider_destructor(lua_State *)
{
    return 0;
}

// wxSlider(wxWindow* parent, wxWindowID id, int value , int minValue, int maxValue, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSL_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "slider")
static int LUACALL wxSlider_constructor(lua_State *L)
{    
    wxSlider *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 10 ? lua2wx(getstringtype(L, 10)) : wxT("slider"));
    const wxValidator *validator = (argCount >= 9 ? (wxValidator*)getuserdatatype(L, 9, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 8 ? (long) getnumbertype(L, 8) : wxSL_HORIZONTAL);
    const wxSize *size = (argCount >= 7 ? (wxSize*)getuserdatatype(L, 7, s_wxSize) : &wxDefaultSize);
    const wxPoint *point = (argCount >= 6 ? (wxPoint*)getuserdatatype(L, 6, s_wxPoint) : &wxDefaultPosition);
    int maxValue = (int) getnumbertype(L, 5);
    int minValue = (int) getnumbertype(L, 4);
    int value = (int) getnumbertype(L, 3);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxSlider(parent, id, value, minValue, maxValue, *point, *size, style, *validator, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxSlider, returns);
    return 1;
}

// void ClearSel()
static int LUACALL wxSlider_ClearSel(lua_State *L)
{    
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->ClearSel();
    return 0;
}

// void ClearTicks()
static int LUACALL wxSlider_ClearTicks(lua_State *L)
{    
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->ClearTicks();
    return 0;
}

// bool Create(wxWindow* parent, wxWindowID id, int value , int minValue, int maxValue, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSL_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "slider")
static int LUACALL wxSlider_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 11 ? lua2wx(getstringtype(L, 11)) : wxT("slider"));
    const wxValidator *validator = (argCount >= 10 ? (wxValidator*)getuserdatatype(L, 10, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 9 ? (long) getnumbertype(L, 9) : wxSL_HORIZONTAL);
    const wxSize *size = (argCount >= 8 ? (wxSize*)getuserdatatype(L, 8, s_wxSize) : &wxDefaultSize);
    const wxPoint *point = (argCount >= 7 ? (wxPoint*)getuserdatatype(L, 7, s_wxPoint) : &wxDefaultPosition);
    int maxValue = (int) getnumbertype(L, 6);
    int minValue = (int) getnumbertype(L, 5);
    int value = (int) getnumbertype(L, 4);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->Create(parent, id, value, minValue, maxValue, *point, *size, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetLineSize() const
static int LUACALL wxSlider_GetLineSize(lua_State *L)
{    
    int returns;
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->GetLineSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMax() const
static int LUACALL wxSlider_GetMax(lua_State *L)
{    
    int returns;
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->GetMax();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMin() const
static int LUACALL wxSlider_GetMin(lua_State *L)
{    
    int returns;
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->GetMin();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetPageSize() const
static int LUACALL wxSlider_GetPageSize(lua_State *L)
{    
    int returns;
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->GetPageSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetSelEnd() const
static int LUACALL wxSlider_GetSelEnd(lua_State *L)
{    
    int returns;
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->GetSelEnd();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetSelStart() const
static int LUACALL wxSlider_GetSelStart(lua_State *L)
{    
    int returns;
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->GetSelStart();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetThumbLength() const
static int LUACALL wxSlider_GetThumbLength(lua_State *L)
{    
    int returns;
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->GetThumbLength();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetTickFreq() const
static int LUACALL wxSlider_GetTickFreq(lua_State *L)
{    
    int returns;
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->GetTickFreq();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetValue() const
static int LUACALL wxSlider_GetValue(lua_State *L)
{    
    int returns;
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    returns = self->GetValue();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetRange(int minValue, int maxValue)
static int LUACALL wxSlider_SetRange(lua_State *L)
{        
    int maxValue = (int) getnumbertype(L, 3);
    int minValue = (int) getnumbertype(L, 2);
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->SetRange(minValue, maxValue);
    return 0;
}

// void SetTickFreq(int n, int pos)
static int LUACALL wxSlider_SetTickFreq(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 3);
    int n = (int) getnumbertype(L, 2);
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->SetTickFreq(n, pos);
    return 0;
}

// void SetLineSize(int lineSize)
static int LUACALL wxSlider_SetLineSize(lua_State *L)
{        
    int lineSize = (int) getnumbertype(L, 2);
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->SetLineSize(lineSize);
    return 0;
}

// void SetPageSize(int pageSize)
static int LUACALL wxSlider_SetPageSize(lua_State *L)
{        
    int pageSize = (int) getnumbertype(L, 2);
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->SetPageSize(pageSize);
    return 0;
}

// void SetSelection(int startPos, int endPos)
static int LUACALL wxSlider_SetSelection(lua_State *L)
{        
    int endPos = (int) getnumbertype(L, 3);
    int startPos = (int) getnumbertype(L, 2);
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->SetSelection(startPos, endPos);
    return 0;
}

// void SetThumbLength(int len)
static int LUACALL wxSlider_SetThumbLength(lua_State *L)
{        
    int len = (int) getnumbertype(L, 2);
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->SetThumbLength(len);
    return 0;
}

// void SetTick(int tickPos)
static int LUACALL wxSlider_SetTick(lua_State *L)
{        
    int tickPos = (int) getnumbertype(L, 2);
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->SetTick(tickPos);
    return 0;
}

// void SetValue(int value)
static int LUACALL wxSlider_SetValue(lua_State *L)
{        
    int value = (int) getnumbertype(L, 2);
    wxSlider *self = (wxSlider*)getuserdatatype(L, 1, s_wxSlider);
    self->SetValue(value);
    return 0;
}

static int LUACALL wxSpinButton_destructor(lua_State *)
{
    return 0;
}

// wxSpinButton(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_VERTICAL | wxSP_ARROW_KEYS, const wxString& name = "wxSpinButton")
static int LUACALL wxSpinButton_constructor(lua_State *L)
{    
    wxSpinButton *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("wxSpinButton"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxSP_VERTICAL | wxSP_ARROW_KEYS);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 2 ? (wxWindowID) getnumbertype(L, 2) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxSpinButton(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxSpinButton, returns);
    return 1;
}

// bool Create(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_VERTICAL | wxSP_ARROW_KEYS, const wxString& name = "wxSpinButton")
static int LUACALL wxSpinButton_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("wxSpinButton"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxSP_VERTICAL | wxSP_ARROW_KEYS);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 3 ? (wxWindowID) getnumbertype(L, 3) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSpinButton *self = (wxSpinButton*)getuserdatatype(L, 1, s_wxSpinButton);
    returns = self->Create(parent, id, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetMax() const
static int LUACALL wxSpinButton_GetMax(lua_State *L)
{    
    int returns;
    wxSpinButton *self = (wxSpinButton*)getuserdatatype(L, 1, s_wxSpinButton);
    returns = self->GetMax();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMin() const
static int LUACALL wxSpinButton_GetMin(lua_State *L)
{    
    int returns;
    wxSpinButton *self = (wxSpinButton*)getuserdatatype(L, 1, s_wxSpinButton);
    returns = self->GetMin();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetValue() const
static int LUACALL wxSpinButton_GetValue(lua_State *L)
{    
    int returns;
    wxSpinButton *self = (wxSpinButton*)getuserdatatype(L, 1, s_wxSpinButton);
    returns = self->GetValue();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetRange(int min, int max)
static int LUACALL wxSpinButton_SetRange(lua_State *L)
{        
    int max = (int) getnumbertype(L, 3);
    int min = (int) getnumbertype(L, 2);
    wxSpinButton *self = (wxSpinButton*)getuserdatatype(L, 1, s_wxSpinButton);
    self->SetRange(min, max);
    return 0;
}

// void SetValue(int value)
static int LUACALL wxSpinButton_SetValue(lua_State *L)
{        
    int value = (int) getnumbertype(L, 2);
    wxSpinButton *self = (wxSpinButton*)getuserdatatype(L, 1, s_wxSpinButton);
    self->SetValue(value);
    return 0;
}

static int LUACALL wxSpinEvent_destructor(lua_State *L)
{
    wxSpinEvent * self = (wxSpinEvent*)getuserdatatype(L, 1, s_wxSpinEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxSpinEvent_Delete(lua_State *L)
{
    wxSpinEvent * self = (wxSpinEvent*)getuserdatatype(L, 1, s_wxSpinEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxSpinEvent(wxEventType commandType = wxEVT_NULL, int id = 0)
static int LUACALL wxSpinEvent_constructor(lua_State *L)
{    
    wxSpinEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxEventType commandType = (argCount >= 1 ? (wxEventType) getnumbertype(L, 1) : wxEVT_NULL);
    returns = new wxSpinEvent(commandType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSpinEvent, returns);
    return 1;
}

// int GetPosition() const
static int LUACALL wxSpinEvent_GetPosition(lua_State *L)
{    
    int returns;
    wxSpinEvent *self = (wxSpinEvent*)getuserdatatype(L, 1, s_wxSpinEvent);
    returns = self->GetPosition();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetPosition(int pos)
static int LUACALL wxSpinEvent_SetPosition(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxSpinEvent *self = (wxSpinEvent*)getuserdatatype(L, 1, s_wxSpinEvent);
    self->SetPosition(pos);
    return 0;
}

static int LUACALL wxSpinCtrl_destructor(lua_State *)
{
    return 0;
}

// wxSpinCtrl(wxWindow* parent, wxWindowID id = -1, const wxString& value = wxEmptyString, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_ARROW_KEYS, int min = 0, int max = 100, int initial = 0, const wxString& name = "wxSpinCtrl")
static int LUACALL wxSpinCtrl_constructor(lua_State *L)
{    
    wxSpinCtrl *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 10 ? lua2wx(getstringtype(L, 10)) : wxT("wxSpinCtrl"));
    int initial = (argCount >= 9 ? (int) getnumbertype(L, 9) : 0);
    int max = (argCount >= 8 ? (int) getnumbertype(L, 8) : 100);
    int min = (argCount >= 7 ? (int) getnumbertype(L, 7) : 0);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxSP_ARROW_KEYS);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString value = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxWindowID id = (argCount >= 2 ? (wxWindowID) getnumbertype(L, 2) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxSpinCtrl(parent, id, value, *pos, *size, style, min, max, initial, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxSpinCtrl, returns);
    return 1;
}

// bool Create(wxWindow* parent, wxWindowID id = -1, const wxString& value = wxEmptyString, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_ARROW_KEYS, int min = 0, int max = 100, int initial = 0, const wxString& name = "wxSpinCtrl")
static int LUACALL wxSpinCtrl_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 11 ? lua2wx(getstringtype(L, 11)) : wxT("wxSpinCtrl"));
    int initial = (argCount >= 10 ? (int) getnumbertype(L, 10) : 0);
    int max = (argCount >= 9 ? (int) getnumbertype(L, 9) : 100);
    int min = (argCount >= 8 ? (int) getnumbertype(L, 8) : 0);
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : wxSP_ARROW_KEYS);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString value = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxString(wxEmptyString));
    wxWindowID id = (argCount >= 3 ? (wxWindowID) getnumbertype(L, 3) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSpinCtrl *self = (wxSpinCtrl*)getuserdatatype(L, 1, s_wxSpinCtrl);
    returns = self->Create(parent, id, value, *pos, *size, style, min, max, initial, name);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetValue(const wxString& text)
static int LUACALL wxSpinCtrl_SetValue(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxSpinCtrl *self = (wxSpinCtrl*)getuserdatatype(L, 1, s_wxSpinCtrl);
    self->SetValue(text);
    return 0;
}

// %rename SetValueInt void SetValue(int iValue)
static int LUACALL wxSpinCtrl_SetValueInt(lua_State *L)
{        
    int iValue = (int) getnumbertype(L, 2);
    wxSpinCtrl *self = (wxSpinCtrl*)getuserdatatype(L, 1, s_wxSpinCtrl);
    self->SetValue(iValue);
    return 0;
}

// int GetValue() const
static int LUACALL wxSpinCtrl_GetValue(lua_State *L)
{    
    int returns;
    wxSpinCtrl *self = (wxSpinCtrl*)getuserdatatype(L, 1, s_wxSpinCtrl);
    returns = self->GetValue();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetRange(int minVal, int maxVal)
static int LUACALL wxSpinCtrl_SetRange(lua_State *L)
{        
    int maxVal = (int) getnumbertype(L, 3);
    int minVal = (int) getnumbertype(L, 2);
    wxSpinCtrl *self = (wxSpinCtrl*)getuserdatatype(L, 1, s_wxSpinCtrl);
    self->SetRange(minVal, maxVal);
    return 0;
}

// int GetMin() const
static int LUACALL wxSpinCtrl_GetMin(lua_State *L)
{    
    int returns;
    wxSpinCtrl *self = (wxSpinCtrl*)getuserdatatype(L, 1, s_wxSpinCtrl);
    returns = self->GetMin();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMax() const
static int LUACALL wxSpinCtrl_GetMax(lua_State *L)
{    
    int returns;
    wxSpinCtrl *self = (wxSpinCtrl*)getuserdatatype(L, 1, s_wxSpinCtrl);
    returns = self->GetMax();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxTextCtrl_destructor(lua_State *)
{
    return 0;
}

// wxTextCtrl(wxWindow *parent, wxWindowID id, const wxString& value = wxEmptyString, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxTextCtrlNameStr)
static int LUACALL wxTextCtrl_constructor(lua_State *L)
{    
    wxTextCtrl *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxString(wxTextCtrlNameStr));
    const wxValidator *validator = (argCount >= 7 ? (wxValidator*)getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : 0);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString value = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxTextCtrl(parent, id, value, *pos, *size, style, *validator, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxTextCtrl, returns);
    return 1;
}

// void AppendText(const wxString& text)
static int LUACALL wxTextCtrl_AppendText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->AppendText(text);
    return 0;
}

// virtual bool CanCopy()
static int LUACALL wxTextCtrl_CanCopy(lua_State *L)
{    
    bool returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->CanCopy();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool CanCut()
static int LUACALL wxTextCtrl_CanCut(lua_State *L)
{    
    bool returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->CanCut();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool CanPaste()
static int LUACALL wxTextCtrl_CanPaste(lua_State *L)
{    
    bool returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->CanPaste();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool CanRedo()
static int LUACALL wxTextCtrl_CanRedo(lua_State *L)
{    
    bool returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->CanRedo();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool CanUndo()
static int LUACALL wxTextCtrl_CanUndo(lua_State *L)
{    
    bool returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->CanUndo();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void Clear()
static int LUACALL wxTextCtrl_Clear(lua_State *L)
{    
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->Clear();
    return 0;
}

// virtual void Copy()
static int LUACALL wxTextCtrl_Copy(lua_State *L)
{    
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->Copy();
    return 0;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "text")
static int LUACALL wxTextCtrl_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxT("text"));
    const wxValidator *validator = (argCount >= 8 ? (wxValidator*)getuserdatatype(L, 8, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : 0);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString value = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxT(""));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->Create(parent, id, value, *pos, *size, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void Cut()
static int LUACALL wxTextCtrl_Cut(lua_State *L)
{    
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->Cut();
    return 0;
}

// void DiscardEdits()
static int LUACALL wxTextCtrl_DiscardEdits(lua_State *L)
{    
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->DiscardEdits();
    return 0;
}

// virtual long GetInsertionPoint() const
static int LUACALL wxTextCtrl_GetInsertionPoint(lua_State *L)
{    
    long returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->GetInsertionPoint();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual long GetLastPosition() const
static int LUACALL wxTextCtrl_GetLastPosition(lua_State *L)
{    
    long returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->GetLastPosition();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetLineLength(long lineNo) const
static int LUACALL wxTextCtrl_GetLineLength(lua_State *L)
{    
    int returns;    
    long lineNo = (long) getnumbertype(L, 2);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->GetLineLength(lineNo);
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetLineText(long lineNo) const
static int LUACALL wxTextCtrl_GetLineText(lua_State *L)
{    
    wxString returns;    
    long lineNo = (long) getnumbertype(L, 2);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->GetLineText(lineNo);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetNumberOfLines() const
static int LUACALL wxTextCtrl_GetNumberOfLines(lua_State *L)
{    
    int returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->GetNumberOfLines();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual void GetSelection(long* from, long* to)
static int LUACALL wxTextCtrl_GetSelection(lua_State *L)
{
    long to;
    long from;
    // get this
    wxTextCtrl *self = ( wxTextCtrl * ) getuserdatatype(L, 1, s_wxTextCtrl );
    // call GetSelection
    self->GetSelection(&from, &to);
    lua_pushnumber(L, from);
    lua_pushnumber(L, to);
    // return the number of parameters
    return 2;
}

// wxString GetValue() const
static int LUACALL wxTextCtrl_GetValue(lua_State *L)
{    
    wxString returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->GetValue();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool IsModified() const
static int LUACALL wxTextCtrl_IsModified(lua_State *L)
{    
    bool returns;
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->IsModified();
    lua_pushboolean(L, returns);
    return 1;
}

// bool LoadFile(const wxString& filename)
static int LUACALL wxTextCtrl_LoadFile(lua_State *L)
{    
    bool returns;    
    wxString filename = lua2wx(getstringtype(L, 2));
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->LoadFile(filename);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void Paste()
static int LUACALL wxTextCtrl_Paste(lua_State *L)
{    
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->Paste();
    return 0;
}

// bool PositionToXY(long pos, long *x, long *y) const
static int LUACALL wxTextCtrl_PositionToXY(lua_State *L)
{
    bool returns;
    long y;
    long x;
    // long pos
    long pos = (long) getnumbertype(L, 2);
    // get this
    wxTextCtrl *self = ( wxTextCtrl * ) getuserdatatype(L, 1, s_wxTextCtrl );
    // call PositionToXY
    returns = self->PositionToXY(pos, &x, &y);
    // push the result number
    lua_pushboolean(L, returns);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 3;
}

// virtual void Redo()
static int LUACALL wxTextCtrl_Redo(lua_State *L)
{    
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->Redo();
    return 0;
}

// virtual void Remove(long from, long to)
static int LUACALL wxTextCtrl_Remove(lua_State *L)
{        
    long to = (long) getnumbertype(L, 3);
    long from = (long) getnumbertype(L, 2);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->Remove(from, to);
    return 0;
}

// virtual void Replace(long from, long to, const wxString& value)
static int LUACALL wxTextCtrl_Replace(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 4));
    long to = (long) getnumbertype(L, 3);
    long from = (long) getnumbertype(L, 2);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->Replace(from, to, value);
    return 0;
}

// bool SaveFile(const wxString& filename)
static int LUACALL wxTextCtrl_SaveFile(lua_State *L)
{    
    bool returns;    
    wxString filename = lua2wx(getstringtype(L, 2));
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->SaveFile(filename);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void SetEditable(const bool editable)
static int LUACALL wxTextCtrl_SetEditable(lua_State *L)
{        
    const bool editable = getbooleantype(L, 2);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->SetEditable(editable);
    return 0;
}

// virtual void SetInsertionPoint(long pos)
static int LUACALL wxTextCtrl_SetInsertionPoint(lua_State *L)
{        
    long pos = (long) getnumbertype(L, 2);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->SetInsertionPoint(pos);
    return 0;
}

// virtual void SetInsertionPointEnd()
static int LUACALL wxTextCtrl_SetInsertionPointEnd(lua_State *L)
{    
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->SetInsertionPointEnd();
    return 0;
}

// virtual void SetSelection(long from, long to)
static int LUACALL wxTextCtrl_SetSelection(lua_State *L)
{        
    long to = (long) getnumbertype(L, 3);
    long from = (long) getnumbertype(L, 2);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->SetSelection(from, to);
    return 0;
}

// virtual void SetValue(const wxString& value)
static int LUACALL wxTextCtrl_SetValue(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 2));
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->SetValue(value);
    return 0;
}

// void ShowPosition(long pos)
static int LUACALL wxTextCtrl_ShowPosition(lua_State *L)
{        
    long pos = (long) getnumbertype(L, 2);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->ShowPosition(pos);
    return 0;
}

// virtual void Undo()
static int LUACALL wxTextCtrl_Undo(lua_State *L)
{    
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->Undo();
    return 0;
}

// void WriteText(const wxString& text)
static int LUACALL wxTextCtrl_WriteText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    self->WriteText(text);
    return 0;
}

// long XYToPosition(long x, long y)
static int LUACALL wxTextCtrl_XYToPosition(lua_State *L)
{    
    long returns;    
    long y = (long) getnumbertype(L, 3);
    long x = (long) getnumbertype(L, 2);
    wxTextCtrl *self = (wxTextCtrl*)getuserdatatype(L, 1, s_wxTextCtrl);
    returns = self->XYToPosition(x, y);
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxTreeCtrl_destructor(lua_State *)
{
    return 0;
}

// wxTreeCtrl(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxTR_HAS_BUTTONS, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listCtrl")
static int LUACALL wxTreeCtrl_constructor(lua_State *L)
{    
    wxTreeCtrl *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("listCtrl"));
    const wxValidator *validator = (argCount >= 6 ? (wxValidator*)getuserdatatype(L, 6, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxTR_HAS_BUTTONS);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxTreeCtrl(parent, id, *pos, *size, style, *validator, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxTreeCtrl, returns);
    return 1;
}

// wxTreeItemId AddRoot(const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxTreeCtrl_AddRoot(lua_State *L)
{    
    wxTreeItemId *returns;
    int argCount = lua_gettop(L);    
    wxTreeItemData *data = (argCount >= 5 ? (wxTreeItemData*)getuserdatatype(L, 5, s_wxTreeItemData) : NULL);
    int selImage = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    int image = (argCount >= 3 ? (int) getnumbertype(L, 3) : -1);
    wxString text = lua2wx(getstringtype(L, 2));
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->AddRoot(text, image, selImage, data));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxTreeItemId AppendItem(const wxTreeItemId& parent, const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxTreeCtrl_AppendItem(lua_State *L)
{    
    wxTreeItemId *returns;
    int argCount = lua_gettop(L);    
    wxTreeItemData *data = (argCount >= 6 ? (wxTreeItemData*)getuserdatatype(L, 6, s_wxTreeItemData) : NULL);
    int selImage = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    int image = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    wxString text = lua2wx(getstringtype(L, 3));
    const wxTreeItemId *parent = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->AppendItem(*parent, text, image, selImage, data));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// void Collapse(const wxTreeItemId& item)
static int LUACALL wxTreeCtrl_Collapse(lua_State *L)
{        
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->Collapse(*item);
    return 0;
}

// void CollapseAndReset(const wxTreeItemId& item)
static int LUACALL wxTreeCtrl_CollapseAndReset(lua_State *L)
{        
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->CollapseAndReset(*item);
    return 0;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxTR_HAS_BUTTONS, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listCtrl")
static int LUACALL wxTreeCtrl_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("listCtrl"));
    const wxValidator *validator = (argCount >= 7 ? (wxValidator*)getuserdatatype(L, 7, s_wxValidator) : &wxDefaultValidator);
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxTR_HAS_BUTTONS);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->Create(parent, id, *pos, *size, style, *validator, name);
    lua_pushboolean(L, returns);
    return 1;
}

// void Delete(const wxTreeItemId& item)
static int LUACALL wxTreeCtrl_Delete(lua_State *L)
{        
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->Delete(*item);
    return 0;
}

// void DeleteAllItems()
static int LUACALL wxTreeCtrl_DeleteAllItems(lua_State *L)
{    
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->DeleteAllItems();
    return 0;
}

// void EditLabel(const wxTreeItemId& item)
static int LUACALL wxTreeCtrl_EditLabel(lua_State *L)
{        
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->EditLabel(*item);
    return 0;
}

// %win void EndEditLabel(const wxTreeItemId& item, bool discardChanges = FALSE)
static int LUACALL wxTreeCtrl_EndEditLabel(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool discardChanges = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->EndEditLabel(*item, discardChanges);
    return 0;
}

// void EnsureVisible(const wxTreeItemId& item)
static int LUACALL wxTreeCtrl_EnsureVisible(lua_State *L)
{        
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->EnsureVisible(*item);
    return 0;
}

// void Expand(const wxTreeItemId& item)
static int LUACALL wxTreeCtrl_Expand(lua_State *L)
{        
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->Expand(*item);
    return 0;
}

// %win bool GetBoundingRect(const wxTreeItemId& item, wxRect& rect, bool textOnly = FALSE) const
static int LUACALL wxTreeCtrl_GetBoundingRect(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool textOnly = (argCount >= 4 ? getbooleantype(L, 4) : FALSE);
    wxRect *rect = (wxRect*)getuserdatatype(L, 3, s_wxRect);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetBoundingRect(*item, *rect, textOnly);
    lua_pushboolean(L, returns);
    return 1;
}

// size_t GetChildrenCount(const wxTreeItemId& item, bool recursively = TRUE) const
static int LUACALL wxTreeCtrl_GetChildrenCount(lua_State *L)
{    
    size_t returns;
    int argCount = lua_gettop(L);    
    bool recursively = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetChildrenCount(*item, recursively);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetCount() const
static int LUACALL wxTreeCtrl_GetCount(lua_State *L)
{    
    int returns;
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

// ~<wxver25 wxTreeItemId GetFirstChild(const wxTreeItemId& item, wxTreeItemIdValue& cookie) const
static int LUACALL wxTreeCtrl_GetFirstChild(lua_State *L)
{    
    wxTreeItemId *returns;    
    wxTreeItemIdValue *cookie = (wxTreeItemIdValue*)getuserdatatype(L, 3, s_wxTreeItemIdValue);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetFirstChild(*item, *cookie));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxTreeItemId GetFirstVisibleItem() const
static int LUACALL wxTreeCtrl_GetFirstVisibleItem(lua_State *L)
{    
    wxTreeItemId *returns;
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetFirstVisibleItem());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxImageList* GetImageList() const
static int LUACALL wxTreeCtrl_GetImageList(lua_State *L)
{    
    wxImageList *returns;
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetImageList();
    pushuserdatatype(L, s_wxImageList, returns);
    return 1;
}

// int GetIndent() const
static int LUACALL wxTreeCtrl_GetIndent(lua_State *L)
{    
    int returns;
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetIndent();
    lua_pushnumber(L, returns);
    return 1;
}

// wxTreeItemData* GetItemData(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_GetItemData(lua_State *L)
{    
    wxTreeItemData *returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetItemData(*item);
    pushuserdatatype(L, s_wxTreeItemData, returns);
    return 1;
}

// int GetItemImage(const wxTreeItemId& item, wxTreeItemIcon which = wxTreeItemIcon_Normal) const
static int LUACALL wxTreeCtrl_GetItemImage(lua_State *L)
{    
    int returns;
    int argCount = lua_gettop(L);    
    wxTreeItemIcon which = (argCount >= 3 ? (wxTreeItemIcon) getenumerationtype(L, 3) : wxTreeItemIcon_Normal);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetItemImage(*item, which);
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetItemText(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_GetItemText(lua_State *L)
{    
    wxString returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetItemText(*item);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxTreeItemId GetLastChild(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_GetLastChild(lua_State *L)
{    
    wxTreeItemId *returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetLastChild(*item));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// ~<wxver25 wxTreeItemId GetNextChild(const wxTreeItemId& item, wxTreeItemIdValue& cookie) const
static int LUACALL wxTreeCtrl_GetNextChild(lua_State *L)
{    
    wxTreeItemId *returns;    
    wxTreeItemIdValue *cookie = (wxTreeItemIdValue*)getuserdatatype(L, 3, s_wxTreeItemIdValue);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetNextChild(*item, *cookie));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxTreeItemId GetNextSibling(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_GetNextSibling(lua_State *L)
{    
    wxTreeItemId *returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetNextSibling(*item));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxTreeItemId GetNextVisible(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_GetNextVisible(lua_State *L)
{    
    wxTreeItemId *returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetNextVisible(*item));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// ~<wxver24 wxTreeItemId GetItemParent(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_GetItemParent(lua_State *L)
{    
    wxTreeItemId *returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetItemParent(*item));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxTreeItemId GetPrevSibling(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_GetPrevSibling(lua_State *L)
{    
    wxTreeItemId *returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetPrevSibling(*item));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxTreeItemId GetPrevVisible(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_GetPrevVisible(lua_State *L)
{    
    wxTreeItemId *returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetPrevVisible(*item));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxTreeItemId GetRootItem() const
static int LUACALL wxTreeCtrl_GetRootItem(lua_State *L)
{    
    wxTreeItemId *returns;
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetRootItem());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxTreeItemId GetSelection() const
static int LUACALL wxTreeCtrl_GetSelection(lua_State *L)
{    
    wxTreeItemId *returns;
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->GetSelection());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// size_t GetSelections(wxArrayTreeItemIds& selection) const
static int LUACALL wxTreeCtrl_GetSelections(lua_State *L)
{    
    size_t returns;    
    wxArrayTreeItemIds *selection = (wxArrayTreeItemIds*)getuserdatatype(L, 2, s_wxArrayTreeItemIds);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetSelections(*selection);
    lua_pushnumber(L, returns);
    return 1;
}

// wxImageList* GetStateImageList() const
static int LUACALL wxTreeCtrl_GetStateImageList(lua_State *L)
{    
    wxImageList *returns;
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->GetStateImageList();
    pushuserdatatype(L, s_wxImageList, returns);
    return 1;
}

// wxTreeItemId HitTest(const wxPoint& point, int& flags)
static int LUACALL wxTreeCtrl_HitTest(lua_State *L)
{
    wxTreeItemId *returns;
    // int& flags
    int flags = 0;
    // const wxPoint& point
    const wxPoint *point = (wxPoint *) getuserdatatype(L, 2, s_wxPoint);
    // get this
    wxTreeCtrl *self = ( wxTreeCtrl * ) getuserdatatype(L, 1, s_wxTreeCtrl );
    // call HitTest
    // allocate a new object using the copy constructor
    returns = new wxTreeItemId(self->HitTest(*point, flags) );
    // add the new object to the tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the result datatype
    pushuserdatatype(L, s_wxTreeItemId, returns );
    lua_pushnumber(L, flags);
    // return the number of parameters
    return 2;
}

// wxTreeItemId InsertItem(const wxTreeItemId& parent, const wxTreeItemId& previous, const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxTreeCtrl_InsertItem(lua_State *L)
{    
    wxTreeItemId *returns;
    int argCount = lua_gettop(L);    
    wxTreeItemData *data = (argCount >= 7 ? (wxTreeItemData*)getuserdatatype(L, 7, s_wxTreeItemData) : NULL);
    int selImage = (argCount >= 6 ? (int) getnumbertype(L, 6) : -1);
    int image = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    wxString text = lua2wx(getstringtype(L, 4));
    const wxTreeItemId *previous = (wxTreeItemId*)getuserdatatype(L, 3, s_wxTreeItemId);
    const wxTreeItemId *parent = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->InsertItem(*parent, *previous, text, image, selImage, data));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// %rename InsertItemBefore wxTreeItemId InsertItem(const wxTreeItemId& parent, size_t before, const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxTreeCtrl_InsertItemBefore(lua_State *L)
{    
    wxTreeItemId *returns;
    int argCount = lua_gettop(L);    
    wxTreeItemData *data = (argCount >= 7 ? (wxTreeItemData*)getuserdatatype(L, 7, s_wxTreeItemData) : NULL);
    int selImage = (argCount >= 6 ? (int) getnumbertype(L, 6) : -1);
    int image = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    wxString text = lua2wx(getstringtype(L, 4));
    size_t before = (size_t) getnumbertype(L, 3);
    const wxTreeItemId *parent = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->InsertItem(*parent, before, text, image, selImage, data));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// bool IsBold(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_IsBold(lua_State *L)
{    
    bool returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->IsBold(*item);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsExpanded(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_IsExpanded(lua_State *L)
{    
    bool returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->IsExpanded(*item);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsSelected(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_IsSelected(lua_State *L)
{    
    bool returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->IsSelected(*item);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsVisible(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_IsVisible(lua_State *L)
{    
    bool returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->IsVisible(*item);
    lua_pushboolean(L, returns);
    return 1;
}

// bool ItemHasChildren(const wxTreeItemId& item) const
static int LUACALL wxTreeCtrl_ItemHasChildren(lua_State *L)
{    
    bool returns;    
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = self->ItemHasChildren(*item);
    lua_pushboolean(L, returns);
    return 1;
}

// wxTreeItemId PrependItem(const wxTreeItemId& parent, const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxTreeCtrl_PrependItem(lua_State *L)
{    
    wxTreeItemId *returns;
    int argCount = lua_gettop(L);    
    wxTreeItemData *data = (argCount >= 6 ? (wxTreeItemData*)getuserdatatype(L, 6, s_wxTreeItemData) : NULL);
    int selImage = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    int image = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    wxString text = lua2wx(getstringtype(L, 3));
    const wxTreeItemId *parent = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    returns = new wxTreeItemId(self->PrependItem(*parent, text, image, selImage, data));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// void ScrollTo(const wxTreeItemId& item)
static int LUACALL wxTreeCtrl_ScrollTo(lua_State *L)
{        
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->ScrollTo(*item);
    return 0;
}

// void SetIndent(int indent)
static int LUACALL wxTreeCtrl_SetIndent(lua_State *L)
{        
    int indent = (int) getnumbertype(L, 2);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetIndent(indent);
    return 0;
}

// void SetImageList(wxImageList* imageList)
static int LUACALL wxTreeCtrl_SetImageList(lua_State *L)
{        
    wxImageList *imageList = (wxImageList*)getuserdatatype(L, 2, s_wxImageList);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetImageList(imageList);
    return 0;
}

// void SetItemBackgroundColour(const wxTreeItemId& item, const wxColour& col)
static int LUACALL wxTreeCtrl_SetItemBackgroundColour(lua_State *L)
{        
    const wxColour *col = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetItemBackgroundColour(*item, *col);
    return 0;
}

// void SetItemBold(const wxTreeItemId& item, bool bold = TRUE)
static int LUACALL wxTreeCtrl_SetItemBold(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool bold = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetItemBold(*item, bold);
    return 0;
}

// void SetItemData(const wxTreeItemId& item, wxTreeItemData* data)
static int LUACALL wxTreeCtrl_SetItemData(lua_State *L)
{        
    wxTreeItemData *data = (wxTreeItemData*)getuserdatatype(L, 3, s_wxTreeItemData);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetItemData(*item, data);
    return 0;
}

// void SetItemFont(const wxTreeItemId& item, const wxFont& font)
static int LUACALL wxTreeCtrl_SetItemFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 3, s_wxFont);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetItemFont(*item, *font);
    return 0;
}

// void SetItemHasChildren(const wxTreeItemId& item, bool hasChildren = TRUE)
static int LUACALL wxTreeCtrl_SetItemHasChildren(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool hasChildren = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetItemHasChildren(*item, hasChildren);
    return 0;
}

// void SetItemImage(const wxTreeItemId& item, int image, wxTreeItemIcon which = wxTreeItemIcon_Normal)
static int LUACALL wxTreeCtrl_SetItemImage(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxTreeItemIcon which = (argCount >= 4 ? (wxTreeItemIcon) getenumerationtype(L, 4) : wxTreeItemIcon_Normal);
    int image = (int) getnumbertype(L, 3);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetItemImage(*item, image, which);
    return 0;
}

// void SetItemText(const wxTreeItemId& item, const wxString& text)
static int LUACALL wxTreeCtrl_SetItemText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 3));
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetItemText(*item, text);
    return 0;
}

// void SetItemTextColour(const wxTreeItemId& item, const wxColour& col)
static int LUACALL wxTreeCtrl_SetItemTextColour(lua_State *L)
{        
    const wxColour *col = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetItemTextColour(*item, *col);
    return 0;
}

// void SetStateImageList(wxImageList* imageList)
static int LUACALL wxTreeCtrl_SetStateImageList(lua_State *L)
{        
    wxImageList *imageList = (wxImageList*)getuserdatatype(L, 2, s_wxImageList);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SetStateImageList(imageList);
    return 0;
}

// void SortChildren(const wxTreeItemId& item)
static int LUACALL wxTreeCtrl_SortChildren(lua_State *L)
{        
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->SortChildren(*item);
    return 0;
}

// void Toggle(const wxTreeItemId& item)
static int LUACALL wxTreeCtrl_Toggle(lua_State *L)
{        
    const wxTreeItemId *item = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->Toggle(*item);
    return 0;
}

// void Unselect()
static int LUACALL wxTreeCtrl_Unselect(lua_State *L)
{    
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->Unselect();
    return 0;
}

// void UnselectAll()
static int LUACALL wxTreeCtrl_UnselectAll(lua_State *L)
{    
    wxTreeCtrl *self = (wxTreeCtrl*)getuserdatatype(L, 1, s_wxTreeCtrl);
    self->UnselectAll();
    return 0;
}

static int LUACALL wxTreeItemAttr_destructor(lua_State *)
{
    return 0;
}

// wxTreeItemAttr(const wxColour& colText = wxNullColour, const wxColour& colBack = wxNullColour, const wxFont& font = wxNullFont)
static int LUACALL wxTreeItemAttr_constructor(lua_State *L)
{    
    wxTreeItemAttr *returns;
    int argCount = lua_gettop(L);    
    const wxFont *font = (argCount >= 3 ? (wxFont*)getuserdatatype(L, 3, s_wxFont) : &wxNullFont);
    const wxColour *colBack = (argCount >= 2 ? (wxColour*)getuserdatatype(L, 2, s_wxColour) : &wxNullColour);
    const wxColour *colText = (argCount >= 1 ? (wxColour*)getuserdatatype(L, 1, s_wxColour) : &wxNullColour);
    returns = new wxTreeItemAttr(*colText, *colBack, *font);
    pushuserdatatype(L, s_wxTreeItemAttr, returns);
    return 1;
}

// void    SetTextColour(const wxColour& colText)
static int LUACALL wxTreeItemAttr_SetTextColour(lua_State *L)
{        
    const wxColour *colText = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxTreeItemAttr *self = (wxTreeItemAttr*)getuserdatatype(L, 1, s_wxTreeItemAttr);
    self->SetTextColour(*colText);
    return 0;
}

// void    SetBackgroundColour(const wxColour& colBack)
static int LUACALL wxTreeItemAttr_SetBackgroundColour(lua_State *L)
{        
    const wxColour *colBack = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxTreeItemAttr *self = (wxTreeItemAttr*)getuserdatatype(L, 1, s_wxTreeItemAttr);
    self->SetBackgroundColour(*colBack);
    return 0;
}

// void    SetFont(const wxFont& font)
static int LUACALL wxTreeItemAttr_SetFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxTreeItemAttr *self = (wxTreeItemAttr*)getuserdatatype(L, 1, s_wxTreeItemAttr);
    self->SetFont(*font);
    return 0;
}

// bool    HasTextColour()
static int LUACALL wxTreeItemAttr_HasTextColour(lua_State *L)
{    
    bool returns;
    wxTreeItemAttr *self = (wxTreeItemAttr*)getuserdatatype(L, 1, s_wxTreeItemAttr);
    returns = self->HasTextColour();
    lua_pushboolean(L, returns);
    return 1;
}

// bool    HasBackgroundColour()
static int LUACALL wxTreeItemAttr_HasBackgroundColour(lua_State *L)
{    
    bool returns;
    wxTreeItemAttr *self = (wxTreeItemAttr*)getuserdatatype(L, 1, s_wxTreeItemAttr);
    returns = self->HasBackgroundColour();
    lua_pushboolean(L, returns);
    return 1;
}

// bool    HasFont()
static int LUACALL wxTreeItemAttr_HasFont(lua_State *L)
{    
    bool returns;
    wxTreeItemAttr *self = (wxTreeItemAttr*)getuserdatatype(L, 1, s_wxTreeItemAttr);
    returns = self->HasFont();
    lua_pushboolean(L, returns);
    return 1;
}

// const wxColour& GetTextColour()
static int LUACALL wxTreeItemAttr_GetTextColour(lua_State *L)
{    
    const wxColour *returns;
    wxTreeItemAttr *self = (wxTreeItemAttr*)getuserdatatype(L, 1, s_wxTreeItemAttr);
    returns = &self->GetTextColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxColour& GetBackgroundColour()
static int LUACALL wxTreeItemAttr_GetBackgroundColour(lua_State *L)
{    
    const wxColour *returns;
    wxTreeItemAttr *self = (wxTreeItemAttr*)getuserdatatype(L, 1, s_wxTreeItemAttr);
    returns = &self->GetBackgroundColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxFont& GetFont()
static int LUACALL wxTreeItemAttr_GetFont(lua_State *L)
{    
    const wxFont *returns;
    wxTreeItemAttr *self = (wxTreeItemAttr*)getuserdatatype(L, 1, s_wxTreeItemAttr);
    returns = &self->GetFont();
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

static int LUACALL wxTreeItemIdValue_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxTreeItemId_destructor(lua_State *L)
{
    wxTreeItemId * self = (wxTreeItemId*)getuserdatatype(L, 1, s_wxTreeItemId);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxTreeItemId_Delete(lua_State *L)
{
    wxTreeItemId * self = (wxTreeItemId*)getuserdatatype(L, 1, s_wxTreeItemId);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxTreeItemId()
static int LUACALL wxTreeItemId_constructor(lua_State *L)
{    
    wxTreeItemId *returns;
    returns = new wxTreeItemId();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// bool    IsOk()
static int LUACALL wxTreeItemId_IsOk(lua_State *L)
{    
    bool returns;
    wxTreeItemId *self = (wxTreeItemId*)getuserdatatype(L, 1, s_wxTreeItemId);
    returns = self->IsOk();
    lua_pushboolean(L, returns);
    return 1;
}

// double  GetValue() const;
static int LUACALL wxTreeItemId_GetValue(lua_State *L)
{    
    double returns;
    // get this
    wxTreeItemId *self = ( wxTreeItemId * ) getuserdatatype(L, 1, s_wxTreeItemId );
    // call GetValue
    returns = (long)self->m_pItem;
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}

// void SetValue(double value);
static int LUACALL wxTreeItemId_SetValue(lua_State *L)
{        
    // double value
    long value = (long) getnumbertype(L, 2);
    // get this
    wxTreeItemId *self = ( wxTreeItemId * ) getuserdatatype(L, 1, s_wxTreeItemId );
    // call SetValue
    self->m_pItem = (void *) value;
    // return the number of parameters
    return 0;
}

static int LUACALL wxArrayTreeItemIds_destructor(lua_State *)
{
    return 0;
}

// void Clear()
static int LUACALL wxArrayTreeItemIds_Clear(lua_State *L)
{    
    wxArrayTreeItemIds *self = (wxArrayTreeItemIds*)getuserdatatype(L, 1, s_wxArrayTreeItemIds);
    self->Clear();
    return 0;
}

// int  GetCount() const
static int LUACALL wxArrayTreeItemIds_GetCount(lua_State *L)
{    
    int returns;
    wxArrayTreeItemIds *self = (wxArrayTreeItemIds*)getuserdatatype(L, 1, s_wxArrayTreeItemIds);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

// void Empty()
static int LUACALL wxArrayTreeItemIds_Empty(lua_State *L)
{    
    wxArrayTreeItemIds *self = (wxArrayTreeItemIds*)getuserdatatype(L, 1, s_wxArrayTreeItemIds);
    self->Empty();
    return 0;
}

// bool IsEmpty() const
static int LUACALL wxArrayTreeItemIds_IsEmpty(lua_State *L)
{    
    bool returns;
    wxArrayTreeItemIds *self = (wxArrayTreeItemIds*)getuserdatatype(L, 1, s_wxArrayTreeItemIds);
    returns = self->IsEmpty();
    lua_pushboolean(L, returns);
    return 1;
}

// void Shrink()
static int LUACALL wxArrayTreeItemIds_Shrink(lua_State *L)
{    
    wxArrayTreeItemIds *self = (wxArrayTreeItemIds*)getuserdatatype(L, 1, s_wxArrayTreeItemIds);
    self->Shrink();
    return 0;
}

// void RemoveAt(size_t index)
static int LUACALL wxArrayTreeItemIds_RemoveAt(lua_State *L)
{        
    size_t index = (size_t) getnumbertype(L, 2);
    wxArrayTreeItemIds *self = (wxArrayTreeItemIds*)getuserdatatype(L, 1, s_wxArrayTreeItemIds);
    self->RemoveAt(index);
    return 0;
}

static int LUACALL wxTreeItemData_destructor(lua_State *)
{
    return 0;
}

// wxTreeItemData()
static int LUACALL wxTreeItemData_constructor(lua_State *L)
{    
    wxTreeItemData *returns;
    returns = new wxTreeItemData();
    pushuserdatatype(L, s_wxTreeItemData, returns);
    return 1;
}

// const wxTreeItemId& GetId()
static int LUACALL wxTreeItemData_GetId(lua_State *L)
{    
    const wxTreeItemId *returns;
    wxTreeItemData *self = (wxTreeItemData*)getuserdatatype(L, 1, s_wxTreeItemData);
    returns = &self->GetId();
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// void      SetId(const wxTreeItemId& id)
static int LUACALL wxTreeItemData_SetId(lua_State *L)
{        
    const wxTreeItemId *id = (wxTreeItemId*)getuserdatatype(L, 2, s_wxTreeItemId);
    wxTreeItemData *self = (wxTreeItemData*)getuserdatatype(L, 1, s_wxTreeItemData);
    self->SetId(*id);
    return 0;
}

static int LUACALL wxLuaTreeItemData_destructor(lua_State *)
{
    return 0;
}

// wxLuaTreeItemData(double value = 0);
static int LUACALL wxLuaTreeItemData_constructor(lua_State *L)
{    
    wxLuaTreeItemData *returns;
    int argCount = lua_gettop(L);    
    double value = (argCount >= 1 ? (double) getnumbertype(L, 1) : 0);
    returns = new wxLuaTreeItemData(value);
    pushuserdatatype(L, s_wxLuaTreeItemData, returns);
    return 1;
}

// double  GetValue() const;
static int LUACALL wxLuaTreeItemData_GetValue(lua_State *L)
{    
    double returns;
    wxLuaTreeItemData *self = (wxLuaTreeItemData*)getuserdatatype(L, 1, s_wxLuaTreeItemData);
    returns = self->GetValue();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetValue(double value);
static int LUACALL wxLuaTreeItemData_SetValue(lua_State *L)
{        
    double value = (double) getnumbertype(L, 2);
    wxLuaTreeItemData *self = (wxLuaTreeItemData*)getuserdatatype(L, 1, s_wxLuaTreeItemData);
    self->SetValue(value);
    return 0;
}

static int LUACALL wxTreeEvent_destructor(lua_State *L)
{
    wxTreeEvent * self = (wxTreeEvent*)getuserdatatype(L, 1, s_wxTreeEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxTreeEvent_Delete(lua_State *L)
{
    wxTreeEvent * self = (wxTreeEvent*)getuserdatatype(L, 1, s_wxTreeEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxTreeEvent(WXTYPE commandType = 0, int id = 0)
static int LUACALL wxTreeEvent_constructor(lua_State *L)
{    
    wxTreeEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    WXTYPE commandType = (argCount >= 1 ? (WXTYPE) getnumbertype(L, 1) : 0);
    returns = new wxTreeEvent(commandType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeEvent, returns);
    return 1;
}

// wxTreeItemId GetItem() const
static int LUACALL wxTreeEvent_GetItem(lua_State *L)
{    
    wxTreeItemId *returns;
    wxTreeEvent *self = (wxTreeEvent*)getuserdatatype(L, 1, s_wxTreeEvent);
    returns = new wxTreeItemId(self->GetItem());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxTreeItemId GetOldItem() const
static int LUACALL wxTreeEvent_GetOldItem(lua_State *L)
{    
    wxTreeItemId *returns;
    wxTreeEvent *self = (wxTreeEvent*)getuserdatatype(L, 1, s_wxTreeEvent);
    returns = new wxTreeItemId(self->GetOldItem());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTreeItemId, returns);
    return 1;
}

// wxPoint GetPoint() const
static int LUACALL wxTreeEvent_GetPoint(lua_State *L)
{    
    wxPoint *returns;
    wxTreeEvent *self = (wxTreeEvent*)getuserdatatype(L, 1, s_wxTreeEvent);
    returns = new wxPoint(self->GetPoint());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// ~%wxver22 int GetKeyCode() const
static int LUACALL wxTreeEvent_GetKeyCode(lua_State *L)
{    
    int returns;
    wxTreeEvent *self = (wxTreeEvent*)getuserdatatype(L, 1, s_wxTreeEvent);
    returns = self->GetKeyCode();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxString& GetLabel() const
static int LUACALL wxTreeEvent_GetLabel(lua_State *L)
{    
    const wxString *returns;
    wxTreeEvent *self = (wxTreeEvent*)getuserdatatype(L, 1, s_wxTreeEvent);
    returns = &self->GetLabel();
    lua_pushstring(L, wx2lua(*returns));
    return 1;
}

// %builtin wxString wxNow()
static int LUACALL builtin_wxNow(lua_State *L)
{    
    wxString returns;
    returns = wxNow();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin long wxGetLocalTime()
static int LUACALL builtin_wxGetLocalTime(lua_State *L)
{    
    long returns;
    returns = wxGetLocalTime();
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin long wxGetUTCTime()
static int LUACALL builtin_wxGetUTCTime(lua_State *L)
{    
    long returns;
    returns = wxGetUTCTime();
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin void wxStartTimer()
static int LUACALL builtin_wxStartTimer(lua_State *L)
{    
    wxStartTimer();
    return 0;
}

// %builtin long wxGetElapsedTime(bool resetTimer = TRUE)
static int LUACALL builtin_wxGetElapsedTime(lua_State *L)
{    
    long returns;
    int argCount = lua_gettop(L);    
    bool resetTimer = (argCount >= 1 ? getbooleantype(L, 1) : TRUE);
    returns = wxGetElapsedTime(resetTimer);
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin void wxSleep(int secs)
static int LUACALL builtin_wxSleep(lua_State *L)
{        
    int secs = (int) getnumbertype(L, 1);
    wxSleep(secs);
    return 0;
}

// %builtin void wxUsleep(unsigned long milliseconds)
static int LUACALL builtin_wxUsleep(lua_State *L)
{        
    unsigned long milliseconds = (unsigned long) getnumbertype(L, 1);
    wxUsleep(milliseconds);
    return 0;
}

static int LUACALL wxDateTime_destructor(lua_State *L)
{
    wxDateTime * self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxDateTime_Delete(lua_State *L)
{
    wxDateTime * self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxDateTime()
static int LUACALL wxDateTime_constructor(lua_State *L)
{    
    wxDateTime *returns;
    returns = new wxDateTime();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %constructor wxDateTimeFromTime(time_t dateTime)
static int LUACALL wxDateTimeFromTime_constructor(lua_State *L)
{    
    wxDateTime *returns;    
    time_t dateTime = (time_t) getnumbertype(L, 1);
    returns = new wxDateTime(dateTime);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %constructor wxDateTimeFromJDN(double dateTime)
static int LUACALL wxDateTimeFromJDN_constructor(lua_State *L)
{    
    wxDateTime *returns;    
    double dateTime = (double) getnumbertype(L, 1);
    returns = new wxDateTime(dateTime);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %constructor wxDateTimeFromHMS(int hour, int minute, int second, int millisec)
static int LUACALL wxDateTimeFromHMS_constructor(lua_State *L)
{    
    wxDateTime *returns;    
    int millisec = (int) getnumbertype(L, 4);
    int second = (int) getnumbertype(L, 3);
    int minute = (int) getnumbertype(L, 2);
    int hour = (int) getnumbertype(L, 1);
    returns = new wxDateTime(hour, minute, second, millisec);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %constructor wxDateTimeFromDMY(int day, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year, int hour = 0, int minute = 0, int second = 0, int millisec = 0)
static int LUACALL wxDateTimeFromDMY_constructor(lua_State *L)
{    
    wxDateTime *returns;
    int argCount = lua_gettop(L);    
    int millisec = (argCount >= 7 ? (int) getnumbertype(L, 7) : 0);
    int second = (argCount >= 6 ? (int) getnumbertype(L, 6) : 0);
    int minute = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int hour = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int year = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxDateTime::Inv_Year);
    wxDateTime::Month month = (argCount >= 2 ? (wxDateTime::Month) getenumerationtype(L, 2) : wxDateTime::Inv_Month);
    int day = (int) getnumbertype(L, 1);
    returns = new wxDateTime(day, month, year, hour, minute, second, millisec);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetToCurrent()
static int LUACALL wxDateTime_SetToCurrent(lua_State *L)
{    
    wxDateTime *returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetToCurrent();
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %rename SetToTime wxDateTime& Set(time_t time)
static int LUACALL wxDateTime_SetToTime(lua_State *L)
{    
    wxDateTime *returns;    
    time_t time = (time_t) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->Set(time);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %rename SetToJDN wxDateTime& Set(double dateTime)
static int LUACALL wxDateTime_SetToJDN(lua_State *L)
{    
    wxDateTime *returns;    
    double dateTime = (double) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->Set(dateTime);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %rename SetToHMS wxDateTime& Set(int hour, int minute, int second, int millisec)
static int LUACALL wxDateTime_SetToHMS(lua_State *L)
{    
    wxDateTime *returns;    
    int millisec = (int) getnumbertype(L, 5);
    int second = (int) getnumbertype(L, 4);
    int minute = (int) getnumbertype(L, 3);
    int hour = (int) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->Set(hour, minute, second, millisec);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %rename SetToDMY wxDateTime& Set(int day, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year, int hour = 0, int minute = 0, int second = 0, int millisec = 0)
static int LUACALL wxDateTime_SetToDMY(lua_State *L)
{    
    wxDateTime *returns;
    int argCount = lua_gettop(L);    
    int millisec = (argCount >= 8 ? (int) getnumbertype(L, 8) : 0);
    int second = (argCount >= 7 ? (int) getnumbertype(L, 7) : 0);
    int minute = (argCount >= 6 ? (int) getnumbertype(L, 6) : 0);
    int hour = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int year = (argCount >= 4 ? (int) getnumbertype(L, 4) : wxDateTime::Inv_Year);
    wxDateTime::Month month = (argCount >= 3 ? (wxDateTime::Month) getenumerationtype(L, 3) : wxDateTime::Inv_Month);
    int day = (int) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->Set(day, month, year, hour, minute, second, millisec);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& ResetTime()
static int LUACALL wxDateTime_ResetTime(lua_State *L)
{    
    wxDateTime *returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->ResetTime();
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetDay(int day)
static int LUACALL wxDateTime_SetDay(lua_State *L)
{    
    wxDateTime *returns;    
    int day = (int) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetDay(day);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetMonth(wxDateTime::Month month)
static int LUACALL wxDateTime_SetMonth(lua_State *L)
{    
    wxDateTime *returns;    
    wxDateTime::Month month = (wxDateTime::Month) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetMonth(month);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetYear(int year)
static int LUACALL wxDateTime_SetYear(lua_State *L)
{    
    wxDateTime *returns;    
    int year = (int) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetYear(year);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetHour(int hour)
static int LUACALL wxDateTime_SetHour(lua_State *L)
{    
    wxDateTime *returns;    
    int hour = (int) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetHour(hour);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetMinute(int minute)
static int LUACALL wxDateTime_SetMinute(lua_State *L)
{    
    wxDateTime *returns;    
    int minute = (int) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetMinute(minute);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetSecond(int second)
static int LUACALL wxDateTime_SetSecond(lua_State *L)
{    
    wxDateTime *returns;    
    int second = (int) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetSecond(second);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetMillisecond(int millisecond)
static int LUACALL wxDateTime_SetMillisecond(lua_State *L)
{    
    wxDateTime *returns;    
    int millisecond = (int) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetMillisecond(millisecond);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// bool IsWorkDay(wxDateTime::Country country = wxDateTime::Country_Default) const
static int LUACALL wxDateTime_IsWorkDay(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxDateTime::Country country = (argCount >= 2 ? (wxDateTime::Country) getenumerationtype(L, 2) : wxDateTime::Country_Default);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsWorkDay(country);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEqualTo(const wxDateTime& datetime) const
static int LUACALL wxDateTime_IsEqualTo(lua_State *L)
{    
    bool returns;    
    const wxDateTime *datetime = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsEqualTo(*datetime);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEarlierThan(const wxDateTime& datetime) const
static int LUACALL wxDateTime_IsEarlierThan(lua_State *L)
{    
    bool returns;    
    const wxDateTime *datetime = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsEarlierThan(*datetime);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsLaterThan(const wxDateTime& datetime) const
static int LUACALL wxDateTime_IsLaterThan(lua_State *L)
{    
    bool returns;    
    const wxDateTime *datetime = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsLaterThan(*datetime);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsStrictlyBetween(const wxDateTime& t1, const wxDateTime& t2) const
static int LUACALL wxDateTime_IsStrictlyBetween(lua_State *L)
{    
    bool returns;    
    const wxDateTime *t2 = (wxDateTime*)getuserdatatype(L, 3, s_wxDateTime);
    const wxDateTime *t1 = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsStrictlyBetween(*t1, *t2);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsBetween(const wxDateTime& t1, const wxDateTime& t2) const
static int LUACALL wxDateTime_IsBetween(lua_State *L)
{    
    bool returns;    
    const wxDateTime *t2 = (wxDateTime*)getuserdatatype(L, 3, s_wxDateTime);
    const wxDateTime *t1 = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsBetween(*t1, *t2);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsSameDate(const wxDateTime& dt) const
static int LUACALL wxDateTime_IsSameDate(lua_State *L)
{    
    bool returns;    
    const wxDateTime *dt = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsSameDate(*dt);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsSameTime(const wxDateTime& dt) const
static int LUACALL wxDateTime_IsSameTime(lua_State *L)
{    
    bool returns;    
    const wxDateTime *dt = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsSameTime(*dt);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEqualUpTo(const wxDateTime& dt, const wxTimeSpan& ts) const
static int LUACALL wxDateTime_IsEqualUpTo(lua_State *L)
{    
    bool returns;    
    const wxTimeSpan *ts = (wxTimeSpan*)getuserdatatype(L, 3, s_wxTimeSpan);
    const wxDateTime *dt = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsEqualUpTo(*dt, *ts);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsValid()
static int LUACALL wxDateTime_IsValid(lua_State *L)
{    
    bool returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsValid();
    lua_pushboolean(L, returns);
    return 1;
}

// long GetTicks()
static int LUACALL wxDateTime_GetTicks(lua_State *L)
{    
    long returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->GetTicks();
    lua_pushnumber(L, returns);
    return 1;
}

// wxDateTime& SetToWeekDayInSameWeek(wxDateTime::WeekDay weekday)
static int LUACALL wxDateTime_SetToWeekDayInSameWeek(lua_State *L)
{    
    wxDateTime *returns;    
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetToWeekDayInSameWeek(weekday);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime  GetWeekDayInSameWeek(wxDateTime::WeekDay weekday) const
static int LUACALL wxDateTime_GetWeekDayInSameWeek(lua_State *L)
{    
    wxDateTime *returns;    
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = new wxDateTime(self->GetWeekDayInSameWeek(weekday));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetToNextWeekDay(wxDateTime::WeekDay weekday)
static int LUACALL wxDateTime_SetToNextWeekDay(lua_State *L)
{    
    wxDateTime *returns;    
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetToNextWeekDay(weekday);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime GetNextWeekDay(wxDateTime::WeekDay weekday) const
static int LUACALL wxDateTime_GetNextWeekDay(lua_State *L)
{    
    wxDateTime *returns;    
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = new wxDateTime(self->GetNextWeekDay(weekday));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetToPrevWeekDay(wxDateTime::WeekDay weekday)
static int LUACALL wxDateTime_SetToPrevWeekDay(lua_State *L)
{    
    wxDateTime *returns;    
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetToPrevWeekDay(weekday);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime GetPrevWeekDay(wxDateTime::WeekDay weekday) const
static int LUACALL wxDateTime_GetPrevWeekDay(lua_State *L)
{    
    wxDateTime *returns;    
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = new wxDateTime(self->GetPrevWeekDay(weekday));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// bool SetToWeekDay(wxDateTime::WeekDay weekday, int n = 1, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year)
static int LUACALL wxDateTime_SetToWeekDay(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int year = (argCount >= 5 ? (int) getnumbertype(L, 5) : wxDateTime::Inv_Year);
    wxDateTime::Month month = (argCount >= 4 ? (wxDateTime::Month) getenumerationtype(L, 4) : wxDateTime::Inv_Month);
    int n = (argCount >= 3 ? (int) getnumbertype(L, 3) : 1);
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->SetToWeekDay(weekday, n, month, year);
    lua_pushboolean(L, returns);
    return 1;
}

// wxDateTime GetWeekDay(wxDateTime::WeekDay weekday, int n = 1, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year) const
static int LUACALL wxDateTime_GetWeekDay(lua_State *L)
{    
    wxDateTime *returns;
    int argCount = lua_gettop(L);    
    int year = (argCount >= 5 ? (int) getnumbertype(L, 5) : wxDateTime::Inv_Year);
    wxDateTime::Month month = (argCount >= 4 ? (wxDateTime::Month) getenumerationtype(L, 4) : wxDateTime::Inv_Month);
    int n = (argCount >= 3 ? (int) getnumbertype(L, 3) : 1);
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = new wxDateTime(self->GetWeekDay(weekday, n, month, year));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// bool SetToLastWeekDay(wxDateTime::WeekDay weekday, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year)
static int LUACALL wxDateTime_SetToLastWeekDay(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int year = (argCount >= 4 ? (int) getnumbertype(L, 4) : wxDateTime::Inv_Year);
    wxDateTime::Month month = (argCount >= 3 ? (wxDateTime::Month) getenumerationtype(L, 3) : wxDateTime::Inv_Month);
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->SetToLastWeekDay(weekday, month, year);
    lua_pushboolean(L, returns);
    return 1;
}

// wxDateTime GetLastWeekDay(wxDateTime::WeekDay weekday, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year)
static int LUACALL wxDateTime_GetLastWeekDay(lua_State *L)
{    
    wxDateTime *returns;
    int argCount = lua_gettop(L);    
    int year = (argCount >= 4 ? (int) getnumbertype(L, 4) : wxDateTime::Inv_Year);
    wxDateTime::Month month = (argCount >= 3 ? (wxDateTime::Month) getenumerationtype(L, 3) : wxDateTime::Inv_Month);
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay) getenumerationtype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = new wxDateTime(self->GetLastWeekDay(weekday, month, year));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// bool SetToTheWeek(wxDateTime_t numWeek, wxDateTime::WeekDay weekday = wxDateTime::Mon)
static int LUACALL wxDateTime_SetToTheWeek(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxDateTime::WeekDay weekday = (argCount >= 3 ? (wxDateTime::WeekDay) getenumerationtype(L, 3) : wxDateTime::Mon);
    unsigned short numWeek = (unsigned short) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->SetToTheWeek(numWeek, weekday);
    lua_pushboolean(L, returns);
    return 1;
}

// wxDateTime GetWeek(wxDateTime_t numWeek, wxDateTime::WeekDay weekday = wxDateTime::Mon) const
static int LUACALL wxDateTime_GetWeek(lua_State *L)
{    
    wxDateTime *returns;
    int argCount = lua_gettop(L);    
    wxDateTime::WeekDay weekday = (argCount >= 3 ? (wxDateTime::WeekDay) getenumerationtype(L, 3) : wxDateTime::Mon);
    unsigned short numWeek = (unsigned short) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = new wxDateTime(self->GetWeek(numWeek, weekday));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetToLastMonthDay(wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year)
static int LUACALL wxDateTime_SetToLastMonthDay(lua_State *L)
{    
    wxDateTime *returns;
    int argCount = lua_gettop(L);    
    int year = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxDateTime::Inv_Year);
    wxDateTime::Month month = (argCount >= 2 ? (wxDateTime::Month) getenumerationtype(L, 2) : wxDateTime::Inv_Month);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetToLastMonthDay(month, year);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime GetLastMonthDay(wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year) const
static int LUACALL wxDateTime_GetLastMonthDay(lua_State *L)
{    
    wxDateTime *returns;
    int argCount = lua_gettop(L);    
    int year = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxDateTime::Inv_Year);
    wxDateTime::Month month = (argCount >= 2 ? (wxDateTime::Month) getenumerationtype(L, 2) : wxDateTime::Inv_Month);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = new wxDateTime(self->GetLastMonthDay(month, year));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& SetToYearDay(wxDateTime_t yday)
static int LUACALL wxDateTime_SetToYearDay(lua_State *L)
{    
    wxDateTime *returns;    
    unsigned short yday = (unsigned short) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->SetToYearDay(yday);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime GetYearDay(wxDateTime_t yday) const
static int LUACALL wxDateTime_GetYearDay(lua_State *L)
{    
    wxDateTime *returns;    
    unsigned short yday = (unsigned short) getnumbertype(L, 2);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = new wxDateTime(self->GetYearDay(yday));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// double GetJulianDayNumber() const
static int LUACALL wxDateTime_GetJulianDayNumber(lua_State *L)
{    
    double returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->GetJulianDayNumber();
    lua_pushnumber(L, returns);
    return 1;
}

// double GetJDN() const
static int LUACALL wxDateTime_GetJDN(lua_State *L)
{    
    double returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->GetJDN();
    lua_pushnumber(L, returns);
    return 1;
}

// double GetModifiedJulianDayNumber() const
static int LUACALL wxDateTime_GetModifiedJulianDayNumber(lua_State *L)
{    
    double returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->GetModifiedJulianDayNumber();
    lua_pushnumber(L, returns);
    return 1;
}

// double GetMJD() const
static int LUACALL wxDateTime_GetMJD(lua_State *L)
{    
    double returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->GetMJD();
    lua_pushnumber(L, returns);
    return 1;
}

// double GetRataDie() const
static int LUACALL wxDateTime_GetRataDie(lua_State *L)
{    
    double returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->GetRataDie();
    lua_pushnumber(L, returns);
    return 1;
}

// wxDateTime ToGMT(bool noDST = FALSE) const
static int LUACALL wxDateTime_ToGMT(lua_State *L)
{    
    wxDateTime *returns;
    int argCount = lua_gettop(L);    
    bool noDST = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = new wxDateTime(self->ToGMT(noDST));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& MakeGMT(bool noDST = FALSE)
static int LUACALL wxDateTime_MakeGMT(lua_State *L)
{    
    wxDateTime *returns;
    int argCount = lua_gettop(L);    
    bool noDST = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->MakeGMT(noDST);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// int IsDST(wxDateTime::Country country = wxDateTime::Country_Default) const
static int LUACALL wxDateTime_IsDST(lua_State *L)
{    
    int returns;
    int argCount = lua_gettop(L);    
    wxDateTime::Country country = (argCount >= 2 ? (wxDateTime::Country) getenumerationtype(L, 2) : wxDateTime::Country_Default);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->IsDST(country);
    lua_pushnumber(L, returns);
    return 1;
}

// wxDateTime& Add(const wxTimeSpan& diff)
static int LUACALL wxDateTime_Add(lua_State *L)
{    
    wxDateTime *returns;    
    const wxTimeSpan *diff = (wxTimeSpan*)getuserdatatype(L, 2, s_wxTimeSpan);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->Add(*diff);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime& Subtract(const wxTimeSpan& diff)
static int LUACALL wxDateTime_Subtract(lua_State *L)
{    
    wxDateTime *returns;    
    const wxTimeSpan *diff = (wxTimeSpan*)getuserdatatype(L, 2, s_wxTimeSpan);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->Subtract(*diff);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %rename AddDateSpan wxDateTime& Add(const wxDateSpan& diff)
static int LUACALL wxDateTime_AddDateSpan(lua_State *L)
{    
    wxDateTime *returns;    
    const wxDateSpan *diff = (wxDateSpan*)getuserdatatype(L, 2, s_wxDateSpan);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->Add(*diff);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// %rename SubtractDateSpan wxDateTime& Subtract(const wxDateSpan& diff)
static int LUACALL wxDateTime_SubtractDateSpan(lua_State *L)
{    
    wxDateTime *returns;    
    const wxDateSpan *diff = (wxDateSpan*)getuserdatatype(L, 2, s_wxDateSpan);
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = &self->Subtract(*diff);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxString ParseRfc822Date(wxString date)
static int LUACALL wxDateTime_ParseRfc822Date(lua_State *L)
{    
    wxString returns;    
    wxString date = lua2wx(getstringtype(L, 2));
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->ParseRfc822Date(date);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString ParseFormat(wxString date, wxString format = "%c", const wxDateTime& dateDef = wxDefaultDateTime)
static int LUACALL wxDateTime_ParseFormat(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    const wxDateTime *dateDef = (argCount >= 4 ? (wxDateTime*)getuserdatatype(L, 4, s_wxDateTime) : &wxDefaultDateTime);
    wxString format = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT("%c"));
    wxString date = lua2wx(getstringtype(L, 2));
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->ParseFormat(date, format, *dateDef);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString ParseDateTime(wxString datetime)
static int LUACALL wxDateTime_ParseDateTime(lua_State *L)
{    
    wxString returns;    
    wxString datetime = lua2wx(getstringtype(L, 2));
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->ParseDateTime(datetime);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString ParseDate(wxString date)
static int LUACALL wxDateTime_ParseDate(lua_State *L)
{    
    wxString returns;    
    wxString date = lua2wx(getstringtype(L, 2));
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->ParseDate(date);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString ParseTime(wxString time)
static int LUACALL wxDateTime_ParseTime(lua_State *L)
{    
    wxString returns;    
    wxString time = lua2wx(getstringtype(L, 2));
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->ParseTime(time);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString FormatDate() const
static int LUACALL wxDateTime_FormatDate(lua_State *L)
{    
    wxString returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->FormatDate();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString FormatTime() const
static int LUACALL wxDateTime_FormatTime(lua_State *L)
{    
    wxString returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->FormatTime();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString FormatISODate() const
static int LUACALL wxDateTime_FormatISODate(lua_State *L)
{    
    wxString returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->FormatISODate();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString FormatISOTime() const
static int LUACALL wxDateTime_FormatISOTime(lua_State *L)
{    
    wxString returns;
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->FormatISOTime();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString Format(wxString format = "%c", wxDateTime::TZ tz = wxDateTime::Local) const
static int LUACALL wxDateTime_Format(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxDateTime::TZ tz = (argCount >= 3 ? (wxDateTime::TZ) getenumerationtype(L, 3) : wxDateTime::Local);
    wxString format = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT("%c"));
    wxDateTime *self = (wxDateTime*)getuserdatatype(L, 1, s_wxDateTime);
    returns = self->Format(format, tz);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

static int LUACALL wxTimeSpan_destructor(lua_State *L)
{
    wxTimeSpan * self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxTimeSpan_Delete(lua_State *L)
{
    wxTimeSpan * self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxTimeSpan()
static int LUACALL wxTimeSpan_constructor(lua_State *L)
{    
    wxTimeSpan *returns;
    returns = new wxTimeSpan();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Seconds wxTimeSpan wxTimeSpan::Seconds(long sec)
static int LUACALL builtin_wxTimeSpan_Seconds(lua_State *L)
{    
    wxTimeSpan *returns;    
    long sec = (long) getnumbertype(L, 1);
    returns = new wxTimeSpan(wxTimeSpan::Seconds(sec));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Second  wxTimeSpan wxTimeSpan::Second()
static int LUACALL builtin_wxTimeSpan_Second(lua_State *L)
{    
    wxTimeSpan *returns;
    returns = new wxTimeSpan(wxTimeSpan::Second());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Minutes wxTimeSpan wxTimeSpan::Minutes(long min)
static int LUACALL builtin_wxTimeSpan_Minutes(lua_State *L)
{    
    wxTimeSpan *returns;    
    long min = (long) getnumbertype(L, 1);
    returns = new wxTimeSpan(wxTimeSpan::Minutes(min));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Minute  wxTimeSpan wxTimeSpan::Minute()
static int LUACALL builtin_wxTimeSpan_Minute(lua_State *L)
{    
    wxTimeSpan *returns;
    returns = new wxTimeSpan(wxTimeSpan::Minute());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Hours   wxTimeSpan wxTimeSpan::Hours(long hours)
static int LUACALL builtin_wxTimeSpan_Hours(lua_State *L)
{    
    wxTimeSpan *returns;    
    long hours = (long) getnumbertype(L, 1);
    returns = new wxTimeSpan(wxTimeSpan::Hours(hours));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Hour    wxTimeSpan wxTimeSpan::Hour()
static int LUACALL builtin_wxTimeSpan_Hour(lua_State *L)
{    
    wxTimeSpan *returns;
    returns = new wxTimeSpan(wxTimeSpan::Hour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Days    wxTimeSpan wxTimeSpan::Days(long days)
static int LUACALL builtin_wxTimeSpan_Days(lua_State *L)
{    
    wxTimeSpan *returns;    
    long days = (long) getnumbertype(L, 1);
    returns = new wxTimeSpan(wxTimeSpan::Days(days));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Day     wxTimeSpan wxTimeSpan::Day()
static int LUACALL builtin_wxTimeSpan_Day(lua_State *L)
{    
    wxTimeSpan *returns;
    returns = new wxTimeSpan(wxTimeSpan::Day());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Weeks   wxTimeSpan wxTimeSpan::Weeks(long days)
static int LUACALL builtin_wxTimeSpan_Weeks(lua_State *L)
{    
    wxTimeSpan *returns;    
    long days = (long) getnumbertype(L, 1);
    returns = new wxTimeSpan(wxTimeSpan::Weeks(days));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %builtin %rename wxTimeSpan_Week    wxTimeSpan wxTimeSpan::Week()
static int LUACALL builtin_wxTimeSpan_Week(lua_State *L)
{    
    wxTimeSpan *returns;
    returns = new wxTimeSpan(wxTimeSpan::Week());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// %constructor wxTimeSpanHMS(long hours, long minutes = 0, long seconds = 0, long milliseconds = 0)
static int LUACALL wxTimeSpanHMS_constructor(lua_State *L)
{    
    wxTimeSpan *returns;
    int argCount = lua_gettop(L);    
    long milliseconds = (argCount >= 4 ? (long) getnumbertype(L, 4) : 0);
    long seconds = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    long minutes = (argCount >= 2 ? (long) getnumbertype(L, 2) : 0);
    long hours = (long) getnumbertype(L, 1);
    returns = new wxTimeSpan(hours, minutes, seconds, milliseconds);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// wxTimeSpan Add(const wxTimeSpan& diff) const
static int LUACALL wxTimeSpan_Add(lua_State *L)
{    
    wxTimeSpan *returns;    
    const wxTimeSpan *diff = (wxTimeSpan*)getuserdatatype(L, 2, s_wxTimeSpan);
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = new wxTimeSpan(self->Add(*diff));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// wxTimeSpan Subtract(const wxTimeSpan& diff) const
static int LUACALL wxTimeSpan_Subtract(lua_State *L)
{    
    wxTimeSpan *returns;    
    const wxTimeSpan *diff = (wxTimeSpan*)getuserdatatype(L, 2, s_wxTimeSpan);
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = new wxTimeSpan(self->Subtract(*diff));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// wxTimeSpan Multiply(int n) const
static int LUACALL wxTimeSpan_Multiply(lua_State *L)
{    
    wxTimeSpan *returns;    
    int n = (int) getnumbertype(L, 2);
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = new wxTimeSpan(self->Multiply(n));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// wxTimeSpan Negate() const
static int LUACALL wxTimeSpan_Negate(lua_State *L)
{    
    wxTimeSpan *returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = new wxTimeSpan(self->Negate());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// wxTimeSpan& Neg()
static int LUACALL wxTimeSpan_Neg(lua_State *L)
{    
    wxTimeSpan *returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = &self->Neg();
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// wxTimeSpan Abs()
static int LUACALL wxTimeSpan_Abs(lua_State *L)
{    
    wxTimeSpan *returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = new wxTimeSpan(self->Abs());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxTimeSpan, returns);
    return 1;
}

// bool IsNull() const
static int LUACALL wxTimeSpan_IsNull(lua_State *L)
{    
    bool returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->IsNull();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsPositive() const
static int LUACALL wxTimeSpan_IsPositive(lua_State *L)
{    
    bool returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->IsPositive();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsNegative() const
static int LUACALL wxTimeSpan_IsNegative(lua_State *L)
{    
    bool returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->IsNegative();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEqualTo(const wxTimeSpan& ts) const
static int LUACALL wxTimeSpan_IsEqualTo(lua_State *L)
{    
    bool returns;    
    const wxTimeSpan *ts = (wxTimeSpan*)getuserdatatype(L, 2, s_wxTimeSpan);
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->IsEqualTo(*ts);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsLongerThan(const wxTimeSpan& ts) const
static int LUACALL wxTimeSpan_IsLongerThan(lua_State *L)
{    
    bool returns;    
    const wxTimeSpan *ts = (wxTimeSpan*)getuserdatatype(L, 2, s_wxTimeSpan);
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->IsLongerThan(*ts);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsShorterThan(const wxTimeSpan& ts) const
static int LUACALL wxTimeSpan_IsShorterThan(lua_State *L)
{    
    bool returns;    
    const wxTimeSpan *ts = (wxTimeSpan*)getuserdatatype(L, 2, s_wxTimeSpan);
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->IsShorterThan(*ts);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetWeeks() const
static int LUACALL wxTimeSpan_GetWeeks(lua_State *L)
{    
    int returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->GetWeeks();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetDays() const
static int LUACALL wxTimeSpan_GetDays(lua_State *L)
{    
    int returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->GetDays();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetHours() const
static int LUACALL wxTimeSpan_GetHours(lua_State *L)
{    
    int returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->GetHours();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMinutes() const
static int LUACALL wxTimeSpan_GetMinutes(lua_State *L)
{    
    int returns;
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->GetMinutes();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString Format(wxString format = "%H:%M:%S") const
static int LUACALL wxTimeSpan_Format(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxString format = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT("%H:%M:%S"));
    wxTimeSpan *self = (wxTimeSpan*)getuserdatatype(L, 1, s_wxTimeSpan);
    returns = self->Format(format);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

static int LUACALL wxDateSpan_destructor(lua_State *L)
{
    wxDateSpan * self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxDateSpan_Delete(lua_State *L)
{
    wxDateSpan * self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxDateSpan(int years = 0, int months = 0, int weeks = 0, int days = 0)
static int LUACALL wxDateSpan_constructor(lua_State *L)
{    
    wxDateSpan *returns;
    int argCount = lua_gettop(L);    
    int days = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int weeks = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    int months = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    int years = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxDateSpan(years, months, weeks, days);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// %builtin %rename wxDateSpan_Days   wxDateSpan wxDateSpan::Days(int days)
static int LUACALL builtin_wxDateSpan_Days(lua_State *L)
{    
    wxDateSpan *returns;    
    int days = (int) getnumbertype(L, 1);
    returns = new wxDateSpan(wxDateSpan::Days(days));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// %builtin %rename wxDateSpan_Day    wxDateSpan wxDateSpan::Day()
static int LUACALL builtin_wxDateSpan_Day(lua_State *L)
{    
    wxDateSpan *returns;
    returns = new wxDateSpan(wxDateSpan::Day());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// %builtin %rename wxDateSpan_Weeks  wxDateSpan wxDateSpan::Weeks(int weeks)
static int LUACALL builtin_wxDateSpan_Weeks(lua_State *L)
{    
    wxDateSpan *returns;    
    int weeks = (int) getnumbertype(L, 1);
    returns = new wxDateSpan(wxDateSpan::Weeks(weeks));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// %builtin %rename wxDateSpan_Week   wxDateSpan wxDateSpan::Week()
static int LUACALL builtin_wxDateSpan_Week(lua_State *L)
{    
    wxDateSpan *returns;
    returns = new wxDateSpan(wxDateSpan::Week());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// %builtin %rename wxDateSpan_Months wxDateSpan wxDateSpan::Months(int mon)
static int LUACALL builtin_wxDateSpan_Months(lua_State *L)
{    
    wxDateSpan *returns;    
    int mon = (int) getnumbertype(L, 1);
    returns = new wxDateSpan(wxDateSpan::Months(mon));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// %builtin %rename wxDateSpan_Month  wxDateSpan wxDateSpan::Month()
static int LUACALL builtin_wxDateSpan_Month(lua_State *L)
{    
    wxDateSpan *returns;
    returns = new wxDateSpan(wxDateSpan::Month());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// %builtin %rename wxDateSpan_Years  wxDateSpan wxDateSpan::Years(int years)
static int LUACALL builtin_wxDateSpan_Years(lua_State *L)
{    
    wxDateSpan *returns;    
    int years = (int) getnumbertype(L, 1);
    returns = new wxDateSpan(wxDateSpan::Years(years));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// %builtin %rename wxDateSpan_Year   wxDateSpan wxDateSpan::Year()
static int LUACALL builtin_wxDateSpan_Year(lua_State *L)
{    
    wxDateSpan *returns;
    returns = new wxDateSpan(wxDateSpan::Year());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// wxDateSpan& SetDays(int n)
static int LUACALL wxDateSpan_SetDays(lua_State *L)
{    
    wxDateSpan *returns;    
    int n = (int) getnumbertype(L, 2);
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = &self->SetDays(n);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// wxDateSpan& SetWeeks(int n)
static int LUACALL wxDateSpan_SetWeeks(lua_State *L)
{    
    wxDateSpan *returns;    
    int n = (int) getnumbertype(L, 2);
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = &self->SetWeeks(n);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// wxDateSpan& SetMonths(int n)
static int LUACALL wxDateSpan_SetMonths(lua_State *L)
{    
    wxDateSpan *returns;    
    int n = (int) getnumbertype(L, 2);
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = &self->SetMonths(n);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// wxDateSpan& SetYears(int n)
static int LUACALL wxDateSpan_SetYears(lua_State *L)
{    
    wxDateSpan *returns;    
    int n = (int) getnumbertype(L, 2);
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = &self->SetYears(n);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// int GetDays() const
static int LUACALL wxDateSpan_GetDays(lua_State *L)
{    
    int returns;
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = self->GetDays();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetWeeks() const
static int LUACALL wxDateSpan_GetWeeks(lua_State *L)
{    
    int returns;
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = self->GetWeeks();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMonths() const
static int LUACALL wxDateSpan_GetMonths(lua_State *L)
{    
    int returns;
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = self->GetMonths();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetYears() const
static int LUACALL wxDateSpan_GetYears(lua_State *L)
{    
    int returns;
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = self->GetYears();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetTotalDays() const
static int LUACALL wxDateSpan_GetTotalDays(lua_State *L)
{    
    int returns;
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = self->GetTotalDays();
    lua_pushnumber(L, returns);
    return 1;
}

// wxDateSpan Add(const wxDateSpan& other) const
static int LUACALL wxDateSpan_Add(lua_State *L)
{    
    wxDateSpan *returns;    
    const wxDateSpan *other = (wxDateSpan*)getuserdatatype(L, 2, s_wxDateSpan);
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = new wxDateSpan(self->Add(*other));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// wxDateSpan Subtract(const wxDateSpan& other) const
static int LUACALL wxDateSpan_Subtract(lua_State *L)
{    
    wxDateSpan *returns;    
    const wxDateSpan *other = (wxDateSpan*)getuserdatatype(L, 2, s_wxDateSpan);
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = new wxDateSpan(self->Subtract(*other));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// wxDateSpan Negate() const
static int LUACALL wxDateSpan_Negate(lua_State *L)
{    
    wxDateSpan *returns;
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = new wxDateSpan(self->Negate());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// wxDateSpan& Neg()
static int LUACALL wxDateSpan_Neg(lua_State *L)
{    
    wxDateSpan *returns;
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = &self->Neg();
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

// wxDateSpan Multiply(int factor) const
static int LUACALL wxDateSpan_Multiply(lua_State *L)
{    
    wxDateSpan *returns;    
    int factor = (int) getnumbertype(L, 2);
    wxDateSpan *self = (wxDateSpan*)getuserdatatype(L, 1, s_wxDateSpan);
    returns = new wxDateSpan(self->Multiply(factor));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateSpan, returns);
    return 1;
}

static int LUACALL wxTimer_destructor(lua_State *)
{
    return 0;
}

// wxTimer(wxEvtHandler *owner, int id = -1)
static int LUACALL wxTimer_constructor(lua_State *L)
{    
    wxTimer *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    wxEvtHandler *owner = (wxEvtHandler*)getuserdatatype(L, 1, s_wxEvtHandler);
    returns = new wxTimer(owner, id);
    pushuserdatatype(L, s_wxTimer, returns);
    return 1;
}

// bool     IsOneShot() const
static int LUACALL wxTimer_IsOneShot(lua_State *L)
{    
    bool returns;
    wxTimer *self = (wxTimer*)getuserdatatype(L, 1, s_wxTimer);
    returns = self->IsOneShot();
    lua_pushboolean(L, returns);
    return 1;
}

// bool     IsRunning() const
static int LUACALL wxTimer_IsRunning(lua_State *L)
{    
    bool returns;
    wxTimer *self = (wxTimer*)getuserdatatype(L, 1, s_wxTimer);
    returns = self->IsRunning();
    lua_pushboolean(L, returns);
    return 1;
}

// void     Notify()
static int LUACALL wxTimer_Notify(lua_State *L)
{    
    wxTimer *self = (wxTimer*)getuserdatatype(L, 1, s_wxTimer);
    self->Notify();
    return 0;
}

// void     SetOwner(wxEvtHandler *owner, int id = -1)
static int LUACALL wxTimer_SetOwner(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int id = (argCount >= 3 ? (int) getnumbertype(L, 3) : -1);
    wxEvtHandler *owner = (wxEvtHandler*)getuserdatatype(L, 2, s_wxEvtHandler);
    wxTimer *self = (wxTimer*)getuserdatatype(L, 1, s_wxTimer);
    self->SetOwner(owner, id);
    return 0;
}

// bool     Start(int milliseconds = -1, bool oneShot = FALSE)
static int LUACALL wxTimer_Start(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool oneShot = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    int milliseconds = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    wxTimer *self = (wxTimer*)getuserdatatype(L, 1, s_wxTimer);
    returns = self->Start(milliseconds, oneShot);
    lua_pushboolean(L, returns);
    return 1;
}

// void     Stop()
static int LUACALL wxTimer_Stop(lua_State *L)
{    
    wxTimer *self = (wxTimer*)getuserdatatype(L, 1, s_wxTimer);
    self->Stop();
    return 0;
}

static int LUACALL wxCalendarCtrl_destructor(lua_State *)
{
    return 0;
}

// wxCalendarCtrl(wxWindow* parent, wxWindowID id, const wxDateTime& date = wxDefaultDateTime, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxCAL_SHOW_HOLIDAYS, const wxString& name = wxCalendarNameStr)
static int LUACALL wxCalendarCtrl_constructor(lua_State *L)
{    
    wxCalendarCtrl *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxString(wxCalendarNameStr));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxCAL_SHOW_HOLIDAYS);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    const wxDateTime *date = (argCount >= 3 ? (wxDateTime*)getuserdatatype(L, 3, s_wxDateTime) : &wxDefaultDateTime);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxCalendarCtrl(parent, id, *date, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxCalendarCtrl, returns);
    return 1;
}

// bool     Create(wxWindow* parent, wxWindowID id, const wxDateTime& date = wxDefaultDateTime, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxCAL_SHOW_HOLIDAYS, const wxString& name = wxCalendarNameStr)
static int LUACALL wxCalendarCtrl_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxString(wxCalendarNameStr));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : wxCAL_SHOW_HOLIDAYS);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    const wxDateTime *date = (argCount >= 4 ? (wxDateTime*)getuserdatatype(L, 4, s_wxDateTime) : &wxDefaultDateTime);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    returns = self->Create(parent, id, *date, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// void     SetDate(const wxDateTime& date)
static int LUACALL wxCalendarCtrl_SetDate(lua_State *L)
{        
    const wxDateTime *date = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->SetDate(*date);
    return 0;
}

// void     EnableYearChange(bool enable = TRUE)
static int LUACALL wxCalendarCtrl_EnableYearChange(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool enable = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->EnableYearChange(enable);
    return 0;
}

// void     EnableMonthChange(bool enable = TRUE)
static int LUACALL wxCalendarCtrl_EnableMonthChange(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool enable = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->EnableMonthChange(enable);
    return 0;
}

// void     EnableHolidayDisplay(bool display = TRUE)
static int LUACALL wxCalendarCtrl_EnableHolidayDisplay(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool display = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->EnableHolidayDisplay(display);
    return 0;
}

// void     SetHeaderColours(const wxColour& colFg, const wxColour& colBg)
static int LUACALL wxCalendarCtrl_SetHeaderColours(lua_State *L)
{        
    const wxColour *colBg = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    const wxColour *colFg = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->SetHeaderColours(*colFg, *colBg);
    return 0;
}

// const wxColour&  GetHeaderColourFg() const
static int LUACALL wxCalendarCtrl_GetHeaderColourFg(lua_State *L)
{    
    const wxColour *returns;
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    returns = &self->GetHeaderColourFg();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxColour&  GetHeaderColourBg() const
static int LUACALL wxCalendarCtrl_GetHeaderColourBg(lua_State *L)
{    
    const wxColour *returns;
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    returns = &self->GetHeaderColourBg();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// void     SetHighlightColours(const wxColour& colFg, const wxColour& colBg)
static int LUACALL wxCalendarCtrl_SetHighlightColours(lua_State *L)
{        
    const wxColour *colBg = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    const wxColour *colFg = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->SetHighlightColours(*colFg, *colBg);
    return 0;
}

// const wxColour&  GetHighlightColourFg() const
static int LUACALL wxCalendarCtrl_GetHighlightColourFg(lua_State *L)
{    
    const wxColour *returns;
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    returns = &self->GetHighlightColourFg();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxColour&  GetHighlightColourBg() const
static int LUACALL wxCalendarCtrl_GetHighlightColourBg(lua_State *L)
{    
    const wxColour *returns;
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    returns = &self->GetHighlightColourBg();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// void     SetHolidayColours(const wxColour& colFg, const wxColour& colBg)
static int LUACALL wxCalendarCtrl_SetHolidayColours(lua_State *L)
{        
    const wxColour *colBg = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    const wxColour *colFg = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->SetHolidayColours(*colFg, *colBg);
    return 0;
}

// const wxColour& GetHolidayColourFg() const
static int LUACALL wxCalendarCtrl_GetHolidayColourFg(lua_State *L)
{    
    const wxColour *returns;
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    returns = &self->GetHolidayColourFg();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxColour& GetHolidayColourBg() const
static int LUACALL wxCalendarCtrl_GetHolidayColourBg(lua_State *L)
{    
    const wxColour *returns;
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    returns = &self->GetHolidayColourBg();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxCalendarDateAttr * GetAttr(size_t day) const
static int LUACALL wxCalendarCtrl_GetAttr(lua_State *L)
{    
    wxCalendarDateAttr *returns;    
    size_t day = (size_t) getnumbertype(L, 2);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    returns = self->GetAttr(day);
    pushuserdatatype(L, s_wxCalendarDateAttr, returns);
    return 1;
}

// void     SetAttr(size_t day, wxCalendarDateAttr* attr)
static int LUACALL wxCalendarCtrl_SetAttr(lua_State *L)
{        
    wxCalendarDateAttr *attr = (wxCalendarDateAttr*)getuserdatatype(L, 3, s_wxCalendarDateAttr);
    size_t day = (size_t) getnumbertype(L, 2);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->SetAttr(day, attr);
    return 0;
}

// void     SetHoliday(size_t day)
static int LUACALL wxCalendarCtrl_SetHoliday(lua_State *L)
{        
    size_t day = (size_t) getnumbertype(L, 2);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->SetHoliday(day);
    return 0;
}

// void     ResetAttr(size_t day)
static int LUACALL wxCalendarCtrl_ResetAttr(lua_State *L)
{        
    size_t day = (size_t) getnumbertype(L, 2);
    wxCalendarCtrl *self = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    self->ResetAttr(day);
    return 0;
}

static int LUACALL wxCalendarDateAttr_destructor(lua_State *L)
{
    wxCalendarDateAttr * self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxCalendarDateAttr_Delete(lua_State *L)
{
    wxCalendarDateAttr * self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxCalendarDateAttr()
static int LUACALL wxCalendarDateAttr_constructor(lua_State *L)
{    
    wxCalendarDateAttr *returns;
    returns = new wxCalendarDateAttr();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCalendarDateAttr, returns);
    return 1;
}

// %constructor wxCalendarDateAttrColour(const wxColour& colText, const wxColour& colBack = wxNullColour, const wxColour& colBorder = wxNullColour, const wxFont& font = wxNullFont, wxCalendarDateBorder border = wxCAL_BORDER_NONE)
static int LUACALL wxCalendarDateAttrColour_constructor(lua_State *L)
{    
    wxCalendarDateAttr *returns;
    int argCount = lua_gettop(L);    
    wxCalendarDateBorder border = (argCount >= 5 ? (wxCalendarDateBorder) getenumerationtype(L, 5) : wxCAL_BORDER_NONE);
    const wxFont *font = (argCount >= 4 ? (wxFont*)getuserdatatype(L, 4, s_wxFont) : &wxNullFont);
    const wxColour *colBorder = (argCount >= 3 ? (wxColour*)getuserdatatype(L, 3, s_wxColour) : &wxNullColour);
    const wxColour *colBack = (argCount >= 2 ? (wxColour*)getuserdatatype(L, 2, s_wxColour) : &wxNullColour);
    const wxColour *colText = (wxColour*)getuserdatatype(L, 1, s_wxColour);
    returns = new wxCalendarDateAttr(*colText, *colBack, *colBorder, *font, border);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCalendarDateAttr, returns);
    return 1;
}

// %constructor wxCalendarDateAttrBorder(wxCalendarDateBorder border, const wxColour& colBorder = wxNullColour)
static int LUACALL wxCalendarDateAttrBorder_constructor(lua_State *L)
{    
    wxCalendarDateAttr *returns;
    int argCount = lua_gettop(L);    
    const wxColour *colBorder = (argCount >= 2 ? (wxColour*)getuserdatatype(L, 2, s_wxColour) : &wxNullColour);
    wxCalendarDateBorder border = (wxCalendarDateBorder) getenumerationtype(L, 1);
    returns = new wxCalendarDateAttr(border, *colBorder);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCalendarDateAttr, returns);
    return 1;
}

// void SetTextColour(const wxColour& colText)
static int LUACALL wxCalendarDateAttr_SetTextColour(lua_State *L)
{        
    const wxColour *colText = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    self->SetTextColour(*colText);
    return 0;
}

// void SetBackgroundColour(const wxColour& colBack)
static int LUACALL wxCalendarDateAttr_SetBackgroundColour(lua_State *L)
{        
    const wxColour *colBack = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    self->SetBackgroundColour(*colBack);
    return 0;
}

// void SetBorderColour(const wxColour& col)
static int LUACALL wxCalendarDateAttr_SetBorderColour(lua_State *L)
{        
    const wxColour *col = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    self->SetBorderColour(*col);
    return 0;
}

// void SetFont(const wxFont& font)
static int LUACALL wxCalendarDateAttr_SetFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    self->SetFont(*font);
    return 0;
}

// void SetBorder(wxCalendarDateBorder border)
static int LUACALL wxCalendarDateAttr_SetBorder(lua_State *L)
{        
    wxCalendarDateBorder border = (wxCalendarDateBorder) getenumerationtype(L, 2);
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    self->SetBorder(border);
    return 0;
}

// void SetHoliday(bool holiday)
static int LUACALL wxCalendarDateAttr_SetHoliday(lua_State *L)
{        
    bool holiday = getbooleantype(L, 2);
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    self->SetHoliday(holiday);
    return 0;
}

// bool HasTextColour() const
static int LUACALL wxCalendarDateAttr_HasTextColour(lua_State *L)
{    
    bool returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = self->HasTextColour();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasBackgroundColour() const
static int LUACALL wxCalendarDateAttr_HasBackgroundColour(lua_State *L)
{    
    bool returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = self->HasBackgroundColour();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasBorderColour() const
static int LUACALL wxCalendarDateAttr_HasBorderColour(lua_State *L)
{    
    bool returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = self->HasBorderColour();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasFont() const
static int LUACALL wxCalendarDateAttr_HasFont(lua_State *L)
{    
    bool returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = self->HasFont();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasBorder() const
static int LUACALL wxCalendarDateAttr_HasBorder(lua_State *L)
{    
    bool returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = self->HasBorder();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsHoliday() const
static int LUACALL wxCalendarDateAttr_IsHoliday(lua_State *L)
{    
    bool returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = self->IsHoliday();
    lua_pushboolean(L, returns);
    return 1;
}

// const wxColour& GetTextColour() const
static int LUACALL wxCalendarDateAttr_GetTextColour(lua_State *L)
{    
    const wxColour *returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = &self->GetTextColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxColour& GetBackgroundColour()
static int LUACALL wxCalendarDateAttr_GetBackgroundColour(lua_State *L)
{    
    const wxColour *returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = &self->GetBackgroundColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxColour& GetBorderColour() const
static int LUACALL wxCalendarDateAttr_GetBorderColour(lua_State *L)
{    
    const wxColour *returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = &self->GetBorderColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// const wxFont& GetFont() const
static int LUACALL wxCalendarDateAttr_GetFont(lua_State *L)
{    
    const wxFont *returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = &self->GetFont();
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// wxCalendarDateBorder GetBorder()
static int LUACALL wxCalendarDateAttr_GetBorder(lua_State *L)
{    
    wxCalendarDateBorder returns;
    wxCalendarDateAttr *self = (wxCalendarDateAttr*)getuserdatatype(L, 1, s_wxCalendarDateAttr);
    returns = self->GetBorder();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxCalendarEvent_destructor(lua_State *L)
{
    wxCalendarEvent * self = (wxCalendarEvent*)getuserdatatype(L, 1, s_wxCalendarEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxCalendarEvent_Delete(lua_State *L)
{
    wxCalendarEvent * self = (wxCalendarEvent*)getuserdatatype(L, 1, s_wxCalendarEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxCalendarEvent(wxCalendarCtrl *cal, wxEventType type)
static int LUACALL wxCalendarEvent_constructor(lua_State *L)
{    
    wxCalendarEvent *returns;    
    wxEventType type = (wxEventType) getnumbertype(L, 2);
    wxCalendarCtrl *cal = (wxCalendarCtrl*)getuserdatatype(L, 1, s_wxCalendarCtrl);
    returns = new wxCalendarEvent(cal, type);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxCalendarEvent, returns);
    return 1;
}

// const wxDateTime& GetDate() const
static int LUACALL wxCalendarEvent_GetDate(lua_State *L)
{    
    const wxDateTime *returns;
    wxCalendarEvent *self = (wxCalendarEvent*)getuserdatatype(L, 1, s_wxCalendarEvent);
    returns = &self->GetDate();
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxDateTime::WeekDay GetWeekDay() const
static int LUACALL wxCalendarEvent_GetWeekDay(lua_State *L)
{    
    wxDateTime::WeekDay returns;
    wxCalendarEvent *self = (wxCalendarEvent*)getuserdatatype(L, 1, s_wxCalendarEvent);
    returns = self->GetWeekDay();
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin bool wxHandleFatalExceptions(bool doIt = TRUE)
static int LUACALL builtin_wxHandleFatalExceptions(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool doIt = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    returns = wxHandleFatalExceptions(doIt);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin void wxInitAllImageHandlers()
static int LUACALL builtin_wxInitAllImageHandlers(lua_State *L)
{    
    wxInitAllImageHandlers();
    return 0;
}

// %builtin bool wxSafeYield(wxWindow* win = NULL)
static int LUACALL builtin_wxSafeYield(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxWindow *win = (argCount >= 1 ? (wxWindow*)getuserdatatype(L, 1, s_wxWindow) : NULL);
    returns = wxSafeYield(win);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin bool wxYield()
static int LUACALL builtin_wxYield(lua_State *L)
{    
    bool returns;
    returns = wxYield();
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin void wxWakeUpIdle()
static int LUACALL builtin_wxWakeUpIdle(lua_State *L)
{    
    wxWakeUpIdle();
    return 0;
}

// %builtin long wxExecute(const wxString& command, bool sync = FALSE, wxProcess *callback = NULL)
static int LUACALL builtin_wxExecute(lua_State *L)
{    
    long returns;
    int argCount = lua_gettop(L);    
    wxProcess *callback = (argCount >= 3 ? (wxProcess*)getuserdatatype(L, 3, s_wxProcess) : NULL);
    bool sync = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxString command = lua2wx(getstringtype(L, 1));
    returns = wxExecute(command, sync, callback);
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin void wxExit()
static int LUACALL builtin_wxExit(lua_State *L)
{    
    wxExit();
    return 0;
}

// ~%wxver22 %builtin unsigned long wxGetProcessId()
static int LUACALL builtin_wxGetProcessId(lua_State *L)
{    
    unsigned long returns;
    returns = wxGetProcessId();
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin bool wxShell(const wxString& command = "")
static int LUACALL builtin_wxShell(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString command = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxT(""));
    returns = wxShell(command);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin long wxGetFreeMemory()
static int LUACALL builtin_wxGetFreeMemory(lua_State *L)
{    
    long returns;
    returns = wxGetFreeMemory();
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin wxString wxGetFullHostName()
static int LUACALL builtin_wxGetFullHostName(lua_State *L)
{    
    wxString returns;
    returns = wxGetFullHostName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin wxString wxGetHomeDir()
static int LUACALL builtin_wxGetHomeDir(lua_State *L)
{    
    wxString returns;
    returns = wxGetHomeDir();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin wxString wxGetHostName()
static int LUACALL builtin_wxGetHostName(lua_State *L)
{    
    wxString returns;
    returns = wxGetHostName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin wxString wxGetUserId()
static int LUACALL builtin_wxGetUserId(lua_State *L)
{    
    wxString returns;
    returns = wxGetUserId();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin wxString wxGetOsDescription()
static int LUACALL builtin_wxGetOsDescription(lua_State *L)
{    
    wxString returns;
    returns = wxGetOsDescription();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin int wxGetOsVersion(int *major = NULL, int *minor = NULL)
static int LUACALL builtin_wxGetOsVersion(lua_State *L)
{
    int returns;
    // int *minor = NULL
    int minor;
    // int *major = NULL
    int major;
    // call wxGetOsVersion
    returns = wxGetOsVersion(&major, &minor);
    // push the result number
    lua_pushnumber(L, returns);
    lua_pushnumber(L, major);
    lua_pushnumber(L, minor);
    // return the number of parameters
    return 3;
}

// %builtin wxString wxGetUserHome(const wxString& user = "")
static int LUACALL builtin_wxGetUserHome(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxString user = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxT(""));
    returns = wxGetUserHome(user);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin wxString wxGetUserName()
static int LUACALL builtin_wxGetUserName(lua_State *L)
{    
    wxString returns;
    returns = wxGetUserName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin void wxBell()
static int LUACALL builtin_wxBell(lua_State *L)
{    
    wxBell();
    return 0;
}

// %builtin void wxBeginBusyCursor(wxCursor *cursor = wxHOURGLASS_CURSOR)
static int LUACALL builtin_wxBeginBusyCursor(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxCursor *cursor = (argCount >= 1 ? (wxCursor*)getuserdatatype(L, 1, s_wxCursor) : wxHOURGLASS_CURSOR);
    wxBeginBusyCursor(cursor);
    return 0;
}

// %builtin void wxEndBusyCursor()
static int LUACALL builtin_wxEndBusyCursor(lua_State *L)
{    
    wxEndBusyCursor();
    return 0;
}

// %builtin bool wxIsBusy()
static int LUACALL builtin_wxIsBusy(lua_State *L)
{    
    bool returns;
    returns = wxIsBusy();
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin void wxClientDisplayRect(int *x, int *y,int *width, int *height)
static int LUACALL builtin_wxClientDisplayRect(lua_State *L)
{
    int height;
    int width;
    int y;
    int x;
    // call wxClientDisplayRect
    wxClientDisplayRect(&x, &y, &width, &height);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 4;
}

// %builtin bool wxColourDisplay()
static int LUACALL builtin_wxColourDisplay(lua_State *L)
{    
    bool returns;
    returns = wxColourDisplay();
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin int wxDisplayDepth()
static int LUACALL builtin_wxDisplayDepth(lua_State *L)
{    
    int returns;
    returns = wxDisplayDepth();
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin void wxDisplaySize(int *width, int *height)
int LUACALL builtin_wxDisplaySize(lua_State *L)
{
    int height, width;
    // call wxDisplaySize
    wxDisplaySize(&width, &height);
    // return the number of parameters
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    return 2;
}

// %builtin void wxDisplaySizeMM(int *width, int *height)
static int LUACALL builtin_wxDisplaySizeMM(lua_State *L)
{
    int height, width;
    // call wxDisplaySizeMM
    wxDisplaySizeMM(&width, &height);
    // return the number of parameters
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    return 2;
}

// %builtin void wxSetCursor(const wxCursor &cursor)
static int LUACALL builtin_wxSetCursor(lua_State *L)
{        
    const wxCursor *cursor = (wxCursor*)getuserdatatype(L, 1, s_wxCursor);
    wxSetCursor(*cursor);
    return 0;
}

// %builtin long wxNewId()
static int LUACALL builtin_wxNewId(lua_State *L)
{    
    long returns;
    returns = wxNewId();
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin void wxRegisterId(long id)
static int LUACALL builtin_wxRegisterId(lua_State *L)
{        
    long id = (long) getnumbertype(L, 1);
    wxRegisterId(id);
    return 0;
}

// %builtin void wxEnableTopLevelWindows(bool enable = TRUE)
static int LUACALL builtin_wxEnableTopLevelWindows(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool enable = (argCount >= 1 ? getbooleantype(L, 1) : TRUE);
    wxEnableTopLevelWindows(enable);
    return 0;
}

// %builtin int wxFindMenuItemId(wxFrame *frame, const wxString& menuString, const wxString& itemString)
static int LUACALL builtin_wxFindMenuItemId(lua_State *L)
{    
    int returns;    
    wxString itemString = lua2wx(getstringtype(L, 3));
    wxString menuString = lua2wx(getstringtype(L, 2));
    wxFrame *frame = (wxFrame*)getuserdatatype(L, 1, s_wxFrame);
    returns = wxFindMenuItemId(frame, menuString, itemString);
    lua_pushnumber(L, returns);
    return 1;
}

// %builtin wxWindow* wxFindWindowByLabel(const wxString& label, wxWindow *parent=NULL)
static int LUACALL builtin_wxFindWindowByLabel(lua_State *L)
{    
    wxWindow *returns;
    int argCount = lua_gettop(L);    
    wxWindow *parent = (argCount >= 2 ? (wxWindow*)getuserdatatype(L, 2, s_wxWindow) : NULL);
    wxString label = lua2wx(getstringtype(L, 1));
    returns = wxFindWindowByLabel(label, parent);
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// %builtin wxWindow* wxFindWindowByName(const wxString& name, wxWindow *parent=NULL)
static int LUACALL builtin_wxFindWindowByName(lua_State *L)
{    
    wxWindow *returns;
    int argCount = lua_gettop(L);    
    wxWindow *parent = (argCount >= 2 ? (wxWindow*)getuserdatatype(L, 2, s_wxWindow) : NULL);
    wxString name = lua2wx(getstringtype(L, 1));
    returns = wxFindWindowByName(name, parent);
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// ~%wxver22 %builtin wxWindow* wxFindWindowAtPoint(const wxPoint& pt)
static int LUACALL builtin_wxFindWindowAtPoint(lua_State *L)
{    
    wxWindow *returns;    
    const wxPoint *pt = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = wxFindWindowAtPoint(*pt);
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// ~%wxver22 %builtin wxWindow* wxFindWindowAtPointer(wxPoint& pt)
static int LUACALL builtin_wxFindWindowAtPointer(lua_State *L)
{    
    wxWindow *returns;    
    wxPoint *pt = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = wxFindWindowAtPointer(*pt);
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// %win %builtin wxWindow* wxGetActiveWindow()
static int LUACALL builtin_wxGetActiveWindow(lua_State *L)
{    
    wxWindow *returns;
    returns = wxGetActiveWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// ~%wxver22 %builtin wxPoint wxGetMousePosition()
static int LUACALL builtin_wxGetMousePosition(lua_State *L)
{    
    wxPoint *returns;
    returns = new wxPoint(wxGetMousePosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// ~%wxver22 %builtin wxWindow * wxGetTopLevelParent(wxWindow *win)
static int LUACALL builtin_wxGetTopLevelParent(lua_State *L)
{    
    wxWindow *returns;    
    wxWindow *win = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = wxGetTopLevelParent(win);
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// %builtin void wxPostEvent(wxEvtHandler *dest, wxEvent& event)
static int LUACALL builtin_wxPostEvent(lua_State *L)
{        
    wxEvent *event = (wxEvent*)getuserdatatype(L, 2, s_wxEvent);
    wxEvtHandler *dest = (wxEvtHandler*)getuserdatatype(L, 1, s_wxEvtHandler);
    wxPostEvent(dest, *event);
    return 0;
}

// %builtin bool wxDirExists(const wxString& dirname)
static int LUACALL builtin_wxDirExists(lua_State *L)
{    
    bool returns;    
    wxString dirname = lua2wx(getstringtype(L, 1));
    returns = wxDirExists(dirname);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin bool wxFileExists(const wxString& filename)
static int LUACALL builtin_wxFileExists(lua_State *L)
{    
    bool returns;    
    wxString filename = lua2wx(getstringtype(L, 1));
    returns = wxFileExists(filename);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin wxString wxDos2UnixFilename(const wxString& s)
static int LUACALL builtin_wxDos2UnixFilename(lua_State *L)
{
    wxString str = lua2wx(lua_tostring(L, 1));
    if (!str.IsEmpty())
    {
        // call wxDos2UnixFilename
        wxDos2UnixFilename((wxChar*)str.GetData());
        // push the result string
        lua_pushstring(L, wx2lua(str));
        return 1;
    }
    return 0;
}

// %builtin wxString wxUnix2DosFilename(const wxString& s)
static int LUACALL builtin_wxUnix2DosFilename(lua_State *L)
{
    wxString str = lua2wx(lua_tostring(L, 1));
    if (!str.IsEmpty())
    {
        // call wxUnix2DosFilename
        wxUnix2DosFilename((wxChar*)str.GetData());
        // push the result string
        lua_pushstring(L, wx2lua(str));
        return 1;
    }
    return 0;
}

// %builtin wxString wxFindFirstFile(const wxString& spec, int flags = 0)
static int LUACALL builtin_wxFindFirstFile(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxString spec = lua2wx(getstringtype(L, 1));
    returns = wxFindFirstFile(spec, flags);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin wxString wxFindNextFile()
static int LUACALL builtin_wxFindNextFile(lua_State *L)
{    
    wxString returns;
    returns = wxFindNextFile();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin wxString wxGetOSDirectory()
static int LUACALL builtin_wxGetOSDirectory(lua_State *L)
{    
    wxString returns;
    returns = wxGetOSDirectory();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin bool wxIsAbsolutePath(const wxString& filename)
static int LUACALL builtin_wxIsAbsolutePath(lua_State *L)
{    
    bool returns;    
    wxString filename = lua2wx(getstringtype(L, 1));
    returns = wxIsAbsolutePath(filename);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin wxString wxPathOnly(const wxString& path)
static int LUACALL builtin_wxPathOnly(lua_State *L)
{    
    wxString returns;    
    wxString path = lua2wx(getstringtype(L, 1));
    returns = wxPathOnly(path);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin bool wxConcatFiles(const wxString& file1, const wxString& file2,const wxString& file3)
static int LUACALL builtin_wxConcatFiles(lua_State *L)
{    
    bool returns;    
    wxString file3 = lua2wx(getstringtype(L, 3));
    wxString file2 = lua2wx(getstringtype(L, 2));
    wxString file1 = lua2wx(getstringtype(L, 1));
    returns = wxConcatFiles(file1, file2, file3);
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 %builtin bool wxCopyFile(const wxString& file1, const wxString& file2, bool overwrite = TRUE)
static int LUACALL builtin_wxCopyFile(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool overwrite = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    wxString file2 = lua2wx(getstringtype(L, 2));
    wxString file1 = lua2wx(getstringtype(L, 1));
    returns = wxCopyFile(file1, file2, overwrite);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin wxString wxGetCwd()
static int LUACALL builtin_wxGetCwd(lua_State *L)
{    
    wxString returns;
    returns = wxGetCwd();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %builtin bool wxIsWild(const wxString& pattern)
static int LUACALL builtin_wxIsWild(lua_State *L)
{    
    bool returns;    
    wxString pattern = lua2wx(getstringtype(L, 1));
    returns = wxIsWild(pattern);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin bool wxMatchWild(const wxString& pattern, const wxString& text, bool dot_special)
static int LUACALL builtin_wxMatchWild(lua_State *L)
{    
    bool returns;    
    bool dot_special = getbooleantype(L, 3);
    wxString text = lua2wx(getstringtype(L, 2));
    wxString pattern = lua2wx(getstringtype(L, 1));
    returns = wxMatchWild(pattern, text, dot_special);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin bool wxMkdir(const wxString& dir, int perm = 0777)
static int LUACALL builtin_wxMkdir(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int perm = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0777);
    wxString dir = lua2wx(getstringtype(L, 1));
    returns = wxMkdir(dir, perm);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin bool wxRemoveFile(const wxString& file)
static int LUACALL builtin_wxRemoveFile(lua_State *L)
{    
    bool returns;    
    wxString file = lua2wx(getstringtype(L, 1));
    returns = wxRemoveFile(file);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin bool wxRenameFile(const wxString& file1, const wxString& file2)
static int LUACALL builtin_wxRenameFile(lua_State *L)
{    
    bool returns;    
    wxString file2 = lua2wx(getstringtype(L, 2));
    wxString file1 = lua2wx(getstringtype(L, 1));
    returns = wxRenameFile(file1, file2);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin bool wxRmdir(const wxString& dir, int flags=0)
static int LUACALL builtin_wxRmdir(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxString dir = lua2wx(getstringtype(L, 1));
    returns = wxRmdir(dir, flags);
    lua_pushboolean(L, returns);
    return 1;
}

// %builtin bool wxSetWorkingDirectory(const wxString& dir)
static int LUACALL builtin_wxSetWorkingDirectory(lua_State *L)
{    
    bool returns;    
    wxString dir = lua2wx(getstringtype(L, 1));
    returns = wxSetWorkingDirectory(dir);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString wxFileSeparator()
static int LUACALL builtin_wxFileSeparator(lua_State *L)
{    
    lua_pushstring(L, wx2lua(wxString(wxFILE_SEP_PATH)));
    return 1;
}

// long wxFileSize()
static int LUACALL builtin_wxFileSize(lua_State *L)
{    
    wxString fileName = lua2wx(lua_tostring(L, 1));
    wxStructStat statstr;
    wxStat(fileName, &statstr);
    lua_pushnumber(L, statstr.st_size);
    return 1;
}

static int LUACALL wxFileName_destructor(lua_State *L)
{
    wxFileName * self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFileName_Delete(lua_State *L)
{
    wxFileName * self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %constructor wxFileNameDefault()
static int LUACALL wxFileNameDefault_constructor(lua_State *L)
{    
    wxFileName *returns;
    returns = new wxFileName();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFileName, returns);
    return 1;
}

// %constructor wxFileNameCopy(const wxFileName& filename)
static int LUACALL wxFileNameCopy_constructor(lua_State *L)
{    
    wxFileName *returns;    
    const wxFileName *filename = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = new wxFileName(*filename);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFileName, returns);
    return 1;
}

// wxFileName(const wxString& fullpath, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_constructor(lua_State *L)
{    
    wxFileName *returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 2) : wxPATH_NATIVE);
    wxString fullpath = lua2wx(getstringtype(L, 1));
    returns = new wxFileName(fullpath, format);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFileName, returns);
    return 1;
}

// %constructor wxFileNamePath(const wxString& path, const wxString& name, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileNamePath_constructor(lua_State *L)
{    
    wxFileName *returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat) getenumerationtype(L, 3) : wxPATH_NATIVE);
    wxString name = lua2wx(getstringtype(L, 2));
    wxString path = lua2wx(getstringtype(L, 1));
    returns = new wxFileName(path, name, format);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFileName, returns);
    return 1;
}

// %constructor wxFileNameVolume(const wxString& volume, const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileNameVolume_constructor(lua_State *L)
{    
    wxFileName *returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 5 ? (wxPathFormat) getenumerationtype(L, 5) : wxPATH_NATIVE);
    wxString ext = lua2wx(getstringtype(L, 4));
    wxString name = lua2wx(getstringtype(L, 3));
    wxString path = lua2wx(getstringtype(L, 2));
    wxString volume = lua2wx(getstringtype(L, 1));
    returns = new wxFileName(volume, path, name, ext, format);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFileName, returns);
    return 1;
}

// void AppendDir(const wxString& dir)
static int LUACALL wxFileName_AppendDir(lua_State *L)
{        
    wxString dir = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->AppendDir(dir);
    return 0;
}

// void Assign(const wxFileName& filepath)
static int LUACALL wxFileName_Assign(lua_State *L)
{        
    const wxFileName *filepath = (wxFileName*)getuserdatatype(L, 2, s_wxFileName);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->Assign(*filepath);
    return 0;
}

// %rename AssignFullName void Assign(const wxString& fullpath, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_AssignFullName(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat) getenumerationtype(L, 3) : wxPATH_NATIVE);
    wxString fullpath = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->Assign(fullpath, format);
    return 0;
}

// %rename AssignVolume void Assign(const wxString& volume, const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_AssignVolume(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 6 ? (wxPathFormat) getenumerationtype(L, 6) : wxPATH_NATIVE);
    wxString ext = lua2wx(getstringtype(L, 5));
    wxString name = lua2wx(getstringtype(L, 4));
    wxString path = lua2wx(getstringtype(L, 3));
    wxString volume = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->Assign(volume, path, name, ext, format);
    return 0;
}

// %rename AssignPath void Assign(const wxString& path, const wxString& name, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_AssignPath(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 4 ? (wxPathFormat) getenumerationtype(L, 4) : wxPATH_NATIVE);
    wxString name = lua2wx(getstringtype(L, 3));
    wxString path = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->Assign(path, name, format);
    return 0;
}

// %rename AssignPathNameExt void Assign(const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_AssignPathNameExt(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 5 ? (wxPathFormat) getenumerationtype(L, 5) : wxPATH_NATIVE);
    wxString ext = lua2wx(getstringtype(L, 4));
    wxString name = lua2wx(getstringtype(L, 3));
    wxString path = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->Assign(path, name, ext, format);
    return 0;
}

// void AssignCwd(const wxString& volume = "")
static int LUACALL wxFileName_AssignCwd(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxString volume = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT(""));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->AssignCwd(volume);
    return 0;
}

// void AssignDir(const wxString& dir, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_AssignDir(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat) getenumerationtype(L, 3) : wxPATH_NATIVE);
    wxString dir = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->AssignDir(dir, format);
    return 0;
}

// void AssignHomeDir()
static int LUACALL wxFileName_AssignHomeDir(lua_State *L)
{    
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->AssignHomeDir();
    return 0;
}

// void AssignTempFileName(const wxString& prefix, wxFile *fileTemp = NULL)
static int LUACALL wxFileName_AssignTempFileName(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxFile *fileTemp = (argCount >= 3 ? (wxFile*)getuserdatatype(L, 3, s_wxFile) : NULL);
    wxString prefix = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->AssignTempFileName(prefix, fileTemp);
    return 0;
}

// void Clear()
static int LUACALL wxFileName_Clear(lua_State *L)
{    
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->Clear();
    return 0;
}

// static wxString CreateTempFileName(const wxString& prefix, wxFile *fileTemp = NULL)
static int LUACALL wxFileName_CreateTempFileName(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxFile *fileTemp = (argCount >= 3 ? (wxFile*)getuserdatatype(L, 3, s_wxFile) : NULL);
    wxString prefix = lua2wx(getstringtype(L, 2));
    returns = wxFileName::CreateTempFileName(prefix, fileTemp);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool DirExists()
static int LUACALL wxFileName_DirExists(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->DirExists();
    lua_pushboolean(L, returns);
    return 1;
}

// %rename DirExistsName static bool DirExists(const wxString& dir)
static int LUACALL wxFileName_DirExistsName(lua_State *L)
{    
    bool returns;    
    wxString dir = lua2wx(getstringtype(L, 2));
    returns = wxFileName::DirExists(dir);
    lua_pushboolean(L, returns);
    return 1;
}

// static wxFileName DirName(const wxString& dir)
static int LUACALL wxFileName_DirName(lua_State *L)
{    
    wxFileName *returns;    
    wxString dir = lua2wx(getstringtype(L, 2));
    returns = new wxFileName(wxFileName::DirName(dir));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFileName, returns);
    return 1;
}

// bool FileExists()
static int LUACALL wxFileName_FileExists(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->FileExists();
    lua_pushboolean(L, returns);
    return 1;
}

// %rename FileExistsFile static bool FileExists(const wxString& file)
static int LUACALL wxFileName_FileExistsFile(lua_State *L)
{    
    bool returns;    
    wxString file = lua2wx(getstringtype(L, 2));
    returns = wxFileName::FileExists(file);
    lua_pushboolean(L, returns);
    return 1;
}

// static wxFileName FileName(const wxString& file)
static int LUACALL wxFileName_FileName(lua_State *L)
{    
    wxFileName *returns;    
    wxString file = lua2wx(getstringtype(L, 2));
    returns = new wxFileName(wxFileName::FileName(file));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFileName, returns);
    return 1;
}

// static wxString GetCwd(const wxString& volume = "")
static int LUACALL wxFileName_GetCwd(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxString volume = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT(""));
    returns = wxFileName::GetCwd(volume);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetDirCount() const
static int LUACALL wxFileName_GetDirCount(lua_State *L)
{    
    int returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->GetDirCount();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxArrayString& GetDirs() const
static int LUACALL wxFileName_GetDirs(lua_State *L)
{    
    const wxArrayString *returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = &self->GetDirs();
    pushuserdatatype(L, s_wxArrayString, returns);
    return 1;
}

// wxString GetExt() const
static int LUACALL wxFileName_GetExt(lua_State *L)
{    
    wxString returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->GetExt();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// static wxPathFormat GetFormat(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_GetFormat(lua_State *L)
{    
    wxPathFormat returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 2) : wxPATH_NATIVE);
    returns = wxFileName::GetFormat(format);
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetFullName() const
static int LUACALL wxFileName_GetFullName(lua_State *L)
{    
    wxString returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->GetFullName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetFullPath(wxPathFormat format = wxPATH_NATIVE) const
static int LUACALL wxFileName_GetFullPath(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 2) : wxPATH_NATIVE);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->GetFullPath(format);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// static wxString GetHomeDir()
static int LUACALL wxFileName_GetHomeDir(lua_State *L)
{    
    wxString returns;
    returns = wxFileName::GetHomeDir();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetLongPath() const
static int LUACALL wxFileName_GetLongPath(lua_State *L)
{    
    wxString returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->GetLongPath();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxDateTime GetModificationTime() const
static int LUACALL wxFileName_GetModificationTime(lua_State *L)
{    
    wxDateTime *returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = new wxDateTime(self->GetModificationTime());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDateTime, returns);
    return 1;
}

// wxString GetName() const
static int LUACALL wxFileName_GetName(lua_State *L)
{    
    wxString returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->GetName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetPath(int flags = 0, wxPathFormat format = wxPATH_NATIVE) const
static int LUACALL wxFileName_GetPath(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat) getenumerationtype(L, 3) : wxPATH_NATIVE);
    int flags = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->GetPath(flags, format);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// static int GetPathSeparator(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_GetPathSeparator(lua_State *L)
{    
    int returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 2) : wxPATH_NATIVE);
    returns = wxFileName::GetPathSeparator(format);
    lua_pushnumber(L, returns);
    return 1;
}

// static wxString GetPathSeparators(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_GetPathSeparators(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 2) : wxPATH_NATIVE);
    returns = wxFileName::GetPathSeparators(format);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetShortPath() const
static int LUACALL wxFileName_GetShortPath(lua_State *L)
{    
    wxString returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->GetShortPath();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool GetTimes(wxDateTime* dtAccess, wxDateTime* dtMod, wxDateTime* dtCreate) const
static int LUACALL wxFileName_GetTimes(lua_State *L)
{
    bool returns;
    wxDateTime *dtCreate = new wxDateTime();
    wxDateTime *dtMod = new wxDateTime();
    wxDateTime *dtAccess= new wxDateTime();
    // get this
    wxFileName *self = ( wxFileName * ) getuserdatatype(L, 1, s_wxFileName );
    // call GetTimes
    returns = self->GetTimes(dtAccess, dtMod, dtCreate);
    // add to tracked memory list
    addToTrackedMemoryList(L, dtAccess);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxDateTime, dtAccess );
    // add to tracked memory list
    addToTrackedMemoryList(L, dtMod);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxDateTime, dtMod);
    // add to tracked memory list
    addToTrackedMemoryList(L, dtCreate);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxDateTime, dtCreate);
    // push the result flag
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}

// wxString GetVolume() const
static int LUACALL wxFileName_GetVolume(lua_State *L)
{    
    wxString returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->GetVolume();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// static wxString GetVolumeSeparator(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_GetVolumeSeparator(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 2) : wxPATH_NATIVE);
    returns = wxFileName::GetVolumeSeparator(format);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool HasExt() const
static int LUACALL wxFileName_HasExt(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->HasExt();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasName() const
static int LUACALL wxFileName_HasName(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->HasName();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasVolume() const
static int LUACALL wxFileName_HasVolume(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->HasVolume();
    lua_pushboolean(L, returns);
    return 1;
}

// void InsertDir(int before, const wxString& dir)
static int LUACALL wxFileName_InsertDir(lua_State *L)
{        
    wxString dir = lua2wx(getstringtype(L, 3));
    int before = (int) getnumbertype(L, 2);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->InsertDir(before, dir);
    return 0;
}

// bool IsAbsolute(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_IsAbsolute(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 2) : wxPATH_NATIVE);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->IsAbsolute(format);
    lua_pushboolean(L, returns);
    return 1;
}

// static bool IsCaseSensitive(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_IsCaseSensitive(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 2) : wxPATH_NATIVE);
    returns = wxFileName::IsCaseSensitive(format);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsOk() const
static int LUACALL wxFileName_IsOk(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->IsOk();
    lua_pushboolean(L, returns);
    return 1;
}

// static bool IsPathSeparator(int ch, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_IsPathSeparator(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat) getenumerationtype(L, 3) : wxPATH_NATIVE);
    int ch = (int) getnumbertype(L, 2);
    returns = wxFileName::IsPathSeparator(ch, format);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsRelative(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_IsRelative(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 2) : wxPATH_NATIVE);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->IsRelative(format);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsDir() const
static int LUACALL wxFileName_IsDir(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->IsDir();
    lua_pushboolean(L, returns);
    return 1;
}

// bool MakeRelativeTo(const wxString& pathBase = "", wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_MakeRelativeTo(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat) getenumerationtype(L, 3) : wxPATH_NATIVE);
    wxString pathBase = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT(""));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->MakeRelativeTo(pathBase, format);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Mkdir(int perm = 4095, int flags = 0)
static int LUACALL wxFileName_Mkdir(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    int perm = (argCount >= 2 ? (int) getnumbertype(L, 2) : 4095);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->Mkdir(perm, flags);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename MkdirName static bool Mkdir(const wxString& dir, int perm = 4095, int flags = 0)
static int LUACALL wxFileName_MkdirName(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int perm = (argCount >= 3 ? (int) getnumbertype(L, 3) : 4095);
    wxString dir = lua2wx(getstringtype(L, 2));
    returns = wxFileName::Mkdir(dir, perm, flags);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Normalize(int flags = wxPATH_NORM_ALL, const wxString& cwd = wxEmptyString, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_Normalize(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 4 ? (wxPathFormat) getenumerationtype(L, 4) : wxPATH_NATIVE);
    wxString cwd = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    int flags = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxPATH_NORM_ALL);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->Normalize(flags, cwd, format);
    lua_pushboolean(L, returns);
    return 1;
}

// void PrependDir(const wxString& dir)
static int LUACALL wxFileName_PrependDir(lua_State *L)
{        
    wxString dir = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->PrependDir(dir);
    return 0;
}

// void RemoveDir(int pos)
static int LUACALL wxFileName_RemoveDir(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->RemoveDir(pos);
    return 0;
}

// bool Rmdir()
static int LUACALL wxFileName_Rmdir(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->Rmdir();
    lua_pushboolean(L, returns);
    return 1;
}

// %rename RmdirName static bool Rmdir(const wxString& dir)
static int LUACALL wxFileName_RmdirName(lua_State *L)
{    
    bool returns;    
    wxString dir = lua2wx(getstringtype(L, 2));
    returns = wxFileName::Rmdir(dir);
    lua_pushboolean(L, returns);
    return 1;
}

// bool SameAs(const wxFileName& filepath, wxPathFormat format = wxPATH_NATIVE) const
static int LUACALL wxFileName_SameAs(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat) getenumerationtype(L, 3) : wxPATH_NATIVE);
    const wxFileName *filepath = (wxFileName*)getuserdatatype(L, 2, s_wxFileName);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->SameAs(*filepath, format);
    lua_pushboolean(L, returns);
    return 1;
}

// bool SetCwd()
static int LUACALL wxFileName_SetCwd(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->SetCwd();
    lua_pushboolean(L, returns);
    return 1;
}

// %rename SetCwdName static bool SetCwd(const wxString& cwd)
static int LUACALL wxFileName_SetCwdName(lua_State *L)
{    
    bool returns;    
    wxString cwd = lua2wx(getstringtype(L, 2));
    returns = wxFileName::SetCwd(cwd);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetExt(const wxString& ext)
static int LUACALL wxFileName_SetExt(lua_State *L)
{        
    wxString ext = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->SetExt(ext);
    return 0;
}

// void SetFullName(const wxString& fullname)
static int LUACALL wxFileName_SetFullName(lua_State *L)
{        
    wxString fullname = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->SetFullName(fullname);
    return 0;
}

// void SetName(const wxString& name)
static int LUACALL wxFileName_SetName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->SetName(name);
    return 0;
}

// bool SetTimes(const wxDateTime* dtAccess, const wxDateTime* dtMod, const wxDateTime* dtCreate)
static int LUACALL wxFileName_SetTimes(lua_State *L)
{    
    bool returns;    
    const wxDateTime *dtCreate = (wxDateTime*)getuserdatatype(L, 4, s_wxDateTime);
    const wxDateTime *dtMod = (wxDateTime*)getuserdatatype(L, 3, s_wxDateTime);
    const wxDateTime *dtAccess = (wxDateTime*)getuserdatatype(L, 2, s_wxDateTime);
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->SetTimes(dtAccess, dtMod, dtCreate);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetVolume(const wxString& volume)
static int LUACALL wxFileName_SetVolume(lua_State *L)
{        
    wxString volume = lua2wx(getstringtype(L, 2));
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    self->SetVolume(volume);
    return 0;
}

// static void SplitPath(const wxString& fullpath, wxString* volume, wxString* path, wxString* name, wxString* ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_SplitVolumePath(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 3) : wxPATH_NATIVE);
    wxString ext;
    wxString name;
    wxString path;
    wxString volume;
    // const wxString& fullpath
    wxString fullpath = lua2wx(getstringtype(L, 2));
    // call SplitPath
    wxFileName::SplitPath(fullpath, &volume, &path, &name, &ext, format);
    // push the result strings
    lua_pushstring(L, wx2lua(volume));
    lua_pushstring(L, wx2lua(path));
    lua_pushstring(L, wx2lua(name));
    lua_pushstring(L, wx2lua(ext));
    // return the number of parameters
    return 4;
}

// static void SplitPath(const wxString& fullpath, wxString* volume, wxString* path, wxString* name, wxString* ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxFileName_SplitPath(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat) getenumerationtype(L, 3) : wxPATH_NATIVE);
    wxString ext;
    wxString name;
    wxString path;
    // const wxString& fullpath
    wxString fullpath = lua2wx(getstringtype(L, 2));
    // call SplitPath
    wxFileName::SplitPath(fullpath, &path, &name, &ext, format);
    // push the result strings
    lua_pushstring(L, wx2lua(path));
    lua_pushstring(L, wx2lua(name));
    lua_pushstring(L, wx2lua(ext));
    // return the number of parameters
    return 3;
}

// bool Touch()
static int LUACALL wxFileName_Touch(lua_State *L)
{    
    bool returns;
    wxFileName *self = (wxFileName*)getuserdatatype(L, 1, s_wxFileName);
    returns = self->Touch();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxFile_destructor(lua_State *L)
{
    wxFile * self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFile_Delete(lua_State *L)
{
    wxFile * self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxFile()
static int LUACALL wxFile_constructor(lua_State *L)
{    
    wxFile *returns;
    returns = new wxFile();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFile, returns);
    return 1;
}

// %constructor wxFileOpen(const wxString& filename, wxFile::OpenMode mode = wxFile::read)
static int LUACALL wxFileOpen_constructor(lua_State *L)
{    
    wxFile *returns;
    int argCount = lua_gettop(L);    
    wxFile::OpenMode mode = (argCount >= 2 ? (wxFile::OpenMode) getenumerationtype(L, 2) : wxFile::read);
    wxString filename = lua2wx(getstringtype(L, 1));
    returns = new wxFile(filename, mode);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFile, returns);
    return 1;
}

// static bool Access(const wxString& name, wxFile::OpenMode mode)
static int LUACALL wxFile_Access(lua_State *L)
{    
    bool returns;    
    wxFile::OpenMode mode = (wxFile::OpenMode) getenumerationtype(L, 3);
    wxString name = lua2wx(getstringtype(L, 2));
    returns = wxFile::Access(name, mode);
    lua_pushboolean(L, returns);
    return 1;
}

// static bool Exists(const wxString& name)
static int LUACALL wxFile_Exists(lua_State *L)
{    
    bool returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    returns = wxFile::Exists(name);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Flush()
static int LUACALL wxFile_Flush(lua_State *L)
{    
    bool returns;
    wxFile *self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    returns = self->Flush();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsOpened() const
static int LUACALL wxFile_IsOpened(lua_State *L)
{    
    bool returns;
    wxFile *self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    returns = self->IsOpened();
    lua_pushboolean(L, returns);
    return 1;
}

// unsigned int Length() const
static int LUACALL wxFile_Length(lua_State *L)
{    
    unsigned int returns;
    wxFile *self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    returns = self->Length();
    lua_pushnumber(L, returns);
    return 1;
}

// bool Open(const wxString& filename, wxFile::OpenMode mode = wxFile::read)
static int LUACALL wxFile_Open(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxFile::OpenMode mode = (argCount >= 3 ? (wxFile::OpenMode) getenumerationtype(L, 3) : wxFile::read);
    wxString filename = lua2wx(getstringtype(L, 2));
    wxFile *self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    returns = self->Open(filename, mode);
    lua_pushboolean(L, returns);
    return 1;
}

// unsigned int Read(void * buffer,  unsigned int count)
static int LUACALL wxFile_Read(lua_State *L)
{
    unsigned int returns;
    // unsigned int count
    unsigned int count = (unsigned int) getnumbertype(L, 2);
    // void * buffer
    void *buffer = malloc(count);
    if (buffer != NULL)
    {
        // get this
        wxFile *self = ( wxFile * ) getuserdatatype(L, 1, s_wxFile );
        // call Read
        returns = self->Read(buffer, count);
        // push the result number
        lua_pushnumber(L, returns);
        lua_pushlstring(L, (const char *) buffer, count);
        free(buffer);
        // return the number of parameters
        return 2;
    }
    return 0;
}

// unsigned int Seek(unsigned int offset, wxSeekMode mode = wxFromStart)
static int LUACALL wxFile_Seek(lua_State *L)
{    
    unsigned int returns;
    int argCount = lua_gettop(L);    
    wxSeekMode mode = (argCount >= 3 ? (wxSeekMode) getenumerationtype(L, 3) : wxFromStart);
    unsigned int offset = (unsigned int) getnumbertype(L, 2);
    wxFile *self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    returns = self->Seek(offset, mode);
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned int SeekEnd(unsigned int offset = 0)
static int LUACALL wxFile_SeekEnd(lua_State *L)
{    
    unsigned int returns;
    int argCount = lua_gettop(L);    
    unsigned int offset = (argCount >= 2 ? (unsigned int) getnumbertype(L, 2) : 0);
    wxFile *self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    returns = self->SeekEnd(offset);
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned int Tell() const
static int LUACALL wxFile_Tell(lua_State *L)
{    
    unsigned int returns;
    wxFile *self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    returns = self->Tell();
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned int Write(const void * buffer, unsigned int nbytes)
static int LUACALL wxFile_Write(lua_State *L)
{
    unsigned int returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned long nbytes
    unsigned long nbytes = (argCount >= 3 ? (unsigned long) getnumbertype(L, 3) : lua_strlen(L, 2));
    // const void * buffer
    const void *buffer = (const void *) lua_tostring(L, 2);
    // get this
    wxFile *self = ( wxFile * ) getuserdatatype(L, 1, s_wxFile );
    // call Write
    returns = self->Write(buffer, nbytes);
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}

// %rename WriteString bool Write(const wxString &str)
static int LUACALL wxFile_WriteString(lua_State *L)
{    
    bool returns;    
    wxString str = lua2wx(getstringtype(L, 2));
    wxFile *self = (wxFile*)getuserdatatype(L, 1, s_wxFile);
    returns = self->Write(str);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxDir_destructor(lua_State *L)
{
    wxDir * self = (wxDir*)getuserdatatype(L, 1, s_wxDir);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxDir_Delete(lua_State *L)
{
    wxDir * self = (wxDir*)getuserdatatype(L, 1, s_wxDir);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxDir()
static int LUACALL wxDir_constructor(lua_State *L)
{    
    wxDir *returns;
    returns = new wxDir();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDir, returns);
    return 1;
}

// %constructor wxDirOpen(const wxString& dir)
static int LUACALL wxDirOpen_constructor(lua_State *L)
{    
    wxDir *returns;    
    wxString dir = lua2wx(getstringtype(L, 1));
    returns = new wxDir(dir);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxDir, returns);
    return 1;
}

// static bool Exists(const wxString& dir)
static int LUACALL wxDir_Exists(lua_State *L)
{    
    bool returns;    
    wxString dir = lua2wx(getstringtype(L, 2));
    returns = wxDir::Exists(dir);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Open(const wxString& dir)
static int LUACALL wxDir_Open(lua_State *L)
{    
    bool returns;    
    wxString dir = lua2wx(getstringtype(L, 2));
    wxDir *self = (wxDir*)getuserdatatype(L, 1, s_wxDir);
    returns = self->Open(dir);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsOpened() const
static int LUACALL wxDir_IsOpened(lua_State *L)
{    
    bool returns;
    wxDir *self = (wxDir*)getuserdatatype(L, 1, s_wxDir);
    returns = self->IsOpened();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetFirst(wxString * filename, const wxString& filespec = "", int flags = wxDIR_DEFAULT) const
static int LUACALL wxDir_GetFirst(lua_State *L)
{
    bool returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDIR_DEFAULT
    int flags = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxDIR_DEFAULT);
    // const wxString& filespec = ""
    wxString filespec = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT(""));
    // wxString * filename
    wxString filename;
    // get this
    wxDir *self = ( wxDir * ) getuserdatatype(L, 1, s_wxDir );
    // call GetFirst
    returns = self->GetFirst(&filename, filespec, flags);
    lua_pushboolean(L, returns);
    // push the result number
    lua_pushstring(L, wx2lua(filename));
    // return the number of parameters
    return 2;
}

// bool GetNext(wxString * filename) const
static int LUACALL wxDir_GetNext(lua_State *L)
{
    bool returns;
    // wxString * filename
    wxString filename;
    // get this
    wxDir *self = ( wxDir * ) getuserdatatype(L, 1, s_wxDir );
    // call GetNext
    returns = self->GetNext(&filename);
    lua_pushboolean(L, returns);
    // push the result number
    lua_pushstring(L, wx2lua(filename));
    // return the number of parameters
    return 2;
}

// static unsigned int GetAllFiles(const wxString& dirname, wxArrayString *files, const wxString& filespec = "", int flags = wxDIR_DEFAULT)
static int LUACALL wxDir_GetAllFiles(lua_State *L)
{
    unsigned int returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDIR_DEFAULT
    int flags = (argCount >= 4 ? (int) getnumbertype(L, 4) : wxDIR_DEFAULT);
    // const wxString& filespec = ""
    wxString filespec = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT(""));
    // wxArrayString *files
    wxArrayString files;
    // const wxString& dirname
    wxString dirname = lua2wx(getstringtype(L, 2));
    // call GetAllFiles
    returns = wxDir::GetAllFiles(dirname, &files, filespec, flags);
    // push the result number
    lua_pushnumber(L, returns);
    tostringtable(L, files);
    // return the number of parameters
    return 2;
}

static int LUACALL wxGridCellRenderer_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxGridCellStringRenderer_destructor(lua_State *)
{
    return 0;
}

// wxGridCellStringRenderer()
static int LUACALL wxGridCellStringRenderer_constructor(lua_State *L)
{    
    wxGridCellStringRenderer *returns;
    returns = new wxGridCellStringRenderer();
    pushuserdatatype(L, s_wxGridCellStringRenderer, returns);
    return 1;
}

static int LUACALL wxGridCellNumberRenderer_destructor(lua_State *)
{
    return 0;
}

// wxGridCellNumberRenderer()
static int LUACALL wxGridCellNumberRenderer_constructor(lua_State *L)
{    
    wxGridCellNumberRenderer *returns;
    returns = new wxGridCellNumberRenderer();
    pushuserdatatype(L, s_wxGridCellNumberRenderer, returns);
    return 1;
}

static int LUACALL wxGridCellFloatRenderer_destructor(lua_State *)
{
    return 0;
}

// wxGridCellFloatRenderer(int width = -1, int precision = -1)
static int LUACALL wxGridCellFloatRenderer_constructor(lua_State *L)
{    
    wxGridCellFloatRenderer *returns;
    int argCount = lua_gettop(L);    
    int precision = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    int width = (argCount >= 1 ? (int) getnumbertype(L, 1) : -1);
    returns = new wxGridCellFloatRenderer(width, precision);
    pushuserdatatype(L, s_wxGridCellFloatRenderer, returns);
    return 1;
}

// int GetWidth() const
static int LUACALL wxGridCellFloatRenderer_GetWidth(lua_State *L)
{    
    int returns;
    wxGridCellFloatRenderer *self = (wxGridCellFloatRenderer*)getuserdatatype(L, 1, s_wxGridCellFloatRenderer);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetWidth(int width)
static int LUACALL wxGridCellFloatRenderer_SetWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxGridCellFloatRenderer *self = (wxGridCellFloatRenderer*)getuserdatatype(L, 1, s_wxGridCellFloatRenderer);
    self->SetWidth(width);
    return 0;
}

// int GetPrecision() const
static int LUACALL wxGridCellFloatRenderer_GetPrecision(lua_State *L)
{    
    int returns;
    wxGridCellFloatRenderer *self = (wxGridCellFloatRenderer*)getuserdatatype(L, 1, s_wxGridCellFloatRenderer);
    returns = self->GetPrecision();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetPrecision(int precision)
static int LUACALL wxGridCellFloatRenderer_SetPrecision(lua_State *L)
{        
    int precision = (int) getnumbertype(L, 2);
    wxGridCellFloatRenderer *self = (wxGridCellFloatRenderer*)getuserdatatype(L, 1, s_wxGridCellFloatRenderer);
    self->SetPrecision(precision);
    return 0;
}

static int LUACALL wxGridCellBoolRenderer_destructor(lua_State *)
{
    return 0;
}

// wxGridCellBoolRenderer()
static int LUACALL wxGridCellBoolRenderer_constructor(lua_State *L)
{    
    wxGridCellBoolRenderer *returns;
    returns = new wxGridCellBoolRenderer();
    pushuserdatatype(L, s_wxGridCellBoolRenderer, returns);
    return 1;
}

static int LUACALL wxGridCellAttr_destructor(lua_State *)
{
    return 0;
}

// wxGridCellAttr()
static int LUACALL wxGridCellAttr_constructor(lua_State *L)
{    
    wxGridCellAttr *returns;
    returns = new wxGridCellAttr();
    pushuserdatatype(L, s_wxGridCellAttr, returns);
    return 1;
}

// void IncRef()
static int LUACALL wxGridCellAttr_IncRef(lua_State *L)
{    
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->IncRef();
    return 0;
}

// void DecRef()
static int LUACALL wxGridCellAttr_DecRef(lua_State *L)
{    
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->DecRef();
    return 0;
}

// void SetTextColour(const wxColour& colText)
static int LUACALL wxGridCellAttr_SetTextColour(lua_State *L)
{        
    const wxColour *colText = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->SetTextColour(*colText);
    return 0;
}

// void SetBackgroundColour(const wxColour& colBack)
static int LUACALL wxGridCellAttr_SetBackgroundColour(lua_State *L)
{        
    const wxColour *colBack = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->SetBackgroundColour(*colBack);
    return 0;
}

// void SetFont(const wxFont& font)
static int LUACALL wxGridCellAttr_SetFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->SetFont(*font);
    return 0;
}

// void SetAlignment(int hAlign, int vAlign)
static int LUACALL wxGridCellAttr_SetAlignment(lua_State *L)
{        
    int vAlign = (int) getnumbertype(L, 3);
    int hAlign = (int) getnumbertype(L, 2);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->SetAlignment(hAlign, vAlign);
    return 0;
}

// void SetReadOnly(bool isReadOnly = TRUE)
static int LUACALL wxGridCellAttr_SetReadOnly(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool isReadOnly = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->SetReadOnly(isReadOnly);
    return 0;
}

// void SetRenderer(wxGridCellRenderer *renderer)
static int LUACALL wxGridCellAttr_SetRenderer(lua_State *L)
{        
    wxGridCellRenderer *renderer = (wxGridCellRenderer*)getuserdatatype(L, 2, s_wxGridCellRenderer);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->SetRenderer(renderer);
    return 0;
}

// void SetEditor(wxGridCellEditor* editor)
static int LUACALL wxGridCellAttr_SetEditor(lua_State *L)
{        
    wxGridCellEditor *editor = (wxGridCellEditor*)getuserdatatype(L, 2, s_wxGridCellEditor);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->SetEditor(editor);
    return 0;
}

// bool HasTextColour() const
static int LUACALL wxGridCellAttr_HasTextColour(lua_State *L)
{    
    bool returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->HasTextColour();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasBackgroundColour() const
static int LUACALL wxGridCellAttr_HasBackgroundColour(lua_State *L)
{    
    bool returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->HasBackgroundColour();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasFont() const
static int LUACALL wxGridCellAttr_HasFont(lua_State *L)
{    
    bool returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->HasFont();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasAlignment() const
static int LUACALL wxGridCellAttr_HasAlignment(lua_State *L)
{    
    bool returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->HasAlignment();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasRenderer() const
static int LUACALL wxGridCellAttr_HasRenderer(lua_State *L)
{    
    bool returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->HasRenderer();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasEditor() const
static int LUACALL wxGridCellAttr_HasEditor(lua_State *L)
{    
    bool returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->HasEditor();
    lua_pushboolean(L, returns);
    return 1;
}

// wxColour GetTextColour() const
static int LUACALL wxGridCellAttr_GetTextColour(lua_State *L)
{    
    wxColour *returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = new wxColour(self->GetTextColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxColour GetBackgroundColour() const
static int LUACALL wxGridCellAttr_GetBackgroundColour(lua_State *L)
{    
    wxColour *returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = new wxColour(self->GetBackgroundColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxFont GetFont() const
static int LUACALL wxGridCellAttr_GetFont(lua_State *L)
{    
    wxFont *returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = new wxFont(self->GetFont());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// void GetAlignment(int *horz, int *vert) const
static int LUACALL wxGridCellAttr_GetAlignment(lua_State *L)
{
    int horz;
    int vert;
    // get this
    wxGridCellAttr *self = ( wxGridCellAttr * ) getuserdatatype(L, 1, s_wxGridCellAttr );
    // call GetAlignment
    self->GetAlignment(&horz, &vert);
    lua_pushnumber(L, horz);
    lua_pushnumber(L, vert);
    // return the number of parameters
    return 2;
}

// wxGridCellRenderer *GetRenderer(wxGrid* grid, int row, int col) const
static int LUACALL wxGridCellAttr_GetRenderer(lua_State *L)
{    
    wxGridCellRenderer *returns;    
    int col = (int) getnumbertype(L, 4);
    int row = (int) getnumbertype(L, 3);
    wxGrid *grid = (wxGrid*)getuserdatatype(L, 2, s_wxGrid);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->GetRenderer(grid, row, col);
    pushuserdatatype(L, s_wxGridCellRenderer, returns);
    return 1;
}

// wxGridCellEditor *GetEditor(wxGrid* grid, int row, int col) const
static int LUACALL wxGridCellAttr_GetEditor(lua_State *L)
{    
    wxGridCellEditor *returns;    
    int col = (int) getnumbertype(L, 4);
    int row = (int) getnumbertype(L, 3);
    wxGrid *grid = (wxGrid*)getuserdatatype(L, 2, s_wxGrid);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->GetEditor(grid, row, col);
    pushuserdatatype(L, s_wxGridCellEditor, returns);
    return 1;
}

// bool IsReadOnly() const
static int LUACALL wxGridCellAttr_IsReadOnly(lua_State *L)
{    
    bool returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->IsReadOnly();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetDefAttr(wxGridCellAttr* defAttr)
static int LUACALL wxGridCellAttr_SetDefAttr(lua_State *L)
{        
    wxGridCellAttr *defAttr = (wxGridCellAttr*)getuserdatatype(L, 2, s_wxGridCellAttr);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->SetDefAttr(defAttr);
    return 0;
}

// ~%wxver22 void SetKind(wxGridCellAttr::wxAttrKind kind)
static int LUACALL wxGridCellAttr_SetKind(lua_State *L)
{        
    wxGridCellAttr::wxAttrKind kind = (wxGridCellAttr::wxAttrKind) getenumerationtype(L, 2);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->SetKind(kind);
    return 0;
}

// ~%wxver22 bool HasReadWriteMode() const
static int LUACALL wxGridCellAttr_HasReadWriteMode(lua_State *L)
{    
    bool returns;
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    returns = self->HasReadWriteMode();
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 void MergeWith(wxGridCellAttr *mergefrom)
static int LUACALL wxGridCellAttr_MergeWith(lua_State *L)
{        
    wxGridCellAttr *mergefrom = (wxGridCellAttr*)getuserdatatype(L, 2, s_wxGridCellAttr);
    wxGridCellAttr *self = (wxGridCellAttr*)getuserdatatype(L, 1, s_wxGridCellAttr);
    self->MergeWith(mergefrom);
    return 0;
}

static int LUACALL wxGridCellAttrProvider_destructor(lua_State *)
{
    return 0;
}

// wxGridCellAttrProvider()
static int LUACALL wxGridCellAttrProvider_constructor(lua_State *L)
{    
    wxGridCellAttrProvider *returns;
    returns = new wxGridCellAttrProvider();
    pushuserdatatype(L, s_wxGridCellAttrProvider, returns);
    return 1;
}

// ~%wxver22 wxGridCellAttr *GetAttr(int row, int col, wxGridCellAttr::wxAttrKind  kind) const
static int LUACALL wxGridCellAttrProvider_GetAttr(lua_State *L)
{    
    wxGridCellAttr *returns;    
    wxGridCellAttr::wxAttrKind kind = (wxGridCellAttr::wxAttrKind) getenumerationtype(L, 4);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridCellAttrProvider *self = (wxGridCellAttrProvider*)getuserdatatype(L, 1, s_wxGridCellAttrProvider);
    returns = self->GetAttr(row, col, kind);
    pushuserdatatype(L, s_wxGridCellAttr, returns);
    return 1;
}

// void SetAttr(wxGridCellAttr *attr, int row, int col)
static int LUACALL wxGridCellAttrProvider_SetAttr(lua_State *L)
{        
    int col = (int) getnumbertype(L, 4);
    int row = (int) getnumbertype(L, 3);
    wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 2, s_wxGridCellAttr);
    wxGridCellAttrProvider *self = (wxGridCellAttrProvider*)getuserdatatype(L, 1, s_wxGridCellAttrProvider);
    self->SetAttr(attr, row, col);
    return 0;
}

// void SetRowAttr(wxGridCellAttr *attr, int row)
static int LUACALL wxGridCellAttrProvider_SetRowAttr(lua_State *L)
{        
    int row = (int) getnumbertype(L, 3);
    wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 2, s_wxGridCellAttr);
    wxGridCellAttrProvider *self = (wxGridCellAttrProvider*)getuserdatatype(L, 1, s_wxGridCellAttrProvider);
    self->SetRowAttr(attr, row);
    return 0;
}

// void SetColAttr(wxGridCellAttr *attr, int col)
static int LUACALL wxGridCellAttrProvider_SetColAttr(lua_State *L)
{        
    int col = (int) getnumbertype(L, 3);
    wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 2, s_wxGridCellAttr);
    wxGridCellAttrProvider *self = (wxGridCellAttrProvider*)getuserdatatype(L, 1, s_wxGridCellAttrProvider);
    self->SetColAttr(attr, col);
    return 0;
}

// void UpdateAttrRows( size_t pos, int numRows )
static int LUACALL wxGridCellAttrProvider_UpdateAttrRows(lua_State *L)
{        
    int numRows = (int) getnumbertype(L, 3);
    size_t pos = (size_t) getnumbertype(L, 2);
    wxGridCellAttrProvider *self = (wxGridCellAttrProvider*)getuserdatatype(L, 1, s_wxGridCellAttrProvider);
    self->UpdateAttrRows(pos, numRows);
    return 0;
}

// void UpdateAttrCols( size_t pos, int numCols )
static int LUACALL wxGridCellAttrProvider_UpdateAttrCols(lua_State *L)
{        
    int numCols = (int) getnumbertype(L, 3);
    size_t pos = (size_t) getnumbertype(L, 2);
    wxGridCellAttrProvider *self = (wxGridCellAttrProvider*)getuserdatatype(L, 1, s_wxGridCellAttrProvider);
    self->UpdateAttrCols(pos, numCols);
    return 0;
}

static int LUACALL wxGridTableBase_destructor(lua_State *)
{
    return 0;
}

// void SetAttrProvider(wxGridCellAttrProvider *attrProvider)
static int LUACALL wxGridTableBase_SetAttrProvider(lua_State *L)
{        
    wxGridCellAttrProvider *attrProvider = (wxGridCellAttrProvider*)getuserdatatype(L, 2, s_wxGridCellAttrProvider);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetAttrProvider(attrProvider);
    return 0;
}

// int GetNumberRows()
static int LUACALL wxGridTableBase_GetNumberRows(lua_State *L)
{    
    int returns;
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetNumberRows();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetNumberCols()
static int LUACALL wxGridTableBase_GetNumberCols(lua_State *L)
{    
    int returns;
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetNumberCols();
    lua_pushnumber(L, returns);
    return 1;
}

// bool IsEmptyCell( int row, int col )
static int LUACALL wxGridTableBase_IsEmptyCell(lua_State *L)
{    
    bool returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->IsEmptyCell(row, col);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetValue( int row, int col )
static int LUACALL wxGridTableBase_GetValue(lua_State *L)
{    
    wxString returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetValue(row, col);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetValue( int row, int col, const wxString& value )
static int LUACALL wxGridTableBase_SetValue(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 4));
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetValue(row, col, value);
    return 0;
}

// wxString GetTypeName( int row, int col )
static int LUACALL wxGridTableBase_GetTypeName(lua_State *L)
{    
    wxString returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetTypeName(row, col);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxGridCellAttrProvider *GetAttrProvider() const
static int LUACALL wxGridTableBase_GetAttrProvider(lua_State *L)
{    
    wxGridCellAttrProvider *returns;
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetAttrProvider();
    pushuserdatatype(L, s_wxGridCellAttrProvider, returns);
    return 1;
}

// bool CanGetValueAs( int row, int col, const wxString& typeName )
static int LUACALL wxGridTableBase_CanGetValueAs(lua_State *L)
{    
    bool returns;    
    wxString typeName = lua2wx(getstringtype(L, 4));
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->CanGetValueAs(row, col, typeName);
    lua_pushboolean(L, returns);
    return 1;
}

// bool CanSetValueAs( int row, int col, const wxString& typeName )
static int LUACALL wxGridTableBase_CanSetValueAs(lua_State *L)
{    
    bool returns;    
    wxString typeName = lua2wx(getstringtype(L, 4));
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->CanSetValueAs(row, col, typeName);
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetValueAsBool( int row, int col )
static int LUACALL wxGridTableBase_GetValueAsBool(lua_State *L)
{    
    bool returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetValueAsBool(row, col);
    lua_pushboolean(L, returns);
    return 1;
}

// long GetValueAsLong( int row, int col )
static int LUACALL wxGridTableBase_GetValueAsLong(lua_State *L)
{    
    long returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetValueAsLong(row, col);
    lua_pushnumber(L, returns);
    return 1;
}

// double GetValueAsDouble( int row, int col )
static int LUACALL wxGridTableBase_GetValueAsDouble(lua_State *L)
{    
    double returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetValueAsDouble(row, col);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetValueAsBool( int row, int col, bool value )
static int LUACALL wxGridTableBase_SetValueAsBool(lua_State *L)
{        
    bool value = getbooleantype(L, 4);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetValueAsBool(row, col, value);
    return 0;
}

// void SetValueAsLong( int row, int col, long value )
static int LUACALL wxGridTableBase_SetValueAsLong(lua_State *L)
{        
    long value = (long) getnumbertype(L, 4);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetValueAsLong(row, col, value);
    return 0;
}

// void SetValueAsDouble( int row, int col, double value )
static int LUACALL wxGridTableBase_SetValueAsDouble(lua_State *L)
{        
    double value = (double) getnumbertype(L, 4);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetValueAsDouble(row, col, value);
    return 0;
}

// void SetView( wxGrid *grid )
static int LUACALL wxGridTableBase_SetView(lua_State *L)
{        
    wxGrid *grid = (wxGrid*)getuserdatatype(L, 2, s_wxGrid);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetView(grid);
    return 0;
}

// wxGrid * GetView() const
static int LUACALL wxGridTableBase_GetView(lua_State *L)
{    
    wxGrid *returns;
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetView();
    pushuserdatatype(L, s_wxGrid, returns);
    return 1;
}

// void Clear()
static int LUACALL wxGridTableBase_Clear(lua_State *L)
{    
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->Clear();
    return 0;
}

// bool InsertRows( size_t pos = 0, size_t numRows = 1 )
static int LUACALL wxGridTableBase_InsertRows(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    size_t numRows = (argCount >= 3 ? (size_t) getnumbertype(L, 3) : 1);
    size_t pos = (argCount >= 2 ? (size_t) getnumbertype(L, 2) : 0);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->InsertRows(pos, numRows);
    lua_pushboolean(L, returns);
    return 1;
}

// bool AppendRows( size_t numRows = 1 )
static int LUACALL wxGridTableBase_AppendRows(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    size_t numRows = (argCount >= 2 ? (size_t) getnumbertype(L, 2) : 1);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->AppendRows(numRows);
    lua_pushboolean(L, returns);
    return 1;
}

// bool DeleteRows( size_t pos = 0, size_t numRows = 1 )
static int LUACALL wxGridTableBase_DeleteRows(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    size_t numRows = (argCount >= 3 ? (size_t) getnumbertype(L, 3) : 1);
    size_t pos = (argCount >= 2 ? (size_t) getnumbertype(L, 2) : 0);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->DeleteRows(pos, numRows);
    lua_pushboolean(L, returns);
    return 1;
}

// bool InsertCols( size_t pos = 0, size_t numCols = 1 )
static int LUACALL wxGridTableBase_InsertCols(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    size_t numCols = (argCount >= 3 ? (size_t) getnumbertype(L, 3) : 1);
    size_t pos = (argCount >= 2 ? (size_t) getnumbertype(L, 2) : 0);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->InsertCols(pos, numCols);
    lua_pushboolean(L, returns);
    return 1;
}

// bool AppendCols( size_t numCols = 1 )
static int LUACALL wxGridTableBase_AppendCols(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    size_t numCols = (argCount >= 2 ? (size_t) getnumbertype(L, 2) : 1);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->AppendCols(numCols);
    lua_pushboolean(L, returns);
    return 1;
}

// bool DeleteCols( size_t pos = 0, size_t numCols = 1 )
static int LUACALL wxGridTableBase_DeleteCols(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    size_t numCols = (argCount >= 3 ? (size_t) getnumbertype(L, 3) : 1);
    size_t pos = (argCount >= 2 ? (size_t) getnumbertype(L, 2) : 0);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->DeleteCols(pos, numCols);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetRowLabelValue( int row )
static int LUACALL wxGridTableBase_GetRowLabelValue(lua_State *L)
{    
    wxString returns;    
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetRowLabelValue(row);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetColLabelValue( int col )
static int LUACALL wxGridTableBase_GetColLabelValue(lua_State *L)
{    
    wxString returns;    
    int col = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetColLabelValue(col);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetRowLabelValue( int row, const wxString& value )
static int LUACALL wxGridTableBase_SetRowLabelValue(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 3));
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetRowLabelValue(row, value);
    return 0;
}

// void SetColLabelValue( int col, const wxString& value )
static int LUACALL wxGridTableBase_SetColLabelValue(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 3));
    int col = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetColLabelValue(col, value);
    return 0;
}

// ~%wxver22 wxGridCellAttr * GetAttr( int row, int col, wxGridCellAttr::wxAttrKind  kind)
static int LUACALL wxGridTableBase_GetAttr(lua_State *L)
{    
    wxGridCellAttr *returns;    
    wxGridCellAttr::wxAttrKind kind = (wxGridCellAttr::wxAttrKind) getenumerationtype(L, 4);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->GetAttr(row, col, kind);
    pushuserdatatype(L, s_wxGridCellAttr, returns);
    return 1;
}

// void SetAttr(wxGridCellAttr* attr, int row, int col)
static int LUACALL wxGridTableBase_SetAttr(lua_State *L)
{        
    int col = (int) getnumbertype(L, 4);
    int row = (int) getnumbertype(L, 3);
    wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 2, s_wxGridCellAttr);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetAttr(attr, row, col);
    return 0;
}

// void SetRowAttr(wxGridCellAttr *attr, int row)
static int LUACALL wxGridTableBase_SetRowAttr(lua_State *L)
{        
    int row = (int) getnumbertype(L, 3);
    wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 2, s_wxGridCellAttr);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetRowAttr(attr, row);
    return 0;
}

// void SetColAttr(wxGridCellAttr *attr, int col)
static int LUACALL wxGridTableBase_SetColAttr(lua_State *L)
{        
    int col = (int) getnumbertype(L, 3);
    wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 2, s_wxGridCellAttr);
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    self->SetColAttr(attr, col);
    return 0;
}

// bool CanHaveAttributes()
static int LUACALL wxGridTableBase_CanHaveAttributes(lua_State *L)
{    
    bool returns;
    wxGridTableBase *self = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = self->CanHaveAttributes();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxGridStringTable_destructor(lua_State *)
{
    return 0;
}

// wxGridStringTable( int numRows=0, int numCols=0 )
static int LUACALL wxGridStringTable_constructor(lua_State *L)
{    
    wxGridStringTable *returns;
    int argCount = lua_gettop(L);    
    int numCols = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    int numRows = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxGridStringTable(numRows, numCols);
    pushuserdatatype(L, s_wxGridStringTable, returns);
    return 1;
}

static int LUACALL wxGridTableMessage_destructor(lua_State *)
{
    return 0;
}

// wxGridTableMessage( wxGridTableBase *table, int id, int comInt1 = -1, int comInt2 = -1 )
static int LUACALL wxGridTableMessage_constructor(lua_State *L)
{    
    wxGridTableMessage *returns;
    int argCount = lua_gettop(L);    
    int comInt2 = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    int comInt1 = (argCount >= 3 ? (int) getnumbertype(L, 3) : -1);
    int id = (int) getnumbertype(L, 2);
    wxGridTableBase *table = (wxGridTableBase*)getuserdatatype(L, 1, s_wxGridTableBase);
    returns = new wxGridTableMessage(table, id, comInt1, comInt2);
    pushuserdatatype(L, s_wxGridTableMessage, returns);
    return 1;
}

// void SetTableObject( wxGridTableBase *table )
static int LUACALL wxGridTableMessage_SetTableObject(lua_State *L)
{        
    wxGridTableBase *table = (wxGridTableBase*)getuserdatatype(L, 2, s_wxGridTableBase);
    wxGridTableMessage *self = (wxGridTableMessage*)getuserdatatype(L, 1, s_wxGridTableMessage);
    self->SetTableObject(table);
    return 0;
}

// wxGridTableBase * GetTableObject() const
static int LUACALL wxGridTableMessage_GetTableObject(lua_State *L)
{    
    wxGridTableBase *returns;
    wxGridTableMessage *self = (wxGridTableMessage*)getuserdatatype(L, 1, s_wxGridTableMessage);
    returns = self->GetTableObject();
    pushuserdatatype(L, s_wxGridTableBase, returns);
    return 1;
}

// void SetId( int id )
static int LUACALL wxGridTableMessage_SetId(lua_State *L)
{        
    int id = (int) getnumbertype(L, 2);
    wxGridTableMessage *self = (wxGridTableMessage*)getuserdatatype(L, 1, s_wxGridTableMessage);
    self->SetId(id);
    return 0;
}

// int  GetId()
static int LUACALL wxGridTableMessage_GetId(lua_State *L)
{    
    int returns;
    wxGridTableMessage *self = (wxGridTableMessage*)getuserdatatype(L, 1, s_wxGridTableMessage);
    returns = self->GetId();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetCommandInt( int comInt1 )
static int LUACALL wxGridTableMessage_SetCommandInt(lua_State *L)
{        
    int comInt1 = (int) getnumbertype(L, 2);
    wxGridTableMessage *self = (wxGridTableMessage*)getuserdatatype(L, 1, s_wxGridTableMessage);
    self->SetCommandInt(comInt1);
    return 0;
}

// int  GetCommandInt()
static int LUACALL wxGridTableMessage_GetCommandInt(lua_State *L)
{    
    int returns;
    wxGridTableMessage *self = (wxGridTableMessage*)getuserdatatype(L, 1, s_wxGridTableMessage);
    returns = self->GetCommandInt();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetCommandInt2( int comInt2 )
static int LUACALL wxGridTableMessage_SetCommandInt2(lua_State *L)
{        
    int comInt2 = (int) getnumbertype(L, 2);
    wxGridTableMessage *self = (wxGridTableMessage*)getuserdatatype(L, 1, s_wxGridTableMessage);
    self->SetCommandInt2(comInt2);
    return 0;
}

// int  GetCommandInt2()
static int LUACALL wxGridTableMessage_GetCommandInt2(lua_State *L)
{    
    int returns;
    wxGridTableMessage *self = (wxGridTableMessage*)getuserdatatype(L, 1, s_wxGridTableMessage);
    returns = self->GetCommandInt2();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxGridCellCoords_destructor(lua_State *)
{
    return 0;
}

// wxGridCellCoords( int r = -1, int c = -1 )
static int LUACALL wxGridCellCoords_constructor(lua_State *L)
{    
    wxGridCellCoords *returns;
    int argCount = lua_gettop(L);    
    int c = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    int r = (argCount >= 1 ? (int) getnumbertype(L, 1) : -1);
    returns = new wxGridCellCoords(r, c);
    pushuserdatatype(L, s_wxGridCellCoords, returns);
    return 1;
}

// int GetRow() const
static int LUACALL wxGridCellCoords_GetRow(lua_State *L)
{    
    int returns;
    wxGridCellCoords *self = (wxGridCellCoords*)getuserdatatype(L, 1, s_wxGridCellCoords);
    returns = self->GetRow();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetRow( int n )
static int LUACALL wxGridCellCoords_SetRow(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxGridCellCoords *self = (wxGridCellCoords*)getuserdatatype(L, 1, s_wxGridCellCoords);
    self->SetRow(n);
    return 0;
}

// int GetCol() const
static int LUACALL wxGridCellCoords_GetCol(lua_State *L)
{    
    int returns;
    wxGridCellCoords *self = (wxGridCellCoords*)getuserdatatype(L, 1, s_wxGridCellCoords);
    returns = self->GetCol();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetCol( int n )
static int LUACALL wxGridCellCoords_SetCol(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxGridCellCoords *self = (wxGridCellCoords*)getuserdatatype(L, 1, s_wxGridCellCoords);
    self->SetCol(n);
    return 0;
}

// void Set(int row, int col)
static int LUACALL wxGridCellCoords_Set(lua_State *L)
{        
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridCellCoords *self = (wxGridCellCoords*)getuserdatatype(L, 1, s_wxGridCellCoords);
    self->Set(row, col);
    return 0;
}

static int LUACALL wxGrid_destructor(lua_State *)
{
    return 0;
}

// wxGrid( wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxWANTS_CHARS, const wxString &name = "grid" )
static int LUACALL wxGrid_constructor(lua_State *L)
{    
    wxGrid *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("grid"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxWANTS_CHARS);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxGrid(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxGrid, returns);
    return 1;
}

// bool    CreateGrid( int numRows, int numCols, wxGrid::wxGridSelectionModes selmode = wxGrid::wxGridSelectCells )
static int LUACALL wxGrid_CreateGrid(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxGrid::wxGridSelectionModes selmode = (argCount >= 4 ? (wxGrid::wxGridSelectionModes) getenumerationtype(L, 4) : wxGrid::wxGridSelectCells);
    int numCols = (int) getnumbertype(L, 3);
    int numRows = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->CreateGrid(numRows, numCols, selmode);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    InsertRows( int pos = 0, int numRows = 1, bool updateLabels=TRUE )
static int LUACALL wxGrid_InsertRows(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool updateLabels = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    int numRows = (argCount >= 3 ? (int) getnumbertype(L, 3) : 1);
    int pos = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->InsertRows(pos, numRows, updateLabels);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    AppendRows( int numRows = 1, bool updateLabels=TRUE )
static int LUACALL wxGrid_AppendRows(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool updateLabels = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    int numRows = (argCount >= 2 ? (int) getnumbertype(L, 2) : 1);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->AppendRows(numRows, updateLabels);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    DeleteRows( int pos = 0, int numRows = 1, bool updateLabels=TRUE )
static int LUACALL wxGrid_DeleteRows(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool updateLabels = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    int numRows = (argCount >= 3 ? (int) getnumbertype(L, 3) : 1);
    int pos = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->DeleteRows(pos, numRows, updateLabels);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    InsertCols( int pos = 0, int numCols = 1, bool updateLabels=TRUE )
static int LUACALL wxGrid_InsertCols(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool updateLabels = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    int numCols = (argCount >= 3 ? (int) getnumbertype(L, 3) : 1);
    int pos = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->InsertCols(pos, numCols, updateLabels);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    AppendCols( int numCols = 1, bool updateLabels=TRUE )
static int LUACALL wxGrid_AppendCols(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool updateLabels = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    int numCols = (argCount >= 2 ? (int) getnumbertype(L, 2) : 1);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->AppendCols(numCols, updateLabels);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    DeleteCols( int pos = 0, int numCols = 1, bool updateLabels=TRUE )
static int LUACALL wxGrid_DeleteCols(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool updateLabels = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    int numCols = (argCount >= 3 ? (int) getnumbertype(L, 3) : 1);
    int pos = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->DeleteCols(pos, numCols, updateLabels);
    lua_pushboolean(L, returns);
    return 1;
}

// void    SetSelectionMode(wxGrid::wxGridSelectionModes selmode)
static int LUACALL wxGrid_SetSelectionMode(lua_State *L)
{        
    wxGrid::wxGridSelectionModes selmode = (wxGrid::wxGridSelectionModes) getenumerationtype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetSelectionMode(selmode);
    return 0;
}

// void    AutoSize()
static int LUACALL wxGrid_AutoSize(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->AutoSize();
    return 0;
}

// void    AutoSizeRow( int row, bool setAsMin = TRUE )
static int LUACALL wxGrid_AutoSizeRow(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool setAsMin = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->AutoSizeRow(row, setAsMin);
    return 0;
}

// void    AutoSizeColumn( int col, bool setAsMin = TRUE )
static int LUACALL wxGrid_AutoSizeColumn(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool setAsMin = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->AutoSizeColumn(col, setAsMin);
    return 0;
}

// void    AutoSizeRows( bool setAsMin = TRUE )
static int LUACALL wxGrid_AutoSizeRows(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool setAsMin = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->AutoSizeRows(setAsMin);
    return 0;
}

// void    AutoSizeColumns( bool setAsMin = TRUE )
static int LUACALL wxGrid_AutoSizeColumns(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool setAsMin = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->AutoSizeColumns(setAsMin);
    return 0;
}

// void    BeginBatch()
static int LUACALL wxGrid_BeginBatch(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->BeginBatch();
    return 0;
}

// void    EndBatch()
static int LUACALL wxGrid_EndBatch(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->EndBatch();
    return 0;
}

// bool    CanDragRowSize()
static int LUACALL wxGrid_CanDragRowSize(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->CanDragRowSize();
    lua_pushboolean(L, returns);
    return 1;
}

// void    EnableDragRowSize( bool enable = TRUE )
static int LUACALL wxGrid_EnableDragRowSize(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool enable = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->EnableDragRowSize(enable);
    return 0;
}

// void    DisableDragRowSize()
static int LUACALL wxGrid_DisableDragRowSize(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->DisableDragRowSize();
    return 0;
}

// bool    CanDragColSize()
static int LUACALL wxGrid_CanDragColSize(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->CanDragColSize();
    lua_pushboolean(L, returns);
    return 1;
}

// void    EnableDragColSize( bool enable = TRUE )
static int LUACALL wxGrid_EnableDragColSize(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool enable = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->EnableDragColSize(enable);
    return 0;
}

// void    DisableDragColSize()
static int LUACALL wxGrid_DisableDragColSize(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->DisableDragColSize();
    return 0;
}

// bool    CanDragGridSize()
static int LUACALL wxGrid_CanDragGridSize(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->CanDragGridSize();
    lua_pushboolean(L, returns);
    return 1;
}

// void    EnableDragGridSize(bool enable = TRUE)
static int LUACALL wxGrid_EnableDragGridSize(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool enable = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->EnableDragGridSize(enable);
    return 0;
}

// void    DisableDragGridSize()
static int LUACALL wxGrid_DisableDragGridSize(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->DisableDragGridSize();
    return 0;
}

// int     GetNumberRows()
static int LUACALL wxGrid_GetNumberRows(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetNumberRows();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetNumberCols()
static int LUACALL wxGrid_GetNumberCols(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetNumberCols();
    lua_pushnumber(L, returns);
    return 1;
}

// bool    ProcessTableMessage( wxGridTableMessage& msg)
static int LUACALL wxGrid_ProcessTableMessage(lua_State *L)
{    
    bool returns;    
    wxGridTableMessage *msg = (wxGridTableMessage*)getuserdatatype(L, 2, s_wxGridTableMessage);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->ProcessTableMessage(*msg);
    lua_pushboolean(L, returns);
    return 1;
}

// wxGridTableBase * GetTable() const
static int LUACALL wxGrid_GetTable(lua_State *L)
{    
    wxGridTableBase *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetTable();
    pushuserdatatype(L, s_wxGridTableBase, returns);
    return 1;
}

// bool    SetTable( wxGridTableBase * table, bool takeOwnership = FALSE, wxGrid::wxGridSelectionModes selmode = wxGrid::wxGridSelectCells )
static int LUACALL wxGrid_SetTable(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxGrid::wxGridSelectionModes selmode = (argCount >= 4 ? (wxGrid::wxGridSelectionModes) getenumerationtype(L, 4) : wxGrid::wxGridSelectCells);
    bool takeOwnership = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    wxGridTableBase *table = (wxGridTableBase*)getuserdatatype(L, 2, s_wxGridTableBase);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->SetTable(table, takeOwnership, selmode);
    lua_pushboolean(L, returns);
    return 1;
}

// void    ClearGrid()
static int LUACALL wxGrid_ClearGrid(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->ClearGrid();
    return 0;
}

// void    DrawCellHighlight( wxDC& dc, const wxGridCellAttr * attr )
static int LUACALL wxGrid_DrawCellHighlight(lua_State *L)
{        
    const wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 3, s_wxGridCellAttr);
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->DrawCellHighlight(*dc, attr);
    return 0;
}

// void    DrawTextRectangle( wxDC& dc, const wxString& text, const wxRect& rect, int horizontalAlignment = wxLEFT, int verticalAlignment = wxTOP )
static int LUACALL wxGrid_DrawTextRectangle(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int verticalAlignment = (argCount >= 6 ? (int) getnumbertype(L, 6) : wxTOP);
    int horizontalAlignment = (argCount >= 5 ? (int) getnumbertype(L, 5) : wxLEFT);
    const wxRect *rect = (wxRect*)getuserdatatype(L, 4, s_wxRect);
    wxString text = lua2wx(getstringtype(L, 3));
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->DrawTextRectangle(*dc, text, *rect, horizontalAlignment, verticalAlignment);
    return 0;
}

// void    StringToLines( const wxString& value, wxArrayString& lines )
static int LUACALL wxGrid_StringToLines(lua_State *L)
{        
    wxArrayString *lines = (wxArrayString*)getuserdatatype(L, 3, s_wxArrayString);
    wxString value = lua2wx(getstringtype(L, 2));
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->StringToLines(value, *lines);
    return 0;
}

// void    GetTextBoxSize( wxDC& dc, wxArrayString& lines, long * width, long * height)
static int LUACALL wxGrid_GetTextBoxSize(lua_State *L)
{
    long height;
    long width;
    // wxArrayString& lines
    wxArrayString *lines = (wxArrayString *) getuserdatatype(L, 3, s_wxArrayString);
    // wxDC& dc
    wxDC *dc = (wxDC *) getuserdatatype(L, 2, s_wxDC);
    // get this
    wxGrid *self = ( wxGrid * ) getuserdatatype(L, 1, s_wxGrid );
    // call GetTextBoxSize
    self->GetTextBoxSize(*dc, *lines, &width, &height);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 2;
}

// int     GetBatchCount()
static int LUACALL wxGrid_GetBatchCount(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetBatchCount();
    lua_pushnumber(L, returns);
    return 1;
}

// ~%wxver22 void ForceRefresh()
static int LUACALL wxGrid_ForceRefresh(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->ForceRefresh();
    return 0;
}

// bool    IsEditable()
static int LUACALL wxGrid_IsEditable(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->IsEditable();
    lua_pushboolean(L, returns);
    return 1;
}

// void    EnableEditing( bool edit )
static int LUACALL wxGrid_EnableEditing(lua_State *L)
{        
    bool edit = getbooleantype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->EnableEditing(edit);
    return 0;
}

// void    EnableCellEditControl( bool enable = TRUE )
static int LUACALL wxGrid_EnableCellEditControl(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool enable = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->EnableCellEditControl(enable);
    return 0;
}

// void    DisableCellEditControl()
static int LUACALL wxGrid_DisableCellEditControl(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->DisableCellEditControl();
    return 0;
}

// bool    CanEnableCellControl() const
static int LUACALL wxGrid_CanEnableCellControl(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->CanEnableCellControl();
    lua_pushboolean(L, returns);
    return 1;
}

// bool    IsCellEditControlEnabled() const
static int LUACALL wxGrid_IsCellEditControlEnabled(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->IsCellEditControlEnabled();
    lua_pushboolean(L, returns);
    return 1;
}

// bool    IsCellEditControlShown() const
static int LUACALL wxGrid_IsCellEditControlShown(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->IsCellEditControlShown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool    IsCurrentCellReadOnly() const
static int LUACALL wxGrid_IsCurrentCellReadOnly(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->IsCurrentCellReadOnly();
    lua_pushboolean(L, returns);
    return 1;
}

// void    ShowCellEditControl()
static int LUACALL wxGrid_ShowCellEditControl(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->ShowCellEditControl();
    return 0;
}

// void    HideCellEditControl()
static int LUACALL wxGrid_HideCellEditControl(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->HideCellEditControl();
    return 0;
}

// void    SaveEditControlValue()
static int LUACALL wxGrid_SaveEditControlValue(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SaveEditControlValue();
    return 0;
}

// void    XYToCell( int x, int y, wxGridCellCoords& coords)
static int LUACALL wxGrid_XYToCell(lua_State *L)
{        
    wxGridCellCoords *coords = (wxGridCellCoords*)getuserdatatype(L, 4, s_wxGridCellCoords);
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->XYToCell(x, y, *coords);
    return 0;
}

// int     XToCol( int x )
static int LUACALL wxGrid_XToCol(lua_State *L)
{    
    int returns;    
    int x = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->XToCol(x);
    lua_pushnumber(L, returns);
    return 1;
}

// int     YToRow( int y )
static int LUACALL wxGrid_YToRow(lua_State *L)
{    
    int returns;    
    int y = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->YToRow(y);
    lua_pushnumber(L, returns);
    return 1;
}

// int     XToEdgeOfCol( int x )
static int LUACALL wxGrid_XToEdgeOfCol(lua_State *L)
{    
    int returns;    
    int x = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->XToEdgeOfCol(x);
    lua_pushnumber(L, returns);
    return 1;
}

// int     YToEdgeOfRow( int y )
static int LUACALL wxGrid_YToEdgeOfRow(lua_State *L)
{    
    int returns;    
    int y = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->YToEdgeOfRow(y);
    lua_pushnumber(L, returns);
    return 1;
}

// wxRect  CellToRect( int row, int col )
static int LUACALL wxGrid_CellToRect(lua_State *L)
{    
    wxRect *returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxRect(self->CellToRect(row, col));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// int     GetGridCursorRow()
static int LUACALL wxGrid_GetGridCursorRow(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetGridCursorRow();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetGridCursorCol()
static int LUACALL wxGrid_GetGridCursorCol(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetGridCursorCol();
    lua_pushnumber(L, returns);
    return 1;
}

// bool    IsVisible( int row, int col, bool wholeCellVisible = TRUE )
static int LUACALL wxGrid_IsVisible(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool wholeCellVisible = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->IsVisible(row, col, wholeCellVisible);
    lua_pushboolean(L, returns);
    return 1;
}

// void    MakeCellVisible( int row, int col )
static int LUACALL wxGrid_MakeCellVisible(lua_State *L)
{        
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->MakeCellVisible(row, col);
    return 0;
}

// void    SetGridCursor( int row, int col )
static int LUACALL wxGrid_SetGridCursor(lua_State *L)
{        
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetGridCursor(row, col);
    return 0;
}

// int     GetDefaultRowLabelSize()
static int LUACALL wxGrid_GetDefaultRowLabelSize(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultRowLabelSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetRowLabelSize()
static int LUACALL wxGrid_GetRowLabelSize(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetRowLabelSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetDefaultColLabelSize()
static int LUACALL wxGrid_GetDefaultColLabelSize(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultColLabelSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetColLabelSize()
static int LUACALL wxGrid_GetColLabelSize(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetColLabelSize();
    lua_pushnumber(L, returns);
    return 1;
}

// wxColour GetLabelBackgroundColour()
static int LUACALL wxGrid_GetLabelBackgroundColour(lua_State *L)
{    
    wxColour *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetLabelBackgroundColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxColour GetLabelTextColour()
static int LUACALL wxGrid_GetLabelTextColour(lua_State *L)
{    
    wxColour *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetLabelTextColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxFont  GetLabelFont()
static int LUACALL wxGrid_GetLabelFont(lua_State *L)
{    
    wxFont *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxFont(self->GetLabelFont());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// void    GetRowLabelAlignment( int *horz, int *vert )
static int LUACALL wxGrid_GetRowLabelAlignment(lua_State *L)
{
    int vert;
    int horz;
    // get this
    wxGrid *self = ( wxGrid * ) getuserdatatype(L, 1, s_wxGrid );
    // call GetRowLabelAlignment
    self->GetRowLabelAlignment(&horz, &vert);
    // push results
    lua_pushnumber(L, horz);
    lua_pushnumber(L, vert);
    // return the number of parameters
    return 2;
}

// void    GetColLabelAlignment( int *horz, int *vert )
static int LUACALL wxGrid_GetColLabelAlignment(lua_State *L)
{
    int vert;
    int horz;
    // get this
    wxGrid *self = ( wxGrid * ) getuserdatatype(L, 1, s_wxGrid );
    // call GetColLabelAlignment
    self->GetColLabelAlignment(&horz, &vert);
    // push results
    lua_pushnumber(L, horz);
    lua_pushnumber(L, vert);
    // return the number of parameters
    return 2;
}

// wxString GetRowLabelValue( int row )
static int LUACALL wxGrid_GetRowLabelValue(lua_State *L)
{    
    wxString returns;    
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetRowLabelValue(row);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetColLabelValue( int col )
static int LUACALL wxGrid_GetColLabelValue(lua_State *L)
{    
    wxString returns;    
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetColLabelValue(col);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxColour GetGridLineColour()
static int LUACALL wxGrid_GetGridLineColour(lua_State *L)
{    
    wxColour *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetGridLineColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxColour GetCellHighlightColour()
static int LUACALL wxGrid_GetCellHighlightColour(lua_State *L)
{    
    wxColour *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetCellHighlightColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// ~%wxver22 int GetCellHighlightPenWidth()
static int LUACALL wxGrid_GetCellHighlightPenWidth(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetCellHighlightPenWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// ~%wxver22 int GetCellHighlightROPenWidth()
static int LUACALL wxGrid_GetCellHighlightROPenWidth(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetCellHighlightROPenWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// void    SetRowLabelSize( int width )
static int LUACALL wxGrid_SetRowLabelSize(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetRowLabelSize(width);
    return 0;
}

// void    SetColLabelSize( int height )
static int LUACALL wxGrid_SetColLabelSize(lua_State *L)
{        
    int height = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColLabelSize(height);
    return 0;
}

// void    SetLabelBackgroundColour( const wxColour& backColour )
static int LUACALL wxGrid_SetLabelBackgroundColour(lua_State *L)
{        
    const wxColour *backColour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetLabelBackgroundColour(*backColour);
    return 0;
}

// void    SetLabelTextColour( const wxColour& textColour)
static int LUACALL wxGrid_SetLabelTextColour(lua_State *L)
{        
    const wxColour *textColour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetLabelTextColour(*textColour);
    return 0;
}

// void    SetLabelFont( const wxFont& labelFont)
static int LUACALL wxGrid_SetLabelFont(lua_State *L)
{        
    const wxFont *labelFont = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetLabelFont(*labelFont);
    return 0;
}

// void    SetRowLabelAlignment( int horiz, int vert )
static int LUACALL wxGrid_SetRowLabelAlignment(lua_State *L)
{        
    int vert = (int) getnumbertype(L, 3);
    int horiz = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetRowLabelAlignment(horiz, vert);
    return 0;
}

// void    SetColLabelAlignment( int horiz, int vert )
static int LUACALL wxGrid_SetColLabelAlignment(lua_State *L)
{        
    int vert = (int) getnumbertype(L, 3);
    int horiz = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColLabelAlignment(horiz, vert);
    return 0;
}

// void    SetRowLabelValue( int row, const wxString& value )
static int LUACALL wxGrid_SetRowLabelValue(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 3));
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetRowLabelValue(row, value);
    return 0;
}

// void    SetColLabelValue( int col, const wxString& value)
static int LUACALL wxGrid_SetColLabelValue(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 3));
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColLabelValue(col, value);
    return 0;
}

// void    SetGridLineColour( const wxColour& lineColour)
static int LUACALL wxGrid_SetGridLineColour(lua_State *L)
{        
    const wxColour *lineColour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetGridLineColour(*lineColour);
    return 0;
}

// void    SetCellHighlightColour( const wxColour& highlightColour)
static int LUACALL wxGrid_SetCellHighlightColour(lua_State *L)
{        
    const wxColour *highlightColour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellHighlightColour(*highlightColour);
    return 0;
}

// ~%wxver22 void SetCellHighlightPenWidth(int width)
static int LUACALL wxGrid_SetCellHighlightPenWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellHighlightPenWidth(width);
    return 0;
}

// ~%wxver22 void SetCellHighlightROPenWidth(int width)
static int LUACALL wxGrid_SetCellHighlightROPenWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellHighlightROPenWidth(width);
    return 0;
}

// void    SetRowAttr(int row, wxGridCellAttr *attr)
static int LUACALL wxGrid_SetRowAttr(lua_State *L)
{        
    wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 3, s_wxGridCellAttr);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetRowAttr(row, attr);
    return 0;
}

// void    SetColAttr(int col, wxGridCellAttr *attr)
static int LUACALL wxGrid_SetColAttr(lua_State *L)
{        
    wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 3, s_wxGridCellAttr);
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColAttr(col, attr);
    return 0;
}

// void    SetColFormatBool(int col)
static int LUACALL wxGrid_SetColFormatBool(lua_State *L)
{        
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColFormatBool(col);
    return 0;
}

// void    SetColFormatNumber(int col)
static int LUACALL wxGrid_SetColFormatNumber(lua_State *L)
{        
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColFormatNumber(col);
    return 0;
}

// void    SetColFormatFloat(int col, int width = -1, int precision = -1)
static int LUACALL wxGrid_SetColFormatFloat(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int precision = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    int width = (argCount >= 3 ? (int) getnumbertype(L, 3) : -1);
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColFormatFloat(col, width, precision);
    return 0;
}

// void    SetColFormatCustom(int col, const wxString& typeName)
static int LUACALL wxGrid_SetColFormatCustom(lua_State *L)
{        
    wxString typeName = lua2wx(getstringtype(L, 3));
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColFormatCustom(col, typeName);
    return 0;
}

// void    EnableGridLines( bool enable = TRUE )
static int LUACALL wxGrid_EnableGridLines(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool enable = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->EnableGridLines(enable);
    return 0;
}

// bool    GridLinesEnabled()
static int LUACALL wxGrid_GridLinesEnabled(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GridLinesEnabled();
    lua_pushboolean(L, returns);
    return 1;
}

// int     GetDefaultRowSize()
static int LUACALL wxGrid_GetDefaultRowSize(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultRowSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetRowSize( int row )
static int LUACALL wxGrid_GetRowSize(lua_State *L)
{    
    int returns;    
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetRowSize(row);
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetDefaultColSize()
static int LUACALL wxGrid_GetDefaultColSize(lua_State *L)
{    
    int returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultColSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetColSize( int col )
static int LUACALL wxGrid_GetColSize(lua_State *L)
{    
    int returns;    
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetColSize(col);
    lua_pushnumber(L, returns);
    return 1;
}

// wxColour GetSelectionBackground() const
static int LUACALL wxGrid_GetSelectionBackground(lua_State *L)
{    
    wxColour *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetSelectionBackground());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxColour GetSelectionForeground() const
static int LUACALL wxGrid_GetSelectionForeground(lua_State *L)
{    
    wxColour *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetSelectionForeground());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// void    SetSelectionBackground(const wxColour& c)
static int LUACALL wxGrid_SetSelectionBackground(lua_State *L)
{        
    const wxColour *c = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetSelectionBackground(*c);
    return 0;
}

// void    SetSelectionForeground(const wxColour& c)
static int LUACALL wxGrid_SetSelectionForeground(lua_State *L)
{        
    const wxColour *c = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetSelectionForeground(*c);
    return 0;
}

// wxColour GetDefaultCellBackgroundColour()
static int LUACALL wxGrid_GetDefaultCellBackgroundColour(lua_State *L)
{    
    wxColour *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetDefaultCellBackgroundColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxColour GetCellBackgroundColour( int row, int col )
static int LUACALL wxGrid_GetCellBackgroundColour(lua_State *L)
{    
    wxColour *returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetCellBackgroundColour(row, col));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxColour GetDefaultCellTextColour()
static int LUACALL wxGrid_GetDefaultCellTextColour(lua_State *L)
{    
    wxColour *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetDefaultCellTextColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxColour GetCellTextColour( int row, int col )
static int LUACALL wxGrid_GetCellTextColour(lua_State *L)
{    
    wxColour *returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxColour(self->GetCellTextColour(row, col));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxFont  GetDefaultCellFont()
static int LUACALL wxGrid_GetDefaultCellFont(lua_State *L)
{    
    wxFont *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxFont(self->GetDefaultCellFont());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// void    SetDefaultCellFont( const wxFont& cellFont)
static int LUACALL wxGrid_SetDefaultCellFont(lua_State *L)
{        
    const wxFont *cellFont = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetDefaultCellFont(*cellFont);
    return 0;
}

// wxFont  GetCellFont( int row, int col )
static int LUACALL wxGrid_GetCellFont(lua_State *L)
{    
    wxFont *returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxFont(self->GetCellFont(row, col));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// void    SetCellFont( int row, int col, const wxFont& cellFont)
static int LUACALL wxGrid_SetCellFont(lua_State *L)
{        
    const wxFont *cellFont = (wxFont*)getuserdatatype(L, 4, s_wxFont);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellFont(row, col, *cellFont);
    return 0;
}

// void    GetDefaultCellAlignment( int *horiz, int *vert )
static int LUACALL wxGrid_GetDefaultCellAlignment(lua_State *L)
{
    int vert;
    int horiz;
    // get this
    wxGrid *self = ( wxGrid * ) getuserdatatype(L, 1, s_wxGrid );
    // call GetDefaultCellAlignment
    self->GetDefaultCellAlignment(&horiz, &vert);
    // push results
    lua_pushnumber(L, horiz);
    lua_pushnumber(L, vert);
    // return the number of parameters
    return 2;
}

// void    SetDefaultCellAlignment( int horiz, int vert )
static int LUACALL wxGrid_SetDefaultCellAlignment(lua_State *L)
{        
    int vert = (int) getnumbertype(L, 3);
    int horiz = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetDefaultCellAlignment(horiz, vert);
    return 0;
}

// void    GetCellAlignment( int row, int col, int *horiz, int *vert )
static int LUACALL wxGrid_GetCellAlignment(lua_State *L)
{
    int vert;
    int horiz;
    // int col
    int col = (int) lua_tonumber(L, 3);
    // int row
    int row = (int) lua_tonumber(L, 2);
    // get this
    wxGrid *self = ( wxGrid * ) getuserdatatype(L, 1, s_wxGrid );
    // call GetCellAlignment
    self->GetCellAlignment(row, col, &horiz, &vert);
    // push results
    lua_pushnumber(L, horiz);
    lua_pushnumber(L, vert);
    // return the number of parameters
    return 2;
}

// void    SetCellAlignment( int row, int col, int horiz, int vert )
static int LUACALL wxGrid_SetCellAlignment(lua_State *L)
{        
    int vert = (int) getnumbertype(L, 5);
    int horiz = (int) getnumbertype(L, 4);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellAlignment(row, col, horiz, vert);
    return 0;
}

// void    SetDefaultColSize( int width, bool resizeExistingCols = FALSE )
static int LUACALL wxGrid_SetDefaultColSize(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool resizeExistingCols = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    int width = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetDefaultColSize(width, resizeExistingCols);
    return 0;
}

// void    SetColSize( int col, int width )
static int LUACALL wxGrid_SetColSize(lua_State *L)
{        
    int width = (int) getnumbertype(L, 3);
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColSize(col, width);
    return 0;
}

// void    SetColMinimalWidth( int col, int width )
static int LUACALL wxGrid_SetColMinimalWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 3);
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetColMinimalWidth(col, width);
    return 0;
}

// void    SetDefaultRowSize( int height, bool resizeExistingRows = FALSE )
static int LUACALL wxGrid_SetDefaultRowSize(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool resizeExistingRows = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    int height = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetDefaultRowSize(height, resizeExistingRows);
    return 0;
}

// void    SetRowSize( int row, int height )
static int LUACALL wxGrid_SetRowSize(lua_State *L)
{        
    int height = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetRowSize(row, height);
    return 0;
}

// void    SetRowMinimalHeight( int row, int width )
static int LUACALL wxGrid_SetRowMinimalHeight(lua_State *L)
{        
    int width = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetRowMinimalHeight(row, width);
    return 0;
}

// void    SetDefaultCellBackgroundColour( const wxColour& backColour)
static int LUACALL wxGrid_SetDefaultCellBackgroundColour(lua_State *L)
{        
    const wxColour *backColour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetDefaultCellBackgroundColour(*backColour);
    return 0;
}

// void    SetCellBackgroundColour( int row, int col, const wxColour& backColour)
static int LUACALL wxGrid_SetCellBackgroundColour(lua_State *L)
{        
    const wxColour *backColour = (wxColour*)getuserdatatype(L, 4, s_wxColour);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellBackgroundColour(row, col, *backColour);
    return 0;
}

// void    SetDefaultCellTextColour( const wxColour& textColour)
static int LUACALL wxGrid_SetDefaultCellTextColour(lua_State *L)
{        
    const wxColour *textColour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetDefaultCellTextColour(*textColour);
    return 0;
}

// void    SetCellTextColour( int row, int col, const wxColour& textColour)
static int LUACALL wxGrid_SetCellTextColour(lua_State *L)
{        
    const wxColour *textColour = (wxColour*)getuserdatatype(L, 4, s_wxColour);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellTextColour(row, col, *textColour);
    return 0;
}

// void    SetDefaultRenderer(wxGridCellRenderer *renderer)
static int LUACALL wxGrid_SetDefaultRenderer(lua_State *L)
{        
    wxGridCellRenderer *renderer = (wxGridCellRenderer*)getuserdatatype(L, 2, s_wxGridCellRenderer);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetDefaultRenderer(renderer);
    return 0;
}

// void    SetCellRenderer(int row, int col, wxGridCellRenderer *renderer)
static int LUACALL wxGrid_SetCellRenderer(lua_State *L)
{        
    wxGridCellRenderer *renderer = (wxGridCellRenderer*)getuserdatatype(L, 4, s_wxGridCellRenderer);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellRenderer(row, col, renderer);
    return 0;
}

// wxGridCellRenderer* GetDefaultRenderer() const
static int LUACALL wxGrid_GetDefaultRenderer(lua_State *L)
{    
    wxGridCellRenderer *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultRenderer();
    pushuserdatatype(L, s_wxGridCellRenderer, returns);
    return 1;
}

// wxGridCellRenderer* GetCellRenderer(int row, int col)
static int LUACALL wxGrid_GetCellRenderer(lua_State *L)
{    
    wxGridCellRenderer *returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetCellRenderer(row, col);
    pushuserdatatype(L, s_wxGridCellRenderer, returns);
    return 1;
}

// void    SetDefaultEditor(wxGridCellEditor *editor)
static int LUACALL wxGrid_SetDefaultEditor(lua_State *L)
{        
    wxGridCellEditor *editor = (wxGridCellEditor*)getuserdatatype(L, 2, s_wxGridCellEditor);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetDefaultEditor(editor);
    return 0;
}

// void    SetCellEditor(int row, int col, wxGridCellEditor *editor)
static int LUACALL wxGrid_SetCellEditor(lua_State *L)
{        
    wxGridCellEditor *editor = (wxGridCellEditor*)getuserdatatype(L, 4, s_wxGridCellEditor);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellEditor(row, col, editor);
    return 0;
}

// wxGridCellEditor* GetDefaultEditor() const
static int LUACALL wxGrid_GetDefaultEditor(lua_State *L)
{    
    wxGridCellEditor *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultEditor();
    pushuserdatatype(L, s_wxGridCellEditor, returns);
    return 1;
}

// wxGridCellEditor* GetCellEditor(int row, int col)
static int LUACALL wxGrid_GetCellEditor(lua_State *L)
{    
    wxGridCellEditor *returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetCellEditor(row, col);
    pushuserdatatype(L, s_wxGridCellEditor, returns);
    return 1;
}

// wxString GetCellValue( int row, int col )
static int LUACALL wxGrid_GetCellValue(lua_State *L)
{    
    wxString returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetCellValue(row, col);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetCellValue( int row, int col, const wxString& s )
static int LUACALL wxGrid_SetCellValue(lua_State *L)
{        
    wxString s = lua2wx(getstringtype(L, 4));
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetCellValue(row, col, s);
    return 0;
}

// bool    IsReadOnly(int row, int col) const
static int LUACALL wxGrid_IsReadOnly(lua_State *L)
{    
    bool returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->IsReadOnly(row, col);
    lua_pushboolean(L, returns);
    return 1;
}

// void    SetReadOnly(int row, int col, bool isReadOnly = TRUE)
static int LUACALL wxGrid_SetReadOnly(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool isReadOnly = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetReadOnly(row, col, isReadOnly);
    return 0;
}

// void    SelectRow( int row, bool addToSelected = FALSE )
static int LUACALL wxGrid_SelectRow(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool addToSelected = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SelectRow(row, addToSelected);
    return 0;
}

// void    SelectCol( int col, bool addToSelected = FALSE )
static int LUACALL wxGrid_SelectCol(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool addToSelected = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    int col = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SelectCol(col, addToSelected);
    return 0;
}

// void    SelectBlock( int topRow, int leftCol, int bottomRow, int rightCol, bool addToSelected = FALSE )
static int LUACALL wxGrid_SelectBlock(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool addToSelected = (argCount >= 6 ? getbooleantype(L, 6) : FALSE);
    int rightCol = (int) getnumbertype(L, 5);
    int bottomRow = (int) getnumbertype(L, 4);
    int leftCol = (int) getnumbertype(L, 3);
    int topRow = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SelectBlock(topRow, leftCol, bottomRow, rightCol, addToSelected);
    return 0;
}

// void    SelectAll()
static int LUACALL wxGrid_SelectAll(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SelectAll();
    return 0;
}

// bool    IsSelection()
static int LUACALL wxGrid_IsSelection(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->IsSelection();
    lua_pushboolean(L, returns);
    return 1;
}

// void    ClearSelection()
static int LUACALL wxGrid_ClearSelection(lua_State *L)
{    
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->ClearSelection();
    return 0;
}

// bool    IsInSelection( int row, int col )
static int LUACALL wxGrid_IsInSelection(lua_State *L)
{    
    bool returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->IsInSelection(row, col);
    lua_pushboolean(L, returns);
    return 1;
}

// wxRect  BlockToDeviceRect( const wxGridCellCoords & topLeft, const wxGridCellCoords & bottomRight )
static int LUACALL wxGrid_BlockToDeviceRect(lua_State *L)
{    
    wxRect *returns;    
    const wxGridCellCoords *bottomRight = (wxGridCellCoords*)getuserdatatype(L, 3, s_wxGridCellCoords);
    const wxGridCellCoords *topLeft = (wxGridCellCoords*)getuserdatatype(L, 2, s_wxGridCellCoords);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = new wxRect(self->BlockToDeviceRect(*topLeft, *bottomRight));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// void    RegisterDataType(const wxString& typeName, wxGridCellRenderer* renderer, wxGridCellEditor* editor)
static int LUACALL wxGrid_RegisterDataType(lua_State *L)
{        
    wxGridCellEditor *editor = (wxGridCellEditor*)getuserdatatype(L, 4, s_wxGridCellEditor);
    wxGridCellRenderer *renderer = (wxGridCellRenderer*)getuserdatatype(L, 3, s_wxGridCellRenderer);
    wxString typeName = lua2wx(getstringtype(L, 2));
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->RegisterDataType(typeName, renderer, editor);
    return 0;
}

// wxGridCellEditor* GetDefaultEditorForCell(int row, int col) const
static int LUACALL wxGrid_GetDefaultEditorForCell(lua_State *L)
{    
    wxGridCellEditor *returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultEditorForCell(row, col);
    pushuserdatatype(L, s_wxGridCellEditor, returns);
    return 1;
}

// wxGridCellRenderer* GetDefaultRendererForCell(int row, int col) const
static int LUACALL wxGrid_GetDefaultRendererForCell(lua_State *L)
{    
    wxGridCellRenderer *returns;    
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultRendererForCell(row, col);
    pushuserdatatype(L, s_wxGridCellRenderer, returns);
    return 1;
}

// wxGridCellEditor* GetDefaultEditorForType(const wxString& typeName) const
static int LUACALL wxGrid_GetDefaultEditorForType(lua_State *L)
{    
    wxGridCellEditor *returns;    
    wxString typeName = lua2wx(getstringtype(L, 2));
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultEditorForType(typeName);
    pushuserdatatype(L, s_wxGridCellEditor, returns);
    return 1;
}

// wxGridCellRenderer* GetDefaultRendererForType(const wxString& typeName) const
static int LUACALL wxGrid_GetDefaultRendererForType(lua_State *L)
{    
    wxGridCellRenderer *returns;    
    wxString typeName = lua2wx(getstringtype(L, 2));
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetDefaultRendererForType(typeName);
    pushuserdatatype(L, s_wxGridCellRenderer, returns);
    return 1;
}

// void SetMargins(int extraWidth, int extraHeight)
static int LUACALL wxGrid_SetMargins(lua_State *L)
{        
    int extraHeight = (int) getnumbertype(L, 3);
    int extraWidth = (int) getnumbertype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    self->SetMargins(extraWidth, extraHeight);
    return 0;
}

// ~%wxver22 wxWindow* GetGridWindow()
static int LUACALL wxGrid_GetGridWindow(lua_State *L)
{    
    wxWindow *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetGridWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// ~%wxver22 wxWindow* GetGridRowLabelWindow()
static int LUACALL wxGrid_GetGridRowLabelWindow(lua_State *L)
{    
    wxWindow *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetGridRowLabelWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// ~%wxver22 wxWindow* GetGridColLabelWindow()
static int LUACALL wxGrid_GetGridColLabelWindow(lua_State *L)
{    
    wxWindow *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetGridColLabelWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// ~%wxver22 wxWindow* GetGridCornerLabelWindow()
static int LUACALL wxGrid_GetGridCornerLabelWindow(lua_State *L)
{    
    wxWindow *returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->GetGridCornerLabelWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// bool    MoveCursorUp( bool expandSelection )
static int LUACALL wxGrid_MoveCursorUp(lua_State *L)
{    
    bool returns;    
    bool expandSelection = getbooleantype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MoveCursorUp(expandSelection);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    MoveCursorDown( bool expandSelection )
static int LUACALL wxGrid_MoveCursorDown(lua_State *L)
{    
    bool returns;    
    bool expandSelection = getbooleantype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MoveCursorDown(expandSelection);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    MoveCursorLeft( bool expandSelection )
static int LUACALL wxGrid_MoveCursorLeft(lua_State *L)
{    
    bool returns;    
    bool expandSelection = getbooleantype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MoveCursorLeft(expandSelection);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    MoveCursorRight( bool expandSelection )
static int LUACALL wxGrid_MoveCursorRight(lua_State *L)
{    
    bool returns;    
    bool expandSelection = getbooleantype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MoveCursorRight(expandSelection);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    MovePageDown()
static int LUACALL wxGrid_MovePageDown(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MovePageDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool    MovePageUp()
static int LUACALL wxGrid_MovePageUp(lua_State *L)
{    
    bool returns;
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MovePageUp();
    lua_pushboolean(L, returns);
    return 1;
}

// bool    MoveCursorUpBlock( bool expandSelection )
static int LUACALL wxGrid_MoveCursorUpBlock(lua_State *L)
{    
    bool returns;    
    bool expandSelection = getbooleantype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MoveCursorUpBlock(expandSelection);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    MoveCursorDownBlock( bool expandSelection )
static int LUACALL wxGrid_MoveCursorDownBlock(lua_State *L)
{    
    bool returns;    
    bool expandSelection = getbooleantype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MoveCursorDownBlock(expandSelection);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    MoveCursorLeftBlock( bool expandSelection )
static int LUACALL wxGrid_MoveCursorLeftBlock(lua_State *L)
{    
    bool returns;    
    bool expandSelection = getbooleantype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MoveCursorLeftBlock(expandSelection);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    MoveCursorRightBlock( bool expandSelection )
static int LUACALL wxGrid_MoveCursorRightBlock(lua_State *L)
{    
    bool returns;    
    bool expandSelection = getbooleantype(L, 2);
    wxGrid *self = (wxGrid*)getuserdatatype(L, 1, s_wxGrid);
    returns = self->MoveCursorRightBlock(expandSelection);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxGridCellEditor_destructor(lua_State *)
{
    return 0;
}

// bool IsCreated()
static int LUACALL wxGridCellEditor_IsCreated(lua_State *L)
{    
    bool returns;
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    returns = self->IsCreated();
    lua_pushboolean(L, returns);
    return 1;
}

// wxControl* GetControl()
static int LUACALL wxGridCellEditor_GetControl(lua_State *L)
{    
    wxControl *returns;
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    returns = self->GetControl();
    pushuserdatatype(L, s_wxControl, returns);
    return 1;
}

// void SetControl(wxControl* control)
static int LUACALL wxGridCellEditor_SetControl(lua_State *L)
{        
    wxControl *control = (wxControl*)getuserdatatype(L, 2, s_wxControl);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->SetControl(control);
    return 0;
}

// void SetParameters(const wxString& params)
static int LUACALL wxGridCellEditor_SetParameters(lua_State *L)
{        
    wxString params = lua2wx(getstringtype(L, 2));
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->SetParameters(params);
    return 0;
}

// void IncRef()
static int LUACALL wxGridCellEditor_IncRef(lua_State *L)
{    
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->IncRef();
    return 0;
}

// void DecRef()
static int LUACALL wxGridCellEditor_DecRef(lua_State *L)
{    
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->DecRef();
    return 0;
}

// virtual void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler)
static int LUACALL wxGridCellEditor_Create(lua_State *L)
{        
    wxEvtHandler *evtHandler = (wxEvtHandler*)getuserdatatype(L, 4, s_wxEvtHandler);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->Create(parent, id, evtHandler);
    return 0;
}

// virtual void BeginEdit(int row, int col, wxGrid* grid)
static int LUACALL wxGridCellEditor_BeginEdit(lua_State *L)
{        
    wxGrid *grid = (wxGrid*)getuserdatatype(L, 4, s_wxGrid);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->BeginEdit(row, col, grid);
    return 0;
}

// virtual bool EndEdit(int row, int col, wxGrid* grid)
static int LUACALL wxGridCellEditor_EndEdit(lua_State *L)
{    
    bool returns;    
    wxGrid *grid = (wxGrid*)getuserdatatype(L, 4, s_wxGrid);
    int col = (int) getnumbertype(L, 3);
    int row = (int) getnumbertype(L, 2);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    returns = self->EndEdit(row, col, grid);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void Reset()
static int LUACALL wxGridCellEditor_Reset(lua_State *L)
{    
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->Reset();
    return 0;
}

// virtual void SetSize(const wxRect& rect)
static int LUACALL wxGridCellEditor_SetSize(lua_State *L)
{        
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->SetSize(*rect);
    return 0;
}

// virtual void Show(bool show, wxGridCellAttr *attr = NULL)
static int LUACALL wxGridCellEditor_Show(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxGridCellAttr *attr = (argCount >= 3 ? (wxGridCellAttr*)getuserdatatype(L, 3, s_wxGridCellAttr) : NULL);
    bool show = getbooleantype(L, 2);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->Show(show, attr);
    return 0;
}

// virtual void PaintBackground(const wxRect& rectCell, wxGridCellAttr *attr)
static int LUACALL wxGridCellEditor_PaintBackground(lua_State *L)
{        
    wxGridCellAttr *attr = (wxGridCellAttr*)getuserdatatype(L, 3, s_wxGridCellAttr);
    const wxRect *rectCell = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->PaintBackground(*rectCell, attr);
    return 0;
}

// virtual bool IsAcceptedKey(wxKeyEvent& event)
static int LUACALL wxGridCellEditor_IsAcceptedKey(lua_State *L)
{    
    bool returns;    
    wxKeyEvent *event = (wxKeyEvent*)getuserdatatype(L, 2, s_wxKeyEvent);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    returns = self->IsAcceptedKey(*event);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void StartingKey(wxKeyEvent& event)
static int LUACALL wxGridCellEditor_StartingKey(lua_State *L)
{        
    wxKeyEvent *event = (wxKeyEvent*)getuserdatatype(L, 2, s_wxKeyEvent);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->StartingKey(*event);
    return 0;
}

// virtual void StartingClick()
static int LUACALL wxGridCellEditor_StartingClick(lua_State *L)
{    
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->StartingClick();
    return 0;
}

// virtual void HandleReturn(wxKeyEvent& event)
static int LUACALL wxGridCellEditor_HandleReturn(lua_State *L)
{        
    wxKeyEvent *event = (wxKeyEvent*)getuserdatatype(L, 2, s_wxKeyEvent);
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->HandleReturn(*event);
    return 0;
}

// virtual void Destroy()
static int LUACALL wxGridCellEditor_Destroy(lua_State *L)
{    
    wxGridCellEditor *self = (wxGridCellEditor*)getuserdatatype(L, 1, s_wxGridCellEditor);
    self->Destroy();
    return 0;
}

static int LUACALL wxGridCellTextEditor_destructor(lua_State *)
{
    return 0;
}

// wxGridCellTextEditor()
static int LUACALL wxGridCellTextEditor_constructor(lua_State *L)
{    
    wxGridCellTextEditor *returns;
    returns = new wxGridCellTextEditor();
    pushuserdatatype(L, s_wxGridCellTextEditor, returns);
    return 1;
}

static int LUACALL wxGridCellNumberEditor_destructor(lua_State *)
{
    return 0;
}

// wxGridCellNumberEditor(int min = -1, int max = -1)
static int LUACALL wxGridCellNumberEditor_constructor(lua_State *L)
{    
    wxGridCellNumberEditor *returns;
    int argCount = lua_gettop(L);    
    int max = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    int min = (argCount >= 1 ? (int) getnumbertype(L, 1) : -1);
    returns = new wxGridCellNumberEditor(min, max);
    pushuserdatatype(L, s_wxGridCellNumberEditor, returns);
    return 1;
}

static int LUACALL wxGridCellFloatEditor_destructor(lua_State *)
{
    return 0;
}

// wxGridCellFloatEditor()
static int LUACALL wxGridCellFloatEditor_constructor(lua_State *L)
{    
    wxGridCellFloatEditor *returns;
    returns = new wxGridCellFloatEditor();
    pushuserdatatype(L, s_wxGridCellFloatEditor, returns);
    return 1;
}

static int LUACALL wxGridCellBoolEditor_destructor(lua_State *)
{
    return 0;
}

// wxGridCellBoolEditor()
static int LUACALL wxGridCellBoolEditor_constructor(lua_State *L)
{    
    wxGridCellBoolEditor *returns;
    returns = new wxGridCellBoolEditor();
    pushuserdatatype(L, s_wxGridCellBoolEditor, returns);
    return 1;
}

static int LUACALL wxGridEvent_destructor(lua_State *L)
{
    wxGridEvent * self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxGridEvent_Delete(lua_State *L)
{
    wxGridEvent * self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxGridEvent(int id, wxEventType type, wxGrid* obj, int row = -1, int col = -1, int x = -1, int y = -1, bool sel = TRUE, bool control = FALSE, bool shift = FALSE, bool alt = FALSE, bool meta = FALSE)
static int LUACALL wxGridEvent_constructor(lua_State *L)
{    
    wxGridEvent *returns;
    int argCount = lua_gettop(L);    
    bool meta = (argCount >= 12 ? getbooleantype(L, 12) : FALSE);
    bool alt = (argCount >= 11 ? getbooleantype(L, 11) : FALSE);
    bool shift = (argCount >= 10 ? getbooleantype(L, 10) : FALSE);
    bool control = (argCount >= 9 ? getbooleantype(L, 9) : FALSE);
    bool sel = (argCount >= 8 ? getbooleantype(L, 8) : TRUE);
    int y = (argCount >= 7 ? (int) getnumbertype(L, 7) : -1);
    int x = (argCount >= 6 ? (int) getnumbertype(L, 6) : -1);
    int col = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    int row = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    wxGrid *obj = (wxGrid*)getuserdatatype(L, 3, s_wxGrid);
    wxEventType type = (wxEventType) getnumbertype(L, 2);
    int id = (int) getnumbertype(L, 1);
    returns = new wxGridEvent(id, type, obj, row, col, x, y, sel, control, shift, alt, meta);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxGridEvent, returns);
    return 1;
}

// virtual int GetRow()
static int LUACALL wxGridEvent_GetRow(lua_State *L)
{    
    int returns;
    wxGridEvent *self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    returns = self->GetRow();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual int GetCol()
static int LUACALL wxGridEvent_GetCol(lua_State *L)
{    
    int returns;
    wxGridEvent *self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    returns = self->GetCol();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPoint     GetPosition()
static int LUACALL wxGridEvent_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxGridEvent *self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// bool        Selecting()
static int LUACALL wxGridEvent_Selecting(lua_State *L)
{    
    bool returns;
    wxGridEvent *self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    returns = self->Selecting();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        ControlDown()
static int LUACALL wxGridEvent_ControlDown(lua_State *L)
{    
    bool returns;
    wxGridEvent *self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    returns = self->ControlDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        MetaDown()
static int LUACALL wxGridEvent_MetaDown(lua_State *L)
{    
    bool returns;
    wxGridEvent *self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    returns = self->MetaDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        ShiftDown()
static int LUACALL wxGridEvent_ShiftDown(lua_State *L)
{    
    bool returns;
    wxGridEvent *self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    returns = self->ShiftDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        AltDown()
static int LUACALL wxGridEvent_AltDown(lua_State *L)
{    
    bool returns;
    wxGridEvent *self = (wxGridEvent*)getuserdatatype(L, 1, s_wxGridEvent);
    returns = self->AltDown();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxGridSizeEvent_destructor(lua_State *)
{
    return 0;
}

// wxGridSizeEvent(int id, wxEventType type, wxGrid* obj, int rowOrCol = -1, int x = -1, int y = -1, bool control = FALSE, bool shift = FALSE, bool alt = FALSE, bool meta = FALSE)
static int LUACALL wxGridSizeEvent_constructor(lua_State *L)
{    
    wxGridSizeEvent *returns;
    int argCount = lua_gettop(L);    
    bool meta = (argCount >= 10 ? getbooleantype(L, 10) : FALSE);
    bool alt = (argCount >= 9 ? getbooleantype(L, 9) : FALSE);
    bool shift = (argCount >= 8 ? getbooleantype(L, 8) : FALSE);
    bool control = (argCount >= 7 ? getbooleantype(L, 7) : FALSE);
    int y = (argCount >= 6 ? (int) getnumbertype(L, 6) : -1);
    int x = (argCount >= 5 ? (int) getnumbertype(L, 5) : -1);
    int rowOrCol = (argCount >= 4 ? (int) getnumbertype(L, 4) : -1);
    wxGrid *obj = (wxGrid*)getuserdatatype(L, 3, s_wxGrid);
    wxEventType type = (wxEventType) getnumbertype(L, 2);
    int id = (int) getnumbertype(L, 1);
    returns = new wxGridSizeEvent(id, type, obj, rowOrCol, x, y, control, shift, alt, meta);
    pushuserdatatype(L, s_wxGridSizeEvent, returns);
    return 1;
}

// int         GetRowOrCol()
static int LUACALL wxGridSizeEvent_GetRowOrCol(lua_State *L)
{    
    int returns;
    wxGridSizeEvent *self = (wxGridSizeEvent*)getuserdatatype(L, 1, s_wxGridSizeEvent);
    returns = self->GetRowOrCol();
    lua_pushnumber(L, returns);
    return 1;
}

// wxPoint     GetPosition()
static int LUACALL wxGridSizeEvent_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxGridSizeEvent *self = (wxGridSizeEvent*)getuserdatatype(L, 1, s_wxGridSizeEvent);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// bool        ShiftDown()
static int LUACALL wxGridSizeEvent_ShiftDown(lua_State *L)
{    
    bool returns;
    wxGridSizeEvent *self = (wxGridSizeEvent*)getuserdatatype(L, 1, s_wxGridSizeEvent);
    returns = self->ShiftDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        ControlDown()
static int LUACALL wxGridSizeEvent_ControlDown(lua_State *L)
{    
    bool returns;
    wxGridSizeEvent *self = (wxGridSizeEvent*)getuserdatatype(L, 1, s_wxGridSizeEvent);
    returns = self->ControlDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        AltDown()
static int LUACALL wxGridSizeEvent_AltDown(lua_State *L)
{    
    bool returns;
    wxGridSizeEvent *self = (wxGridSizeEvent*)getuserdatatype(L, 1, s_wxGridSizeEvent);
    returns = self->AltDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        MetaDown()
static int LUACALL wxGridSizeEvent_MetaDown(lua_State *L)
{    
    bool returns;
    wxGridSizeEvent *self = (wxGridSizeEvent*)getuserdatatype(L, 1, s_wxGridSizeEvent);
    returns = self->MetaDown();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxGridRangeSelectEvent_destructor(lua_State *L)
{
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxGridRangeSelectEvent_Delete(lua_State *L)
{
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxGridRangeSelectEvent(int id, wxEventType type, wxGrid* obj, const wxGridCellCoords& topLeft, const wxGridCellCoords& bottomRight, bool sel = TRUE, bool control = FALSE, bool shift = FALSE, bool alt = FALSE, bool meta = FALSE)
static int LUACALL wxGridRangeSelectEvent_constructor(lua_State *L)
{    
    wxGridRangeSelectEvent *returns;
    int argCount = lua_gettop(L);    
    bool meta = (argCount >= 10 ? getbooleantype(L, 10) : FALSE);
    bool alt = (argCount >= 9 ? getbooleantype(L, 9) : FALSE);
    bool shift = (argCount >= 8 ? getbooleantype(L, 8) : FALSE);
    bool control = (argCount >= 7 ? getbooleantype(L, 7) : FALSE);
    bool sel = (argCount >= 6 ? getbooleantype(L, 6) : TRUE);
    const wxGridCellCoords *bottomRight = (wxGridCellCoords*)getuserdatatype(L, 5, s_wxGridCellCoords);
    const wxGridCellCoords *topLeft = (wxGridCellCoords*)getuserdatatype(L, 4, s_wxGridCellCoords);
    wxGrid *obj = (wxGrid*)getuserdatatype(L, 3, s_wxGrid);
    wxEventType type = (wxEventType) getnumbertype(L, 2);
    int id = (int) getnumbertype(L, 1);
    returns = new wxGridRangeSelectEvent(id, type, obj, *topLeft, *bottomRight, sel, control, shift, alt, meta);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxGridRangeSelectEvent, returns);
    return 1;
}

// int         GetLeftCol()
static int LUACALL wxGridRangeSelectEvent_GetLeftCol(lua_State *L)
{    
    int returns;
    wxGridRangeSelectEvent *self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    returns = self->GetLeftCol();
    lua_pushnumber(L, returns);
    return 1;
}

// int         GetTopRow()
static int LUACALL wxGridRangeSelectEvent_GetTopRow(lua_State *L)
{    
    int returns;
    wxGridRangeSelectEvent *self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    returns = self->GetTopRow();
    lua_pushnumber(L, returns);
    return 1;
}

// int         GetBottomRow()
static int LUACALL wxGridRangeSelectEvent_GetBottomRow(lua_State *L)
{    
    int returns;
    wxGridRangeSelectEvent *self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    returns = self->GetBottomRow();
    lua_pushnumber(L, returns);
    return 1;
}

// int         GetRightCol()
static int LUACALL wxGridRangeSelectEvent_GetRightCol(lua_State *L)
{    
    int returns;
    wxGridRangeSelectEvent *self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    returns = self->GetRightCol();
    lua_pushnumber(L, returns);
    return 1;
}

// bool        Selecting()
static int LUACALL wxGridRangeSelectEvent_Selecting(lua_State *L)
{    
    bool returns;
    wxGridRangeSelectEvent *self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    returns = self->Selecting();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        ShiftDown()
static int LUACALL wxGridRangeSelectEvent_ShiftDown(lua_State *L)
{    
    bool returns;
    wxGridRangeSelectEvent *self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    returns = self->ShiftDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        ControlDown()
static int LUACALL wxGridRangeSelectEvent_ControlDown(lua_State *L)
{    
    bool returns;
    wxGridRangeSelectEvent *self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    returns = self->ControlDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        AltDown()
static int LUACALL wxGridRangeSelectEvent_AltDown(lua_State *L)
{    
    bool returns;
    wxGridRangeSelectEvent *self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    returns = self->AltDown();
    lua_pushboolean(L, returns);
    return 1;
}

// bool        MetaDown()
static int LUACALL wxGridRangeSelectEvent_MetaDown(lua_State *L)
{    
    bool returns;
    wxGridRangeSelectEvent *self = (wxGridRangeSelectEvent*)getuserdatatype(L, 1, s_wxGridRangeSelectEvent);
    returns = self->MetaDown();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxGridEditorCreatedEvent_destructor(lua_State *L)
{
    wxGridEditorCreatedEvent * self = (wxGridEditorCreatedEvent*)getuserdatatype(L, 1, s_wxGridEditorCreatedEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxGridEditorCreatedEvent_Delete(lua_State *L)
{
    wxGridEditorCreatedEvent * self = (wxGridEditorCreatedEvent*)getuserdatatype(L, 1, s_wxGridEditorCreatedEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxGridEditorCreatedEvent(int id, wxEventType type, wxObject* obj, int row, int col, wxControl* ctrl)
static int LUACALL wxGridEditorCreatedEvent_constructor(lua_State *L)
{    
    wxGridEditorCreatedEvent *returns;    
    wxControl *ctrl = (wxControl*)getuserdatatype(L, 6, s_wxControl);
    int col = (int) getnumbertype(L, 5);
    int row = (int) getnumbertype(L, 4);
    wxObject *obj = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    wxEventType type = (wxEventType) getnumbertype(L, 2);
    int id = (int) getnumbertype(L, 1);
    returns = new wxGridEditorCreatedEvent(id, type, obj, row, col, ctrl);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxGridEditorCreatedEvent, returns);
    return 1;
}

// int GetRow()
static int LUACALL wxGridEditorCreatedEvent_GetRow(lua_State *L)
{    
    int returns;
    wxGridEditorCreatedEvent *self = (wxGridEditorCreatedEvent*)getuserdatatype(L, 1, s_wxGridEditorCreatedEvent);
    returns = self->GetRow();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetCol()
static int LUACALL wxGridEditorCreatedEvent_GetCol(lua_State *L)
{    
    int returns;
    wxGridEditorCreatedEvent *self = (wxGridEditorCreatedEvent*)getuserdatatype(L, 1, s_wxGridEditorCreatedEvent);
    returns = self->GetCol();
    lua_pushnumber(L, returns);
    return 1;
}

// wxControl * GetControl()
static int LUACALL wxGridEditorCreatedEvent_GetControl(lua_State *L)
{    
    wxControl *returns;
    wxGridEditorCreatedEvent *self = (wxGridEditorCreatedEvent*)getuserdatatype(L, 1, s_wxGridEditorCreatedEvent);
    returns = self->GetControl();
    pushuserdatatype(L, s_wxControl, returns);
    return 1;
}

// void SetRow(int row)
static int LUACALL wxGridEditorCreatedEvent_SetRow(lua_State *L)
{        
    int row = (int) getnumbertype(L, 2);
    wxGridEditorCreatedEvent *self = (wxGridEditorCreatedEvent*)getuserdatatype(L, 1, s_wxGridEditorCreatedEvent);
    self->SetRow(row);
    return 0;
}

// void SetCol(int col)
static int LUACALL wxGridEditorCreatedEvent_SetCol(lua_State *L)
{        
    int col = (int) getnumbertype(L, 2);
    wxGridEditorCreatedEvent *self = (wxGridEditorCreatedEvent*)getuserdatatype(L, 1, s_wxGridEditorCreatedEvent);
    self->SetCol(col);
    return 0;
}

// void SetControl(wxControl * ctrl)
static int LUACALL wxGridEditorCreatedEvent_SetControl(lua_State *L)
{        
    wxControl *ctrl = (wxControl*)getuserdatatype(L, 2, s_wxControl);
    wxGridEditorCreatedEvent *self = (wxGridEditorCreatedEvent*)getuserdatatype(L, 1, s_wxGridEditorCreatedEvent);
    self->SetControl(ctrl);
    return 0;
}

static int LUACALL wxHelpController_destructor(lua_State *L)
{
    wxHelpController * self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxHelpController_Delete(lua_State *L)
{
    wxHelpController * self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxHelpController()
static int LUACALL wxHelpController_constructor(lua_State *L)
{    
    wxHelpController *returns;
    returns = new wxHelpController();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxHelpController, returns);
    return 1;
}

// virtual void Initialize(const wxString& file)
static int LUACALL wxHelpController_Initialize(lua_State *L)
{        
    wxString file = lua2wx(getstringtype(L, 2));
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    self->Initialize(file);
    return 0;
}

// virtual bool DisplayBlock(long blockNo)
static int LUACALL wxHelpController_DisplayBlock(lua_State *L)
{    
    bool returns;    
    long blockNo = (long) getnumbertype(L, 2);
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    returns = self->DisplayBlock(blockNo);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool DisplayContents()
static int LUACALL wxHelpController_DisplayContents(lua_State *L)
{    
    bool returns;
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    returns = self->DisplayContents();
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 virtual bool DisplayContextPopup(int contextId)
static int LUACALL wxHelpController_DisplayContextPopup(lua_State *L)
{    
    bool returns;    
    int contextId = (int) getnumbertype(L, 2);
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    returns = self->DisplayContextPopup(contextId);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool DisplaySection(int sectionNo)
static int LUACALL wxHelpController_DisplaySection(lua_State *L)
{    
    bool returns;    
    int sectionNo = (int) getnumbertype(L, 2);
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    returns = self->DisplaySection(sectionNo);
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 virtual bool DisplayTextPopup(const wxString& text, const wxPoint& pos)
static int LUACALL wxHelpController_DisplayTextPopup(lua_State *L)
{    
    bool returns;    
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    wxString text = lua2wx(getstringtype(L, 2));
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    returns = self->DisplayTextPopup(text, *pos);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual wxFrame * GetFrameParameters(wxSize * size = NULL, wxPoint * pos = NULL, bool *newFrameEachTime = NULL)
static int LUACALL wxHelpController_GetFrameParameters(lua_State *L)
{
    wxFrame *returns;
    bool    newFrameEachTime = false;
    wxPoint *pos = new wxPoint();
    wxSize  *size = new wxSize();
    // get this
    wxHelpController *self = ( wxHelpController * ) getuserdatatype(L, 1, s_wxHelpController );
    // call GetFrameParameters
    returns = self->GetFrameParameters(size, pos, &newFrameEachTime);
    // push the result datatype
    pushuserdatatype(L, s_wxFrame, returns );
    pushuserdatatype(L, s_wxSize, size );
    pushuserdatatype(L, s_wxPoint, pos );
    lua_pushboolean(L, newFrameEachTime);
    // return the number of parameters
    return 4;
}

// virtual bool KeywordSearch(const wxString& keyWord)
static int LUACALL wxHelpController_KeywordSearch(lua_State *L)
{    
    bool returns;    
    wxString keyWord = lua2wx(getstringtype(L, 2));
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    returns = self->KeywordSearch(keyWord);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool LoadFile(const wxString& file = "")
static int LUACALL wxHelpController_LoadFile(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString file = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT(""));
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    returns = self->LoadFile(file);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void SetFrameParameters(const wxString & title, const wxSize & size, const wxPoint & pos = wxDefaultPosition, bool newFrameEachTime = FALSE)
static int LUACALL wxHelpController_SetFrameParameters(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool newFrameEachTime = (argCount >= 5 ? getbooleantype(L, 5) : FALSE);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    const wxSize *size = (wxSize*)getuserdatatype(L, 3, s_wxSize);
    wxString title = lua2wx(getstringtype(L, 2));
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    self->SetFrameParameters(title, *size, *pos, newFrameEachTime);
    return 0;
}

// virtual void SetViewer(const wxString& viewer, long flags)
static int LUACALL wxHelpController_SetViewer(lua_State *L)
{        
    long flags = (long) getnumbertype(L, 3);
    wxString viewer = lua2wx(getstringtype(L, 2));
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    self->SetViewer(viewer, flags);
    return 0;
}

// virtual bool Quit()
static int LUACALL wxHelpController_Quit(lua_State *L)
{    
    bool returns;
    wxHelpController *self = (wxHelpController*)getuserdatatype(L, 1, s_wxHelpController);
    returns = self->Quit();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxWinHelpController_destructor(lua_State *L)
{
    wxWinHelpController * self = (wxWinHelpController*)getuserdatatype(L, 1, s_wxWinHelpController);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxWinHelpController_Delete(lua_State *L)
{
    wxWinHelpController * self = (wxWinHelpController*)getuserdatatype(L, 1, s_wxWinHelpController);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxWinHelpController()
static int LUACALL wxWinHelpController_constructor(lua_State *L)
{    
    wxWinHelpController *returns;
    returns = new wxWinHelpController();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxWinHelpController, returns);
    return 1;
}

static int LUACALL wxBestHelpController_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxHtmlContentsItem_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxHtmlHelpData_destructor(lua_State *L)
{
    wxHtmlHelpData * self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxHtmlHelpData_Delete(lua_State *L)
{
    wxHtmlHelpData * self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxHtmlHelpData()
static int LUACALL wxHtmlHelpData_constructor(lua_State *L)
{    
    wxHtmlHelpData *returns;
    returns = new wxHtmlHelpData();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxHtmlHelpData, returns);
    return 1;
}

// bool AddBook(const wxString& book)
static int LUACALL wxHtmlHelpData_AddBook(lua_State *L)
{    
    bool returns;    
    wxString book = lua2wx(getstringtype(L, 2));
    wxHtmlHelpData *self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    returns = self->AddBook(book);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString FindPageById(int id)
static int LUACALL wxHtmlHelpData_FindPageById(lua_State *L)
{    
    wxString returns;    
    int id = (int) getnumbertype(L, 2);
    wxHtmlHelpData *self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    returns = self->FindPageById(id);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString FindPageByName(const wxString& page)
static int LUACALL wxHtmlHelpData_FindPageByName(lua_State *L)
{    
    wxString returns;    
    wxString page = lua2wx(getstringtype(L, 2));
    wxHtmlHelpData *self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    returns = self->FindPageByName(page);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxHtmlContentsItem* GetContents()
static int LUACALL wxHtmlHelpData_GetContents(lua_State *L)
{    
    wxHtmlContentsItem *returns;
    wxHtmlHelpData *self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    returns = self->GetContents();
    pushuserdatatype(L, s_wxHtmlContentsItem, returns);
    return 1;
}

// int GetContentsCnt()
static int LUACALL wxHtmlHelpData_GetContentsCnt(lua_State *L)
{    
    int returns;
    wxHtmlHelpData *self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    returns = self->GetContentsCnt();
    lua_pushnumber(L, returns);
    return 1;
}

// wxHtmlContentsItem* GetIndex()
static int LUACALL wxHtmlHelpData_GetIndex(lua_State *L)
{    
    wxHtmlContentsItem *returns;
    wxHtmlHelpData *self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    returns = self->GetIndex();
    pushuserdatatype(L, s_wxHtmlContentsItem, returns);
    return 1;
}

// int GetIndexCnt()
static int LUACALL wxHtmlHelpData_GetIndexCnt(lua_State *L)
{    
    int returns;
    wxHtmlHelpData *self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    returns = self->GetIndexCnt();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetTempDir(const wxString& path)
static int LUACALL wxHtmlHelpData_SetTempDir(lua_State *L)
{        
    wxString path = lua2wx(getstringtype(L, 2));
    wxHtmlHelpData *self = (wxHtmlHelpData*)getuserdatatype(L, 1, s_wxHtmlHelpData);
    self->SetTempDir(path);
    return 0;
}

static int LUACALL wxHtmlHelpController_destructor(lua_State *L)
{
    wxHtmlHelpController * self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxHtmlHelpController_Delete(lua_State *L)
{
    wxHtmlHelpController * self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// ~%wxver22 wxHtmlHelpController(int style = wxHF_DEFAULT_STYLE)
static int LUACALL wxHtmlHelpController_constructor(lua_State *L)
{    
    wxHtmlHelpController *returns;
    int argCount = lua_gettop(L);    
    int style = (argCount >= 1 ? (int) getnumbertype(L, 1) : wxHF_DEFAULT_STYLE);
    returns = new wxHtmlHelpController(style);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxHtmlHelpController, returns);
    return 1;
}

// bool AddBook(const wxString& book, bool show_wait_msg)
static int LUACALL wxHtmlHelpController_AddBook(lua_State *L)
{    
    bool returns;    
    bool show_wait_msg = getbooleantype(L, 3);
    wxString book = lua2wx(getstringtype(L, 2));
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    returns = self->AddBook(book, show_wait_msg);
    lua_pushboolean(L, returns);
    return 1;
}

// void Display(const wxString& x)
static int LUACALL wxHtmlHelpController_Display(lua_State *L)
{        
    wxString x = lua2wx(getstringtype(L, 2));
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    self->Display(x);
    return 0;
}

// %rename DisplayId void Display(const int id)
static int LUACALL wxHtmlHelpController_DisplayId(lua_State *L)
{        
    const int id = (int) getnumbertype(L, 2);
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    self->Display(id);
    return 0;
}

// void DisplayContents()
static int LUACALL wxHtmlHelpController_DisplayContents(lua_State *L)
{    
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    self->DisplayContents();
    return 0;
}

// void DisplayIndex()
static int LUACALL wxHtmlHelpController_DisplayIndex(lua_State *L)
{    
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    self->DisplayIndex();
    return 0;
}

// bool KeywordSearch(const wxString& keyword)
static int LUACALL wxHtmlHelpController_KeywordSearch(lua_State *L)
{    
    bool returns;    
    wxString keyword = lua2wx(getstringtype(L, 2));
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    returns = self->KeywordSearch(keyword);
    lua_pushboolean(L, returns);
    return 1;
}

// void ReadCustomization(wxConfigBase* cfg, wxString path = wxEmptyString)
static int LUACALL wxHtmlHelpController_ReadCustomization(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxString path = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxConfigBase *cfg = (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase);
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    self->ReadCustomization(cfg, path);
    return 0;
}

// void SetTempDir(const wxString& path)
static int LUACALL wxHtmlHelpController_SetTempDir(lua_State *L)
{        
    wxString path = lua2wx(getstringtype(L, 2));
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    self->SetTempDir(path);
    return 0;
}

// void SetTitleFormat(const wxString& format)
static int LUACALL wxHtmlHelpController_SetTitleFormat(lua_State *L)
{        
    wxString format = lua2wx(getstringtype(L, 2));
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    self->SetTitleFormat(format);
    return 0;
}

// void UseConfig(wxConfigBase* config, const wxString& rootpath = wxEmptyString)
static int LUACALL wxHtmlHelpController_UseConfig(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxString rootpath = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxConfigBase *config = (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase);
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    self->UseConfig(config, rootpath);
    return 0;
}

// void WriteCustomization(wxConfigBase* cfg, wxString path = wxEmptyString)
static int LUACALL wxHtmlHelpController_WriteCustomization(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxString path = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxConfigBase *cfg = (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase);
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    self->WriteCustomization(cfg, path);
    return 0;
}

// %rename DisplaySectionString virtual bool DisplaySection(const wxString &section)
static int LUACALL wxHtmlHelpController_DisplaySectionString(lua_State *L)
{    
    bool returns;    
    wxString section = lua2wx(getstringtype(L, 2));
    wxHtmlHelpController *self = (wxHtmlHelpController*)getuserdatatype(L, 1, s_wxHtmlHelpController);
    returns = self->DisplaySection(section);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxHtmlCell_destructor(lua_State *)
{
    return 0;
}

// wxHtmlCell()
static int LUACALL wxHtmlCell_constructor(lua_State *L)
{    
    wxHtmlCell *returns;
    returns = new wxHtmlCell();
    pushuserdatatype(L, s_wxHtmlCell, returns);
    return 1;
}

// virtual bool AdjustPagebreak(int * pagebreak)
static int LUACALL wxHtmlCell_AdjustPagebreak(lua_State *L)
{
    bool returns;
    // int * pagebreak
    int pagebreak  = (int) getnumbertype(L, 2);
    // get this
    wxHtmlCell *self = ( wxHtmlCell * ) getuserdatatype(L, 1, s_wxHtmlCell );
    // call AdjustPagebreak
    returns = self->AdjustPagebreak(&pagebreak);
    // push the result number
    lua_pushboolean(L, returns);
    //
    lua_pushnumber(L, pagebreak);
    // return the number of parameters
    return 2;
}

// virtual const wxHtmlCell* Find(int condition, void *param = 0)
static int LUACALL wxHtmlCell_Find(lua_State *L)
{
    const wxHtmlCell *returns = NULL;
    // int condition
    int condition = (int) getnumbertype(L, 2);
    // get this
    wxHtmlCell *self = ( wxHtmlCell * ) getuserdatatype(L, 1, s_wxHtmlCell );
    // call Find
    switch(lua_type(L, 3))
    {
        case LUA_TNIL:
            returns = self->Find(condition, NULL);
            break;
        case LUA_TSTRING:
            {
                wxString param = lua2wx(getstringtype(L, 3));
                returns = self->Find(condition, &param);
            }
            break;
        case LUA_TNUMBER:
            {
                int param = (int) getnumbertype(L, 3);
                returns = self->Find(condition, &param);
            }
            break;
        default:
            terror(L, "wxLua: Expected simple type for parameter 3.");
            break;
    }
    // push the result datatype
    pushuserdatatype(L, s_wxHtmlCell, returns );
    // return the number of parameters
    return 1;
}

// int GetDescent() const
static int LUACALL wxHtmlCell_GetDescent(lua_State *L)
{    
    int returns;
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    returns = self->GetDescent();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetHeight() const
static int LUACALL wxHtmlCell_GetHeight(lua_State *L)
{    
    int returns;
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    returns = self->GetHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// ~%wxver22 virtual wxString GetId() const
static int LUACALL wxHtmlCell_GetId(lua_State *L)
{    
    wxString returns;
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    returns = self->GetId();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// virtual wxHtmlLinkInfo* GetLink(int x = 0, int y = 0) const
static int LUACALL wxHtmlCell_GetLink(lua_State *L)
{    
    wxHtmlLinkInfo *returns;
    int argCount = lua_gettop(L);    
    int y = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    int x = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    returns = self->GetLink(x, y);
    pushuserdatatype(L, s_wxHtmlLinkInfo, returns);
    return 1;
}

// wxHtmlCell* GetNext() const
static int LUACALL wxHtmlCell_GetNext(lua_State *L)
{    
    wxHtmlCell *returns;
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    returns = self->GetNext();
    pushuserdatatype(L, s_wxHtmlCell, returns);
    return 1;
}

// wxHtmlContainerCell* GetParent() const
static int LUACALL wxHtmlCell_GetParent(lua_State *L)
{    
    wxHtmlContainerCell *returns;
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    returns = self->GetParent();
    pushuserdatatype(L, s_wxHtmlContainerCell, returns);
    return 1;
}

// int GetPosX() const
static int LUACALL wxHtmlCell_GetPosX(lua_State *L)
{    
    int returns;
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    returns = self->GetPosX();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetPosY() const
static int LUACALL wxHtmlCell_GetPosY(lua_State *L)
{    
    int returns;
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    returns = self->GetPosY();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetWidth() const
static int LUACALL wxHtmlCell_GetWidth(lua_State *L)
{    
    int returns;
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual void Layout(int w)
static int LUACALL wxHtmlCell_Layout(lua_State *L)
{        
    int w = (int) getnumbertype(L, 2);
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    self->Layout(w);
    return 0;
}

// ~%wxver22 void SetId(const wxString& id)
static int LUACALL wxHtmlCell_SetId(lua_State *L)
{        
    wxString id = lua2wx(getstringtype(L, 2));
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    self->SetId(id);
    return 0;
}

// void SetLink(const wxHtmlLinkInfo& link)
static int LUACALL wxHtmlCell_SetLink(lua_State *L)
{        
    const wxHtmlLinkInfo *link = (wxHtmlLinkInfo*)getuserdatatype(L, 2, s_wxHtmlLinkInfo);
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    self->SetLink(*link);
    return 0;
}

// void SetNext(wxHtmlCell *cell)
static int LUACALL wxHtmlCell_SetNext(lua_State *L)
{        
    wxHtmlCell *cell = (wxHtmlCell*)getuserdatatype(L, 2, s_wxHtmlCell);
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    self->SetNext(cell);
    return 0;
}

// void SetParent(wxHtmlContainerCell *p)
static int LUACALL wxHtmlCell_SetParent(lua_State *L)
{        
    wxHtmlContainerCell *p = (wxHtmlContainerCell*)getuserdatatype(L, 2, s_wxHtmlContainerCell);
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    self->SetParent(p);
    return 0;
}

// void SetPos(int x, int y)
static int LUACALL wxHtmlCell_SetPos(lua_State *L)
{        
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxHtmlCell *self = (wxHtmlCell*)getuserdatatype(L, 1, s_wxHtmlCell);
    self->SetPos(x, y);
    return 0;
}

static int LUACALL wxHtmlWidgetCell_destructor(lua_State *)
{
    return 0;
}

// wxHtmlWidgetCell(wxWindow* wnd, int w = 0)
static int LUACALL wxHtmlWidgetCell_constructor(lua_State *L)
{    
    wxHtmlWidgetCell *returns;
    int argCount = lua_gettop(L);    
    int w = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxWindow *wnd = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxHtmlWidgetCell(wnd, w);
    pushuserdatatype(L, s_wxHtmlWidgetCell, returns);
    return 1;
}

static int LUACALL wxHtmlLinkInfo_destructor(lua_State *)
{
    return 0;
}

// wxHtmlLinkInfo(const wxString& href, const wxString& target = wxEmptyString)
static int LUACALL wxHtmlLinkInfo_constructor(lua_State *L)
{    
    wxHtmlLinkInfo *returns;
    int argCount = lua_gettop(L);    
    wxString target = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxString(wxEmptyString));
    wxString href = lua2wx(getstringtype(L, 1));
    returns = new wxHtmlLinkInfo(href, target);
    pushuserdatatype(L, s_wxHtmlLinkInfo, returns);
    return 1;
}

// const wxMouseEvent * GetEvent()
static int LUACALL wxHtmlLinkInfo_GetEvent(lua_State *L)
{    
    const wxMouseEvent *returns;
    wxHtmlLinkInfo *self = (wxHtmlLinkInfo*)getuserdatatype(L, 1, s_wxHtmlLinkInfo);
    returns = self->GetEvent();
    pushuserdatatype(L, s_wxMouseEvent, returns);
    return 1;
}

// const wxHtmlCell * GetHtmlCell()
static int LUACALL wxHtmlLinkInfo_GetHtmlCell(lua_State *L)
{    
    const wxHtmlCell *returns;
    wxHtmlLinkInfo *self = (wxHtmlLinkInfo*)getuserdatatype(L, 1, s_wxHtmlLinkInfo);
    returns = self->GetHtmlCell();
    pushuserdatatype(L, s_wxHtmlCell, returns);
    return 1;
}

// wxString GetHref()
static int LUACALL wxHtmlLinkInfo_GetHref(lua_State *L)
{    
    wxString returns;
    wxHtmlLinkInfo *self = (wxHtmlLinkInfo*)getuserdatatype(L, 1, s_wxHtmlLinkInfo);
    returns = self->GetHref();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetTarget()
static int LUACALL wxHtmlLinkInfo_GetTarget(lua_State *L)
{    
    wxString returns;
    wxHtmlLinkInfo *self = (wxHtmlLinkInfo*)getuserdatatype(L, 1, s_wxHtmlLinkInfo);
    returns = self->GetTarget();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

static int LUACALL wxHtmlTag_destructor(lua_State *)
{
    return 0;
}

// const wxString GetAllParams() const
static int LUACALL wxHtmlTag_GetAllParams(lua_State *L)
{    
    wxString returns;
    wxHtmlTag *self = (wxHtmlTag*)getuserdatatype(L, 1, s_wxHtmlTag);
    returns = self->GetAllParams();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetBeginPos() const
static int LUACALL wxHtmlTag_GetBeginPos(lua_State *L)
{    
    int returns;
    wxHtmlTag *self = (wxHtmlTag*)getuserdatatype(L, 1, s_wxHtmlTag);
    returns = self->GetBeginPos();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetEndPos1() const
static int LUACALL wxHtmlTag_GetEndPos1(lua_State *L)
{    
    int returns;
    wxHtmlTag *self = (wxHtmlTag*)getuserdatatype(L, 1, s_wxHtmlTag);
    returns = self->GetEndPos1();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetEndPos2() const
static int LUACALL wxHtmlTag_GetEndPos2(lua_State *L)
{    
    int returns;
    wxHtmlTag *self = (wxHtmlTag*)getuserdatatype(L, 1, s_wxHtmlTag);
    returns = self->GetEndPos2();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetName() const
static int LUACALL wxHtmlTag_GetName(lua_State *L)
{    
    wxString returns;
    wxHtmlTag *self = (wxHtmlTag*)getuserdatatype(L, 1, s_wxHtmlTag);
    returns = self->GetName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetParam(const wxString& par, bool with_commas = FALSE) const
static int LUACALL wxHtmlTag_GetParam(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    bool with_commas = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    wxString par = lua2wx(getstringtype(L, 2));
    wxHtmlTag *self = (wxHtmlTag*)getuserdatatype(L, 1, s_wxHtmlTag);
    returns = self->GetParam(par, with_commas);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool HasEnding() const
static int LUACALL wxHtmlTag_HasEnding(lua_State *L)
{    
    bool returns;
    wxHtmlTag *self = (wxHtmlTag*)getuserdatatype(L, 1, s_wxHtmlTag);
    returns = self->HasEnding();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HasParam(const wxString& par) const
static int LUACALL wxHtmlTag_HasParam(lua_State *L)
{    
    bool returns;    
    wxString par = lua2wx(getstringtype(L, 2));
    wxHtmlTag *self = (wxHtmlTag*)getuserdatatype(L, 1, s_wxHtmlTag);
    returns = self->HasParam(par);
    lua_pushboolean(L, returns);
    return 1;
}

// %alias GetParamAsColor bool GetParamAsColour(const wxString& par, wxColour *clr) const
static int LUACALL wxHtmlTag_GetParamAsColour(lua_State *L)
{
    bool returns;
    wxColour *retColour = new wxColour;
    // const wxString& par
    wxString par = lua2wx(getstringtype(L, 2));
    // get this
    wxHtmlTag *self = ( wxHtmlTag * ) getuserdatatype(L, 1, s_wxHtmlTag );
    // call GetParamAsColour
    returns = self->GetParamAsColour(par, retColour);
    //
    // push the result number
    lua_pushboolean(L, returns);
    pushuserdatatype(L, s_wxColour, retColour );
    // return the number of parameters
    return 2;
}

// bool GetParamAsInt(const wxString& par, int *value) const
static int LUACALL wxHtmlTag_GetParamAsInt(lua_State *L)
{
    bool returns;
    int value;
    // const wxString& par
    wxString par = lua2wx(getstringtype(L, 2));
    // get this
    wxHtmlTag *self = ( wxHtmlTag * ) getuserdatatype(L, 1, s_wxHtmlTag );
    // call GetParamAsInt
    returns = self->GetParamAsInt(par, &value);
    // push the result number
    lua_pushboolean(L, returns);
    //
    lua_pushnumber(L, value);
    // return the number of parameters
    return 2;
}

static int LUACALL wxHtmlContainerCell_destructor(lua_State *)
{
    return 0;
}

// wxHtmlContainerCell(wxHtmlContainerCell *parent)
static int LUACALL wxHtmlContainerCell_constructor(lua_State *L)
{    
    wxHtmlContainerCell *returns;    
    wxHtmlContainerCell *parent = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    returns = new wxHtmlContainerCell(parent);
    pushuserdatatype(L, s_wxHtmlContainerCell, returns);
    return 1;
}

// int GetAlignHor() const
static int LUACALL wxHtmlContainerCell_GetAlignHor(lua_State *L)
{    
    int returns;
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    returns = self->GetAlignHor();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetAlignVer() const
static int LUACALL wxHtmlContainerCell_GetAlignVer(lua_State *L)
{    
    int returns;
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    returns = self->GetAlignVer();
    lua_pushnumber(L, returns);
    return 1;
}

// ~<wxver25 wxHtmlCell* GetFirstChild()
static int LUACALL wxHtmlContainerCell_GetFirstChild(lua_State *L)
{    
    wxHtmlCell *returns;
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    returns = self->GetFirstChild();
    pushuserdatatype(L, s_wxHtmlCell, returns);
    return 1;
}

// int GetIndent(int ind) const
static int LUACALL wxHtmlContainerCell_GetIndent(lua_State *L)
{    
    int returns;    
    int ind = (int) getnumbertype(L, 2);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    returns = self->GetIndent(ind);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetIndentUnits(int ind) const
static int LUACALL wxHtmlContainerCell_GetIndentUnits(lua_State *L)
{    
    int returns;    
    int ind = (int) getnumbertype(L, 2);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    returns = self->GetIndentUnits(ind);
    lua_pushnumber(L, returns);
    return 1;
}

// void InsertCell(wxHtmlCell *cell)
static int LUACALL wxHtmlContainerCell_InsertCell(lua_State *L)
{        
    wxHtmlCell *cell = (wxHtmlCell*)getuserdatatype(L, 2, s_wxHtmlCell);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->InsertCell(cell);
    return 0;
}

// void SetAlign(const wxHtmlTag& tag)
static int LUACALL wxHtmlContainerCell_SetAlign(lua_State *L)
{        
    const wxHtmlTag *tag = (wxHtmlTag*)getuserdatatype(L, 2, s_wxHtmlTag);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->SetAlign(*tag);
    return 0;
}

// void SetAlignHor(int align)
static int LUACALL wxHtmlContainerCell_SetAlignHor(lua_State *L)
{        
    int align = (int) getnumbertype(L, 2);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->SetAlignHor(align);
    return 0;
}

// void SetAlignVer(int align)
static int LUACALL wxHtmlContainerCell_SetAlignVer(lua_State *L)
{        
    int align = (int) getnumbertype(L, 2);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->SetAlignVer(align);
    return 0;
}

// void SetBackgroundColour(const wxColour& clr)
static int LUACALL wxHtmlContainerCell_SetBackgroundColour(lua_State *L)
{        
    const wxColour *clr = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->SetBackgroundColour(*clr);
    return 0;
}

// void SetBorder(const wxColour& clr1, const wxColour& clr2)
static int LUACALL wxHtmlContainerCell_SetBorder(lua_State *L)
{        
    const wxColour *clr2 = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    const wxColour *clr1 = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->SetBorder(*clr1, *clr2);
    return 0;
}

// void SetIndent(int i, int what, int units = wxHTML_UNITS_PIXELS)
static int LUACALL wxHtmlContainerCell_SetIndent(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int units = (argCount >= 4 ? (int) getnumbertype(L, 4) : wxHTML_UNITS_PIXELS);
    int what = (int) getnumbertype(L, 3);
    int i = (int) getnumbertype(L, 2);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->SetIndent(i, what, units);
    return 0;
}

// void SetMinHeight(int h, int align = wxHTML_ALIGN_TOP)
static int LUACALL wxHtmlContainerCell_SetMinHeight(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int align = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxHTML_ALIGN_TOP);
    int h = (int) getnumbertype(L, 2);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->SetMinHeight(h, align);
    return 0;
}

// void SetWidthFloat(int w, int units)
static int LUACALL wxHtmlContainerCell_SetWidthFloat(lua_State *L)
{        
    int units = (int) getnumbertype(L, 3);
    int w = (int) getnumbertype(L, 2);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->SetWidthFloat(w, units);
    return 0;
}

// %rename SetWidthFloatFromTag void SetWidthFloat(const wxHtmlTag& tag, double pixel_scale = 1.0)
static int LUACALL wxHtmlContainerCell_SetWidthFloatFromTag(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    double pixel_scale = (argCount >= 3 ? (double) getnumbertype(L, 3) : 1.0);
    const wxHtmlTag *tag = (wxHtmlTag*)getuserdatatype(L, 2, s_wxHtmlTag);
    wxHtmlContainerCell *self = (wxHtmlContainerCell*)getuserdatatype(L, 1, s_wxHtmlContainerCell);
    self->SetWidthFloat(*tag, pixel_scale);
    return 0;
}

static int LUACALL wxHtmlWindow_destructor(lua_State *)
{
    return 0;
}

// wxHtmlWindow(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHW_SCROLLBAR_AUTO, const wxString& name = "htmlWindow")
static int LUACALL wxHtmlWindow_constructor(lua_State *L)
{    
    wxHtmlWindow *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("htmlWindow"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxHW_SCROLLBAR_AUTO);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 2 ? (wxWindowID) getnumbertype(L, 2) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxHtmlWindow(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxHtmlWindow, returns);
    return 1;
}

// ~%wxver22 bool AppendToPage(const wxString& source)
static int LUACALL wxHtmlWindow_AppendToPage(lua_State *L)
{    
    bool returns;    
    wxString source = lua2wx(getstringtype(L, 2));
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->AppendToPage(source);
    lua_pushboolean(L, returns);
    return 1;
}

// wxHtmlContainerCell* GetInternalRepresentation() const
static int LUACALL wxHtmlWindow_GetInternalRepresentation(lua_State *L)
{    
    wxHtmlContainerCell *returns;
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->GetInternalRepresentation();
    pushuserdatatype(L, s_wxHtmlContainerCell, returns);
    return 1;
}

// wxString GetOpenedAnchor()
static int LUACALL wxHtmlWindow_GetOpenedAnchor(lua_State *L)
{    
    wxString returns;
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->GetOpenedAnchor();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetOpenedPage()
static int LUACALL wxHtmlWindow_GetOpenedPage(lua_State *L)
{    
    wxString returns;
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->GetOpenedPage();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetOpenedPageTitle()
static int LUACALL wxHtmlWindow_GetOpenedPageTitle(lua_State *L)
{    
    wxString returns;
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->GetOpenedPageTitle();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxFrame* GetRelatedFrame() const
static int LUACALL wxHtmlWindow_GetRelatedFrame(lua_State *L)
{    
    wxFrame *returns;
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->GetRelatedFrame();
    pushuserdatatype(L, s_wxFrame, returns);
    return 1;
}

// ~%wxver22 bool HistoryBack()
static int LUACALL wxHtmlWindow_HistoryBack(lua_State *L)
{    
    bool returns;
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->HistoryBack();
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 bool HistoryCanBack()
static int LUACALL wxHtmlWindow_HistoryCanBack(lua_State *L)
{    
    bool returns;
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->HistoryCanBack();
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 bool HistoryCanForward()
static int LUACALL wxHtmlWindow_HistoryCanForward(lua_State *L)
{    
    bool returns;
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->HistoryCanForward();
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 void HistoryClear()
static int LUACALL wxHtmlWindow_HistoryClear(lua_State *L)
{    
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    self->HistoryClear();
    return 0;
}

// ~%wxver22 bool HistoryForward()
static int LUACALL wxHtmlWindow_HistoryForward(lua_State *L)
{    
    bool returns;
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->HistoryForward();
    lua_pushboolean(L, returns);
    return 1;
}

// bool LoadPage(const wxString& location)
static int LUACALL wxHtmlWindow_LoadPage(lua_State *L)
{    
    bool returns;    
    wxString location = lua2wx(getstringtype(L, 2));
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->LoadPage(location);
    lua_pushboolean(L, returns);
    return 1;
}

// void ReadCustomization(wxConfigBase *cfg, wxString path = wxEmptyString)
static int LUACALL wxHtmlWindow_ReadCustomization(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxString path = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxConfigBase *cfg = (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase);
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    self->ReadCustomization(cfg, path);
    return 0;
}

// void SetBorders(int b)
static int LUACALL wxHtmlWindow_SetBorders(lua_State *L)
{        
    int b = (int) getnumbertype(L, 2);
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    self->SetBorders(b);
    return 0;
}

// void SetFonts(wxString normal_face, wxString fixed_face, const int *sizes)
static int LUACALL wxHtmlWindow_SetFonts(lua_State *L)
{
    // const int *sizes
#ifdef __WXMSW__
    int sizes[7] = { 7,8,10,12,16,22,30 };
#else
    int sizes[7] = { 10,12,14,16,19,24,32 };
#endif
    const int arraySize = sizeof(sizes)/sizeof(sizes[0]);
    int argCount = lua_gettop(L);
    if (argCount >= 4)
    {
        if (lua_istable(L, 4))
        {
            int count = 0;
            int *sizeArray = tointarray(L, 4, count);
            if (count > arraySize)
                count = arraySize;
            memcpy(sizes, sizeArray, count * sizeof(int));
            delete[] sizeArray;
        }
        else
        {
            int idx;
            if (argCount > 4 + arraySize)
                argCount = 4 + arraySize;
            for (idx = 4; idx < argCount; ++idx)
                sizes[idx - 4] = (int) lua_tonumber(L, idx);
        }
    }
    // wxString fixed_face
    wxString fixed_face = lua2wx(getstringtype(L, 3));
    // wxString normal_face
    wxString normal_face = lua2wx(getstringtype(L, 2));
    // get this
    wxHtmlWindow *self = ( wxHtmlWindow * ) getuserdatatype(L, 1, s_wxHtmlWindow );
    // call SetFonts
    self->SetFonts(normal_face, fixed_face, sizes);
    // return the number of parameters
    return 0;
}

// bool SetPage(const wxString& source)
static int LUACALL wxHtmlWindow_SetPage(lua_State *L)
{    
    bool returns;    
    wxString source = lua2wx(getstringtype(L, 2));
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = self->SetPage(source);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetRelatedFrame(wxFrame* frame, const wxString& format)
static int LUACALL wxHtmlWindow_SetRelatedFrame(lua_State *L)
{        
    wxString format = lua2wx(getstringtype(L, 3));
    wxFrame *frame = (wxFrame*)getuserdatatype(L, 2, s_wxFrame);
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    self->SetRelatedFrame(frame, format);
    return 0;
}

// void SetRelatedStatusBar(int bar)
static int LUACALL wxHtmlWindow_SetRelatedStatusBar(lua_State *L)
{        
    int bar = (int) getnumbertype(L, 2);
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    self->SetRelatedStatusBar(bar);
    return 0;
}

// void WriteCustomization(wxConfigBase *cfg, wxString path = wxEmptyString)
static int LUACALL wxHtmlWindow_WriteCustomization(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxString path = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxConfigBase *cfg = (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase);
    wxHtmlWindow *self = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    self->WriteCustomization(cfg, path);
    return 0;
}

static int LUACALL wxHtmlParser_destructor(lua_State *)
{
    return 0;
}

// void DoParsing(int begin_pos, int end_pos)
static int LUACALL wxHtmlParser_DoParsing(lua_State *L)
{        
    int end_pos = (int) getnumbertype(L, 3);
    int begin_pos = (int) getnumbertype(L, 2);
    wxHtmlParser *self = (wxHtmlParser*)getuserdatatype(L, 1, s_wxHtmlParser);
    self->DoParsing(begin_pos, end_pos);
    return 0;
}

// %rename DoParsingWhole void DoParsing()
static int LUACALL wxHtmlParser_DoParsingWhole(lua_State *L)
{    
    wxHtmlParser *self = (wxHtmlParser*)getuserdatatype(L, 1, s_wxHtmlParser);
    self->DoParsing();
    return 0;
}

// virtual void DoneParser()
static int LUACALL wxHtmlParser_DoneParser(lua_State *L)
{    
    wxHtmlParser *self = (wxHtmlParser*)getuserdatatype(L, 1, s_wxHtmlParser);
    self->DoneParser();
    return 0;
}

// void InitParser(const wxString& source)
static int LUACALL wxHtmlParser_InitParser(lua_State *L)
{        
    wxString source = lua2wx(getstringtype(L, 2));
    wxHtmlParser *self = (wxHtmlParser*)getuserdatatype(L, 1, s_wxHtmlParser);
    self->InitParser(source);
    return 0;
}

static int LUACALL wxHtmlWinParser_destructor(lua_State *)
{
    return 0;
}

// wxHtmlWinParser(wxHtmlWindow *wnd)
static int LUACALL wxHtmlWinParser_constructor(lua_State *L)
{    
    wxHtmlWinParser *returns;    
    wxHtmlWindow *wnd = (wxHtmlWindow*)getuserdatatype(L, 1, s_wxHtmlWindow);
    returns = new wxHtmlWinParser(wnd);
    pushuserdatatype(L, s_wxHtmlWinParser, returns);
    return 1;
}

// wxHtmlContainerCell* CloseContainer()
static int LUACALL wxHtmlWinParser_CloseContainer(lua_State *L)
{    
    wxHtmlContainerCell *returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->CloseContainer();
    pushuserdatatype(L, s_wxHtmlContainerCell, returns);
    return 1;
}

// wxFont* CreateCurrentFont()
static int LUACALL wxHtmlWinParser_CreateCurrentFont(lua_State *L)
{    
    wxFont *returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->CreateCurrentFont();
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// wxColour GetActualColor() const
static int LUACALL wxHtmlWinParser_GetActualColor(lua_State *L)
{    
    wxColour *returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = new wxColour(self->GetActualColor());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// int GetAlign() const
static int LUACALL wxHtmlWinParser_GetAlign(lua_State *L)
{    
    int returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetAlign();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetCharHeight() const
static int LUACALL wxHtmlWinParser_GetCharHeight(lua_State *L)
{    
    int returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetCharHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetCharWidth() const
static int LUACALL wxHtmlWinParser_GetCharWidth(lua_State *L)
{    
    int returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetCharWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// wxHtmlContainerCell* GetContainer() const
static int LUACALL wxHtmlWinParser_GetContainer(lua_State *L)
{    
    wxHtmlContainerCell *returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetContainer();
    pushuserdatatype(L, s_wxHtmlContainerCell, returns);
    return 1;
}

// wxDC* GetDC()
static int LUACALL wxHtmlWinParser_GetDC(lua_State *L)
{    
    wxDC *returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetDC();
    pushuserdatatype(L, s_wxDC, returns);
    return 1;
}

// int GetFontBold() const
static int LUACALL wxHtmlWinParser_GetFontBold(lua_State *L)
{    
    int returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetFontBold();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetFontFace() const
static int LUACALL wxHtmlWinParser_GetFontFace(lua_State *L)
{    
    wxString returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetFontFace();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetFontFixed() const
static int LUACALL wxHtmlWinParser_GetFontFixed(lua_State *L)
{    
    int returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetFontFixed();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetFontItalic() const
static int LUACALL wxHtmlWinParser_GetFontItalic(lua_State *L)
{    
    int returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetFontItalic();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetFontSize() const
static int LUACALL wxHtmlWinParser_GetFontSize(lua_State *L)
{    
    int returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetFontSize();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetFontUnderlined() const
static int LUACALL wxHtmlWinParser_GetFontUnderlined(lua_State *L)
{    
    int returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetFontUnderlined();
    lua_pushnumber(L, returns);
    return 1;
}

// const wxHtmlLinkInfo& GetLink() const
static int LUACALL wxHtmlWinParser_GetLink(lua_State *L)
{    
    const wxHtmlLinkInfo *returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = &self->GetLink();
    pushuserdatatype(L, s_wxHtmlLinkInfo, returns);
    return 1;
}

// wxColour GetLinkColor() const
static int LUACALL wxHtmlWinParser_GetLinkColor(lua_State *L)
{    
    wxColour *returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = new wxColour(self->GetLinkColor());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// wxWindow* GetWindow()
static int LUACALL wxHtmlWinParser_GetWindow(lua_State *L)
{    
    wxWindow *returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->GetWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// wxHtmlContainerCell* OpenContainer()
static int LUACALL wxHtmlWinParser_OpenContainer(lua_State *L)
{    
    wxHtmlContainerCell *returns;
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->OpenContainer();
    pushuserdatatype(L, s_wxHtmlContainerCell, returns);
    return 1;
}

// void SetActualColor(const wxColour& clr)
static int LUACALL wxHtmlWinParser_SetActualColor(lua_State *L)
{        
    const wxColour *clr = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetActualColor(*clr);
    return 0;
}

// void SetAlign(int a)
static int LUACALL wxHtmlWinParser_SetAlign(lua_State *L)
{        
    int a = (int) getnumbertype(L, 2);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetAlign(a);
    return 0;
}

// wxHtmlContainerCell* SetContainer(wxHtmlContainerCell *c)
static int LUACALL wxHtmlWinParser_SetContainer(lua_State *L)
{    
    wxHtmlContainerCell *returns;    
    wxHtmlContainerCell *c = (wxHtmlContainerCell*)getuserdatatype(L, 2, s_wxHtmlContainerCell);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    returns = self->SetContainer(c);
    pushuserdatatype(L, s_wxHtmlContainerCell, returns);
    return 1;
}

// void SetDC(wxDC *dc, double pixel_scale = 1.0)
static int LUACALL wxHtmlWinParser_SetDC(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    double pixel_scale = (argCount >= 3 ? (double) getnumbertype(L, 3) : 1.0);
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetDC(dc, pixel_scale);
    return 0;
}

// void SetFontBold(int x)
static int LUACALL wxHtmlWinParser_SetFontBold(lua_State *L)
{        
    int x = (int) getnumbertype(L, 2);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetFontBold(x);
    return 0;
}

// void SetFontFace(const wxString& face)
static int LUACALL wxHtmlWinParser_SetFontFace(lua_State *L)
{        
    wxString face = lua2wx(getstringtype(L, 2));
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetFontFace(face);
    return 0;
}

// void SetFontFixed(int x)
static int LUACALL wxHtmlWinParser_SetFontFixed(lua_State *L)
{        
    int x = (int) getnumbertype(L, 2);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetFontFixed(x);
    return 0;
}

// void SetFontItalic(int x)
static int LUACALL wxHtmlWinParser_SetFontItalic(lua_State *L)
{        
    int x = (int) getnumbertype(L, 2);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetFontItalic(x);
    return 0;
}

// void SetFontSize(int s)
static int LUACALL wxHtmlWinParser_SetFontSize(lua_State *L)
{        
    int s = (int) getnumbertype(L, 2);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetFontSize(s);
    return 0;
}

// void SetFontUnderlined(int x)
static int LUACALL wxHtmlWinParser_SetFontUnderlined(lua_State *L)
{        
    int x = (int) getnumbertype(L, 2);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetFontUnderlined(x);
    return 0;
}

// void SetFonts(wxString normal_face, wxString fixed_face, const int *sizes)
static int LUACALL wxHtmlWinParser_SetFonts(lua_State *L)
{
    // const int *sizes
#ifdef __WXMSW__
    int sizes[7] = { 7,8,10,12,16,22,30 };
#else
    int sizes[7] = { 10,12,14,16,19,24,32 };
#endif
    const int arraySize = sizeof(sizes)/sizeof(sizes[0]);
    int argCount = lua_gettop(L);
    if (argCount >= 4)
    {
        if (lua_istable(L, 4))
        {
            int count = 0;
            int *sizeArray = tointarray(L, 4, count);
            if (count > arraySize)
                count = arraySize;
            memcpy(sizes, sizeArray, count * sizeof(int));
            delete[] sizeArray;
        }
        else
        {
            int idx;
            if (argCount > 4 + arraySize)
                argCount = 4 + arraySize;
            for (idx = 4; idx < argCount; ++idx)
                sizes[idx - 4] = (int) lua_tonumber(L, idx);
        }
    }
    // wxString fixed_face
    wxString fixed_face = lua2wx(getstringtype(L, 3));
    // wxString normal_face
    wxString normal_face = lua2wx(getstringtype(L, 2));
    // get this
    wxHtmlWinParser *self = ( wxHtmlWinParser * ) getuserdatatype(L, 1, s_wxHtmlWinParser );
    // call SetFonts
    self->SetFonts(normal_face, fixed_face, sizes);
    // return the number of parameters
    return 0;
}

// void SetLink(const wxHtmlLinkInfo& link)
static int LUACALL wxHtmlWinParser_SetLink(lua_State *L)
{        
    const wxHtmlLinkInfo *link = (wxHtmlLinkInfo*)getuserdatatype(L, 2, s_wxHtmlLinkInfo);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetLink(*link);
    return 0;
}

// void SetLinkColor(const wxColour& clr)
static int LUACALL wxHtmlWinParser_SetLinkColor(lua_State *L)
{        
    const wxColour *clr = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxHtmlWinParser *self = (wxHtmlWinParser*)getuserdatatype(L, 1, s_wxHtmlWinParser);
    self->SetLinkColor(*clr);
    return 0;
}

static int LUACALL wxHtmlDCRenderer_destructor(lua_State *L)
{
    wxHtmlDCRenderer * self = (wxHtmlDCRenderer*)getuserdatatype(L, 1, s_wxHtmlDCRenderer);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxHtmlDCRenderer_Delete(lua_State *L)
{
    wxHtmlDCRenderer * self = (wxHtmlDCRenderer*)getuserdatatype(L, 1, s_wxHtmlDCRenderer);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxHtmlDCRenderer()
static int LUACALL wxHtmlDCRenderer_constructor(lua_State *L)
{    
    wxHtmlDCRenderer *returns;
    returns = new wxHtmlDCRenderer();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxHtmlDCRenderer, returns);
    return 1;
}

// void SetDC(wxDC* dc, double pixel_scale = 1.0)
static int LUACALL wxHtmlDCRenderer_SetDC(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    double pixel_scale = (argCount >= 3 ? (double) getnumbertype(L, 3) : 1.0);
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    wxHtmlDCRenderer *self = (wxHtmlDCRenderer*)getuserdatatype(L, 1, s_wxHtmlDCRenderer);
    self->SetDC(dc, pixel_scale);
    return 0;
}

// void SetSize(int width, int height)
static int LUACALL wxHtmlDCRenderer_SetSize(lua_State *L)
{        
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxHtmlDCRenderer *self = (wxHtmlDCRenderer*)getuserdatatype(L, 1, s_wxHtmlDCRenderer);
    self->SetSize(width, height);
    return 0;
}

// void SetHtmlText(const wxString& html, const wxString& basepath = wxEmptyString, bool isdir = TRUE)
static int LUACALL wxHtmlDCRenderer_SetHtmlText(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool isdir = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    wxString basepath = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxString html = lua2wx(getstringtype(L, 2));
    wxHtmlDCRenderer *self = (wxHtmlDCRenderer*)getuserdatatype(L, 1, s_wxHtmlDCRenderer);
    self->SetHtmlText(html, basepath, isdir);
    return 0;
}

// int Render(int x, int y, int from = 0, int dont_render = FALSE)
static int LUACALL wxHtmlDCRenderer_Render(lua_State *L)
{    
    int returns;
    int argCount = lua_gettop(L);    
    int dont_render = (argCount >= 5 ? (int) getnumbertype(L, 5) : FALSE);
    int from = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxHtmlDCRenderer *self = (wxHtmlDCRenderer*)getuserdatatype(L, 1, s_wxHtmlDCRenderer);
    returns = self->Render(x, y, from, dont_render);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetTotalHeight()
static int LUACALL wxHtmlDCRenderer_GetTotalHeight(lua_State *L)
{    
    int returns;
    wxHtmlDCRenderer *self = (wxHtmlDCRenderer*)getuserdatatype(L, 1, s_wxHtmlDCRenderer);
    returns = self->GetTotalHeight();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxHtmlEasyPrinting_destructor(lua_State *L)
{
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxHtmlEasyPrinting_Delete(lua_State *L)
{
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxHtmlEasyPrinting(const wxString& name = "Printing", wxFrame* parent_frame = NULL)
static int LUACALL wxHtmlEasyPrinting_constructor(lua_State *L)
{    
    wxHtmlEasyPrinting *returns;
    int argCount = lua_gettop(L);    
    wxFrame *parent_frame = (argCount >= 2 ? (wxFrame*)getuserdatatype(L, 2, s_wxFrame) : NULL);
    wxString name = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxT("Printing"));
    returns = new wxHtmlEasyPrinting(name, parent_frame);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxHtmlEasyPrinting, returns);
    return 1;
}

// bool PreviewFile(const wxString& htmlfile)
static int LUACALL wxHtmlEasyPrinting_PreviewFile(lua_State *L)
{    
    bool returns;    
    wxString htmlfile = lua2wx(getstringtype(L, 2));
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    returns = self->PreviewFile(htmlfile);
    lua_pushboolean(L, returns);
    return 1;
}

// bool PreviewText(const wxString& htmltext, const wxString& basepath = wxEmptyString)
static int LUACALL wxHtmlEasyPrinting_PreviewText(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString basepath = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxString htmltext = lua2wx(getstringtype(L, 2));
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    returns = self->PreviewText(htmltext, basepath);
    lua_pushboolean(L, returns);
    return 1;
}

// bool PrintFile(const wxString& htmlfile)
static int LUACALL wxHtmlEasyPrinting_PrintFile(lua_State *L)
{    
    bool returns;    
    wxString htmlfile = lua2wx(getstringtype(L, 2));
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    returns = self->PrintFile(htmlfile);
    lua_pushboolean(L, returns);
    return 1;
}

// bool PrintText(const wxString& htmltext, const wxString& basepath = wxEmptyString)
static int LUACALL wxHtmlEasyPrinting_PrintText(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString basepath = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxString htmltext = lua2wx(getstringtype(L, 2));
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    returns = self->PrintText(htmltext, basepath);
    lua_pushboolean(L, returns);
    return 1;
}

// void PageSetup()
static int LUACALL wxHtmlEasyPrinting_PageSetup(lua_State *L)
{    
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    self->PageSetup();
    return 0;
}

// void SetHeader(const wxString& header, int pg = wxPAGE_ALL)
static int LUACALL wxHtmlEasyPrinting_SetHeader(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int pg = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxPAGE_ALL);
    wxString header = lua2wx(getstringtype(L, 2));
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    self->SetHeader(header, pg);
    return 0;
}

// void SetFooter(const wxString& footer, int pg = wxPAGE_ALL)
static int LUACALL wxHtmlEasyPrinting_SetFooter(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int pg = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxPAGE_ALL);
    wxString footer = lua2wx(getstringtype(L, 2));
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    self->SetFooter(footer, pg);
    return 0;
}

// void SetFonts(wxString normal_face, wxString fixed_face, const int *sizes = 0)
static int LUACALL wxHtmlEasyPrinting_SetFonts(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const int *sizes = (argCount >= 4 ? (int*)ttouserdata(L, 4) : 0);
    wxString fixed_face = lua2wx(getstringtype(L, 3));
    wxString normal_face = lua2wx(getstringtype(L, 2));
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    self->SetFonts(normal_face, fixed_face, sizes);
    return 0;
}

// void SetStandardFonts(int size = -1,const wxString& normal_face = wxEmptyString,const wxString& fixed_face = wxEmptyString)
static int LUACALL wxHtmlEasyPrinting_SetStandardFonts(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxString fixed_face = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxString(wxEmptyString));
    wxString normal_face = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    int size = (argCount >= 2 ? (int) getnumbertype(L, 2) : -1);
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    self->SetStandardFonts(size, normal_face, fixed_face);
    return 0;
}

// wxPrintData* GetPrintData()
static int LUACALL wxHtmlEasyPrinting_GetPrintData(lua_State *L)
{    
    wxPrintData *returns;
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    returns = self->GetPrintData();
    pushuserdatatype(L, s_wxPrintData, returns);
    return 1;
}

// wxPageSetupDialogData* GetPageSetupData()
static int LUACALL wxHtmlEasyPrinting_GetPageSetupData(lua_State *L)
{    
    wxPageSetupDialogData *returns;
    wxHtmlEasyPrinting *self = (wxHtmlEasyPrinting*)getuserdatatype(L, 1, s_wxHtmlEasyPrinting);
    returns = self->GetPageSetupData();
    pushuserdatatype(L, s_wxPageSetupDialogData, returns);
    return 1;
}

static int LUACALL wxHtmlPrintout_destructor(lua_State *)
{
    return 0;
}

// wxHtmlPrintout(const wxString& title = "Printout")
static int LUACALL wxHtmlPrintout_constructor(lua_State *L)
{    
    wxHtmlPrintout *returns;
    int argCount = lua_gettop(L);    
    wxString title = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxT("Printout"));
    returns = new wxHtmlPrintout(title);
    pushuserdatatype(L, s_wxHtmlPrintout, returns);
    return 1;
}

// void SetFooter(const wxString& footer, int pg = wxPAGE_ALL)
static int LUACALL wxHtmlPrintout_SetFooter(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int pg = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxPAGE_ALL);
    wxString footer = lua2wx(getstringtype(L, 2));
    wxHtmlPrintout *self = (wxHtmlPrintout*)getuserdatatype(L, 1, s_wxHtmlPrintout);
    self->SetFooter(footer, pg);
    return 0;
}

// void SetHeader(const wxString& header, int pg = wxPAGE_ALL)
static int LUACALL wxHtmlPrintout_SetHeader(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int pg = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxPAGE_ALL);
    wxString header = lua2wx(getstringtype(L, 2));
    wxHtmlPrintout *self = (wxHtmlPrintout*)getuserdatatype(L, 1, s_wxHtmlPrintout);
    self->SetHeader(header, pg);
    return 0;
}

// void SetHtmlFile(const wxString& htmlfile)
static int LUACALL wxHtmlPrintout_SetHtmlFile(lua_State *L)
{        
    wxString htmlfile = lua2wx(getstringtype(L, 2));
    wxHtmlPrintout *self = (wxHtmlPrintout*)getuserdatatype(L, 1, s_wxHtmlPrintout);
    self->SetHtmlFile(htmlfile);
    return 0;
}

// void SetHtmlText(const wxString& html, const wxString& basepath = wxEmptyString, bool isdir = TRUE)
static int LUACALL wxHtmlPrintout_SetHtmlText(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool isdir = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    wxString basepath = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxString html = lua2wx(getstringtype(L, 2));
    wxHtmlPrintout *self = (wxHtmlPrintout*)getuserdatatype(L, 1, s_wxHtmlPrintout);
    self->SetHtmlText(html, basepath, isdir);
    return 0;
}

// void SetMargins(float top = 25.2, float bottom = 25.2, float left = 25.2, float right = 25.2, float spaces = 5)
static int LUACALL wxHtmlPrintout_SetMargins(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    float spaces = (argCount >= 6 ? (float) getnumbertype(L, 6) : 5);
    float right = (argCount >= 5 ? (float) getnumbertype(L, 5) : 25.2);
    float left = (argCount >= 4 ? (float) getnumbertype(L, 4) : 25.2);
    float bottom = (argCount >= 3 ? (float) getnumbertype(L, 3) : 25.2);
    float top = (argCount >= 2 ? (float) getnumbertype(L, 2) : 25.2);
    wxHtmlPrintout *self = (wxHtmlPrintout*)getuserdatatype(L, 1, s_wxHtmlPrintout);
    self->SetMargins(top, bottom, left, right, spaces);
    return 0;
}

static int LUACALL wxImage_destructor(lua_State *L)
{
    wxImage * self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxImage_Delete(lua_State *L)
{
    wxImage * self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxImage(const wxImage& image)
static int LUACALL wxImage_constructor(lua_State *L)
{    
    wxImage *returns;    
    const wxImage *image = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = new wxImage(*image);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// %constructor wxDefaultImage()
static int LUACALL wxDefaultImage_constructor(lua_State *L)
{    
    wxImage *returns;
    returns = new wxImage();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// %constructor wxImageFromBitmap(const wxBitmap& bitmap)
static int LUACALL wxImageFromBitmap_constructor(lua_State *L)
{
    wxImage *returns;
    // const wxBitmap& bitmap
    const wxBitmap *bitmap = (wxBitmap *) getuserdatatype(L, 1, s_wxBitmap);
    // call constructor
    returns = new wxImage(bitmap->ConvertToImage());
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxImage, returns );
    // return the number of parameters
    return 1;
}

// %constructor wxEmptyImage(int width, int height)
static int LUACALL wxEmptyImage_constructor(lua_State *L)
{    
    wxImage *returns;    
    int height = (int) getnumbertype(L, 2);
    int width = (int) getnumbertype(L, 1);
    returns = new wxImage(width, height);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// %constructor wxImageFromData(int width, int height, unsigned char* data, bool static_data = FALSE)
static int LUACALL wxImageFromData_constructor(lua_State *L)
{
    wxImage *returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool static_data = FALSE
    bool static_data = (argCount >= 4 ? getbooleantype(L, 4) : FALSE);
    // unsigned char* data
    unsigned char *data = (unsigned char *) lua_tostring(L, 3);
    // int height
    int height = (int) getnumbertype(L, 2);
    // int width
    int width = (int) getnumbertype(L, 1);
    // call constructor
    returns = new wxImage(width, height, data, static_data);
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxImage, returns );
    // return the number of parameters
    return 1;
}

// %constructor wxImageFromFile(const wxString& name, long type = wxBITMAP_TYPE_ANY)
static int LUACALL wxImageFromFile_constructor(lua_State *L)
{    
    wxImage *returns;
    int argCount = lua_gettop(L);    
    long type = (argCount >= 2 ? (long) getnumbertype(L, 2) : wxBITMAP_TYPE_ANY);
    wxString name = lua2wx(getstringtype(L, 1));
    returns = new wxImage(name, type);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// static void AddHandler(wxImageHandler* handler)
static int LUACALL wxImage_AddHandler(lua_State *L)
{        
    wxImageHandler *handler = (wxImageHandler*)getuserdatatype(L, 2, s_wxImageHandler);
    wxImage::AddHandler(handler);
    return 0;
}

// static void CleanUpHandlers()
static int LUACALL wxImage_CleanUpHandlers(lua_State *L)
{    
    wxImage::CleanUpHandlers();
    return 0;
}

// wxImage Copy() const
static int LUACALL wxImage_Copy(lua_State *L)
{    
    wxImage *returns;
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = new wxImage(self->Copy());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// void Create(int width, int height)
static int LUACALL wxImage_Create(lua_State *L)
{        
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    self->Create(width, height);
    return 0;
}

// void Destroy()
static int LUACALL wxImage_Destroy(lua_State *L)
{    
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    self->Destroy();
    return 0;
}

// unsigned char GetBlue(int x, int y) const
static int LUACALL wxImage_GetBlue(lua_State *L)
{    
    unsigned char returns;    
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetBlue(x, y);
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned char GetGreen(int x, int y) const
static int LUACALL wxImage_GetGreen(lua_State *L)
{    
    unsigned char returns;    
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetGreen(x, y);
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned char GetRed(int x, int y) const
static int LUACALL wxImage_GetRed(lua_State *L)
{    
    unsigned char returns;    
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetRed(x, y);
    lua_pushnumber(L, returns);
    return 1;
}

// static wxList& GetHandlers()
static int LUACALL wxImage_GetHandlers(lua_State *L)
{    
    wxList *returns;
    returns = &wxImage::GetHandlers();
    pushuserdatatype(L, s_wxList, returns);
    return 1;
}

// int GetHeight() const
static int LUACALL wxImage_GetHeight(lua_State *L)
{    
    int returns;
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned char GetMaskBlue() const
static int LUACALL wxImage_GetMaskBlue(lua_State *L)
{    
    unsigned char returns;
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetMaskBlue();
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned char GetMaskGreen() const
static int LUACALL wxImage_GetMaskGreen(lua_State *L)
{    
    unsigned char returns;
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetMaskGreen();
    lua_pushnumber(L, returns);
    return 1;
}

// unsigned char GetMaskRed() const
static int LUACALL wxImage_GetMaskRed(lua_State *L)
{    
    unsigned char returns;
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetMaskRed();
    lua_pushnumber(L, returns);
    return 1;
}

// wxImage GetSubImage(const wxRect& rect) const
static int LUACALL wxImage_GetSubImage(lua_State *L)
{    
    wxImage *returns;    
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = new wxImage(self->GetSubImage(*rect));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// int GetWidth() const
static int LUACALL wxImage_GetWidth(lua_State *L)
{    
    int returns;
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// ~%wxver22 wxString GetOption(const wxString &name) const
static int LUACALL wxImage_GetOption(lua_State *L)
{    
    wxString returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetOption(name);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// ~%wxver22 int GetOptionInt(const wxString &name) const
static int LUACALL wxImage_GetOptionInt(lua_State *L)
{    
    int returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->GetOptionInt(name);
    lua_pushnumber(L, returns);
    return 1;
}

// ~%wxver22 int HasOption(const wxString &name) const
static int LUACALL wxImage_HasOption(lua_State *L)
{    
    int returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->HasOption(name);
    lua_pushnumber(L, returns);
    return 1;
}

// bool HasMask() const
static int LUACALL wxImage_HasMask(lua_State *L)
{    
    bool returns;
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->HasMask();
    lua_pushboolean(L, returns);
    return 1;
}

// static void InitStandardHandlers()
static int LUACALL wxImage_InitStandardHandlers(lua_State *L)
{    
    wxImage::InitStandardHandlers();
    return 0;
}

// static void InsertHandler(wxImageHandler* handler)
static int LUACALL wxImage_InsertHandler(lua_State *L)
{        
    wxImageHandler *handler = (wxImageHandler*)getuserdatatype(L, 2, s_wxImageHandler);
    wxImage::InsertHandler(handler);
    return 0;
}

// bool LoadFile(const wxString& name, long type = wxBITMAP_TYPE_ANY)
static int LUACALL wxImage_LoadFile(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    long type = (argCount >= 3 ? (long) getnumbertype(L, 3) : wxBITMAP_TYPE_ANY);
    wxString name = lua2wx(getstringtype(L, 2));
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->LoadFile(name, type);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename LoadMimeFile bool LoadFile(const wxString& name, const wxString& mimetype)
static int LUACALL wxImage_LoadMimeFile(lua_State *L)
{    
    bool returns;    
    wxString mimetype = lua2wx(getstringtype(L, 3));
    wxString name = lua2wx(getstringtype(L, 2));
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->LoadFile(name, mimetype);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Ok() const
static int LUACALL wxImage_Ok(lua_State *L)
{    
    bool returns;
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// static bool RemoveHandler(const wxString& name)
static int LUACALL wxImage_RemoveHandler(lua_State *L)
{    
    bool returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    returns = wxImage::RemoveHandler(name);
    lua_pushboolean(L, returns);
    return 1;
}

// bool SaveFile(const wxString& name, int type)
static int LUACALL wxImage_SaveFile(lua_State *L)
{    
    bool returns;    
    int type = (int) getnumbertype(L, 3);
    wxString name = lua2wx(getstringtype(L, 2));
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->SaveFile(name, type);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename SaveMimeFile bool SaveFile(const wxString& name, const wxString& mimetype)
static int LUACALL wxImage_SaveMimeFile(lua_State *L)
{    
    bool returns;    
    wxString mimetype = lua2wx(getstringtype(L, 3));
    wxString name = lua2wx(getstringtype(L, 2));
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = self->SaveFile(name, mimetype);
    lua_pushboolean(L, returns);
    return 1;
}

// wxImage Mirror(bool horizontally = TRUE) const
static int LUACALL wxImage_Mirror(lua_State *L)
{    
    wxImage *returns;
    int argCount = lua_gettop(L);    
    bool horizontally = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = new wxImage(self->Mirror(horizontally));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// void Replace(unsigned char r1, unsigned char g1, unsigned char b1, unsigned char r2, unsigned char g2, unsigned char b2)
static int LUACALL wxImage_Replace(lua_State *L)
{        
    unsigned char b2 = (unsigned char) getnumbertype(L, 7);
    unsigned char g2 = (unsigned char) getnumbertype(L, 6);
    unsigned char r2 = (unsigned char) getnumbertype(L, 5);
    unsigned char b1 = (unsigned char) getnumbertype(L, 4);
    unsigned char g1 = (unsigned char) getnumbertype(L, 3);
    unsigned char r1 = (unsigned char) getnumbertype(L, 2);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    self->Replace(r1, g1, b1, r2, g2, b2);
    return 0;
}

// wxImage Rotate(double angle, const wxPoint& rotationCentre, bool interpolating = TRUE, wxPoint* offsetAfterRotation = NULL)
static int LUACALL wxImage_Rotate(lua_State *L)
{    
    wxImage *returns;
    int argCount = lua_gettop(L);    
    wxPoint *offsetAfterRotation = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : NULL);
    bool interpolating = (argCount >= 4 ? getbooleantype(L, 4) : TRUE);
    const wxPoint *rotationCentre = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    double angle = (double) getnumbertype(L, 2);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = new wxImage(self->Rotate(angle, *rotationCentre, interpolating, offsetAfterRotation));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// wxImage Rotate90(bool clockwise = TRUE) const
static int LUACALL wxImage_Rotate90(lua_State *L)
{    
    wxImage *returns;
    int argCount = lua_gettop(L);    
    bool clockwise = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = new wxImage(self->Rotate90(clockwise));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// wxImage Scale(int width, int height) const
static int LUACALL wxImage_Scale(lua_State *L)
{    
    wxImage *returns;    
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    returns = new wxImage(self->Scale(width, height));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxImage, returns);
    return 1;
}

// void SetData(unsigned char *data)
static int LUACALL wxImage_SetData(lua_State *L)
{
    // unsigned char *data
    unsigned char *data = (unsigned char *) lua_tostring(L, 2);
    // get this
    wxImage *self = ( wxImage * ) getuserdatatype(L, 1, s_wxImage );
    // call SetData
    self->SetData(data);
    // return the number of parameters
    return 0;
}

// void SetMask(bool hasMask = TRUE)
static int LUACALL wxImage_SetMask(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool hasMask = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    self->SetMask(hasMask);
    return 0;
}

// void SetMaskColour(unsigned char red, unsigned char blue, unsigned char green)
static int LUACALL wxImage_SetMaskColour(lua_State *L)
{        
    unsigned char green = (unsigned char) getnumbertype(L, 4);
    unsigned char blue = (unsigned char) getnumbertype(L, 3);
    unsigned char red = (unsigned char) getnumbertype(L, 2);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    self->SetMaskColour(red, blue, green);
    return 0;
}

// ~%wxver22 void SetOption(const wxString &name, const wxString &value)
static int LUACALL wxImage_SetOption(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 3));
    wxString name = lua2wx(getstringtype(L, 2));
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    self->SetOption(name, value);
    return 0;
}

// ~%wxver22 %rename SetOptionInt void SetOption(const wxString &name, int value)
static int LUACALL wxImage_SetOptionInt(lua_State *L)
{        
    int value = (int) getnumbertype(L, 3);
    wxString name = lua2wx(getstringtype(L, 2));
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    self->SetOption(name, value);
    return 0;
}

// void SetRGB(int x, int y, unsigned char red, unsigned char green, unsigned char blue)
static int LUACALL wxImage_SetRGB(lua_State *L)
{        
    unsigned char blue = (unsigned char) getnumbertype(L, 6);
    unsigned char green = (unsigned char) getnumbertype(L, 5);
    unsigned char red = (unsigned char) getnumbertype(L, 4);
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxImage *self = (wxImage*)getuserdatatype(L, 1, s_wxImage);
    self->SetRGB(x, y, red, green, blue);
    return 0;
}

static int LUACALL wxImageHandler_destructor(lua_State *)
{
    return 0;
}

// wxString GetName() const
static int LUACALL wxImageHandler_GetName(lua_State *L)
{    
    wxString returns;
    wxImageHandler *self = (wxImageHandler*)getuserdatatype(L, 1, s_wxImageHandler);
    returns = self->GetName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetExtension() const
static int LUACALL wxImageHandler_GetExtension(lua_State *L)
{    
    wxString returns;
    wxImageHandler *self = (wxImageHandler*)getuserdatatype(L, 1, s_wxImageHandler);
    returns = self->GetExtension();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// long GetType() const
static int LUACALL wxImageHandler_GetType(lua_State *L)
{    
    long returns;
    wxImageHandler *self = (wxImageHandler*)getuserdatatype(L, 1, s_wxImageHandler);
    returns = self->GetType();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetMimeType() const
static int LUACALL wxImageHandler_GetMimeType(lua_State *L)
{    
    wxString returns;
    wxImageHandler *self = (wxImageHandler*)getuserdatatype(L, 1, s_wxImageHandler);
    returns = self->GetMimeType();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetName(const wxString& name)
static int LUACALL wxImageHandler_SetName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxImageHandler *self = (wxImageHandler*)getuserdatatype(L, 1, s_wxImageHandler);
    self->SetName(name);
    return 0;
}

// void SetExtension(const wxString& extension)
static int LUACALL wxImageHandler_SetExtension(lua_State *L)
{        
    wxString extension = lua2wx(getstringtype(L, 2));
    wxImageHandler *self = (wxImageHandler*)getuserdatatype(L, 1, s_wxImageHandler);
    self->SetExtension(extension);
    return 0;
}

// void SetMimeType(const wxString& mimetype)
static int LUACALL wxImageHandler_SetMimeType(lua_State *L)
{        
    wxString mimetype = lua2wx(getstringtype(L, 2));
    wxImageHandler *self = (wxImageHandler*)getuserdatatype(L, 1, s_wxImageHandler);
    self->SetMimeType(mimetype);
    return 0;
}

// void SetType(long type)
static int LUACALL wxImageHandler_SetType(lua_State *L)
{        
    long type = (long) getnumbertype(L, 2);
    wxImageHandler *self = (wxImageHandler*)getuserdatatype(L, 1, s_wxImageHandler);
    self->SetType(type);
    return 0;
}

static int LUACALL wxBMPHandler_destructor(lua_State *)
{
    return 0;
}

// wxBMPHandler()
static int LUACALL wxBMPHandler_constructor(lua_State *L)
{    
    wxBMPHandler *returns;
    returns = new wxBMPHandler();
    pushuserdatatype(L, s_wxBMPHandler, returns);
    return 1;
}

static int LUACALL wxPNGHandler_destructor(lua_State *)
{
    return 0;
}

// wxPNGHandler()
static int LUACALL wxPNGHandler_constructor(lua_State *L)
{    
    wxPNGHandler *returns;
    returns = new wxPNGHandler();
    pushuserdatatype(L, s_wxPNGHandler, returns);
    return 1;
}

static int LUACALL wxJPEGHandler_destructor(lua_State *)
{
    return 0;
}

// wxJPEGHandler()
static int LUACALL wxJPEGHandler_constructor(lua_State *L)
{    
    wxJPEGHandler *returns;
    returns = new wxJPEGHandler();
    pushuserdatatype(L, s_wxJPEGHandler, returns);
    return 1;
}

static int LUACALL wxGIFHandler_destructor(lua_State *)
{
    return 0;
}

// wxGIFHandler()
static int LUACALL wxGIFHandler_constructor(lua_State *L)
{    
    wxGIFHandler *returns;
    returns = new wxGIFHandler();
    pushuserdatatype(L, s_wxGIFHandler, returns);
    return 1;
}

static int LUACALL wxPNMHandler_destructor(lua_State *)
{
    return 0;
}

// wxPNMHandler()
static int LUACALL wxPNMHandler_constructor(lua_State *L)
{    
    wxPNMHandler *returns;
    returns = new wxPNMHandler();
    pushuserdatatype(L, s_wxPNMHandler, returns);
    return 1;
}

static int LUACALL wxPCXHandler_destructor(lua_State *)
{
    return 0;
}

// wxPCXHandler()
static int LUACALL wxPCXHandler_constructor(lua_State *L)
{    
    wxPCXHandler *returns;
    returns = new wxPCXHandler();
    pushuserdatatype(L, s_wxPCXHandler, returns);
    return 1;
}

static int LUACALL wxTIFFHandler_destructor(lua_State *)
{
    return 0;
}

// wxTIFFHandler()
static int LUACALL wxTIFFHandler_constructor(lua_State *L)
{    
    wxTIFFHandler *returns;
    returns = new wxTIFFHandler();
    pushuserdatatype(L, s_wxTIFFHandler, returns);
    return 1;
}

static int LUACALL wxXPMHandler_destructor(lua_State *)
{
    return 0;
}

// wxXPMHandler()
static int LUACALL wxXPMHandler_constructor(lua_State *L)
{    
    wxXPMHandler *returns;
    returns = new wxXPMHandler();
    pushuserdatatype(L, s_wxXPMHandler, returns);
    return 1;
}

static int LUACALL wxICOHandler_destructor(lua_State *)
{
    return 0;
}

// wxICOHandler()
static int LUACALL wxICOHandler_constructor(lua_State *L)
{    
    wxICOHandler *returns;
    returns = new wxICOHandler();
    pushuserdatatype(L, s_wxICOHandler, returns);
    return 1;
}

static int LUACALL wxMDIClientWindow_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxMDIParentFrame_destructor(lua_State *)
{
    return 0;
}

// %constructor wxMDIParentFrameDefault()
static int LUACALL wxMDIParentFrameDefault_constructor(lua_State *L)
{    
    wxMDIParentFrame *returns;
    returns = new wxMDIParentFrame();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxMDIParentFrame, returns);
    return 1;
}

// wxMDIParentFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL, const wxString& name = "frame")
static int LUACALL wxMDIParentFrame_constructor(lua_State *L)
{    
    wxMDIParentFrame *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("frame"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxMDIParentFrame(parent, id, title, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxMDIParentFrame, returns);
    return 1;
}

// void ActivateNext()
static int LUACALL wxMDIParentFrame_ActivateNext(lua_State *L)
{    
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    self->ActivateNext();
    return 0;
}

// void ActivatePrevious()
static int LUACALL wxMDIParentFrame_ActivatePrevious(lua_State *L)
{    
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    self->ActivatePrevious();
    return 0;
}

// void ArrangeIcons()
static int LUACALL wxMDIParentFrame_ArrangeIcons(lua_State *L)
{    
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    self->ArrangeIcons();
    return 0;
}

// void Cascade()
static int LUACALL wxMDIParentFrame_Cascade(lua_State *L)
{    
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    self->Cascade();
    return 0;
}

// bool Create(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL, const wxString& name = "frame")
static int LUACALL wxMDIParentFrame_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("frame"));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    returns = self->Create(parent, id, title, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void GetClientSize(int* width, int* height) const
static int LUACALL wxMDIParentFrame_GetClientSize(lua_State *L)
{
    int height;
    int width;
    wxMDIParentFrame *self = ( wxMDIParentFrame * ) getuserdatatype(L, 1, s_wxMDIParentFrame );
    // call GetClientSize
    self->GetClientSize(&width, &height);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 2;
}

// wxMDIChildFrame* GetActiveChild() const
static int LUACALL wxMDIParentFrame_GetActiveChild(lua_State *L)
{    
    wxMDIChildFrame *returns;
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    returns = self->GetActiveChild();
    pushuserdatatype(L, s_wxMDIChildFrame, returns);
    return 1;
}

// wxMDIClientWindow* GetClientWindow() const
static int LUACALL wxMDIParentFrame_GetClientWindow(lua_State *L)
{    
    wxMDIClientWindow *returns;
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    returns = self->GetClientWindow();
    pushuserdatatype(L, s_wxMDIClientWindow, returns);
    return 1;
}

// virtual wxWindow* GetToolBar() const
static int LUACALL wxMDIParentFrame_GetToolBar(lua_State *L)
{    
    wxWindow *returns;
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    returns = self->GetToolBar();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// %win wxMenu* GetWindowMenu() const
static int LUACALL wxMDIParentFrame_GetWindowMenu(lua_State *L)
{    
    wxMenu *returns;
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    returns = self->GetWindowMenu();
    pushuserdatatype(L, s_wxMenu, returns);
    return 1;
}

// virtual void SetToolBar(wxToolBar* toolbar)
static int LUACALL wxMDIParentFrame_SetToolBar(lua_State *L)
{        
    wxToolBar *toolbar = (wxToolBar*)getuserdatatype(L, 2, s_wxToolBar);
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    self->SetToolBar(toolbar);
    return 0;
}

// %win void SetWindowMenu(wxMenu* menu)
static int LUACALL wxMDIParentFrame_SetWindowMenu(lua_State *L)
{        
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    self->SetWindowMenu(menu);
    return 0;
}

// void Tile()
static int LUACALL wxMDIParentFrame_Tile(lua_State *L)
{    
    wxMDIParentFrame *self = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    self->Tile();
    return 0;
}

static int LUACALL wxMDIChildFrame_destructor(lua_State *)
{
    return 0;
}

// %constructor wxMDIChildFrameDefault()
static int LUACALL wxMDIChildFrameDefault_constructor(lua_State *L)
{    
    wxMDIChildFrame *returns;
    returns = new wxMDIChildFrame();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxMDIChildFrame, returns);
    return 1;
}

// wxMDIChildFrame(wxMDIParentFrame* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
static int LUACALL wxMDIChildFrame_constructor(lua_State *L)
{    
    wxMDIChildFrame *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("frame"));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxDEFAULT_FRAME_STYLE);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 3));
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxMDIParentFrame *parent = (wxMDIParentFrame*)getuserdatatype(L, 1, s_wxMDIParentFrame);
    returns = new wxMDIChildFrame(parent, id, title, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxMDIChildFrame, returns);
    return 1;
}

// void Activate()
static int LUACALL wxMDIChildFrame_Activate(lua_State *L)
{    
    wxMDIChildFrame *self = (wxMDIChildFrame*)getuserdatatype(L, 1, s_wxMDIChildFrame);
    self->Activate();
    return 0;
}

// bool Create(wxMDIParentFrame* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
static int LUACALL wxMDIChildFrame_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("frame"));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : wxDEFAULT_FRAME_STYLE);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxMDIParentFrame *parent = (wxMDIParentFrame*)getuserdatatype(L, 2, s_wxMDIParentFrame);
    wxMDIChildFrame *self = (wxMDIChildFrame*)getuserdatatype(L, 1, s_wxMDIChildFrame);
    returns = self->Create(parent, id, title, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// %win void Maximize()
static int LUACALL wxMDIChildFrame_Maximize(lua_State *L)
{    
    wxMDIChildFrame *self = (wxMDIChildFrame*)getuserdatatype(L, 1, s_wxMDIChildFrame);
    self->Maximize();
    return 0;
}

// void Restore()
static int LUACALL wxMDIChildFrame_Restore(lua_State *L)
{    
    wxMDIChildFrame *self = (wxMDIChildFrame*)getuserdatatype(L, 1, s_wxMDIChildFrame);
    self->Restore();
    return 0;
}

static int LUACALL wxDocChildFrame_destructor(lua_State *)
{
    return 0;
}

// wxDocChildFrame(wxDocument* doc, wxView* view, wxFrame* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
static int LUACALL wxDocChildFrame_constructor(lua_State *L)
{    
    wxDocChildFrame *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxT("frame"));
    long style = (argCount >= 8 ? (long) getnumbertype(L, 8) : wxDEFAULT_FRAME_STYLE);
    const wxSize *size = (argCount >= 7 ? (wxSize*)getuserdatatype(L, 7, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 6 ? (wxPoint*)getuserdatatype(L, 6, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 5));
    wxWindowID id = (wxWindowID) getnumbertype(L, 4);
    wxFrame *parent = (wxFrame*)getuserdatatype(L, 3, s_wxFrame);
    wxView *view = (wxView*)getuserdatatype(L, 2, s_wxView);
    wxDocument *doc = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = new wxDocChildFrame(doc, view, parent, id, title, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxDocChildFrame, returns);
    return 1;
}

// wxDocument* GetDocument() const
static int LUACALL wxDocChildFrame_GetDocument(lua_State *L)
{    
    wxDocument *returns;
    wxDocChildFrame *self = (wxDocChildFrame*)getuserdatatype(L, 1, s_wxDocChildFrame);
    returns = self->GetDocument();
    pushuserdatatype(L, s_wxDocument, returns);
    return 1;
}

// wxView* GetView() const
static int LUACALL wxDocChildFrame_GetView(lua_State *L)
{    
    wxView *returns;
    wxDocChildFrame *self = (wxDocChildFrame*)getuserdatatype(L, 1, s_wxDocChildFrame);
    returns = self->GetView();
    pushuserdatatype(L, s_wxView, returns);
    return 1;
}

// void SetDocument(wxDocument *doc)
static int LUACALL wxDocChildFrame_SetDocument(lua_State *L)
{        
    wxDocument *doc = (wxDocument*)getuserdatatype(L, 2, s_wxDocument);
    wxDocChildFrame *self = (wxDocChildFrame*)getuserdatatype(L, 1, s_wxDocChildFrame);
    self->SetDocument(doc);
    return 0;
}

// void SetView(wxView *view)
static int LUACALL wxDocChildFrame_SetView(lua_State *L)
{        
    wxView *view = (wxView*)getuserdatatype(L, 2, s_wxView);
    wxDocChildFrame *self = (wxDocChildFrame*)getuserdatatype(L, 1, s_wxDocChildFrame);
    self->SetView(view);
    return 0;
}

static int LUACALL wxDocManager_destructor(lua_State *)
{
    return 0;
}

// wxDocManager(long flags = wxDEFAULT_DOCMAN_FLAGS, bool initialize = TRUE)
static int LUACALL wxDocManager_constructor(lua_State *L)
{    
    wxDocManager *returns;
    int argCount = lua_gettop(L);    
    bool initialize = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    long flags = (argCount >= 1 ? (long) getnumbertype(L, 1) : wxDEFAULT_DOCMAN_FLAGS);
    returns = new wxDocManager(flags, initialize);
    pushuserdatatype(L, s_wxDocManager, returns);
    return 1;
}

// ~<wxver25 void ActivateView(wxView* view, bool activate)
static int LUACALL wxDocManager_ActivateView(lua_State *L)
{        
    bool activate = getbooleantype(L, 3);
    wxView *view = (wxView*)getuserdatatype(L, 2, s_wxView);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->ActivateView(view, activate);
    return 0;
}

// void AddDocument(wxDocument *doc)
static int LUACALL wxDocManager_AddDocument(lua_State *L)
{        
    wxDocument *doc = (wxDocument*)getuserdatatype(L, 2, s_wxDocument);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->AddDocument(doc);
    return 0;
}

// void AddFileToHistory(const wxString& filename)
static int LUACALL wxDocManager_AddFileToHistory(lua_State *L)
{        
    wxString filename = lua2wx(getstringtype(L, 2));
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->AddFileToHistory(filename);
    return 0;
}

// void AssociateTemplate(wxDocTemplate *temp)
static int LUACALL wxDocManager_AssociateTemplate(lua_State *L)
{        
    wxDocTemplate *temp = (wxDocTemplate*)getuserdatatype(L, 2, s_wxDocTemplate);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->AssociateTemplate(temp);
    return 0;
}

// wxDocument* CreateDocument(const wxString& path, long flags)
static int LUACALL wxDocManager_CreateDocument(lua_State *L)
{    
    wxDocument *returns;    
    long flags = (long) getnumbertype(L, 3);
    wxString path = lua2wx(getstringtype(L, 2));
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->CreateDocument(path, flags);
    pushuserdatatype(L, s_wxDocument, returns);
    return 1;
}

// wxView* CreateView(wxDocument*doc, long flags)
static int LUACALL wxDocManager_CreateView(lua_State *L)
{    
    wxView *returns;    
    long flags = (long) getnumbertype(L, 3);
    wxDocument *doc = (wxDocument*)getuserdatatype(L, 2, s_wxDocument);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->CreateView(doc, flags);
    pushuserdatatype(L, s_wxView, returns);
    return 1;
}

// void DisassociateTemplate(wxDocTemplate *temp)
static int LUACALL wxDocManager_DisassociateTemplate(lua_State *L)
{        
    wxDocTemplate *temp = (wxDocTemplate*)getuserdatatype(L, 2, s_wxDocTemplate);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->DisassociateTemplate(temp);
    return 0;
}

// void FileHistoryAddFilesToMenu()
static int LUACALL wxDocManager_FileHistoryAddFilesToMenu(lua_State *L)
{    
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->FileHistoryAddFilesToMenu();
    return 0;
}

// %rename FileHistoryAddFilesToGivenMenu void FileHistoryAddFilesToMenu(wxMenu* menu)
static int LUACALL wxDocManager_FileHistoryAddFilesToGivenMenu(lua_State *L)
{        
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->FileHistoryAddFilesToMenu(menu);
    return 0;
}

// void FileHistoryLoad(wxConfigBase& config)
static int LUACALL wxDocManager_FileHistoryLoad(lua_State *L)
{        
    wxConfigBase *config = (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->FileHistoryLoad(*config);
    return 0;
}

// void FileHistoryRemoveMenu(wxMenu* menu)
static int LUACALL wxDocManager_FileHistoryRemoveMenu(lua_State *L)
{        
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->FileHistoryRemoveMenu(menu);
    return 0;
}

// void FileHistorySave(wxConfigBase& resourceFile)
static int LUACALL wxDocManager_FileHistorySave(lua_State *L)
{        
    wxConfigBase *resourceFile = (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->FileHistorySave(*resourceFile);
    return 0;
}

// void FileHistoryUseMenu(wxMenu* menu)
static int LUACALL wxDocManager_FileHistoryUseMenu(lua_State *L)
{        
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->FileHistoryUseMenu(menu);
    return 0;
}

// wxDocTemplate * FindTemplateForPath(const wxString& path)
static int LUACALL wxDocManager_FindTemplateForPath(lua_State *L)
{    
    wxDocTemplate *returns;    
    wxString path = lua2wx(getstringtype(L, 2));
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->FindTemplateForPath(path);
    pushuserdatatype(L, s_wxDocTemplate, returns);
    return 1;
}

// wxDocument * GetCurrentDocument()
static int LUACALL wxDocManager_GetCurrentDocument(lua_State *L)
{    
    wxDocument *returns;
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->GetCurrentDocument();
    pushuserdatatype(L, s_wxDocument, returns);
    return 1;
}

// wxView * GetCurrentView()
static int LUACALL wxDocManager_GetCurrentView(lua_State *L)
{    
    wxView *returns;
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->GetCurrentView();
    pushuserdatatype(L, s_wxView, returns);
    return 1;
}

// wxList& GetDocuments()
static int LUACALL wxDocManager_GetDocuments(lua_State *L)
{
    wxList *returns;
    // get this
    wxDocManager *self = ( wxDocManager * ) getuserdatatype(L, 1, s_wxDocManager );
    // call GetDocuments
    wxList &docs = self->GetDocuments();
    returns = new wxList(docs);
    // push the result datatype
    pushuserdatatype(L, s_wxList, returns );
    // return the number of parameters
    return 1;
}

// wxFileHistory * GetFileHistory()
static int LUACALL wxDocManager_GetFileHistory(lua_State *L)
{    
    wxFileHistory *returns;
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->GetFileHistory();
    pushuserdatatype(L, s_wxFileHistory, returns);
    return 1;
}

// wxString GetLastDirectory() const
static int LUACALL wxDocManager_GetLastDirectory(lua_State *L)
{    
    wxString returns;
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->GetLastDirectory();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetMaxDocsOpen()
static int LUACALL wxDocManager_GetMaxDocsOpen(lua_State *L)
{    
    int returns;
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->GetMaxDocsOpen();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetNoHistoryFiles()
static int LUACALL wxDocManager_GetNoHistoryFiles(lua_State *L)
{    
    int returns;
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->GetNoHistoryFiles();
    lua_pushnumber(L, returns);
    return 1;
}

// bool Initialize()
static int LUACALL wxDocManager_Initialize(lua_State *L)
{    
    bool returns;
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->Initialize();
    lua_pushboolean(L, returns);
    return 1;
}

// bool MakeDefaultName(const wxString& buf)
static int LUACALL wxDocManager_MakeDefaultName(lua_State *L)
{    
    bool returns;    
    wxString buf = lua2wx(getstringtype(L, 2));
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->MakeDefaultName(buf);
    lua_pushboolean(L, returns);
    return 1;
}

// wxFileHistory * OnCreateFileHistory()
static int LUACALL wxDocManager_OnCreateFileHistory(lua_State *L)
{    
    wxFileHistory *returns;
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = self->OnCreateFileHistory();
    pushuserdatatype(L, s_wxFileHistory, returns);
    return 1;
}

// void OnFileClose(wxCommandEvent &event)
static int LUACALL wxDocManager_OnFileClose(lua_State *L)
{        
    wxCommandEvent *event = (wxCommandEvent*)getuserdatatype(L, 2, s_wxCommandEvent);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->OnFileClose(*event);
    return 0;
}

// void OnFileNew(wxCommandEvent &event)
static int LUACALL wxDocManager_OnFileNew(lua_State *L)
{        
    wxCommandEvent *event = (wxCommandEvent*)getuserdatatype(L, 2, s_wxCommandEvent);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->OnFileNew(*event);
    return 0;
}

// void OnFileOpen(wxCommandEvent &event)
static int LUACALL wxDocManager_OnFileOpen(lua_State *L)
{        
    wxCommandEvent *event = (wxCommandEvent*)getuserdatatype(L, 2, s_wxCommandEvent);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->OnFileOpen(*event);
    return 0;
}

// void OnFileSave(wxCommandEvent &event)
static int LUACALL wxDocManager_OnFileSave(lua_State *L)
{        
    wxCommandEvent *event = (wxCommandEvent*)getuserdatatype(L, 2, s_wxCommandEvent);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->OnFileSave(*event);
    return 0;
}

// void OnFileSaveAs(wxCommandEvent &event)
static int LUACALL wxDocManager_OnFileSaveAs(lua_State *L)
{        
    wxCommandEvent *event = (wxCommandEvent*)getuserdatatype(L, 2, s_wxCommandEvent);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->OnFileSaveAs(*event);
    return 0;
}

// void RemoveDocument(wxDocument *doc)
static int LUACALL wxDocManager_RemoveDocument(lua_State *L)
{        
    wxDocument *doc = (wxDocument*)getuserdatatype(L, 2, s_wxDocument);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->RemoveDocument(doc);
    return 0;
}

// void SetLastDirectory(const wxString& dir)
static int LUACALL wxDocManager_SetLastDirectory(lua_State *L)
{        
    wxString dir = lua2wx(getstringtype(L, 2));
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->SetLastDirectory(dir);
    return 0;
}

// void SetMaxDocsOpen(int n)
static int LUACALL wxDocManager_SetMaxDocsOpen(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxDocManager *self = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    self->SetMaxDocsOpen(n);
    return 0;
}

static int LUACALL wxDocParentFrame_destructor(lua_State *)
{
    return 0;
}

// wxDocParentFrame(wxDocManager* manager, wxFrame *parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
static int LUACALL wxDocParentFrame_constructor(lua_State *L)
{    
    wxDocParentFrame *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT("frame"));
    long style = (argCount >= 7 ? (long) getnumbertype(L, 7) : wxDEFAULT_FRAME_STYLE);
    const wxSize *size = (argCount >= 6 ? (wxSize*)getuserdatatype(L, 6, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 5 ? (wxPoint*)getuserdatatype(L, 5, s_wxPoint) : &wxDefaultPosition);
    wxString title = lua2wx(getstringtype(L, 4));
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxFrame *parent = (wxFrame*)getuserdatatype(L, 2, s_wxFrame);
    wxDocManager *manager = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = new wxDocParentFrame(manager, parent, id, title, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxDocParentFrame, returns);
    return 1;
}

static int LUACALL wxDocTemplate_destructor(lua_State *)
{
    return 0;
}

// wxDocTemplate(wxDocManager* manager, const wxString& descr, const wxString& filter, const wxString& dir, const wxString& ext, const wxString& docTypeName, const wxString& viewTypeName, wxClassInfo* docClassInfo = NULL, wxClassInfo* viewClassInfo = NULL, long flags = wxDEFAULT_TEMPLATE_FLAGS)
static int LUACALL wxDocTemplate_constructor(lua_State *L)
{    
    wxDocTemplate *returns;
    int argCount = lua_gettop(L);    
    long flags = (argCount >= 10 ? (long) getnumbertype(L, 10) : wxDEFAULT_TEMPLATE_FLAGS);
    wxClassInfo *viewClassInfo = (argCount >= 9 ? (wxClassInfo*)getuserdatatype(L, 9, s_wxClassInfo) : NULL);
    wxClassInfo *docClassInfo = (argCount >= 8 ? (wxClassInfo*)getuserdatatype(L, 8, s_wxClassInfo) : NULL);
    wxString viewTypeName = lua2wx(getstringtype(L, 7));
    wxString docTypeName = lua2wx(getstringtype(L, 6));
    wxString ext = lua2wx(getstringtype(L, 5));
    wxString dir = lua2wx(getstringtype(L, 4));
    wxString filter = lua2wx(getstringtype(L, 3));
    wxString descr = lua2wx(getstringtype(L, 2));
    wxDocManager *manager = (wxDocManager*)getuserdatatype(L, 1, s_wxDocManager);
    returns = new wxDocTemplate(manager, descr, filter, dir, ext, docTypeName, viewTypeName, docClassInfo, viewClassInfo, flags);
    pushuserdatatype(L, s_wxDocTemplate, returns);
    return 1;
}

// wxDocument * CreateDocument(const wxString& path, long flags = 0)
static int LUACALL wxDocTemplate_CreateDocument(lua_State *L)
{    
    wxDocument *returns;
    int argCount = lua_gettop(L);    
    long flags = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    wxString path = lua2wx(getstringtype(L, 2));
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->CreateDocument(path, flags);
    pushuserdatatype(L, s_wxDocument, returns);
    return 1;
}

// wxView * CreateView(wxDocument *doc, long flags = 0)
static int LUACALL wxDocTemplate_CreateView(lua_State *L)
{    
    wxView *returns;
    int argCount = lua_gettop(L);    
    long flags = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    wxDocument *doc = (wxDocument*)getuserdatatype(L, 2, s_wxDocument);
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->CreateView(doc, flags);
    pushuserdatatype(L, s_wxView, returns);
    return 1;
}

// wxString GetDefaultExtension()
static int LUACALL wxDocTemplate_GetDefaultExtension(lua_State *L)
{    
    wxString returns;
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->GetDefaultExtension();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetDescription()
static int LUACALL wxDocTemplate_GetDescription(lua_State *L)
{    
    wxString returns;
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->GetDescription();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetDirectory()
static int LUACALL wxDocTemplate_GetDirectory(lua_State *L)
{    
    wxString returns;
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->GetDirectory();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxDocManager * GetDocumentManager()
static int LUACALL wxDocTemplate_GetDocumentManager(lua_State *L)
{    
    wxDocManager *returns;
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->GetDocumentManager();
    pushuserdatatype(L, s_wxDocManager, returns);
    return 1;
}

// wxString GetDocumentName()
static int LUACALL wxDocTemplate_GetDocumentName(lua_State *L)
{    
    wxString returns;
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->GetDocumentName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetFileFilter()
static int LUACALL wxDocTemplate_GetFileFilter(lua_State *L)
{    
    wxString returns;
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->GetFileFilter();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// long GetFlags()
static int LUACALL wxDocTemplate_GetFlags(lua_State *L)
{    
    long returns;
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->GetFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetViewName()
static int LUACALL wxDocTemplate_GetViewName(lua_State *L)
{    
    wxString returns;
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->GetViewName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool IsVisible()
static int LUACALL wxDocTemplate_IsVisible(lua_State *L)
{    
    bool returns;
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    returns = self->IsVisible();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetDefaultExtension(const wxString& ext)
static int LUACALL wxDocTemplate_SetDefaultExtension(lua_State *L)
{        
    wxString ext = lua2wx(getstringtype(L, 2));
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    self->SetDefaultExtension(ext);
    return 0;
}

// void SetDescription(const wxString& descr)
static int LUACALL wxDocTemplate_SetDescription(lua_State *L)
{        
    wxString descr = lua2wx(getstringtype(L, 2));
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    self->SetDescription(descr);
    return 0;
}

// void SetDirectory(const wxString& dir)
static int LUACALL wxDocTemplate_SetDirectory(lua_State *L)
{        
    wxString dir = lua2wx(getstringtype(L, 2));
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    self->SetDirectory(dir);
    return 0;
}

// void SetDocumentManager(wxDocManager *manager)
static int LUACALL wxDocTemplate_SetDocumentManager(lua_State *L)
{        
    wxDocManager *manager = (wxDocManager*)getuserdatatype(L, 2, s_wxDocManager);
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    self->SetDocumentManager(manager);
    return 0;
}

// void SetFileFilter(const wxString& filter)
static int LUACALL wxDocTemplate_SetFileFilter(lua_State *L)
{        
    wxString filter = lua2wx(getstringtype(L, 2));
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    self->SetFileFilter(filter);
    return 0;
}

// void SetFlags(long flags)
static int LUACALL wxDocTemplate_SetFlags(lua_State *L)
{        
    long flags = (long) getnumbertype(L, 2);
    wxDocTemplate *self = (wxDocTemplate*)getuserdatatype(L, 1, s_wxDocTemplate);
    self->SetFlags(flags);
    return 0;
}

static int LUACALL wxDocument_destructor(lua_State *)
{
    return 0;
}

// wxDocument()
static int LUACALL wxDocument_constructor(lua_State *L)
{    
    wxDocument *returns;
    returns = new wxDocument();
    pushuserdatatype(L, s_wxDocument, returns);
    return 1;
}

// virtual bool AddView(wxView *view)
static int LUACALL wxDocument_AddView(lua_State *L)
{    
    bool returns;    
    wxView *view = (wxView*)getuserdatatype(L, 2, s_wxView);
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->AddView(view);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool Close()
static int LUACALL wxDocument_Close(lua_State *L)
{    
    bool returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->Close();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool DeleteAllViews()
static int LUACALL wxDocument_DeleteAllViews(lua_State *L)
{    
    bool returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->DeleteAllViews();
    lua_pushboolean(L, returns);
    return 1;
}

// wxCommandProcessor* GetCommandProcessor() const
static int LUACALL wxDocument_GetCommandProcessor(lua_State *L)
{    
    wxCommandProcessor *returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->GetCommandProcessor();
    pushuserdatatype(L, s_wxCommandProcessor, returns);
    return 1;
}

// wxDocTemplate* GetDocumentTemplate() const
static int LUACALL wxDocument_GetDocumentTemplate(lua_State *L)
{    
    wxDocTemplate *returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->GetDocumentTemplate();
    pushuserdatatype(L, s_wxDocTemplate, returns);
    return 1;
}

// wxDocManager* GetDocumentManager() const
static int LUACALL wxDocument_GetDocumentManager(lua_State *L)
{    
    wxDocManager *returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->GetDocumentManager();
    pushuserdatatype(L, s_wxDocManager, returns);
    return 1;
}

// wxString GetDocumentName() const
static int LUACALL wxDocument_GetDocumentName(lua_State *L)
{    
    wxString returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->GetDocumentName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxWindow* GetDocumentWindow() const
static int LUACALL wxDocument_GetDocumentWindow(lua_State *L)
{    
    wxWindow *returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->GetDocumentWindow();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// wxString GetFilename() const
static int LUACALL wxDocument_GetFilename(lua_State *L)
{    
    wxString returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->GetFilename();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxView * GetFirstView() const
static int LUACALL wxDocument_GetFirstView(lua_State *L)
{    
    wxView *returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->GetFirstView();
    pushuserdatatype(L, s_wxView, returns);
    return 1;
}

// virtual void GetPrintableName(wxString& name) const
static int LUACALL wxDocument_GetPrintableName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    self->GetPrintableName(name);
    return 0;
}

// wxString GetTitle() const
static int LUACALL wxDocument_GetTitle(lua_State *L)
{    
    wxString returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->GetTitle();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxList& GetViews() const
static int LUACALL wxDocument_GetViews(lua_State *L)
{
    wxList *returns;
    // get this
    wxDocument *self = ( wxDocument * ) getuserdatatype(L, 1, s_wxDocument );
    // call GetViews
    wxList &views = self->GetViews();
    returns = new wxList(views);
    // push the result datatype
    pushuserdatatype(L, s_wxList, returns );
    // return the number of parameters
    return 1;
}

// virtual bool IsModified() const
static int LUACALL wxDocument_IsModified(lua_State *L)
{    
    bool returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->IsModified();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void Modify(bool modify)
static int LUACALL wxDocument_Modify(lua_State *L)
{        
    bool modify = getbooleantype(L, 2);
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    self->Modify(modify);
    return 0;
}

// virtual void OnChangedViewList()
static int LUACALL wxDocument_OnChangedViewList(lua_State *L)
{    
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    self->OnChangedViewList();
    return 0;
}

// virtual bool OnCloseDocument()
static int LUACALL wxDocument_OnCloseDocument(lua_State *L)
{    
    bool returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->OnCloseDocument();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool OnCreate(const wxString& path, long flags)
static int LUACALL wxDocument_OnCreate(lua_State *L)
{    
    bool returns;    
    long flags = (long) getnumbertype(L, 3);
    wxString path = lua2wx(getstringtype(L, 2));
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->OnCreate(path, flags);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual wxCommandProcessor* OnCreateCommandProcessor()
static int LUACALL wxDocument_OnCreateCommandProcessor(lua_State *L)
{    
    wxCommandProcessor *returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->OnCreateCommandProcessor();
    pushuserdatatype(L, s_wxCommandProcessor, returns);
    return 1;
}

// virtual bool OnNewDocument()
static int LUACALL wxDocument_OnNewDocument(lua_State *L)
{    
    bool returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->OnNewDocument();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool OnOpenDocument(const wxString& filename)
static int LUACALL wxDocument_OnOpenDocument(lua_State *L)
{    
    bool returns;    
    wxString filename = lua2wx(getstringtype(L, 2));
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->OnOpenDocument(filename);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool OnSaveDocument(const wxString& filename)
static int LUACALL wxDocument_OnSaveDocument(lua_State *L)
{    
    bool returns;    
    wxString filename = lua2wx(getstringtype(L, 2));
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->OnSaveDocument(filename);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool OnSaveModified()
static int LUACALL wxDocument_OnSaveModified(lua_State *L)
{    
    bool returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->OnSaveModified();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool RemoveView(wxView* view)
static int LUACALL wxDocument_RemoveView(lua_State *L)
{    
    bool returns;    
    wxView *view = (wxView*)getuserdatatype(L, 2, s_wxView);
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->RemoveView(view);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool Save()
static int LUACALL wxDocument_Save(lua_State *L)
{    
    bool returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->Save();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool SaveAs()
static int LUACALL wxDocument_SaveAs(lua_State *L)
{    
    bool returns;
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    returns = self->SaveAs();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void SetCommandProcessor(wxCommandProcessor *processor)
static int LUACALL wxDocument_SetCommandProcessor(lua_State *L)
{        
    wxCommandProcessor *processor = (wxCommandProcessor*)getuserdatatype(L, 2, s_wxCommandProcessor);
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    self->SetCommandProcessor(processor);
    return 0;
}

// void SetDocumentName(const wxString& name)
static int LUACALL wxDocument_SetDocumentName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    self->SetDocumentName(name);
    return 0;
}

// void SetDocumentTemplate(wxDocTemplate* templ)
static int LUACALL wxDocument_SetDocumentTemplate(lua_State *L)
{        
    wxDocTemplate *templ = (wxDocTemplate*)getuserdatatype(L, 2, s_wxDocTemplate);
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    self->SetDocumentTemplate(templ);
    return 0;
}

// void SetFilename(const wxString& filename, bool notifyViews = FALSE)
static int LUACALL wxDocument_SetFilename(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool notifyViews = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    wxString filename = lua2wx(getstringtype(L, 2));
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    self->SetFilename(filename, notifyViews);
    return 0;
}

// void SetTitle(const wxString& title)
static int LUACALL wxDocument_SetTitle(lua_State *L)
{        
    wxString title = lua2wx(getstringtype(L, 2));
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    self->SetTitle(title);
    return 0;
}

// void UpdateAllViews(wxView* sender = NULL, wxObject* hint = NULL)
static int LUACALL wxDocument_UpdateAllViews(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxObject *hint = (argCount >= 3 ? (wxObject*)getuserdatatype(L, 3, s_wxObject) : NULL);
    wxView *sender = (argCount >= 2 ? (wxView*)getuserdatatype(L, 2, s_wxView) : NULL);
    wxDocument *self = (wxDocument*)getuserdatatype(L, 1, s_wxDocument);
    self->UpdateAllViews(sender, hint);
    return 0;
}

static int LUACALL wxView_destructor(lua_State *)
{
    return 0;
}

// virtual void Activate(bool activate)
static int LUACALL wxView_Activate(lua_State *L)
{        
    bool activate = getbooleantype(L, 2);
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    self->Activate(activate);
    return 0;
}

// virtual bool Close(bool deleteWindow = TRUE)
static int LUACALL wxView_Close(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool deleteWindow = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    returns = self->Close(deleteWindow);
    lua_pushboolean(L, returns);
    return 1;
}

// wxDocument* GetDocument() const
static int LUACALL wxView_GetDocument(lua_State *L)
{    
    wxDocument *returns;
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    returns = self->GetDocument();
    pushuserdatatype(L, s_wxDocument, returns);
    return 1;
}

// wxDocManager* GetDocumentManager() const
static int LUACALL wxView_GetDocumentManager(lua_State *L)
{    
    wxDocManager *returns;
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    returns = self->GetDocumentManager();
    pushuserdatatype(L, s_wxDocManager, returns);
    return 1;
}

// wxWindow * GetFrame()
static int LUACALL wxView_GetFrame(lua_State *L)
{    
    wxWindow *returns;
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    returns = self->GetFrame();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// wxString GetViewName() const
static int LUACALL wxView_GetViewName(lua_State *L)
{    
    wxString returns;
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    returns = self->GetViewName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// virtual void OnActivateView(bool activate, wxView *activeView, wxView *deactiveView)
static int LUACALL wxView_OnActivateView(lua_State *L)
{        
    wxView *deactiveView = (wxView*)getuserdatatype(L, 4, s_wxView);
    wxView *activeView = (wxView*)getuserdatatype(L, 3, s_wxView);
    bool activate = getbooleantype(L, 2);
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    self->OnActivateView(activate, activeView, deactiveView);
    return 0;
}

// virtual void OnChangeFilename()
static int LUACALL wxView_OnChangeFilename(lua_State *L)
{    
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    self->OnChangeFilename();
    return 0;
}

// virtual bool OnClose(bool deleteWindow)
static int LUACALL wxView_OnClose(lua_State *L)
{    
    bool returns;    
    bool deleteWindow = getbooleantype(L, 2);
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    returns = self->OnClose(deleteWindow);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool OnCreate(wxDocument* doc, long flags)
static int LUACALL wxView_OnCreate(lua_State *L)
{    
    bool returns;    
    long flags = (long) getnumbertype(L, 3);
    wxDocument *doc = (wxDocument*)getuserdatatype(L, 2, s_wxDocument);
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    returns = self->OnCreate(doc, flags);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual wxPrintout* OnCreatePrintout()
static int LUACALL wxView_OnCreatePrintout(lua_State *L)
{    
    wxPrintout *returns;
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    returns = self->OnCreatePrintout();
    pushuserdatatype(L, s_wxPrintout, returns);
    return 1;
}

// virtual void OnUpdate(wxView* sender, wxObject* hint)
static int LUACALL wxView_OnUpdate(lua_State *L)
{        
    wxObject *hint = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    wxView *sender = (wxView*)getuserdatatype(L, 2, s_wxView);
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    self->OnUpdate(sender, hint);
    return 0;
}

// void SetDocument(wxDocument* doc)
static int LUACALL wxView_SetDocument(lua_State *L)
{        
    wxDocument *doc = (wxDocument*)getuserdatatype(L, 2, s_wxDocument);
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    self->SetDocument(doc);
    return 0;
}

// void SetFrame(wxFrame* frame)
static int LUACALL wxView_SetFrame(lua_State *L)
{        
    wxFrame *frame = (wxFrame*)getuserdatatype(L, 2, s_wxFrame);
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    self->SetFrame(frame);
    return 0;
}

// void SetViewName(const wxString& name)
static int LUACALL wxView_SetViewName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxView *self = (wxView*)getuserdatatype(L, 1, s_wxView);
    self->SetViewName(name);
    return 0;
}

static int LUACALL wxCommandProcessor_destructor(lua_State *)
{
    return 0;
}

// wxCommandProcessor(int maxCommands = -1)
static int LUACALL wxCommandProcessor_constructor(lua_State *L)
{    
    wxCommandProcessor *returns;
    int argCount = lua_gettop(L);    
    int maxCommands = (argCount >= 1 ? (int) getnumbertype(L, 1) : -1);
    returns = new wxCommandProcessor(maxCommands);
    pushuserdatatype(L, s_wxCommandProcessor, returns);
    return 1;
}

// virtual bool Submit(wxCommand *command, bool storeIt = TRUE)
static int LUACALL wxCommandProcessor_Submit(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool storeIt = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    wxCommand *command = (wxCommand*)getuserdatatype(L, 2, s_wxCommand);
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    returns = self->Submit(command, storeIt);
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 virtual void Store(wxCommand *command)
static int LUACALL wxCommandProcessor_Store(lua_State *L)
{        
    wxCommand *command = (wxCommand*)getuserdatatype(L, 2, s_wxCommand);
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    self->Store(command);
    return 0;
}

// virtual bool Undo()
static int LUACALL wxCommandProcessor_Undo(lua_State *L)
{    
    bool returns;
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    returns = self->Undo();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool Redo()
static int LUACALL wxCommandProcessor_Redo(lua_State *L)
{    
    bool returns;
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    returns = self->Redo();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool CanUndo() const
static int LUACALL wxCommandProcessor_CanUndo(lua_State *L)
{    
    bool returns;
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    returns = self->CanUndo();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool CanRedo() const
static int LUACALL wxCommandProcessor_CanRedo(lua_State *L)
{    
    bool returns;
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    returns = self->CanRedo();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void Initialize()
static int LUACALL wxCommandProcessor_Initialize(lua_State *L)
{    
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    self->Initialize();
    return 0;
}

// virtual void SetMenuStrings()
static int LUACALL wxCommandProcessor_SetMenuStrings(lua_State *L)
{    
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    self->SetMenuStrings();
    return 0;
}

// void SetEditMenu(wxMenu *menu)
static int LUACALL wxCommandProcessor_SetEditMenu(lua_State *L)
{        
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    self->SetEditMenu(menu);
    return 0;
}

// wxMenu *GetEditMenu() const
static int LUACALL wxCommandProcessor_GetEditMenu(lua_State *L)
{    
    wxMenu *returns;
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    returns = self->GetEditMenu();
    pushuserdatatype(L, s_wxMenu, returns);
    return 1;
}

// wxList& GetCommands() const
static int LUACALL wxCommandProcessor_GetCommands(lua_State *L)
{
    wxList *returns;
    // get this
    wxCommandProcessor *self = ( wxCommandProcessor * ) getuserdatatype(L, 1, s_wxCommandProcessor );
    // call GetCommands
    wxList &commands = self->GetCommands();
    returns = new wxList(commands);
    // push the result datatype
    pushuserdatatype(L, s_wxList, returns );
    // return the number of parameters
    return 1;
}

// ~%wxver22 wxCommand *GetCurrentCommand() const
static int LUACALL wxCommandProcessor_GetCurrentCommand(lua_State *L)
{    
    wxCommand *returns;
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    returns = self->GetCurrentCommand();
    pushuserdatatype(L, s_wxCommand, returns);
    return 1;
}

// int GetMaxCommands() const
static int LUACALL wxCommandProcessor_GetMaxCommands(lua_State *L)
{    
    int returns;
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    returns = self->GetMaxCommands();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual void ClearCommands()
static int LUACALL wxCommandProcessor_ClearCommands(lua_State *L)
{    
    wxCommandProcessor *self = (wxCommandProcessor*)getuserdatatype(L, 1, s_wxCommandProcessor);
    self->ClearCommands();
    return 0;
}

static int LUACALL wxCommand_destructor(lua_State *)
{
    return 0;
}

// bool CanUndo()
static int LUACALL wxCommand_CanUndo(lua_State *L)
{    
    bool returns;
    wxCommand *self = (wxCommand*)getuserdatatype(L, 1, s_wxCommand);
    returns = self->CanUndo();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Do()
static int LUACALL wxCommand_Do(lua_State *L)
{    
    bool returns;
    wxCommand *self = (wxCommand*)getuserdatatype(L, 1, s_wxCommand);
    returns = self->Do();
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetName()
static int LUACALL wxCommand_GetName(lua_State *L)
{    
    wxString returns;
    wxCommand *self = (wxCommand*)getuserdatatype(L, 1, s_wxCommand);
    returns = self->GetName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool Undo()
static int LUACALL wxCommand_Undo(lua_State *L)
{    
    bool returns;
    wxCommand *self = (wxCommand*)getuserdatatype(L, 1, s_wxCommand);
    returns = self->Undo();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxFileHistory_destructor(lua_State *)
{
    return 0;
}

// wxFileHistory(int maxFiles = 9)
static int LUACALL wxFileHistory_constructor(lua_State *L)
{    
    wxFileHistory *returns;
    int argCount = lua_gettop(L);    
    int maxFiles = (argCount >= 1 ? (int) getnumbertype(L, 1) : 9);
    returns = new wxFileHistory(maxFiles);
    pushuserdatatype(L, s_wxFileHistory, returns);
    return 1;
}

// void AddFileToHistory(const wxString& filename)
static int LUACALL wxFileHistory_AddFileToHistory(lua_State *L)
{        
    wxString filename = lua2wx(getstringtype(L, 2));
    wxFileHistory *self = (wxFileHistory*)getuserdatatype(L, 1, s_wxFileHistory);
    self->AddFileToHistory(filename);
    return 0;
}

// void AddFilesToMenu()
static int LUACALL wxFileHistory_AddFilesToMenu(lua_State *L)
{    
    wxFileHistory *self = (wxFileHistory*)getuserdatatype(L, 1, s_wxFileHistory);
    self->AddFilesToMenu();
    return 0;
}

// %rename AddFilesToGivenMenu void AddFilesToMenu(wxMenu* menu)
static int LUACALL wxFileHistory_AddFilesToGivenMenu(lua_State *L)
{        
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxFileHistory *self = (wxFileHistory*)getuserdatatype(L, 1, s_wxFileHistory);
    self->AddFilesToMenu(menu);
    return 0;
}

// wxString GetHistoryFile(int index) const
static int LUACALL wxFileHistory_GetHistoryFile(lua_State *L)
{    
    wxString returns;    
    int index = (int) getnumbertype(L, 2);
    wxFileHistory *self = (wxFileHistory*)getuserdatatype(L, 1, s_wxFileHistory);
    returns = self->GetHistoryFile(index);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetMaxFiles() const
static int LUACALL wxFileHistory_GetMaxFiles(lua_State *L)
{    
    int returns;
    wxFileHistory *self = (wxFileHistory*)getuserdatatype(L, 1, s_wxFileHistory);
    returns = self->GetMaxFiles();
    lua_pushnumber(L, returns);
    return 1;
}

// void Load(wxConfigBase& config)
static int LUACALL wxFileHistory_Load(lua_State *L)
{        
    wxConfigBase *config = (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase);
    wxFileHistory *self = (wxFileHistory*)getuserdatatype(L, 1, s_wxFileHistory);
    self->Load(*config);
    return 0;
}

// void RemoveMenu(wxMenu* menu)
static int LUACALL wxFileHistory_RemoveMenu(lua_State *L)
{        
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxFileHistory *self = (wxFileHistory*)getuserdatatype(L, 1, s_wxFileHistory);
    self->RemoveMenu(menu);
    return 0;
}

// void Save(wxConfigBase& config)
static int LUACALL wxFileHistory_Save(lua_State *L)
{        
    wxConfigBase *config = (wxConfigBase*)getuserdatatype(L, 2, s_wxConfigBase);
    wxFileHistory *self = (wxFileHistory*)getuserdatatype(L, 1, s_wxFileHistory);
    self->Save(*config);
    return 0;
}

// void UseMenu(wxMenu* menu)
static int LUACALL wxFileHistory_UseMenu(lua_State *L)
{        
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxFileHistory *self = (wxFileHistory*)getuserdatatype(L, 1, s_wxFileHistory);
    self->UseMenu(menu);
    return 0;
}

static int LUACALL wxMenu_destructor(lua_State *)
{
    return 0;
}

// wxMenu(const wxString& title = "", long style = 0)
static int LUACALL wxMenu_constructor(lua_State *L)
{    
    wxMenu *returns;
    int argCount = lua_gettop(L);    
    long style = (argCount >= 2 ? (long) getnumbertype(L, 2) : 0);
    wxString title = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxT(""));
    returns = new wxMenu(title, style);
    pushuserdatatype(L, s_wxMenu, returns);
    return 1;
}

// %constructor wxCreateMenu(int table, const wxString& title = "", long style = 0)
static int LUACALL wxCreateMenu_constructor(lua_State *L)
{
    wxMenu *returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    // const wxString& title = ""
    wxString title = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT(""));
    // int table
    if (lua_istable(L, 1))
    {
        // call constructor
        returns = new wxMenu(title, style);
        int idx, count = luaL_getn(L, 1);
        for (idx = 1; idx <= count; ++idx)
        {
            lua_pushnumber(L, idx);
            lua_gettable(L, -2);
            if (lua_istable(L, -1))
            {
                lua_pushnumber(L, 1);
                lua_gettable(L, -2);
                if (lua_isnil(L, -1))
                {
                    returns->AppendSeparator();
                    lua_pop(L, 1);
                }
                else
                {
                    wxString helpText;
                    wxString menuText;
                    int iValue = (int) lua_tonumber(L, -1);
                    lua_pop(L, 1);
                    lua_pushnumber(L, 2);
                    lua_gettable(L, -2);
                    menuText = lua2wx(lua_tostring(L, -1));
                    lua_pop(L, 1);
                    lua_pushnumber(L, 3);
                    lua_gettable(L, -2);
                    if (lua_isstring(L, -1))
                        helpText = lua2wx(lua_tostring(L, -1));
                    lua_pop(L, 1);
                    returns->Append(iValue, menuText, helpText);
                }
            }
            lua_pop(L, 1);
        }
        // push the constructed class pointer
        pushuserdatatype(L, s_wxMenu, returns );
        // return the number of parameters
        return 1;
    }
    return 0;
}

// void Append(int id, const wxString& item, const wxString& helpString = "", const bool checkable = FALSE)
static int LUACALL wxMenu_Append(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const bool checkable = (argCount >= 5 ? getbooleantype(L, 5) : FALSE);
    wxString helpString = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxT(""));
    wxString item = lua2wx(getstringtype(L, 3));
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Append(id, item, helpString, checkable);
    return 0;
}

// %rename AppendMenu void Append(int id, const wxString& item, wxMenu *subMenu, const wxString& helpString = "")
static int LUACALL wxMenu_AppendMenu(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxString helpString = (argCount >= 5 ? lua2wx(getstringtype(L, 5)) : wxT(""));
    wxMenu *subMenu = (wxMenu*)getuserdatatype(L, 4, s_wxMenu);
    wxString item = lua2wx(getstringtype(L, 3));
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Append(id, item, subMenu, helpString);
    return 0;
}

// %rename AppendItem void Append(wxMenuItem* menuItem)
static int LUACALL wxMenu_AppendItem(lua_State *L)
{        
    wxMenuItem *menuItem = (wxMenuItem*)getuserdatatype(L, 2, s_wxMenuItem);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Append(menuItem);
    return 0;
}

// void AppendSeparator()
static int LUACALL wxMenu_AppendSeparator(lua_State *L)
{    
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->AppendSeparator();
    return 0;
}

// void Break()
static int LUACALL wxMenu_Break(lua_State *L)
{    
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Break();
    return 0;
}

// void Check(int id, const bool check)
static int LUACALL wxMenu_Check(lua_State *L)
{        
    const bool check = getbooleantype(L, 3);
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Check(id, check);
    return 0;
}

// void Delete(int id)
static int LUACALL wxMenu_Delete(lua_State *L)
{        
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Delete(id);
    return 0;
}

// %rename DeleteItem void Delete(wxMenuItem *item)
static int LUACALL wxMenu_DeleteItem(lua_State *L)
{        
    wxMenuItem *item = (wxMenuItem*)getuserdatatype(L, 2, s_wxMenuItem);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Delete(item);
    return 0;
}

// void Destroy(int id)
static int LUACALL wxMenu_Destroy(lua_State *L)
{        
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Destroy(id);
    return 0;
}

// %rename DestroyMenuItem void Destroy(wxMenuItem *item)
static int LUACALL wxMenu_DestroyMenuItem(lua_State *L)
{        
    wxMenuItem *item = (wxMenuItem*)getuserdatatype(L, 2, s_wxMenuItem);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Destroy(item);
    return 0;
}

// void Enable(int id, const bool enable)
static int LUACALL wxMenu_Enable(lua_State *L)
{        
    const bool enable = getbooleantype(L, 3);
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->Enable(id, enable);
    return 0;
}

// int FindItem(const wxString& itemString) const
static int LUACALL wxMenu_FindItem(lua_State *L)
{    
    int returns;    
    wxString itemString = lua2wx(getstringtype(L, 2));
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = self->FindItem(itemString);
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetHelpString(int id) const
static int LUACALL wxMenu_GetHelpString(lua_State *L)
{    
    wxString returns;    
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = self->GetHelpString(id);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetLabel(int id) const
static int LUACALL wxMenu_GetLabel(lua_State *L)
{    
    wxString returns;    
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = self->GetLabel(id);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// size_t GetMenuItemCount() const
static int LUACALL wxMenu_GetMenuItemCount(lua_State *L)
{    
    size_t returns;
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = self->GetMenuItemCount();
    lua_pushnumber(L, returns);
    return 1;
}

// wxMenuItemList& GetMenuItems() const
static int LUACALL wxMenu_GetMenuItems(lua_State *L)
{    
    wxMenuItemList *returns;
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = &self->GetMenuItems();
    pushuserdatatype(L, s_wxMenuItemList, returns);
    return 1;
}

// wxString GetTitle() const
static int LUACALL wxMenu_GetTitle(lua_State *L)
{    
    wxString returns;
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = self->GetTitle();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool IsChecked(int id) const
static int LUACALL wxMenu_IsChecked(lua_State *L)
{    
    bool returns;    
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = self->IsChecked(id);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEnabled(int id) const
static int LUACALL wxMenu_IsEnabled(lua_State *L)
{    
    bool returns;    
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = self->IsEnabled(id);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename RemoveById wxMenuItem * Remove(int id)
static int LUACALL wxMenu_RemoveById(lua_State *L)
{    
    wxMenuItem *returns;    
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = self->Remove(id);
    pushuserdatatype(L, s_wxMenuItem, returns);
    return 1;
}

// wxMenuItem * Remove(wxMenuItem *item)
static int LUACALL wxMenu_Remove(lua_State *L)
{    
    wxMenuItem *returns;    
    wxMenuItem *item = (wxMenuItem*)getuserdatatype(L, 2, s_wxMenuItem);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    returns = self->Remove(item);
    pushuserdatatype(L, s_wxMenuItem, returns);
    return 1;
}

// void SetHelpString(int id, const wxString& helpString)
static int LUACALL wxMenu_SetHelpString(lua_State *L)
{        
    wxString helpString = lua2wx(getstringtype(L, 3));
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->SetHelpString(id, helpString);
    return 0;
}

// void SetLabel(int id, const wxString& label)
static int LUACALL wxMenu_SetLabel(lua_State *L)
{        
    wxString label = lua2wx(getstringtype(L, 3));
    int id = (int) getnumbertype(L, 2);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->SetLabel(id, label);
    return 0;
}

// void SetTitle(const wxString& title)
static int LUACALL wxMenu_SetTitle(lua_State *L)
{        
    wxString title = lua2wx(getstringtype(L, 2));
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->SetTitle(title);
    return 0;
}

// void UpdateUI(wxEvtHandler* source = NULL) const
static int LUACALL wxMenu_UpdateUI(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxEvtHandler *source = (argCount >= 2 ? (wxEvtHandler*)getuserdatatype(L, 2, s_wxEvtHandler) : NULL);
    wxMenu *self = (wxMenu*)getuserdatatype(L, 1, s_wxMenu);
    self->UpdateUI(source);
    return 0;
}

static int LUACALL wxMenuBar_destructor(lua_State *)
{
    return 0;
}

// wxMenuBar(long style = 0)
static int LUACALL wxMenuBar_constructor(lua_State *L)
{    
    wxMenuBar *returns;
    int argCount = lua_gettop(L);    
    long style = (argCount >= 1 ? (long) getnumbertype(L, 1) : 0);
    returns = new wxMenuBar(style);
    pushuserdatatype(L, s_wxMenuBar, returns);
    return 1;
}

// bool Append(wxMenu *menu, const wxString& title)
static int LUACALL wxMenuBar_Append(lua_State *L)
{    
    bool returns;    
    wxString title = lua2wx(getstringtype(L, 3));
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 2, s_wxMenu);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->Append(menu, title);
    lua_pushboolean(L, returns);
    return 1;
}

// void Check(int id, const bool check)
static int LUACALL wxMenuBar_Check(lua_State *L)
{        
    const bool check = getbooleantype(L, 3);
    int id = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    self->Check(id, check);
    return 0;
}

// void Enable(int id, const bool enable)
static int LUACALL wxMenuBar_Enable(lua_State *L)
{        
    const bool enable = getbooleantype(L, 3);
    int id = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    self->Enable(id, enable);
    return 0;
}

// void EnableTop(int pos, const bool enable)
static int LUACALL wxMenuBar_EnableTop(lua_State *L)
{        
    const bool enable = getbooleantype(L, 3);
    int pos = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    self->EnableTop(pos, enable);
    return 0;
}

// int FindMenu(const wxString& title) const
static int LUACALL wxMenuBar_FindMenu(lua_State *L)
{    
    int returns;    
    wxString title = lua2wx(getstringtype(L, 2));
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->FindMenu(title);
    lua_pushnumber(L, returns);
    return 1;
}

// int FindMenuItem(const wxString& menuString, const wxString& itemString) const
static int LUACALL wxMenuBar_FindMenuItem(lua_State *L)
{    
    int returns;    
    wxString itemString = lua2wx(getstringtype(L, 3));
    wxString menuString = lua2wx(getstringtype(L, 2));
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->FindMenuItem(menuString, itemString);
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetHelpString(int id) const
static int LUACALL wxMenuBar_GetHelpString(lua_State *L)
{    
    wxString returns;    
    int id = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->GetHelpString(id);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetLabel(int id) const
static int LUACALL wxMenuBar_GetLabel(lua_State *L)
{    
    wxString returns;    
    int id = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->GetLabel(id);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetLabelTop(int pos) const
static int LUACALL wxMenuBar_GetLabelTop(lua_State *L)
{    
    wxString returns;    
    int pos = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->GetLabelTop(pos);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxMenu* GetMenu(int menuIndex) const
static int LUACALL wxMenuBar_GetMenu(lua_State *L)
{    
    wxMenu *returns;    
    int menuIndex = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->GetMenu(menuIndex);
    pushuserdatatype(L, s_wxMenu, returns);
    return 1;
}

// int GetMenuCount() const
static int LUACALL wxMenuBar_GetMenuCount(lua_State *L)
{    
    int returns;
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->GetMenuCount();
    lua_pushnumber(L, returns);
    return 1;
}

// bool Insert(size_t pos, wxMenu *menu, const wxString& title)
static int LUACALL wxMenuBar_Insert(lua_State *L)
{    
    bool returns;    
    wxString title = lua2wx(getstringtype(L, 4));
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 3, s_wxMenu);
    size_t pos = (size_t) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->Insert(pos, menu, title);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsChecked(int id) const
static int LUACALL wxMenuBar_IsChecked(lua_State *L)
{    
    bool returns;    
    int id = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->IsChecked(id);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEnabled(int id) const
static int LUACALL wxMenuBar_IsEnabled(lua_State *L)
{    
    bool returns;    
    int id = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->IsEnabled(id);
    lua_pushboolean(L, returns);
    return 1;
}

// void Refresh()
static int LUACALL wxMenuBar_Refresh(lua_State *L)
{    
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    self->Refresh();
    return 0;
}

// wxMenu * Remove(size_t pos)
static int LUACALL wxMenuBar_Remove(lua_State *L)
{    
    wxMenu *returns;    
    size_t pos = (size_t) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->Remove(pos);
    pushuserdatatype(L, s_wxMenu, returns);
    return 1;
}

// wxMenu * Replace(size_t pos, wxMenu *menu, const wxString& title)
static int LUACALL wxMenuBar_Replace(lua_State *L)
{    
    wxMenu *returns;    
    wxString title = lua2wx(getstringtype(L, 4));
    wxMenu *menu = (wxMenu*)getuserdatatype(L, 3, s_wxMenu);
    size_t pos = (size_t) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    returns = self->Replace(pos, menu, title);
    pushuserdatatype(L, s_wxMenu, returns);
    return 1;
}

// void SetHelpString(int id, const wxString& helpString)
static int LUACALL wxMenuBar_SetHelpString(lua_State *L)
{        
    wxString helpString = lua2wx(getstringtype(L, 3));
    int id = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    self->SetHelpString(id, helpString);
    return 0;
}

// void SetLabel(int id, const wxString& label)
static int LUACALL wxMenuBar_SetLabel(lua_State *L)
{        
    wxString label = lua2wx(getstringtype(L, 3));
    int id = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    self->SetLabel(id, label);
    return 0;
}

// void SetLabelTop(int pos, const wxString& label)
static int LUACALL wxMenuBar_SetLabelTop(lua_State *L)
{        
    wxString label = lua2wx(getstringtype(L, 3));
    int pos = (int) getnumbertype(L, 2);
    wxMenuBar *self = (wxMenuBar*)getuserdatatype(L, 1, s_wxMenuBar);
    self->SetLabelTop(pos, label);
    return 0;
}

static int LUACALL wxMenuItem_destructor(lua_State *)
{
    return 0;
}

// wxMenuItem(wxMenu *parentMenu = NULL, int id = wxID_SEPARATOR, const wxString& text = wxEmptyString, const wxString& help = wxEmptyString, wxItemKind = 0, wxMenu *subMenu = NULL)
static int LUACALL wxMenuItem_constructor(lua_State *L)
{
    wxMenuItem *returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxMenu *subMenu = NULL
    wxMenu *subMenu = (argCount >= 6 ? (wxMenu *) getuserdatatype(L, 6, s_wxMenu) : NULL);
    // bool isCheckable = FALSE
    // This used to be a bool instead of a wxItemKind
    wxItemKind itemkind = (wxItemKind)(argCount >= 5 ? getenumerationtype(L, 5) : wxITEM_NORMAL);
    // const wxString& help = wxEmptyString
    wxString help = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxString(wxEmptyString));
    // const wxString& text = wxEmptyString
    wxString text = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    // int id = wxID_SEPARATOR
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxID_SEPARATOR);
    // wxMenu *parentMenu = NULL
    wxMenu *parentMenu = (argCount >= 1 ? (wxMenu *) getuserdatatype(L, 1, s_wxMenu) : NULL);
    // call constructor
    returns = new wxMenuItem(parentMenu, id, text, help, itemkind, subMenu);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxMenuItem, returns );
    // return the number of parameters
    return 1;
}

// void Check(bool check)
static int LUACALL wxMenuItem_Check(lua_State *L)
{        
    bool check = getbooleantype(L, 2);
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    self->Check(check);
    return 0;
}

// void Enable(bool enable)
static int LUACALL wxMenuItem_Enable(lua_State *L)
{        
    bool enable = getbooleantype(L, 2);
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    self->Enable(enable);
    return 0;
}

// %win wxColour& GetBackgroundColour() const
static int LUACALL wxMenuItem_GetBackgroundColour(lua_State *L)
{    
    wxColour *returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = &self->GetBackgroundColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// %win wxFont& GetFont() const
static int LUACALL wxMenuItem_GetFont(lua_State *L)
{    
    wxFont *returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = &self->GetFont();
    pushuserdatatype(L, s_wxFont, returns);
    return 1;
}

// wxString GetHelp() const
static int LUACALL wxMenuItem_GetHelp(lua_State *L)
{    
    wxString returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->GetHelp();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetId() const
static int LUACALL wxMenuItem_GetId(lua_State *L)
{    
    int returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->GetId();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetLabel() const
static int LUACALL wxMenuItem_GetLabel(lua_State *L)
{    
    wxString returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->GetLabel();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// static wxString GetLabelFromText(const wxString& text)
static int LUACALL wxMenuItem_GetLabelFromText(lua_State *L)
{    
    wxString returns;    
    wxString text = lua2wx(getstringtype(L, 2));
    returns = wxMenuItem::GetLabelFromText(text);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %win int GetMarginWidth() const
static int LUACALL wxMenuItem_GetMarginWidth(lua_State *L)
{    
    int returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->GetMarginWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetText() const
static int LUACALL wxMenuItem_GetText(lua_State *L)
{    
    wxString returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->GetText();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxMenu* GetSubMenu() const
static int LUACALL wxMenuItem_GetSubMenu(lua_State *L)
{    
    wxMenu *returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->GetSubMenu();
    pushuserdatatype(L, s_wxMenu, returns);
    return 1;
}

// %win wxColour& GetTextColour() const
static int LUACALL wxMenuItem_GetTextColour(lua_State *L)
{    
    wxColour *returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = &self->GetTextColour();
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// bool IsCheckable() const
static int LUACALL wxMenuItem_IsCheckable(lua_State *L)
{    
    bool returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->IsCheckable();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsChecked() const
static int LUACALL wxMenuItem_IsChecked(lua_State *L)
{    
    bool returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->IsChecked();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEnabled() const
static int LUACALL wxMenuItem_IsEnabled(lua_State *L)
{    
    bool returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->IsEnabled();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsSeparator() const
static int LUACALL wxMenuItem_IsSeparator(lua_State *L)
{    
    bool returns;
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    returns = self->IsSeparator();
    lua_pushboolean(L, returns);
    return 1;
}

// %win void SetBackgroundColour(const wxColour& colour) const
static int LUACALL wxMenuItem_SetBackgroundColour(lua_State *L)
{        
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    self->SetBackgroundColour(*colour);
    return 0;
}

// %win void SetBitmaps(const wxBitmap& checked, const wxBitmap& unchecked = wxNullBitmap) const
static int LUACALL wxMenuItem_SetBitmaps(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const wxBitmap *unchecked = (argCount >= 3 ? (wxBitmap*)getuserdatatype(L, 3, s_wxBitmap) : &wxNullBitmap);
    const wxBitmap *checked = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    self->SetBitmaps(*checked, *unchecked);
    return 0;
}

// %win void SetFont(const wxFont& font) const
static int LUACALL wxMenuItem_SetFont(lua_State *L)
{        
    const wxFont *font = (wxFont*)getuserdatatype(L, 2, s_wxFont);
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    self->SetFont(*font);
    return 0;
}

// void SetHelp(const wxString& helpString) const
static int LUACALL wxMenuItem_SetHelp(lua_State *L)
{        
    wxString helpString = lua2wx(getstringtype(L, 2));
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    self->SetHelp(helpString);
    return 0;
}

// %win void SetMarginWidth(int width) const
static int LUACALL wxMenuItem_SetMarginWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    self->SetMarginWidth(width);
    return 0;
}

// %win void SetTextColour(const wxColour& colour) const
static int LUACALL wxMenuItem_SetTextColour(lua_State *L)
{        
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxMenuItem *self = (wxMenuItem*)getuserdatatype(L, 1, s_wxMenuItem);
    self->SetTextColour(*colour);
    return 0;
}

static int LUACALL wxMenuItemList_destructor(lua_State *)
{
    return 0;
}

// void Clear()
static int LUACALL wxMenuItemList_Clear(lua_State *L)
{    
    wxMenuItemList *self = (wxMenuItemList*)getuserdatatype(L, 1, s_wxMenuItemList);
    self->Clear();
    return 0;
}

// void DeleteContents(bool destroy)
static int LUACALL wxMenuItemList_DeleteContents(lua_State *L)
{        
    bool destroy = getbooleantype(L, 2);
    wxMenuItemList *self = (wxMenuItemList*)getuserdatatype(L, 1, s_wxMenuItemList);
    self->DeleteContents(destroy);
    return 0;
}

// bool DeleteObject(wxMenuItem *pMenuItem)
static int LUACALL wxMenuItemList_DeleteObject(lua_State *L)
{    
    bool returns;    
    wxMenuItem *pMenuItem = (wxMenuItem*)getuserdatatype(L, 2, s_wxMenuItem);
    wxMenuItemList *self = (wxMenuItemList*)getuserdatatype(L, 1, s_wxMenuItemList);
    returns = self->DeleteObject(pMenuItem);
    lua_pushboolean(L, returns);
    return 1;
}

// int     GetCount() const
static int LUACALL wxMenuItemList_GetCount(lua_State *L)
{    
    int returns;
    wxMenuItemList *self = (wxMenuItemList*)getuserdatatype(L, 1, s_wxMenuItemList);
    returns = self->GetCount();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxMenuEvent_destructor(lua_State *L)
{
    wxMenuEvent * self = (wxMenuEvent*)getuserdatatype(L, 1, s_wxMenuEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxMenuEvent_Delete(lua_State *L)
{
    wxMenuEvent * self = (wxMenuEvent*)getuserdatatype(L, 1, s_wxMenuEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxMenuEvent(wxEventType type = wxEVT_NULL, int id = 0)
static int LUACALL wxMenuEvent_constructor(lua_State *L)
{    
    wxMenuEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxEventType type = (argCount >= 1 ? (wxEventType) getnumbertype(L, 1) : wxEVT_NULL);
    returns = new wxMenuEvent(type, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxMenuEvent, returns);
    return 1;
}

// int GetMenuId() const
static int LUACALL wxMenuEvent_GetMenuId(lua_State *L)
{    
    int returns;
    wxMenuEvent *self = (wxMenuEvent*)getuserdatatype(L, 1, s_wxMenuEvent);
    returns = self->GetMenuId();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxToolBarBase_destructor(lua_State *)
{
    return 0;
}

// wxToolBarToolBase *AddControl(wxControl *control)
static int LUACALL wxToolBarBase_AddControl(lua_State *L)
{    
    wxToolBarToolBase *returns;    
    wxControl *control = (wxControl*)getuserdatatype(L, 2, s_wxControl);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->AddControl(control);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// wxToolBarToolBase *AddSeparator()
static int LUACALL wxToolBarBase_AddSeparator(lua_State *L)
{    
    wxToolBarToolBase *returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->AddSeparator();
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// wxToolBarToolBase *AddTool(int id, const wxBitmap& bitmap, const wxBitmap& pushedBitmap = wxNullBitmap, bool isToggle = FALSE, wxObject *clientData = NULL, const wxString& longHelpString = "")
static int LUACALL wxToolBarBase_AddTool(lua_State *L)
{    
    wxToolBarToolBase *returns;
    int argCount = lua_gettop(L);    
    wxString longHelpString = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT(""));
    wxObject *clientData = (argCount >= 6 ? (wxObject*)getuserdatatype(L, 6, s_wxObject) : NULL);
    bool isToggle = (argCount >= 5 ? getbooleantype(L, 5) : FALSE);
    const wxBitmap *pushedBitmap = (argCount >= 4 ? (wxBitmap*)getuserdatatype(L, 4, s_wxBitmap) : &wxNullBitmap);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 3, s_wxBitmap);
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->AddTool(id, *bitmap, *pushedBitmap, isToggle, clientData, longHelpString);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// wxToolBarToolBase *InsertTool(size_t pos, int id, const wxBitmap& bitmap, const wxBitmap& pushedBitmap = wxNullBitmap, bool isToggle = FALSE, wxObject *clientData = NULL, const wxString& shortHelpString = "", const wxString& longHelpString = "")
static int LUACALL wxToolBarBase_InsertTool(lua_State *L)
{    
    wxToolBarToolBase *returns;
    int argCount = lua_gettop(L);    
    wxString longHelpString = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxT(""));
    wxString shortHelpString = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxT(""));
    wxObject *clientData = (argCount >= 7 ? (wxObject*)getuserdatatype(L, 7, s_wxObject) : NULL);
    bool isToggle = (argCount >= 6 ? getbooleantype(L, 6) : FALSE);
    const wxBitmap *pushedBitmap = (argCount >= 5 ? (wxBitmap*)getuserdatatype(L, 5, s_wxBitmap) : &wxNullBitmap);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 4, s_wxBitmap);
    int id = (int) getnumbertype(L, 3);
    size_t pos = (size_t) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->InsertTool(pos, id, *bitmap, *pushedBitmap, isToggle, clientData, shortHelpString, longHelpString);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// wxToolBarToolBase *InsertControl(size_t pos, wxControl *control)
static int LUACALL wxToolBarBase_InsertControl(lua_State *L)
{    
    wxToolBarToolBase *returns;    
    wxControl *control = (wxControl*)getuserdatatype(L, 3, s_wxControl);
    size_t pos = (size_t) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->InsertControl(pos, control);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// wxToolBarToolBase *InsertSeparator(size_t pos)
static int LUACALL wxToolBarBase_InsertSeparator(lua_State *L)
{    
    wxToolBarToolBase *returns;    
    size_t pos = (size_t) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->InsertSeparator(pos);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// wxToolBarToolBase *RemoveTool(int id)
static int LUACALL wxToolBarBase_RemoveTool(lua_State *L)
{    
    wxToolBarToolBase *returns;    
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->RemoveTool(id);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// wxSize  GetMargins()
static int LUACALL wxToolBarBase_GetMargins(lua_State *L)
{    
    wxSize *returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = new wxSize(self->GetMargins());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// bool    DeleteTool(int id)
static int LUACALL wxToolBarBase_DeleteTool(lua_State *L)
{    
    bool returns;    
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->DeleteTool(id);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    DeleteToolByPos(size_t pos)
static int LUACALL wxToolBarBase_DeleteToolByPos(lua_State *L)
{    
    bool returns;    
    size_t pos = (size_t) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->DeleteToolByPos(pos);
    lua_pushboolean(L, returns);
    return 1;
}

// void    EnableTool(int id, bool enable)
static int LUACALL wxToolBarBase_EnableTool(lua_State *L)
{        
    bool enable = getbooleantype(L, 3);
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->EnableTool(id, enable);
    return 0;
}

// void    ToggleTool(int id, bool toggle)
static int LUACALL wxToolBarBase_ToggleTool(lua_State *L)
{        
    bool toggle = getbooleantype(L, 3);
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->ToggleTool(id, toggle);
    return 0;
}

// void    ClearTools()
static int LUACALL wxToolBarBase_ClearTools(lua_State *L)
{    
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->ClearTools();
    return 0;
}

// bool    GetToolEnabled(int id)
static int LUACALL wxToolBarBase_GetToolEnabled(lua_State *L)
{    
    bool returns;    
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->GetToolEnabled(id);
    lua_pushboolean(L, returns);
    return 1;
}

// int     GetToolPacking()
static int LUACALL wxToolBarBase_GetToolPacking(lua_State *L)
{    
    int returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->GetToolPacking();
    lua_pushnumber(L, returns);
    return 1;
}

// wxSize  GetToolBitmapSize()
static int LUACALL wxToolBarBase_GetToolBitmapSize(lua_State *L)
{    
    wxSize *returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = new wxSize(self->GetToolBitmapSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// wxSize  GetToolSize()
static int LUACALL wxToolBarBase_GetToolSize(lua_State *L)
{    
    wxSize *returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = new wxSize(self->GetToolSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// int     GetMaxRows()
static int LUACALL wxToolBarBase_GetMaxRows(lua_State *L)
{    
    int returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->GetMaxRows();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetMaxCols()
static int LUACALL wxToolBarBase_GetMaxCols(lua_State *L)
{    
    int returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->GetMaxCols();
    lua_pushnumber(L, returns);
    return 1;
}

// wxSize  GetToolMargins()
static int LUACALL wxToolBarBase_GetToolMargins(lua_State *L)
{    
    wxSize *returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = new wxSize(self->GetToolMargins());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// int     GetToolSeparation()
static int LUACALL wxToolBarBase_GetToolSeparation(lua_State *L)
{    
    int returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->GetToolSeparation();
    lua_pushnumber(L, returns);
    return 1;
}

// bool    GetToolState(int id)
static int LUACALL wxToolBarBase_GetToolState(lua_State *L)
{    
    bool returns;    
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->GetToolState(id);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetToolShortHelp(int id)
static int LUACALL wxToolBarBase_GetToolShortHelp(lua_State *L)
{    
    wxString returns;    
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->GetToolShortHelp(id);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetToolLongHelp(int id)
static int LUACALL wxToolBarBase_GetToolLongHelp(lua_State *L)
{    
    wxString returns;    
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->GetToolLongHelp(id);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxObject* GetToolClientData(int index)
static int LUACALL wxToolBarBase_GetToolClientData(lua_State *L)
{    
    wxObject *returns;    
    int index = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->GetToolClientData(index);
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

// bool    Realize()
static int LUACALL wxToolBarBase_Realize(lua_State *L)
{    
    bool returns;
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    returns = self->Realize();
    lua_pushboolean(L, returns);
    return 1;
}

// %rename SetMarginsXY void SetMargins(int x, int y)
static int LUACALL wxToolBarBase_SetMarginsXY(lua_State *L)
{        
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetMargins(x, y);
    return 0;
}

// void    SetMargins(const wxSize& size)
static int LUACALL wxToolBarBase_SetMargins(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetMargins(*size);
    return 0;
}

// void    SetToggle(int id, bool toggle)
static int LUACALL wxToolBarBase_SetToggle(lua_State *L)
{        
    bool toggle = getbooleantype(L, 3);
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetToggle(id, toggle);
    return 0;
}

// void    SetToolClientData(int index, wxObject* clientData)
static int LUACALL wxToolBarBase_SetToolClientData(lua_State *L)
{        
    wxObject *clientData = (wxObject*)getuserdatatype(L, 3, s_wxObject);
    int index = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetToolClientData(index, clientData);
    return 0;
}

// void    SetToolShortHelp(int id, const wxString& helpString)
static int LUACALL wxToolBarBase_SetToolShortHelp(lua_State *L)
{        
    wxString helpString = lua2wx(getstringtype(L, 3));
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetToolShortHelp(id, helpString);
    return 0;
}

// void    SetToolLongHelp(int id, const wxString& helpString)
static int LUACALL wxToolBarBase_SetToolLongHelp(lua_State *L)
{        
    wxString helpString = lua2wx(getstringtype(L, 3));
    int id = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetToolLongHelp(id, helpString);
    return 0;
}

// void    SetToolPacking(int packing)
static int LUACALL wxToolBarBase_SetToolPacking(lua_State *L)
{        
    int packing = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetToolPacking(packing);
    return 0;
}

// void    SetToolSeparation(int separation)
static int LUACALL wxToolBarBase_SetToolSeparation(lua_State *L)
{        
    int separation = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetToolSeparation(separation);
    return 0;
}

// void    SetRows(int nRows)
static int LUACALL wxToolBarBase_SetRows(lua_State *L)
{        
    int nRows = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetRows(nRows);
    return 0;
}

// void    SetMaxRowsCols(int rows, int cols)
static int LUACALL wxToolBarBase_SetMaxRowsCols(lua_State *L)
{        
    int cols = (int) getnumbertype(L, 3);
    int rows = (int) getnumbertype(L, 2);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetMaxRowsCols(rows, cols);
    return 0;
}

// void    SetToolBitmapSize(const wxSize& size)
static int LUACALL wxToolBarBase_SetToolBitmapSize(lua_State *L)
{        
    const wxSize *size = (wxSize*)getuserdatatype(L, 2, s_wxSize);
    wxToolBarBase *self = (wxToolBarBase*)getuserdatatype(L, 1, s_wxToolBarBase);
    self->SetToolBitmapSize(*size);
    return 0;
}

static int LUACALL wxToolBar_destructor(lua_State *)
{
    return 0;
}

// wxToolBar(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxNO_BORDER | wxTB_HORIZONTAL, const wxString &name = wxToolBarNameStr)
static int LUACALL wxToolBar_constructor(lua_State *L)
{    
    wxToolBar *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxString(wxToolBarNameStr));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxNO_BORDER | wxTB_HORIZONTAL);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxToolBar(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxToolBar) != NULL)
        addToTrackedWindowList(L, (wxToolBar*)returns);
    pushuserdatatype(L, s_wxToolBar, returns);
    return 1;
}

// %constructor wxPreToolBar()
static int LUACALL wxPreToolBar_constructor(lua_State *L)
{    
    wxToolBar *returns;
    returns = new wxToolBar();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxToolBar, returns);
    return 1;
}

// bool  Create(wxWindow *parent,wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxNO_BORDER | wxTB_HORIZONTAL, const wxString &name = wxToolBarNameStr)
static int LUACALL wxToolBar_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxString(wxToolBarNameStr));
    long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxNO_BORDER | wxTB_HORIZONTAL);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxToolBar *self = (wxToolBar*)getuserdatatype(L, 1, s_wxToolBar);
    returns = self->Create(parent, id, *pos, *size, style, name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxToolBarToolBase *FindToolForPosition(wxCoord x, wxCoord y)
static int LUACALL wxToolBar_FindToolForPosition(lua_State *L)
{    
    wxToolBarToolBase *returns;    
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxToolBar *self = (wxToolBar*)getuserdatatype(L, 1, s_wxToolBar);
    returns = self->FindToolForPosition(x, y);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

static int LUACALL wxToolBarToolBase_destructor(lua_State *)
{
    return 0;
}

// int     GetId()
static int LUACALL wxToolBarToolBase_GetId(lua_State *L)
{    
    int returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->GetId();
    lua_pushnumber(L, returns);
    return 1;
}

// wxControl *GetControl()
static int LUACALL wxToolBarToolBase_GetControl(lua_State *L)
{    
    wxControl *returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->GetControl();
    pushuserdatatype(L, s_wxControl, returns);
    return 1;
}

// wxToolBarBase *GetToolBar()
static int LUACALL wxToolBarToolBase_GetToolBar(lua_State *L)
{    
    wxToolBarBase *returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->GetToolBar();
    pushuserdatatype(L, s_wxToolBarBase, returns);
    return 1;
}

// int     IsButton()
static int LUACALL wxToolBarToolBase_IsButton(lua_State *L)
{    
    int returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->IsButton();
    lua_pushnumber(L, returns);
    return 1;
}

// int     IsControl()
static int LUACALL wxToolBarToolBase_IsControl(lua_State *L)
{    
    int returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->IsControl();
    lua_pushnumber(L, returns);
    return 1;
}

// int     IsSeparator()
static int LUACALL wxToolBarToolBase_IsSeparator(lua_State *L)
{    
    int returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->IsSeparator();
    lua_pushnumber(L, returns);
    return 1;
}

// int     GetStyle()
static int LUACALL wxToolBarToolBase_GetStyle(lua_State *L)
{    
    int returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->GetStyle();
    lua_pushnumber(L, returns);
    return 1;
}

// bool    IsEnabled()
static int LUACALL wxToolBarToolBase_IsEnabled(lua_State *L)
{    
    bool returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->IsEnabled();
    lua_pushboolean(L, returns);
    return 1;
}

// bool    IsToggled()
static int LUACALL wxToolBarToolBase_IsToggled(lua_State *L)
{    
    bool returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->IsToggled();
    lua_pushboolean(L, returns);
    return 1;
}

// bool    CanBeToggled()
static int LUACALL wxToolBarToolBase_CanBeToggled(lua_State *L)
{    
    bool returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->CanBeToggled();
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 const wxBitmap& GetNormalBitmap()
static int LUACALL wxToolBarToolBase_GetNormalBitmap(lua_State *L)
{    
    const wxBitmap *returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = &self->GetNormalBitmap();
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// ~%wxver22 const wxBitmap& GetDisabledBitmap()
static int LUACALL wxToolBarToolBase_GetDisabledBitmap(lua_State *L)
{    
    const wxBitmap *returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = &self->GetDisabledBitmap();
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// const wxBitmap& GetBitmap()
static int LUACALL wxToolBarToolBase_GetBitmap(lua_State *L)
{    
    const wxBitmap *returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = &self->GetBitmap();
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// wxString GetShortHelp()
static int LUACALL wxToolBarToolBase_GetShortHelp(lua_State *L)
{    
    wxString returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->GetShortHelp();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetLongHelp()
static int LUACALL wxToolBarToolBase_GetLongHelp(lua_State *L)
{    
    wxString returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->GetLongHelp();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool    Enable(bool enable)
static int LUACALL wxToolBarToolBase_Enable(lua_State *L)
{    
    bool returns;    
    bool enable = getbooleantype(L, 2);
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->Enable(enable);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    Toggle(bool toggle)
static int LUACALL wxToolBarToolBase_Toggle(lua_State *L)
{    
    bool returns;    
    bool toggle = getbooleantype(L, 2);
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->Toggle(toggle);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    SetToggle(bool toggle)
static int LUACALL wxToolBarToolBase_SetToggle(lua_State *L)
{    
    bool returns;    
    bool toggle = getbooleantype(L, 2);
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->SetToggle(toggle);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    SetShortHelp(const wxString& help)
static int LUACALL wxToolBarToolBase_SetShortHelp(lua_State *L)
{    
    bool returns;    
    wxString help = lua2wx(getstringtype(L, 2));
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->SetShortHelp(help);
    lua_pushboolean(L, returns);
    return 1;
}

// bool    SetLongHelp(const wxString& help)
static int LUACALL wxToolBarToolBase_SetLongHelp(lua_State *L)
{    
    bool returns;    
    wxString help = lua2wx(getstringtype(L, 2));
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->SetLongHelp(help);
    lua_pushboolean(L, returns);
    return 1;
}

// ~%wxver22 void    SetNormalBitmap(const wxBitmap& bmp)
static int LUACALL wxToolBarToolBase_SetNormalBitmap(lua_State *L)
{        
    const wxBitmap *bmp = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    self->SetNormalBitmap(*bmp);
    return 0;
}

// ~%wxver22 void    SetDisabledBitmap(const wxBitmap& bmp)
static int LUACALL wxToolBarToolBase_SetDisabledBitmap(lua_State *L)
{        
    const wxBitmap *bmp = (wxBitmap*)getuserdatatype(L, 2, s_wxBitmap);
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    self->SetDisabledBitmap(*bmp);
    return 0;
}

// void    Detach()
static int LUACALL wxToolBarToolBase_Detach(lua_State *L)
{    
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    self->Detach();
    return 0;
}

// void    Attach(wxToolBarBase *tbar)
static int LUACALL wxToolBarToolBase_Attach(lua_State *L)
{        
    wxToolBarBase *tbar = (wxToolBarBase*)getuserdatatype(L, 2, s_wxToolBarBase);
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    self->Attach(tbar);
    return 0;
}

// wxObject *GetClientData()
static int LUACALL wxToolBarToolBase_GetClientData(lua_State *L)
{    
    wxObject *returns;
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    returns = self->GetClientData();
    pushuserdatatype(L, s_wxObject, returns);
    return 1;
}

// void    SetClientData(wxObject* clientData)
static int LUACALL wxToolBarToolBase_SetClientData(lua_State *L)
{        
    wxObject *clientData = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxToolBarToolBase *self = (wxToolBarToolBase*)getuserdatatype(L, 1, s_wxToolBarToolBase);
    self->SetClientData(clientData);
    return 0;
}

static int LUACALL wxToolBarTool_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxSizer_destructor(lua_State *)
{
    return 0;
}

// %rename AddWindow void Add(wxWindow* window, int option = 0,int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxSizer_AddWindow(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxObject *userData = (argCount >= 6 ? (wxObject*)getuserdatatype(L, 6, s_wxObject) : NULL);
    int border = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int flag = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int option = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->Add(window, option, flag, border, userData);
    return 0;
}

// %rename AddSizer void Add(wxSizer* sizer, int option = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxSizer_AddSizer(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxObject *userData = (argCount >= 6 ? (wxObject*)getuserdatatype(L, 6, s_wxObject) : NULL);
    int border = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int flag = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int option = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxSizer *sizer = (wxSizer*)getuserdatatype(L, 2, s_wxSizer);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->Add(sizer, option, flag, border, userData);
    return 0;
}

// void Add(int width, int height, int option = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxSizer_Add(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxObject *userData = (argCount >= 7 ? (wxObject*)getuserdatatype(L, 7, s_wxObject) : NULL);
    int border = (argCount >= 6 ? (int) getnumbertype(L, 6) : 0);
    int flag = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int option = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->Add(width, height, option, flag, border, userData);
    return 0;
}

// wxSize CalcMin()
static int LUACALL wxSizer_CalcMin(lua_State *L)
{    
    wxSize *returns;
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    returns = new wxSize(self->CalcMin());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// void Fit(wxWindow* window)
static int LUACALL wxSizer_Fit(lua_State *L)
{        
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->Fit(window);
    return 0;
}

// wxSize GetSize()
static int LUACALL wxSizer_GetSize(lua_State *L)
{    
    wxSize *returns;
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    returns = new wxSize(self->GetSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// wxPoint GetPosition()
static int LUACALL wxSizer_GetPosition(lua_State *L)
{    
    wxPoint *returns;
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    returns = new wxPoint(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// wxSize GetMinSize()
static int LUACALL wxSizer_GetMinSize(lua_State *L)
{    
    wxSize *returns;
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    returns = new wxSize(self->GetMinSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// void Layout()
static int LUACALL wxSizer_Layout(lua_State *L)
{    
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->Layout();
    return 0;
}

// %rename PrependWindow void Prepend(wxWindow* window, int option = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxSizer_PrependWindow(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxObject *userData = (argCount >= 6 ? (wxObject*)getuserdatatype(L, 6, s_wxObject) : NULL);
    int border = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int flag = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int option = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->Prepend(window, option, flag, border, userData);
    return 0;
}

// %rename PrependSizer void Prepend(wxSizer* sizer, int option = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxSizer_PrependSizer(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxObject *userData = (argCount >= 6 ? (wxObject*)getuserdatatype(L, 6, s_wxObject) : NULL);
    int border = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int flag = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int option = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxSizer *sizer = (wxSizer*)getuserdatatype(L, 2, s_wxSizer);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->Prepend(sizer, option, flag, border, userData);
    return 0;
}

// void Prepend(int width, int height, int option = 0, int flag = 0, int border= 0, wxObject* userData = NULL)
static int LUACALL wxSizer_Prepend(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxObject *userData = (argCount >= 7 ? (wxObject*)getuserdatatype(L, 7, s_wxObject) : NULL);
    int border = (argCount >= 6 ? (int) getnumbertype(L, 6) : 0);
    int flag = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int option = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->Prepend(width, height, option, flag, border, userData);
    return 0;
}

// void RecalcSizes()
static int LUACALL wxSizer_RecalcSizes(lua_State *L)
{    
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->RecalcSizes();
    return 0;
}

// %rename RemoveSizer bool Remove(wxSizer* sizer)
static int LUACALL wxSizer_RemoveSizer(lua_State *L)
{    
    bool returns;    
    wxSizer *sizer = (wxSizer*)getuserdatatype(L, 2, s_wxSizer);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    returns = self->Remove(sizer);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Remove(int nth)
static int LUACALL wxSizer_Remove(lua_State *L)
{    
    bool returns;    
    int nth = (int) getnumbertype(L, 2);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    returns = self->Remove(nth);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetDimension(int x, int y, int width, int height)
static int LUACALL wxSizer_SetDimension(lua_State *L)
{        
    int height = (int) getnumbertype(L, 5);
    int width = (int) getnumbertype(L, 4);
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->SetDimension(x, y, width, height);
    return 0;
}

// void SetMinSize(int width, int height)
static int LUACALL wxSizer_SetMinSize(lua_State *L)
{        
    int height = (int) getnumbertype(L, 3);
    int width = (int) getnumbertype(L, 2);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->SetMinSize(width, height);
    return 0;
}

// %rename SetWindowMinSize void SetItemMinSize(wxWindow* window, int width, int height)
static int LUACALL wxSizer_SetWindowMinSize(lua_State *L)
{        
    int height = (int) getnumbertype(L, 4);
    int width = (int) getnumbertype(L, 3);
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->SetItemMinSize(window, width, height);
    return 0;
}

// %rename SetSizerMinSize void SetItemMinSize(wxSizer* sizer, int width, int height)
static int LUACALL wxSizer_SetSizerMinSize(lua_State *L)
{        
    int height = (int) getnumbertype(L, 4);
    int width = (int) getnumbertype(L, 3);
    wxSizer *sizer = (wxSizer*)getuserdatatype(L, 2, s_wxSizer);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->SetItemMinSize(sizer, width, height);
    return 0;
}

// void SetItemMinSize(int pos, int width, int height)
static int LUACALL wxSizer_SetItemMinSize(lua_State *L)
{        
    int height = (int) getnumbertype(L, 4);
    int width = (int) getnumbertype(L, 3);
    int pos = (int) getnumbertype(L, 2);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->SetItemMinSize(pos, width, height);
    return 0;
}

// void SetSizeHints(wxWindow* window)
static int LUACALL wxSizer_SetSizeHints(lua_State *L)
{        
    wxWindow *window = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxSizer *self = (wxSizer*)getuserdatatype(L, 1, s_wxSizer);
    self->SetSizeHints(window);
    return 0;
}

static int LUACALL wxBoxSizer_destructor(lua_State *)
{
    return 0;
}

// wxBoxSizer(int orient)
static int LUACALL wxBoxSizer_constructor(lua_State *L)
{    
    wxBoxSizer *returns;    
    int orient = (int) getnumbertype(L, 1);
    returns = new wxBoxSizer(orient);
    pushuserdatatype(L, s_wxBoxSizer, returns);
    return 1;
}

// void RecalcSizes()
static int LUACALL wxBoxSizer_RecalcSizes(lua_State *L)
{    
    wxBoxSizer *self = (wxBoxSizer*)getuserdatatype(L, 1, s_wxBoxSizer);
    self->RecalcSizes();
    return 0;
}

// const wxSize CalcMin()
static int LUACALL wxBoxSizer_CalcMin(lua_State *L)
{    
    wxSize *returns;
    wxBoxSizer *self = (wxBoxSizer*)getuserdatatype(L, 1, s_wxBoxSizer);
    returns = new wxSize(self->CalcMin());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// int GetOrientation()
static int LUACALL wxBoxSizer_GetOrientation(lua_State *L)
{    
    int returns;
    wxBoxSizer *self = (wxBoxSizer*)getuserdatatype(L, 1, s_wxBoxSizer);
    returns = self->GetOrientation();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxGridSizer_destructor(lua_State *)
{
    return 0;
}

// wxGridSizer(int cols, int rows, int vgap, int hgap)
static int LUACALL wxGridSizer_constructor(lua_State *L)
{    
    wxGridSizer *returns;    
    int hgap = (int) getnumbertype(L, 4);
    int vgap = (int) getnumbertype(L, 3);
    int rows = (int) getnumbertype(L, 2);
    int cols = (int) getnumbertype(L, 1);
    returns = new wxGridSizer(cols, rows, vgap, hgap);
    pushuserdatatype(L, s_wxGridSizer, returns);
    return 1;
}

static int LUACALL wxFlexGridSizer_destructor(lua_State *)
{
    return 0;
}

// wxFlexGridSizer(int rows, int cols, int vgap, int hgap)
static int LUACALL wxFlexGridSizer_constructor(lua_State *L)
{    
    wxFlexGridSizer *returns;    
    int hgap = (int) getnumbertype(L, 4);
    int vgap = (int) getnumbertype(L, 3);
    int cols = (int) getnumbertype(L, 2);
    int rows = (int) getnumbertype(L, 1);
    returns = new wxFlexGridSizer(rows, cols, vgap, hgap);
    pushuserdatatype(L, s_wxFlexGridSizer, returns);
    return 1;
}

static int LUACALL wxNotebookSizer_destructor(lua_State *)
{
    return 0;
}

// wxNotebookSizer(wxNotebook* notebook)
static int LUACALL wxNotebookSizer_constructor(lua_State *L)
{    
    wxNotebookSizer *returns;    
    wxNotebook *notebook = (wxNotebook*)getuserdatatype(L, 1, s_wxNotebook);
    returns = new wxNotebookSizer(notebook);
    pushuserdatatype(L, s_wxNotebookSizer, returns);
    return 1;
}

// wxNotebook* GetNotebook()
static int LUACALL wxNotebookSizer_GetNotebook(lua_State *L)
{    
    wxNotebook *returns;
    wxNotebookSizer *self = (wxNotebookSizer*)getuserdatatype(L, 1, s_wxNotebookSizer);
    returns = self->GetNotebook();
    pushuserdatatype(L, s_wxNotebook, returns);
    return 1;
}

static int LUACALL wxStaticBoxSizer_destructor(lua_State *)
{
    return 0;
}

// wxStaticBoxSizer(wxStaticBox* box, int orient)
static int LUACALL wxStaticBoxSizer_constructor(lua_State *L)
{    
    wxStaticBoxSizer *returns;    
    int orient = (int) getnumbertype(L, 2);
    wxStaticBox *box = (wxStaticBox*)getuserdatatype(L, 1, s_wxStaticBox);
    returns = new wxStaticBoxSizer(box, orient);
    pushuserdatatype(L, s_wxStaticBoxSizer, returns);
    return 1;
}

// wxStaticBox* GetStaticBox()
static int LUACALL wxStaticBoxSizer_GetStaticBox(lua_State *L)
{    
    wxStaticBox *returns;
    wxStaticBoxSizer *self = (wxStaticBoxSizer*)getuserdatatype(L, 1, s_wxStaticBoxSizer);
    returns = self->GetStaticBox();
    pushuserdatatype(L, s_wxStaticBox, returns);
    return 1;
}

static int LUACALL wxLayoutConstraints_destructor(lua_State *)
{
    return 0;
}

// wxLayoutConstraints()
static int LUACALL wxLayoutConstraints_constructor(lua_State *L)
{    
    wxLayoutConstraints *returns;
    returns = new wxLayoutConstraints();
    pushuserdatatype(L, s_wxLayoutConstraints, returns);
    return 1;
}

static int LUACALL wxIndividualLayoutConstraint_destructor(lua_State *)
{
    return 0;
}

// wxIndividualLayoutConstraint()
static int LUACALL wxIndividualLayoutConstraint_constructor(lua_State *L)
{    
    wxIndividualLayoutConstraint *returns;
    returns = new wxIndividualLayoutConstraint();
    pushuserdatatype(L, s_wxIndividualLayoutConstraint, returns);
    return 1;
}

// void Above(wxWindow *otherWin, int margin = 0)
static int LUACALL wxIndividualLayoutConstraint_Above(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int margin = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxWindow *otherWin = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->Above(otherWin, margin);
    return 0;
}

// void Absolute(int value)
static int LUACALL wxIndividualLayoutConstraint_Absolute(lua_State *L)
{        
    int value = (int) getnumbertype(L, 2);
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->Absolute(value);
    return 0;
}

// void AsIs()
static int LUACALL wxIndividualLayoutConstraint_AsIs(lua_State *L)
{    
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->AsIs();
    return 0;
}

// void Below(wxWindow *otherWin, int margin = 0)
static int LUACALL wxIndividualLayoutConstraint_Below(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int margin = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxWindow *otherWin = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->Below(otherWin, margin);
    return 0;
}

// void Unconstrained()
static int LUACALL wxIndividualLayoutConstraint_Unconstrained(lua_State *L)
{    
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->Unconstrained();
    return 0;
}

// void LeftOf(wxWindow *otherWin, int margin = 0)
static int LUACALL wxIndividualLayoutConstraint_LeftOf(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int margin = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxWindow *otherWin = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->LeftOf(otherWin, margin);
    return 0;
}

// void PercentOf(wxWindow *otherWin, wxEdge edge, int per)
static int LUACALL wxIndividualLayoutConstraint_PercentOf(lua_State *L)
{        
    int per = (int) getnumbertype(L, 4);
    wxEdge edge = (wxEdge) getenumerationtype(L, 3);
    wxWindow *otherWin = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->PercentOf(otherWin, edge, per);
    return 0;
}

// void RightOf(wxWindow *otherWin, int margin = 0)
static int LUACALL wxIndividualLayoutConstraint_RightOf(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int margin = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxWindow *otherWin = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->RightOf(otherWin, margin);
    return 0;
}

// void SameAs(wxWindow *otherWin, wxEdge edge, int margin = 0)
static int LUACALL wxIndividualLayoutConstraint_SameAs(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int margin = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    wxEdge edge = (wxEdge) getenumerationtype(L, 3);
    wxWindow *otherWin = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->SameAs(otherWin, edge, margin);
    return 0;
}

// void Set(wxRelationship rel, wxWindow *otherWin, wxEdge otherEdge, int value = 0, int margin = 0)
static int LUACALL wxIndividualLayoutConstraint_Set(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int margin = (argCount >= 6 ? (int) getnumbertype(L, 6) : 0);
    int value = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    wxEdge otherEdge = (wxEdge) getenumerationtype(L, 4);
    wxWindow *otherWin = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    wxRelationship rel = (wxRelationship) getenumerationtype(L, 2);
    wxIndividualLayoutConstraint *self = (wxIndividualLayoutConstraint*)getuserdatatype(L, 1, s_wxIndividualLayoutConstraint);
    self->Set(rel, otherWin, otherEdge, value, margin);
    return 0;
}

static int LUACALL wxSocketBase_destructor(lua_State *)
{
    return 0;
}

// wxSocketBase()
static int LUACALL wxSocketBase_constructor(lua_State *L)
{    
    wxSocketBase *returns;
    returns = new wxSocketBase();
    pushuserdatatype(L, s_wxSocketBase, returns);
    return 1;
}

// void Close()
static int LUACALL wxSocketBase_Close(lua_State *L)
{    
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->Close();
    return 0;
}

// bool Destroy()
static int LUACALL wxSocketBase_Destroy(lua_State *L)
{    
    bool returns;
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->Destroy();
    lua_pushboolean(L, returns);
    return 1;
}

// void Discard()
static int LUACALL wxSocketBase_Discard(lua_State *L)
{    
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->Discard();
    return 0;
}

// bool Error() const
static int LUACALL wxSocketBase_Error(lua_State *L)
{    
    bool returns;
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->Error();
    lua_pushboolean(L, returns);
    return 1;
}

// wxObject * GetClientData() const
static int LUACALL wxSocketBase_GetClientData(lua_State *L)
{
    wxObject *returns;
    // get this
    wxSocketBase *self = ( wxSocketBase * ) getuserdatatype(L, 1, s_wxSocketBase );
    // call GetClientData
    returns = (wxObject *) self->GetClientData();
    // push the result datatype
    pushuserdatatype(L, s_wxObject, returns );
    // return the number of parameters
    return 1;
}

// bool GetLocal(wxSockAddress& addr) const
static int LUACALL wxSocketBase_GetLocal(lua_State *L)
{    
    bool returns;    
    wxSockAddress *addr = (wxSockAddress*)getuserdatatype(L, 2, s_wxSockAddress);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->GetLocal(*addr);
    lua_pushboolean(L, returns);
    return 1;
}

// wxSocketFlags GetFlags() const
static int LUACALL wxSocketBase_GetFlags(lua_State *L)
{    
    wxSocketFlags returns;
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->GetFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// bool GetPeer(wxSockAddress& addr) const
static int LUACALL wxSocketBase_GetPeer(lua_State *L)
{    
    bool returns;    
    wxSockAddress *addr = (wxSockAddress*)getuserdatatype(L, 2, s_wxSockAddress);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->GetPeer(*addr);
    lua_pushboolean(L, returns);
    return 1;
}

// void InterruptWait()
static int LUACALL wxSocketBase_InterruptWait(lua_State *L)
{    
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->InterruptWait();
    return 0;
}

// bool IsConnected() const
static int LUACALL wxSocketBase_IsConnected(lua_State *L)
{    
    bool returns;
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->IsConnected();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsData() const
static int LUACALL wxSocketBase_IsData(lua_State *L)
{    
    bool returns;
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->IsData();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsDisconnected() const
static int LUACALL wxSocketBase_IsDisconnected(lua_State *L)
{    
    bool returns;
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->IsDisconnected();
    lua_pushboolean(L, returns);
    return 1;
}

// unsigned long LastCount() const
static int LUACALL wxSocketBase_LastCount(lua_State *L)
{    
    unsigned long returns;
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->LastCount();
    lua_pushnumber(L, returns);
    return 1;
}

// void Notify(bool notify)
static int LUACALL wxSocketBase_Notify(lua_State *L)
{        
    bool notify = getbooleantype(L, 2);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->Notify(notify);
    return 0;
}

// bool Ok() const
static int LUACALL wxSocketBase_Ok(lua_State *L)
{    
    bool returns;
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->Ok();
    lua_pushboolean(L, returns);
    return 1;
}

// void RestoreState()
static int LUACALL wxSocketBase_RestoreState(lua_State *L)
{    
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->RestoreState();
    return 0;
}

// void SaveState()
static int LUACALL wxSocketBase_SaveState(lua_State *L)
{    
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->SaveState();
    return 0;
}

// void SetClientData(wxObject *data)
static int LUACALL wxSocketBase_SetClientData(lua_State *L)
{        
    wxObject *data = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->SetClientData(data);
    return 0;
}

// void SetFlags(wxSocketFlags flags)
static int LUACALL wxSocketBase_SetFlags(lua_State *L)
{        
    wxSocketFlags flags = (wxSocketFlags) getenumerationtype(L, 2);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->SetFlags(flags);
    return 0;
}

// void SetNotify(wxSocketEventFlags flags)
static int LUACALL wxSocketBase_SetNotify(lua_State *L)
{        
    wxSocketEventFlags flags = (wxSocketEventFlags) getnumbertype(L, 2);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->SetNotify(flags);
    return 0;
}

// void SetTimeout(int seconds)
static int LUACALL wxSocketBase_SetTimeout(lua_State *L)
{        
    int seconds = (int) getnumbertype(L, 2);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    self->SetTimeout(seconds);
    return 0;
}

// void Peek(void * buffer, unsigned long nbytes)
static int LUACALL wxSocketBase_Peek(lua_State *L)
{
    // unsigned long nbytes
    unsigned long nbytes = (unsigned long) getnumbertype(L, 2);
    // void * buffer
    void *buffer = malloc(nbytes);
    if (buffer != NULL)
    {
        // get this
        wxSocketBase *self = ( wxSocketBase * ) getuserdatatype(L, 1, s_wxSocketBase );
        // call Peek
        self->Peek(buffer, nbytes);
        // return the number of parameters
        lua_pushlstring(L, (const char *)buffer, nbytes);
        free(buffer);
        return 1;
    }
    return 0;
}

// void Read(void * buffer, unsigned long nbytes)
static int LUACALL wxSocketBase_Read(lua_State *L)
{
    // unsigned long nbytes
    unsigned long nbytes = (unsigned long) getnumbertype(L, 2);
    // void * buffer
    void *buffer = malloc(nbytes);
    if (buffer != NULL)
    {
        // get this
        wxSocketBase *self = ( wxSocketBase * ) getuserdatatype(L, 1, s_wxSocketBase );
        // call Peek
        self->Read(buffer, nbytes);
        // return the number of parameters
        lua_pushlstring(L, (const char *)buffer, nbytes);
        free(buffer);
        return 1;
    }
    return 0;
}

// void ReadMsg(void * buffer, unsigned long nbytes)
static int LUACALL wxSocketBase_ReadMsg(lua_State *L)
{
    // unsigned long nbytes
    unsigned long nbytes = (unsigned long) getnumbertype(L, 2);
    // void * buffer
    void *buffer = malloc(nbytes);
    if (buffer != NULL)
    {
        // get this
        wxSocketBase *self = ( wxSocketBase * ) getuserdatatype(L, 1, s_wxSocketBase );
        // call Peek
        self->ReadMsg(buffer, nbytes);
        // return the number of parameters
        lua_pushlstring(L, (const char *)buffer, nbytes);
        free(buffer);
        return 1;
    }
    return 0;
}

// void Unread(const void * buffer, unsigned long nbytes)
static int LUACALL wxSocketBase_Unread(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const void * buffer
    const char *buffer = lua_tostring(L, 2);
    // unsigned long nbytes
    unsigned long nbytes = (argCount >= 3 ? (unsigned long) getnumbertype(L, 3) : lua_strlen(L, 2));
    // get this
    wxSocketBase *self = ( wxSocketBase * ) getuserdatatype(L, 1, s_wxSocketBase );
    // call Unread
    self->Unread(buffer, nbytes);
    // return the number of parameters
    return 0;
}

// bool Wait(long seconds = -1, long millisecond = 0)
static int LUACALL wxSocketBase_Wait(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    long millisecond = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    long seconds = (argCount >= 2 ? (long) getnumbertype(L, 2) : -1);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->Wait(seconds, millisecond);
    lua_pushboolean(L, returns);
    return 1;
}

// bool WaitForLost(long seconds = -1, long millisecond = 0)
static int LUACALL wxSocketBase_WaitForLost(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    long millisecond = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    long seconds = (argCount >= 2 ? (long) getnumbertype(L, 2) : -1);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->WaitForLost(seconds, millisecond);
    lua_pushboolean(L, returns);
    return 1;
}

// bool WaitForRead(long seconds = -1, long millisecond = 0)
static int LUACALL wxSocketBase_WaitForRead(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    long millisecond = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    long seconds = (argCount >= 2 ? (long) getnumbertype(L, 2) : -1);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->WaitForRead(seconds, millisecond);
    lua_pushboolean(L, returns);
    return 1;
}

// bool WaitForWrite(long seconds = -1, long millisecond = 0)
static int LUACALL wxSocketBase_WaitForWrite(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    long millisecond = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    long seconds = (argCount >= 2 ? (long) getnumbertype(L, 2) : -1);
    wxSocketBase *self = (wxSocketBase*)getuserdatatype(L, 1, s_wxSocketBase);
    returns = self->WaitForWrite(seconds, millisecond);
    lua_pushboolean(L, returns);
    return 1;
}

// void Write(const void * buffer, unsigned long nbytes)
static int LUACALL wxSocketBase_Write(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const void * buffer
    const char *buffer = lua_tostring(L, 2);
    // unsigned long nbytes
    unsigned long nbytes = (argCount >= 3 ? (unsigned long) getnumbertype(L, 3) : lua_strlen(L, 2));
    // get this
    wxSocketBase *self = ( wxSocketBase * ) getuserdatatype(L, 1, s_wxSocketBase );
    // call Write
    self->Write(buffer, nbytes);
    // return the number of parameters
    return 0;
}

// void WriteMsg(const void * buffer, wxUint32 nbytes)
static int LUACALL wxSocketBase_WriteMsg(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const void * buffer
    const char *buffer = lua_tostring(L, 2);
    // unsigned long nbytes
    unsigned long nbytes = (argCount >= 3 ? (unsigned long) getnumbertype(L, 3) : lua_strlen(L, 2));
    // get this
    wxSocketBase *self = ( wxSocketBase * ) getuserdatatype(L, 1, s_wxSocketBase );
    // call WriteMsg
    self->WriteMsg(buffer, nbytes);
    // return the number of parameters
    return 0;
}

static int LUACALL wxSocketClient_destructor(lua_State *)
{
    return 0;
}

// wxSocketClient(wxSocketFlags flags = wxSOCKET_NONE)
static int LUACALL wxSocketClient_constructor(lua_State *L)
{    
    wxSocketClient *returns;
    int argCount = lua_gettop(L);    
    wxSocketFlags flags = (argCount >= 1 ? (wxSocketFlags) getenumerationtype(L, 1) : wxSOCKET_NONE);
    returns = new wxSocketClient(flags);
    pushuserdatatype(L, s_wxSocketClient, returns);
    return 1;
}

// bool Connect(wxSockAddress& address, bool wait = TRUE)
static int LUACALL wxSocketClient_Connect(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool wait = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    wxSockAddress *address = (wxSockAddress*)getuserdatatype(L, 2, s_wxSockAddress);
    wxSocketClient *self = (wxSocketClient*)getuserdatatype(L, 1, s_wxSocketClient);
    returns = self->Connect(*address, wait);
    lua_pushboolean(L, returns);
    return 1;
}

// bool WaitOnConnect(long seconds = -1, long milliseconds = 0)
static int LUACALL wxSocketClient_WaitOnConnect(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    long milliseconds = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    long seconds = (argCount >= 2 ? (long) getnumbertype(L, 2) : -1);
    wxSocketClient *self = (wxSocketClient*)getuserdatatype(L, 1, s_wxSocketClient);
    returns = self->WaitOnConnect(seconds, milliseconds);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxSocketServer_destructor(lua_State *)
{
    return 0;
}

// wxSocketServer(wxSockAddress& address, wxSocketFlags flags = wxSOCKET_NONE)
static int LUACALL wxSocketServer_constructor(lua_State *L)
{    
    wxSocketServer *returns;
    int argCount = lua_gettop(L);    
    wxSocketFlags flags = (argCount >= 2 ? (wxSocketFlags) getenumerationtype(L, 2) : wxSOCKET_NONE);
    wxSockAddress *address = (wxSockAddress*)getuserdatatype(L, 1, s_wxSockAddress);
    returns = new wxSocketServer(*address, flags);
    pushuserdatatype(L, s_wxSocketServer, returns);
    return 1;
}

// wxSocketBase * Accept(bool wait = TRUE)
static int LUACALL wxSocketServer_Accept(lua_State *L)
{    
    wxSocketBase *returns;
    int argCount = lua_gettop(L);    
    bool wait = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxSocketServer *self = (wxSocketServer*)getuserdatatype(L, 1, s_wxSocketServer);
    returns = self->Accept(wait);
    pushuserdatatype(L, s_wxSocketBase, returns);
    return 1;
}

// bool AcceptWith(wxSocketBase& socket, bool wait = TRUE)
static int LUACALL wxSocketServer_AcceptWith(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool wait = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    wxSocketBase *socket = (wxSocketBase*)getuserdatatype(L, 2, s_wxSocketBase);
    wxSocketServer *self = (wxSocketServer*)getuserdatatype(L, 1, s_wxSocketServer);
    returns = self->AcceptWith(*socket, wait);
    lua_pushboolean(L, returns);
    return 1;
}

// bool WaitForAccept(long seconds = -1, long millisecond = 0)
static int LUACALL wxSocketServer_WaitForAccept(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    long millisecond = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    long seconds = (argCount >= 2 ? (long) getnumbertype(L, 2) : -1);
    wxSocketServer *self = (wxSocketServer*)getuserdatatype(L, 1, s_wxSocketServer);
    returns = self->WaitForAccept(seconds, millisecond);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxSocketEvent_destructor(lua_State *L)
{
    wxSocketEvent * self = (wxSocketEvent*)getuserdatatype(L, 1, s_wxSocketEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxSocketEvent_Delete(lua_State *L)
{
    wxSocketEvent * self = (wxSocketEvent*)getuserdatatype(L, 1, s_wxSocketEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxSocketEvent(int id = 0)
static int LUACALL wxSocketEvent_constructor(lua_State *L)
{    
    wxSocketEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxSocketEvent(id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSocketEvent, returns);
    return 1;
}

// wxObject * GetClientData()
static int LUACALL wxSocketEvent_GetClientData(lua_State *L)
{
    wxObject *returns;
    // get this
    wxSocketEvent *self = ( wxSocketEvent * ) getuserdatatype(L, 1, s_wxSocketEvent );
    // call GetClientData
    returns = (wxObject *) self->GetClientData();
    // push the result datatype
    pushuserdatatype(L, s_wxObject, returns );
    // return the number of parameters
    return 1;
}

// wxSocketBase * GetSocket() const
static int LUACALL wxSocketEvent_GetSocket(lua_State *L)
{    
    wxSocketBase *returns;
    wxSocketEvent *self = (wxSocketEvent*)getuserdatatype(L, 1, s_wxSocketEvent);
    returns = self->GetSocket();
    pushuserdatatype(L, s_wxSocketBase, returns);
    return 1;
}

// wxSocketNotify GetSocketEvent() const
static int LUACALL wxSocketEvent_GetSocketEvent(lua_State *L)
{    
    wxSocketNotify returns;
    wxSocketEvent *self = (wxSocketEvent*)getuserdatatype(L, 1, s_wxSocketEvent);
    returns = self->GetSocketEvent();
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxSockAddress_destructor(lua_State *)
{
    return 0;
}

// void Clear()
static int LUACALL wxSockAddress_Clear(lua_State *L)
{    
    wxSockAddress *self = (wxSockAddress*)getuserdatatype(L, 1, s_wxSockAddress);
    self->Clear();
    return 0;
}

static int LUACALL wxIPV4address_destructor(lua_State *)
{
    return 0;
}

// wxIPV4address()
static int LUACALL wxIPV4address_constructor(lua_State *L)
{    
    wxIPV4address *returns;
    returns = new wxIPV4address();
    pushuserdatatype(L, s_wxIPV4address, returns);
    return 1;
}

// %rename SetHostname bool Hostname(const wxString& hostname)
static int LUACALL wxIPV4address_SetHostname(lua_State *L)
{    
    bool returns;    
    wxString hostname = lua2wx(getstringtype(L, 2));
    wxIPV4address *self = (wxIPV4address*)getuserdatatype(L, 1, s_wxIPV4address);
    returns = self->Hostname(hostname);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename SetHostnameAddr bool Hostname(unsigned long addr)
static int LUACALL wxIPV4address_SetHostnameAddr(lua_State *L)
{    
    bool returns;    
    unsigned long addr = (unsigned long) getnumbertype(L, 2);
    wxIPV4address *self = (wxIPV4address*)getuserdatatype(L, 1, s_wxIPV4address);
    returns = self->Hostname(addr);
    lua_pushboolean(L, returns);
    return 1;
}

// wxString Hostname()
static int LUACALL wxIPV4address_Hostname(lua_State *L)
{    
    wxString returns;
    wxIPV4address *self = (wxIPV4address*)getuserdatatype(L, 1, s_wxIPV4address);
    returns = self->Hostname();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// %rename SetService bool Service(const wxString& service)
static int LUACALL wxIPV4address_SetService(lua_State *L)
{    
    bool returns;    
    wxString service = lua2wx(getstringtype(L, 2));
    wxIPV4address *self = (wxIPV4address*)getuserdatatype(L, 1, s_wxIPV4address);
    returns = self->Service(service);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename SetServicePort bool Service(unsigned short service)
static int LUACALL wxIPV4address_SetServicePort(lua_State *L)
{    
    bool returns;    
    unsigned short service = (unsigned short) getnumbertype(L, 2);
    wxIPV4address *self = (wxIPV4address*)getuserdatatype(L, 1, s_wxIPV4address);
    returns = self->Service(service);
    lua_pushboolean(L, returns);
    return 1;
}

// unsigned short Service()
static int LUACALL wxIPV4address_Service(lua_State *L)
{    
    unsigned short returns;
    wxIPV4address *self = (wxIPV4address*)getuserdatatype(L, 1, s_wxIPV4address);
    returns = self->Service();
    lua_pushnumber(L, returns);
    return 1;
}

// bool AnyAddress()
static int LUACALL wxIPV4address_AnyAddress(lua_State *L)
{    
    bool returns;
    wxIPV4address *self = (wxIPV4address*)getuserdatatype(L, 1, s_wxIPV4address);
    returns = self->AnyAddress();
    lua_pushboolean(L, returns);
    return 1;
}

// bool LocalHost()
static int LUACALL wxIPV4address_LocalHost(lua_State *L)
{    
    bool returns;
    wxIPV4address *self = (wxIPV4address*)getuserdatatype(L, 1, s_wxIPV4address);
    returns = self->LocalHost();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxRect2DDouble_destructor(lua_State *L)
{
    wxRect2DDouble * self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxRect2DDouble_Delete(lua_State *L)
{
    wxRect2DDouble * self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxRect2DDouble(wxDouble x=0, wxDouble y=0, wxDouble w=0, wxDouble h=0)
static int LUACALL wxRect2DDouble_constructor(lua_State *L)
{    
    wxRect2DDouble *returns;
    int argCount = lua_gettop(L);    
    double h = (argCount >= 4 ? (double) getnumbertype(L, 4) : 0);
    double w = (argCount >= 3 ? (double) getnumbertype(L, 3) : 0);
    double y = (argCount >= 2 ? (double) getnumbertype(L, 2) : 0);
    double x = (argCount >= 1 ? (double) getnumbertype(L, 1) : 0);
    returns = new wxRect2DDouble(x, y, w, h);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect2DDouble, returns);
    return 1;
}

// wxPoint2DDouble GetPosition()
static int LUACALL wxRect2DDouble_GetPosition(lua_State *L)
{    
    wxPoint2DDouble *returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxPoint2DDouble(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DDouble, returns);
    return 1;
}

// wxSize GetSize()
static int LUACALL wxRect2DDouble_GetSize(lua_State *L)
{    
    wxSize *returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxSize(self->GetSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// wxDouble GetLeft() const
static int LUACALL wxRect2DDouble_GetLeft(lua_State *L)
{    
    double returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->GetLeft();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetLeft( wxDouble n )
static int LUACALL wxRect2DDouble_SetLeft(lua_State *L)
{        
    double n = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->SetLeft(n);
    return 0;
}

// void MoveLeftTo( wxDouble n )
static int LUACALL wxRect2DDouble_MoveLeftTo(lua_State *L)
{        
    double n = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->MoveLeftTo(n);
    return 0;
}

// wxDouble GetTop() const
static int LUACALL wxRect2DDouble_GetTop(lua_State *L)
{    
    double returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->GetTop();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetTop( wxDouble n )
static int LUACALL wxRect2DDouble_SetTop(lua_State *L)
{        
    double n = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->SetTop(n);
    return 0;
}

// void MoveTopTo( wxDouble n )
static int LUACALL wxRect2DDouble_MoveTopTo(lua_State *L)
{        
    double n = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->MoveTopTo(n);
    return 0;
}

// wxDouble GetBottom() const
static int LUACALL wxRect2DDouble_GetBottom(lua_State *L)
{    
    double returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->GetBottom();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetBottom( wxDouble n )
static int LUACALL wxRect2DDouble_SetBottom(lua_State *L)
{        
    double n = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->SetBottom(n);
    return 0;
}

// void MoveBottomTo( wxDouble n )
static int LUACALL wxRect2DDouble_MoveBottomTo(lua_State *L)
{        
    double n = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->MoveBottomTo(n);
    return 0;
}

// wxDouble GetRight() const
static int LUACALL wxRect2DDouble_GetRight(lua_State *L)
{    
    double returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->GetRight();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetRight( wxDouble n )
static int LUACALL wxRect2DDouble_SetRight(lua_State *L)
{        
    double n = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->SetRight(n);
    return 0;
}

// void MoveRightTo( wxDouble n )
static int LUACALL wxRect2DDouble_MoveRightTo(lua_State *L)
{        
    double n = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->MoveRightTo(n);
    return 0;
}

// wxPoint2DDouble GetLeftTop() const
static int LUACALL wxRect2DDouble_GetLeftTop(lua_State *L)
{    
    wxPoint2DDouble *returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxPoint2DDouble(self->GetLeftTop());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DDouble, returns);
    return 1;
}

// void SetLeftTop( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_SetLeftTop(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->SetLeftTop(*pt);
    return 0;
}

// void MoveLeftTopTo( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_MoveLeftTopTo(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->MoveLeftTopTo(*pt);
    return 0;
}

// wxPoint2DDouble GetLeftBottom() const
static int LUACALL wxRect2DDouble_GetLeftBottom(lua_State *L)
{    
    wxPoint2DDouble *returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxPoint2DDouble(self->GetLeftBottom());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DDouble, returns);
    return 1;
}

// void SetLeftBottom( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_SetLeftBottom(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->SetLeftBottom(*pt);
    return 0;
}

// void MoveLeftBottomTo( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_MoveLeftBottomTo(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->MoveLeftBottomTo(*pt);
    return 0;
}

// wxPoint2DDouble GetRightTop() const
static int LUACALL wxRect2DDouble_GetRightTop(lua_State *L)
{    
    wxPoint2DDouble *returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxPoint2DDouble(self->GetRightTop());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DDouble, returns);
    return 1;
}

// void SetRightTop( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_SetRightTop(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->SetRightTop(*pt);
    return 0;
}

// void MoveRightTopTo( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_MoveRightTopTo(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->MoveRightTopTo(*pt);
    return 0;
}

// wxPoint2DDouble GetRightBottom() const
static int LUACALL wxRect2DDouble_GetRightBottom(lua_State *L)
{    
    wxPoint2DDouble *returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxPoint2DDouble(self->GetRightBottom());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DDouble, returns);
    return 1;
}

// void SetRightBottom( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_SetRightBottom(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->SetRightBottom(*pt);
    return 0;
}

// void MoveRightBottomTo( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_MoveRightBottomTo(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->MoveRightBottomTo(*pt);
    return 0;
}

// wxPoint2DDouble GetCentre() const
static int LUACALL wxRect2DDouble_GetCentre(lua_State *L)
{    
    wxPoint2DDouble *returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxPoint2DDouble(self->GetCentre());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DDouble, returns);
    return 1;
}

// void SetCentre( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_SetCentre(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->SetCentre(*pt);
    return 0;
}

// void MoveCentreTo( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_MoveCentreTo(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->MoveCentreTo(*pt);
    return 0;
}

// wxOutCode GetOutCode( const wxPoint2DDouble &pt ) const
static int LUACALL wxRect2DDouble_GetOutCode(lua_State *L)
{    
    wxOutCode returns;    
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->GetOutCode(*pt);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename ContainsPoint bool Contains( const wxPoint2DDouble &pt ) const
static int LUACALL wxRect2DDouble_ContainsPoint(lua_State *L)
{    
    bool returns;    
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->Contains(*pt);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename ContainsRect  bool Contains( const wxRect2DDouble &rect ) const
static int LUACALL wxRect2DDouble_ContainsRect(lua_State *L)
{    
    bool returns;    
    const wxRect2DDouble *rect = (wxRect2DDouble*)getuserdatatype(L, 2, s_wxRect2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->Contains(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEmpty() const
static int LUACALL wxRect2DDouble_IsEmpty(lua_State *L)
{    
    bool returns;
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->IsEmpty();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HaveEqualSize( const wxRect2DDouble &rect ) const
static int LUACALL wxRect2DDouble_HaveEqualSize(lua_State *L)
{    
    bool returns;    
    const wxRect2DDouble *rect = (wxRect2DDouble*)getuserdatatype(L, 2, s_wxRect2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->HaveEqualSize(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// void Inset( wxDouble left, wxDouble top, wxDouble right, wxDouble bottom  )
static int LUACALL wxRect2DDouble_Inset(lua_State *L)
{        
    double bottom = (double) getnumbertype(L, 5);
    double right = (double) getnumbertype(L, 4);
    double top = (double) getnumbertype(L, 3);
    double left = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->Inset(left, top, right, bottom);
    return 0;
}

// void Offset( const wxPoint2DDouble &pt )
static int LUACALL wxRect2DDouble_Offset(lua_State *L)
{        
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->Offset(*pt);
    return 0;
}

// void ConstrainTo( const wxRect2DDouble &rect )
static int LUACALL wxRect2DDouble_ConstrainTo(lua_State *L)
{        
    const wxRect2DDouble *rect = (wxRect2DDouble*)getuserdatatype(L, 2, s_wxRect2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->ConstrainTo(*rect);
    return 0;
}

// wxPoint2DDouble Interpolate( wxInt32 widthfactor , wxInt32 heightfactor )
static int LUACALL wxRect2DDouble_Interpolate(lua_State *L)
{    
    wxPoint2DDouble *returns;    
    int heightfactor = (int) getnumbertype(L, 3);
    int widthfactor = (int) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxPoint2DDouble(self->Interpolate(widthfactor, heightfactor));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DDouble, returns);
    return 1;
}

// void Intersect( const wxRect2DDouble &otherRect )
static int LUACALL wxRect2DDouble_Intersect(lua_State *L)
{        
    const wxRect2DDouble *otherRect = (wxRect2DDouble*)getuserdatatype(L, 2, s_wxRect2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->Intersect(*otherRect);
    return 0;
}

// wxRect2DDouble CreateIntersection( const wxRect2DDouble &otherRect ) const
static int LUACALL wxRect2DDouble_CreateIntersection(lua_State *L)
{    
    wxRect2DDouble *returns;    
    const wxRect2DDouble *otherRect = (wxRect2DDouble*)getuserdatatype(L, 2, s_wxRect2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxRect2DDouble(self->CreateIntersection(*otherRect));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect2DDouble, returns);
    return 1;
}

// bool Intersects( const wxRect2DDouble &rect ) const
static int LUACALL wxRect2DDouble_Intersects(lua_State *L)
{    
    bool returns;    
    const wxRect2DDouble *rect = (wxRect2DDouble*)getuserdatatype(L, 2, s_wxRect2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = self->Intersects(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// void Union( const wxRect2DDouble &otherRect )
static int LUACALL wxRect2DDouble_Union(lua_State *L)
{        
    const wxRect2DDouble *otherRect = (wxRect2DDouble*)getuserdatatype(L, 2, s_wxRect2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->Union(*otherRect);
    return 0;
}

// wxRect2DDouble CreateUnion( const wxRect2DDouble &otherRect ) const
static int LUACALL wxRect2DDouble_CreateUnion(lua_State *L)
{    
    wxRect2DDouble *returns;    
    const wxRect2DDouble *otherRect = (wxRect2DDouble*)getuserdatatype(L, 2, s_wxRect2DDouble);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    returns = new wxRect2DDouble(self->CreateUnion(*otherRect));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect2DDouble, returns);
    return 1;
}

// void Scale( wxDouble f )
static int LUACALL wxRect2DDouble_Scale(lua_State *L)
{        
    double f = (double) getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->Scale(f);
    return 0;
}

// %rename X %member wxDouble m_x
static int LUACALL wxRect2DDouble_GetX(lua_State *L)
{
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    lua_pushnumber(L, self->m_x);
    return 1;
}

// %rename X %member wxDouble m_x
static int LUACALL wxRect2DDouble_SetX(lua_State *L)
{
    double val = getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->m_x = val;
    return 0;
}

// %member wxDouble m_y
static int LUACALL wxRect2DDouble_Get_m_y(lua_State *L)
{
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    lua_pushnumber(L, self->m_y);
    return 1;
}

// %member wxDouble m_y
static int LUACALL wxRect2DDouble_Set_m_y(lua_State *L)
{
    double val = getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->m_y = val;
    return 0;
}

// %rename Width %member wxDouble m_width
static int LUACALL wxRect2DDouble_GetWidth(lua_State *L)
{
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    lua_pushnumber(L, self->m_width);
    return 1;
}

// %rename Width %member wxDouble m_width
static int LUACALL wxRect2DDouble_SetWidth(lua_State *L)
{
    double val = getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->m_width = val;
    return 0;
}

// %member wxDouble m_height
static int LUACALL wxRect2DDouble_Get_m_height(lua_State *L)
{
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    lua_pushnumber(L, self->m_height);
    return 1;
}

// %member wxDouble m_height
static int LUACALL wxRect2DDouble_Set_m_height(lua_State *L)
{
    double val = getnumbertype(L, 2);
    wxRect2DDouble *self = (wxRect2DDouble*)getuserdatatype(L, 1, s_wxRect2DDouble);
    self->m_height = val;
    return 0;
}

static int LUACALL wxPoint2DDouble_destructor(lua_State *L)
{
    wxPoint2DDouble * self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPoint2DDouble_Delete(lua_State *L)
{
    wxPoint2DDouble * self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxPoint2DDouble( wxDouble x=0, wxDouble y=0 )
static int LUACALL wxPoint2DDouble_constructor(lua_State *L)
{    
    wxPoint2DDouble *returns;
    int argCount = lua_gettop(L);    
    double y = (argCount >= 2 ? (double) getnumbertype(L, 2) : 0);
    double x = (argCount >= 1 ? (double) getnumbertype(L, 1) : 0);
    returns = new wxPoint2DDouble(x, y);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DDouble, returns);
    return 1;
}

// wxDouble GetVectorLength() const
static int LUACALL wxPoint2DDouble_GetVectorLength(lua_State *L)
{    
    double returns;
    wxPoint2DDouble *self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    returns = self->GetVectorLength();
    lua_pushnumber(L, returns);
    return 1;
}

// wxDouble GetVectorAngle() const
static int LUACALL wxPoint2DDouble_GetVectorAngle(lua_State *L)
{    
    double returns;
    wxPoint2DDouble *self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    returns = self->GetVectorAngle();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetVectorLength( wxDouble length )
static int LUACALL wxPoint2DDouble_SetVectorLength(lua_State *L)
{        
    double length = (double) getnumbertype(L, 2);
    wxPoint2DDouble *self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    self->SetVectorLength(length);
    return 0;
}

// void SetVectorAngle( wxDouble degrees )
static int LUACALL wxPoint2DDouble_SetVectorAngle(lua_State *L)
{        
    double degrees = (double) getnumbertype(L, 2);
    wxPoint2DDouble *self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    self->SetVectorAngle(degrees);
    return 0;
}

// wxDouble GetDistance( const wxPoint2DDouble &pt ) const
static int LUACALL wxPoint2DDouble_GetDistance(lua_State *L)
{    
    double returns;    
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxPoint2DDouble *self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    returns = self->GetDistance(*pt);
    lua_pushnumber(L, returns);
    return 1;
}

// wxDouble GetDistanceSquare( const wxPoint2DDouble &pt ) const
static int LUACALL wxPoint2DDouble_GetDistanceSquare(lua_State *L)
{    
    double returns;    
    const wxPoint2DDouble *pt = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxPoint2DDouble *self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    returns = self->GetDistanceSquare(*pt);
    lua_pushnumber(L, returns);
    return 1;
}

// wxDouble GetDotProduct( const wxPoint2DDouble &vec ) const
static int LUACALL wxPoint2DDouble_GetDotProduct(lua_State *L)
{    
    double returns;    
    const wxPoint2DDouble *vec = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxPoint2DDouble *self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    returns = self->GetDotProduct(*vec);
    lua_pushnumber(L, returns);
    return 1;
}

// wxDouble GetCrossProduct( const wxPoint2DDouble &vec ) const
static int LUACALL wxPoint2DDouble_GetCrossProduct(lua_State *L)
{    
    double returns;    
    const wxPoint2DDouble *vec = (wxPoint2DDouble*)getuserdatatype(L, 2, s_wxPoint2DDouble);
    wxPoint2DDouble *self = (wxPoint2DDouble*)getuserdatatype(L, 1, s_wxPoint2DDouble);
    returns = self->GetCrossProduct(*vec);
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxRect2DInt_destructor(lua_State *L)
{
    wxRect2DInt * self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxRect2DInt_Delete(lua_State *L)
{
    wxRect2DInt * self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxRect2DInt(wxInt32 x=0, wxInt32 y=0, wxInt32 w=0, wxInt32 h=0)
static int LUACALL wxRect2DInt_constructor(lua_State *L)
{    
    wxRect2DInt *returns;
    int argCount = lua_gettop(L);    
    int h = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int w = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    int y = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    int x = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxRect2DInt(x, y, w, h);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect2DInt, returns);
    return 1;
}

// %constructor wxRect2DIntFromwxRect( const wxRect& r )
static int LUACALL wxRect2DIntFromwxRect_constructor(lua_State *L)
{    
    wxRect2DInt *returns;    
    const wxRect *r = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = new wxRect2DInt(*r);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect2DInt, returns);
    return 1;
}

// %constructor wxRect2DIntFromPoints(const wxPoint2DInt& topLeft, const wxPoint2DInt& bottomRight)
static int LUACALL wxRect2DIntFromPoints_constructor(lua_State *L)
{    
    wxRect2DInt *returns;    
    const wxPoint2DInt *bottomRight = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    const wxPoint2DInt *topLeft = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    returns = new wxRect2DInt(*topLeft, *bottomRight);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect2DInt, returns);
    return 1;
}

// %constructor wxRect2DIntFromwxRect2DInt(const wxRect2DInt& rect)
static int LUACALL wxRect2DIntFromwxRect2DInt_constructor(lua_State *L)
{    
    wxRect2DInt *returns;    
    const wxRect2DInt *rect = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxRect2DInt(*rect);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect2DInt, returns);
    return 1;
}

// wxPoint2DInt GetPosition()
static int LUACALL wxRect2DInt_GetPosition(lua_State *L)
{    
    wxPoint2DInt *returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxPoint2DInt(self->GetPosition());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DInt, returns);
    return 1;
}

// wxSize GetSize()
static int LUACALL wxRect2DInt_GetSize(lua_State *L)
{    
    wxSize *returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxSize(self->GetSize());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxSize, returns);
    return 1;
}

// wxInt32 GetLeft() const
static int LUACALL wxRect2DInt_GetLeft(lua_State *L)
{    
    int returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->GetLeft();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetLeft( wxInt32 n )
static int LUACALL wxRect2DInt_SetLeft(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->SetLeft(n);
    return 0;
}

// void MoveLeftTo( wxInt32 n )
static int LUACALL wxRect2DInt_MoveLeftTo(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->MoveLeftTo(n);
    return 0;
}

// wxInt32 GetTop() const
static int LUACALL wxRect2DInt_GetTop(lua_State *L)
{    
    int returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->GetTop();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetTop( wxInt32 n )
static int LUACALL wxRect2DInt_SetTop(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->SetTop(n);
    return 0;
}

// void MoveTopTo( wxInt32 n )
static int LUACALL wxRect2DInt_MoveTopTo(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->MoveTopTo(n);
    return 0;
}

// wxInt32 GetBottom() const
static int LUACALL wxRect2DInt_GetBottom(lua_State *L)
{    
    int returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->GetBottom();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetBottom( wxInt32 n )
static int LUACALL wxRect2DInt_SetBottom(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->SetBottom(n);
    return 0;
}

// void MoveBottomTo( wxInt32 n )
static int LUACALL wxRect2DInt_MoveBottomTo(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->MoveBottomTo(n);
    return 0;
}

// wxInt32 GetRight() const
static int LUACALL wxRect2DInt_GetRight(lua_State *L)
{    
    int returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->GetRight();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetRight( wxInt32 n )
static int LUACALL wxRect2DInt_SetRight(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->SetRight(n);
    return 0;
}

// void MoveRightTo( wxInt32 n )
static int LUACALL wxRect2DInt_MoveRightTo(lua_State *L)
{        
    int n = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->MoveRightTo(n);
    return 0;
}

// wxPoint2DInt GetLeftTop() const
static int LUACALL wxRect2DInt_GetLeftTop(lua_State *L)
{    
    wxPoint2DInt *returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxPoint2DInt(self->GetLeftTop());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DInt, returns);
    return 1;
}

// void SetLeftTop( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_SetLeftTop(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->SetLeftTop(*pt);
    return 0;
}

// void MoveLeftTopTo( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_MoveLeftTopTo(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->MoveLeftTopTo(*pt);
    return 0;
}

// wxPoint2DInt GetLeftBottom() const
static int LUACALL wxRect2DInt_GetLeftBottom(lua_State *L)
{    
    wxPoint2DInt *returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxPoint2DInt(self->GetLeftBottom());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DInt, returns);
    return 1;
}

// void SetLeftBottom( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_SetLeftBottom(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->SetLeftBottom(*pt);
    return 0;
}

// void MoveLeftBottomTo( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_MoveLeftBottomTo(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->MoveLeftBottomTo(*pt);
    return 0;
}

// wxPoint2DInt GetRightTop() const
static int LUACALL wxRect2DInt_GetRightTop(lua_State *L)
{    
    wxPoint2DInt *returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxPoint2DInt(self->GetRightTop());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DInt, returns);
    return 1;
}

// void SetRightTop( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_SetRightTop(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->SetRightTop(*pt);
    return 0;
}

// void MoveRightTopTo( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_MoveRightTopTo(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->MoveRightTopTo(*pt);
    return 0;
}

// wxPoint2DInt GetRightBottom() const
static int LUACALL wxRect2DInt_GetRightBottom(lua_State *L)
{    
    wxPoint2DInt *returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxPoint2DInt(self->GetRightBottom());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DInt, returns);
    return 1;
}

// void SetRightBottom( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_SetRightBottom(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->SetRightBottom(*pt);
    return 0;
}

// void MoveRightBottomTo( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_MoveRightBottomTo(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->MoveRightBottomTo(*pt);
    return 0;
}

// wxPoint2DInt GetCentre() const
static int LUACALL wxRect2DInt_GetCentre(lua_State *L)
{    
    wxPoint2DInt *returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxPoint2DInt(self->GetCentre());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DInt, returns);
    return 1;
}

// void SetCentre( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_SetCentre(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->SetCentre(*pt);
    return 0;
}

// void MoveCentreTo( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_MoveCentreTo(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->MoveCentreTo(*pt);
    return 0;
}

// wxOutCode GetOutCode( const wxPoint2DInt &pt ) const
static int LUACALL wxRect2DInt_GetOutCode(lua_State *L)
{    
    wxOutCode returns;    
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->GetOutCode(*pt);
    lua_pushnumber(L, returns);
    return 1;
}

// wxOutCode GetOutcode( const wxPoint2DInt &pt ) const
static int LUACALL wxRect2DInt_GetOutcode(lua_State *L)
{    
    wxOutCode returns;    
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->GetOutcode(*pt);
    lua_pushnumber(L, returns);
    return 1;
}

// %rename ContainsPoint bool Contains( const wxPoint2DInt &pt ) const
static int LUACALL wxRect2DInt_ContainsPoint(lua_State *L)
{    
    bool returns;    
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->Contains(*pt);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename ContainsRect  bool Contains( const wxRect2DInt &rect ) const
static int LUACALL wxRect2DInt_ContainsRect(lua_State *L)
{    
    bool returns;    
    const wxRect2DInt *rect = (wxRect2DInt*)getuserdatatype(L, 2, s_wxRect2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->Contains(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsEmpty() const
static int LUACALL wxRect2DInt_IsEmpty(lua_State *L)
{    
    bool returns;
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->IsEmpty();
    lua_pushboolean(L, returns);
    return 1;
}

// bool HaveEqualSize( const wxRect2DInt &rect ) const
static int LUACALL wxRect2DInt_HaveEqualSize(lua_State *L)
{    
    bool returns;    
    const wxRect2DInt *rect = (wxRect2DInt*)getuserdatatype(L, 2, s_wxRect2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->HaveEqualSize(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// void Inset( wxInt32 left , wxInt32 top ,wxInt32 right , wxInt32 bottom  )
static int LUACALL wxRect2DInt_Inset(lua_State *L)
{        
    int bottom = (int) getnumbertype(L, 5);
    int right = (int) getnumbertype(L, 4);
    int top = (int) getnumbertype(L, 3);
    int left = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->Inset(left, top, right, bottom);
    return 0;
}

// void Offset( const wxPoint2DInt &pt )
static int LUACALL wxRect2DInt_Offset(lua_State *L)
{        
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->Offset(*pt);
    return 0;
}

// void ConstrainTo( const wxRect2DInt &rect )
static int LUACALL wxRect2DInt_ConstrainTo(lua_State *L)
{        
    const wxRect2DInt *rect = (wxRect2DInt*)getuserdatatype(L, 2, s_wxRect2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->ConstrainTo(*rect);
    return 0;
}

// wxPoint2DInt Interpolate( wxInt32 widthfactor , wxInt32 heightfactor )
static int LUACALL wxRect2DInt_Interpolate(lua_State *L)
{    
    wxPoint2DInt *returns;    
    int heightfactor = (int) getnumbertype(L, 3);
    int widthfactor = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxPoint2DInt(self->Interpolate(widthfactor, heightfactor));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DInt, returns);
    return 1;
}

// void Intersect( const wxRect2DInt &otherRect )
static int LUACALL wxRect2DInt_Intersect(lua_State *L)
{        
    const wxRect2DInt *otherRect = (wxRect2DInt*)getuserdatatype(L, 2, s_wxRect2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->Intersect(*otherRect);
    return 0;
}

// wxRect2DInt CreateIntersection( const wxRect2DInt &otherRect ) const
static int LUACALL wxRect2DInt_CreateIntersection(lua_State *L)
{    
    wxRect2DInt *returns;    
    const wxRect2DInt *otherRect = (wxRect2DInt*)getuserdatatype(L, 2, s_wxRect2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxRect2DInt(self->CreateIntersection(*otherRect));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect2DInt, returns);
    return 1;
}

// bool Intersects( const wxRect2DInt &rect ) const
static int LUACALL wxRect2DInt_Intersects(lua_State *L)
{    
    bool returns;    
    const wxRect2DInt *rect = (wxRect2DInt*)getuserdatatype(L, 2, s_wxRect2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = self->Intersects(*rect);
    lua_pushboolean(L, returns);
    return 1;
}

// void Union( const wxRect2DInt &otherRect )
static int LUACALL wxRect2DInt_Union(lua_State *L)
{        
    const wxRect2DInt *otherRect = (wxRect2DInt*)getuserdatatype(L, 2, s_wxRect2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->Union(*otherRect);
    return 0;
}

// wxRect2DInt CreateUnion( const wxRect2DInt &otherRect ) const
static int LUACALL wxRect2DInt_CreateUnion(lua_State *L)
{    
    wxRect2DInt *returns;    
    const wxRect2DInt *otherRect = (wxRect2DInt*)getuserdatatype(L, 2, s_wxRect2DInt);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    returns = new wxRect2DInt(self->CreateUnion(*otherRect));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect2DInt, returns);
    return 1;
}

// void Scale( wxInt32 f )
static int LUACALL wxRect2DInt_Scale(lua_State *L)
{        
    int f = (int) getnumbertype(L, 2);
    wxRect2DInt *self = (wxRect2DInt*)getuserdatatype(L, 1, s_wxRect2DInt);
    self->Scale(f);
    return 0;
}

static int LUACALL wxPoint2DInt_destructor(lua_State *L)
{
    wxPoint2DInt * self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxPoint2DInt_Delete(lua_State *L)
{
    wxPoint2DInt * self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %constructor wxPoint2DInt( wxInt32 x=0, wxInt32 y=0 )
static int LUACALL wxPoint2DInt_constructor(lua_State *L)
{    
    wxPoint2DInt *returns;
    int argCount = lua_gettop(L);    
    int y = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    int x = (argCount >= 1 ? (int) getnumbertype(L, 1) : 0);
    returns = new wxPoint2DInt(x, y);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint2DInt, returns);
    return 1;
}

// wxDouble GetVectorLength() const
static int LUACALL wxPoint2DInt_GetVectorLength(lua_State *L)
{    
    double returns;
    wxPoint2DInt *self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    returns = self->GetVectorLength();
    lua_pushnumber(L, returns);
    return 1;
}

// wxDouble GetVectorAngle() const
static int LUACALL wxPoint2DInt_GetVectorAngle(lua_State *L)
{    
    double returns;
    wxPoint2DInt *self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    returns = self->GetVectorAngle();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetVectorLength( wxDouble length )
static int LUACALL wxPoint2DInt_SetVectorLength(lua_State *L)
{        
    double length = (double) getnumbertype(L, 2);
    wxPoint2DInt *self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    self->SetVectorLength(length);
    return 0;
}

// void SetVectorAngle( wxDouble degrees )
static int LUACALL wxPoint2DInt_SetVectorAngle(lua_State *L)
{        
    double degrees = (double) getnumbertype(L, 2);
    wxPoint2DInt *self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    self->SetVectorAngle(degrees);
    return 0;
}

// wxDouble GetDistance( const wxPoint2DInt &pt ) const
static int LUACALL wxPoint2DInt_GetDistance(lua_State *L)
{    
    double returns;    
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxPoint2DInt *self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    returns = self->GetDistance(*pt);
    lua_pushnumber(L, returns);
    return 1;
}

// wxDouble GetDistanceSquare( const wxPoint2DInt &pt ) const
static int LUACALL wxPoint2DInt_GetDistanceSquare(lua_State *L)
{    
    double returns;    
    const wxPoint2DInt *pt = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxPoint2DInt *self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    returns = self->GetDistanceSquare(*pt);
    lua_pushnumber(L, returns);
    return 1;
}

// wxInt32 GetDotProduct( const wxPoint2DInt &vec ) const
static int LUACALL wxPoint2DInt_GetDotProduct(lua_State *L)
{    
    int returns;    
    const wxPoint2DInt *vec = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxPoint2DInt *self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    returns = self->GetDotProduct(*vec);
    lua_pushnumber(L, returns);
    return 1;
}

// wxInt32 GetCrossProduct( const wxPoint2DInt &vec ) const
static int LUACALL wxPoint2DInt_GetCrossProduct(lua_State *L)
{    
    int returns;    
    const wxPoint2DInt *vec = (wxPoint2DInt*)getuserdatatype(L, 2, s_wxPoint2DInt);
    wxPoint2DInt *self = (wxPoint2DInt*)getuserdatatype(L, 1, s_wxPoint2DInt);
    returns = self->GetCrossProduct(*vec);
    lua_pushnumber(L, returns);
    return 1;
}

static int LUACALL wxWave_destructor(lua_State *L)
{
    wxWave * self = (wxWave*)getuserdatatype(L, 1, s_wxWave);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxWave_Delete(lua_State *L)
{
    wxWave * self = (wxWave*)getuserdatatype(L, 1, s_wxWave);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxWave(const wxString& fileName, bool isResource = FALSE)
static int LUACALL wxWave_constructor(lua_State *L)
{    
    wxWave *returns;
    int argCount = lua_gettop(L);    
    bool isResource = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxString fileName = lua2wx(getstringtype(L, 1));
    returns = new wxWave(fileName, isResource);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxWave, returns);
    return 1;
}

// %constructor wxWaveDefault()
static int LUACALL wxWaveDefault_constructor(lua_State *L)
{    
    wxWave *returns;
    returns = new wxWave();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxWave, returns);
    return 1;
}

// bool Create(const wxString& fileName, bool isResource = FALSE)
static int LUACALL wxWave_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool isResource = (argCount >= 3 ? getbooleantype(L, 3) : FALSE);
    wxString fileName = lua2wx(getstringtype(L, 2));
    wxWave *self = (wxWave*)getuserdatatype(L, 1, s_wxWave);
    returns = self->Create(fileName, isResource);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsOk() const
static int LUACALL wxWave_IsOk(lua_State *L)
{    
    bool returns;
    wxWave *self = (wxWave*)getuserdatatype(L, 1, s_wxWave);
    returns = self->IsOk();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxRegEx_destructor(lua_State *L)
{
    wxRegEx * self = (wxRegEx*)getuserdatatype(L, 1, s_wxRegEx);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxRegEx_Delete(lua_State *L)
{
    wxRegEx * self = (wxRegEx*)getuserdatatype(L, 1, s_wxRegEx);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %constructor wxRegExDefault()
static int LUACALL wxRegExDefault_constructor(lua_State *L)
{    
    wxRegEx *returns;
    returns = new wxRegEx();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRegEx, returns);
    return 1;
}

// wxRegEx(const wxString& expr, int flags = wxRE_DEFAULT)
static int LUACALL wxRegEx_constructor(lua_State *L)
{    
    wxRegEx *returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxRE_DEFAULT);
    wxString expr = lua2wx(getstringtype(L, 1));
    returns = new wxRegEx(expr, flags);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRegEx, returns);
    return 1;
}

// bool Compile(const wxString& pattern, int flags = wxRE_DEFAULT)
static int LUACALL wxRegEx_Compile(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxRE_DEFAULT);
    wxString pattern = lua2wx(getstringtype(L, 2));
    wxRegEx *self = (wxRegEx*)getuserdatatype(L, 1, s_wxRegEx);
    returns = self->Compile(pattern, flags);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsValid() const
static int LUACALL wxRegEx_IsValid(lua_State *L)
{    
    bool returns;
    wxRegEx *self = (wxRegEx*)getuserdatatype(L, 1, s_wxRegEx);
    returns = self->IsValid();
    lua_pushboolean(L, returns);
    return 1;
}

// wxString GetMatch(const wxString& text, size_t index = 0) const
static int LUACALL wxRegEx_GetMatch(lua_State *L)
{    
    wxString returns;
    int argCount = lua_gettop(L);    
    size_t index = (argCount >= 3 ? (size_t) getnumbertype(L, 3) : 0);
    wxString text = lua2wx(getstringtype(L, 2));
    wxRegEx *self = (wxRegEx*)getuserdatatype(L, 1, s_wxRegEx);
    returns = self->GetMatch(text, index);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool Matches(const wxString &text, int flags = 0) const
static int LUACALL wxRegEx_Matches(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 3 ? (int) getnumbertype(L, 3) : 0);
    wxString text = lua2wx(getstringtype(L, 2));
    wxRegEx *self = (wxRegEx*)getuserdatatype(L, 1, s_wxRegEx);
    returns = self->Matches(text, flags);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename GetMatchPointer bool GetMatch(size_t* start, size_t* len, size_t index = 0) const
static int LUACALL wxRegEx_GetMatchIndexes(lua_State *L)
{
    bool returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t index = 0
    size_t index = (argCount >= 2 ? (size_t) getnumbertype(L, 2) : 0);
    // size_t* len
    size_t len = 0;
    // size_t* start
    size_t start = 0;
    // get this
    wxRegEx *self = ( wxRegEx * ) getuserdatatype(L, 1, s_wxRegEx );
    // call GetMatch
    returns = self->GetMatch(&start, &len, index);
    // push the result number
    lua_pushboolean(L, returns);
    // push the match start and length indexes
    lua_pushnumber(L, start);
    lua_pushnumber(L, len);
    // return the number of parameters
    return 3;
}

// int Replace(wxString* text, const wxString& replacement, size_t maxMatches = 0) const
static int LUACALL wxRegEx_Replace(lua_State *L)
{
    int returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t maxMatches = 0
    size_t maxMatches = (argCount >= 4 ? (size_t) getnumbertype(L, 4) : 0);
    // const wxString& replacement
    wxString replacement = lua2wx(getstringtype(L, 3));
    // wxString* text
    wxString text = lua2wx(getstringtype(L, 2));
    // get this
    wxRegEx *self = ( wxRegEx * ) getuserdatatype(L, 1, s_wxRegEx );
    // call Replace
    returns = self->Replace(&text, replacement, maxMatches);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result text
    lua_pushstring(L, wx2lua(text));
    // return the number of parameters
    return 2;
}

// int ReplaceAll(wxString* text, const wxString& replacement) const
static int LUACALL wxRegEx_ReplaceAll(lua_State *L)
{
    int returns;
    // const wxString& replacement
    wxString replacement = lua2wx(getstringtype(L, 3));
    // wxString* text
    wxString text = lua2wx(getstringtype(L, 2));
    // get this
    wxRegEx *self = ( wxRegEx * ) getuserdatatype(L, 1, s_wxRegEx );
    // call ReplaceAll
    returns = self->ReplaceAll(&text, replacement);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result text
    lua_pushstring(L, wx2lua(text));
    // return the number of parameters
    return 2;
}

// int ReplaceFirst(wxString* text, const wxString& replacement) const
static int LUACALL wxRegEx_ReplaceFirst(lua_State *L)
{
    int returns;
    // const wxString& replacement
    wxString replacement = lua2wx(getstringtype(L, 3));
    // wxString* text
    wxString text = lua2wx(getstringtype(L, 2));
    // get this
    wxRegEx *self = ( wxRegEx * ) getuserdatatype(L, 1, s_wxRegEx );
    // call ReplaceFirst
    returns = self->ReplaceFirst(&text, replacement);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result text
    lua_pushstring(L, wx2lua(text));
    // return the number of parameters
    return 2;
}

static int LUACALL wxLuaInterpreter_destructor(lua_State *L)
{
    wxLuaInterpreter * self = (wxLuaInterpreter*)getuserdatatype(L, 1, s_wxLuaInterpreter);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxLuaInterpreter_Delete(lua_State *L)
{
    wxLuaInterpreter * self = (wxLuaInterpreter*)getuserdatatype(L, 1, s_wxLuaInterpreter);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

static int LUACALL wxLuaObject_destructor(lua_State *L)
{
    wxLuaObject * self = (wxLuaObject*)getuserdatatype(L, 1, s_wxLuaObject);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxLuaObject_Delete(lua_State *L)
{
    wxLuaObject * self = (wxLuaObject*)getuserdatatype(L, 1, s_wxLuaObject);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxLuaObject(void *object)
static int LUACALL wxLuaObject_constructor(lua_State *L)
{
    wxLuaObject *returns;
    // call constructor
    returns = new wxLuaObject(L, 1);
    // add to tracked memory list
    addToTrackedMemoryList(L, returns);
    // push the constructed class pointer
    pushuserdatatype(L, s_wxLuaObject, returns );
    // return the number of parameters
    return 1;
}

// void SetObject(void *object)
static int LUACALL wxLuaObject_SetObject(lua_State *L)
{
    // get this
    wxLuaObject *self = ( wxLuaObject * ) getuserdatatype(L, 1, s_wxLuaObject );
    // call SetObject
    self->SetObject(1);
    // return the number of parameters
    return 0;
}

// void *GetObject() const
static int LUACALL wxLuaObject_GetObject(lua_State *L)
{
    // get this
    wxLuaObject *self = ( wxLuaObject * ) getuserdatatype(L, 1, s_wxLuaObject );
    // call GetObject
    if (self->GetObject())
        return 1;
    return 0;
}

// int GetAllocationFlags() const
static int LUACALL wxLuaObject_GetAllocationFlags(lua_State *L)
{    
    int returns;
    wxLuaObject *self = (wxLuaObject*)getuserdatatype(L, 1, s_wxLuaObject);
    returns = self->GetAllocationFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// void ModifyAllocationFlags(int iValue)
static int LUACALL wxLuaObject_ModifyAllocationFlags(lua_State *L)
{        
    int iValue = (int) getnumbertype(L, 2);
    wxLuaObject *self = (wxLuaObject*)getuserdatatype(L, 1, s_wxLuaObject);
    self->ModifyAllocationFlags(iValue);
    return 0;
}

static int LUACALL wxLuaDebugServer_destructor(lua_State *L)
{
    wxLuaDebugServer * self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxLuaDebugServer_Delete(lua_State *L)
{
    wxLuaDebugServer * self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxLuaDebugServer(int portNumber)
static int LUACALL wxLuaDebugServer_constructor(lua_State *L)
{    
    wxLuaDebugServer *returns;    
    int portNumber = (int) getnumbertype(L, 1);
    returns = new wxLuaDebugServer(portNumber);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxLuaDebugServer, returns);
    return 1;
}

// %constructor wxLuaDebugServerCompile(const wxString &buffer, const wxString &fileName)
static int LUACALL wxLuaDebugServerCompile_constructor(lua_State *L)
{
    // const wxString &fileName
    wxString fileName = lua2wx(getstringtype(L, 2));
    // const wxString &buffer
    wxString buffer = lua2wx(getstringtype(L, 1));
    // compile the file
    bool fResult = wxLuaDebugServer::Compile(buffer, fileName);
    // push result
    lua_pushboolean(L, fResult);
    // return the number of parameters
    return 1;
}

// bool StartClient()
static int LUACALL wxLuaDebugServer_StartClient(lua_State *L)
{    
    bool returns;
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->StartClient();
    lua_pushboolean(L, returns);
    return 1;
}

// bool StartServerThread()
static int LUACALL wxLuaDebugServer_StartServerThread(lua_State *L)
{    
    bool returns;
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->StartServerThread();
    lua_pushboolean(L, returns);
    return 1;
}

// bool AddBreakPoint(const wxString &fileName, int lineNumber)
static int LUACALL wxLuaDebugServer_AddBreakPoint(lua_State *L)
{    
    bool returns;    
    int lineNumber = (int) getnumbertype(L, 3);
    wxString fileName = lua2wx(getstringtype(L, 2));
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->AddBreakPoint(fileName, lineNumber);
    lua_pushboolean(L, returns);
    return 1;
}

// bool RemoveBreakPoint(const wxString &fileName, int lineNumber)
static int LUACALL wxLuaDebugServer_RemoveBreakPoint(lua_State *L)
{    
    bool returns;    
    int lineNumber = (int) getnumbertype(L, 3);
    wxString fileName = lua2wx(getstringtype(L, 2));
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->RemoveBreakPoint(fileName, lineNumber);
    lua_pushboolean(L, returns);
    return 1;
}

// bool ClearAllBreakPoints()
static int LUACALL wxLuaDebugServer_ClearAllBreakPoints(lua_State *L)
{    
    bool returns;
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->ClearAllBreakPoints();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Run(const wxString &file, const wxString &fileName)
static int LUACALL wxLuaDebugServer_Run(lua_State *L)
{    
    bool returns;    
    wxString fileName = lua2wx(getstringtype(L, 3));
    wxString file = lua2wx(getstringtype(L, 2));
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->Run(file, fileName);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Step()
static int LUACALL wxLuaDebugServer_Step(lua_State *L)
{    
    bool returns;
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->Step();
    lua_pushboolean(L, returns);
    return 1;
}

// bool StepOver()
static int LUACALL wxLuaDebugServer_StepOver(lua_State *L)
{    
    bool returns;
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->StepOver();
    lua_pushboolean(L, returns);
    return 1;
}

// bool StepOut()
static int LUACALL wxLuaDebugServer_StepOut(lua_State *L)
{    
    bool returns;
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->StepOut();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Continue()
static int LUACALL wxLuaDebugServer_Continue(lua_State *L)
{    
    bool returns;
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->Continue();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Break()
static int LUACALL wxLuaDebugServer_Break(lua_State *L)
{    
    bool returns;
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->Break();
    lua_pushboolean(L, returns);
    return 1;
}

// bool Reset()
static int LUACALL wxLuaDebugServer_Reset(lua_State *L)
{    
    bool returns;
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->Reset();
    lua_pushboolean(L, returns);
    return 1;
}

// void DisplayStackDialog(wxWindow *pParent)
static int LUACALL wxLuaDebugServer_DisplayStackDialog(lua_State *L)
{        
    wxWindow *pParent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    self->DisplayStackDialog(pParent);
    return 0;
}

// bool EvaluateExpr(int exprRef, const wxString &expr)
static int LUACALL wxLuaDebugServer_EvaluateExpr(lua_State *L)
{    
    bool returns;    
    wxString expr = lua2wx(getstringtype(L, 3));
    int exprRef = (int) getnumbertype(L, 2);
    wxLuaDebugServer *self = (wxLuaDebugServer*)getuserdatatype(L, 1, s_wxLuaDebugServer);
    returns = self->EvaluateExpr(exprRef, expr);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxLuaDebugData_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxLuaDebugEvent_destructor(lua_State *)
{
    return 0;
}

// int GetLineNumber() const
static int LUACALL wxLuaDebugEvent_GetLineNumber(lua_State *L)
{    
    int returns;
    wxLuaDebugEvent *self = (wxLuaDebugEvent*)getuserdatatype(L, 1, s_wxLuaDebugEvent);
    returns = self->GetLineNumber();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetReference() const
static int LUACALL wxLuaDebugEvent_GetReference(lua_State *L)
{    
    int returns;
    wxLuaDebugEvent *self = (wxLuaDebugEvent*)getuserdatatype(L, 1, s_wxLuaDebugEvent);
    returns = self->GetReference();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetFileName() const
static int LUACALL wxLuaDebugEvent_GetFileName(lua_State *L)
{    
    wxString returns;
    wxLuaDebugEvent *self = (wxLuaDebugEvent*)getuserdatatype(L, 1, s_wxLuaDebugEvent);
    returns = self->GetFileName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetMessage() const
static int LUACALL wxLuaDebugEvent_GetMessage(lua_State *L)
{    
    wxString returns;
    wxLuaDebugEvent *self = (wxLuaDebugEvent*)getuserdatatype(L, 1, s_wxLuaDebugEvent);
    returns = self->GetMessage();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// const wxLuaDebugData *GetDebugData() const
static int LUACALL wxLuaDebugEvent_GetDebugData(lua_State *L)
{    
    const wxLuaDebugData *returns;
    wxLuaDebugEvent *self = (wxLuaDebugEvent*)getuserdatatype(L, 1, s_wxLuaDebugEvent);
    returns = self->GetDebugData();
    pushuserdatatype(L, s_wxLuaDebugData, returns);
    return 1;
}

static int LUACALL wxLuaPrintout_destructor(lua_State *L)
{
    wxLuaPrintout * self = (wxLuaPrintout*)getuserdatatype(L, 1, s_wxLuaPrintout);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxLuaPrintout_Delete(lua_State *L)
{
    wxLuaPrintout * self = (wxLuaPrintout*)getuserdatatype(L, 1, s_wxLuaPrintout);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxLuaPrintout(const wxString& title = "Printout", wxLuaObject *pObject = NULL)
static int LUACALL wxLuaPrintout_constructor(lua_State *L)
{    
    wxLuaPrintout *returns;
    int argCount = lua_gettop(L);    
    wxLuaObject *pObject = (argCount >= 2 ? (wxLuaObject*)getuserdatatype(L, 2, s_wxLuaObject) : NULL);
    wxString title = (argCount >= 1 ? lua2wx(getstringtype(L, 1)) : wxT("Printout"));
    returns = new wxLuaPrintout(title, pObject);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxLuaPrintout, returns);
    return 1;
}

// wxLuaObject *GetID()
static int LUACALL wxLuaPrintout_GetID(lua_State *L)
{    
    wxLuaObject *returns;
    wxLuaPrintout *self = (wxLuaPrintout*)getuserdatatype(L, 1, s_wxLuaPrintout);
    returns = self->GetID();
    pushuserdatatype(L, s_wxLuaObject, returns);
    return 1;
}

// void SetPageInfo(int minPage, int maxPage, int pageFrom = 0, int pageTo = 0)
static int LUACALL wxLuaPrintout_SetPageInfo(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int pageTo = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int pageFrom = (argCount >= 4 ? (int) getnumbertype(L, 4) : 0);
    int maxPage = (int) getnumbertype(L, 3);
    int minPage = (int) getnumbertype(L, 2);
    wxLuaPrintout *self = (wxLuaPrintout*)getuserdatatype(L, 1, s_wxLuaPrintout);
    self->SetPageInfo(minPage, maxPage, pageFrom, pageTo);
    return 0;
}

static int LUACALL wxLuaHtmlWindow_destructor(lua_State *)
{
    return 0;
}

// wxLuaHtmlWindow(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHW_SCROLLBAR_AUTO, const wxString& name = "htmlWindow")
static int LUACALL wxLuaHtmlWindow_constructor(lua_State *L)
{    
    wxLuaHtmlWindow *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("htmlWindow"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxHW_SCROLLBAR_AUTO);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (argCount >= 2 ? (wxWindowID) getnumbertype(L, 2) : -1);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxLuaHtmlWindow(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxLuaHtmlWindow, returns);
    return 1;
}

static int LUACALL wxLuaHtmlWinTagEvent_destructor(lua_State *)
{
    return 0;
}

// const wxHtmlTag      *GetHtmlTag() const
static int LUACALL wxLuaHtmlWinTagEvent_GetHtmlTag(lua_State *L)
{    
    const wxHtmlTag *returns;
    wxLuaHtmlWinTagEvent *self = (wxLuaHtmlWinTagEvent*)getuserdatatype(L, 1, s_wxLuaHtmlWinTagEvent);
    returns = self->GetHtmlTag();
    pushuserdatatype(L, s_wxHtmlTag, returns);
    return 1;
}

// wxHtmlWinParser      *GetHtmlParser() const
static int LUACALL wxLuaHtmlWinTagEvent_GetHtmlParser(lua_State *L)
{    
    wxHtmlWinParser *returns;
    wxLuaHtmlWinTagEvent *self = (wxLuaHtmlWinTagEvent*)getuserdatatype(L, 1, s_wxLuaHtmlWinTagEvent);
    returns = self->GetHtmlParser();
    pushuserdatatype(L, s_wxHtmlWinParser, returns);
    return 1;
}

// void                  SetParseInnerCalled(bool fParseInnerCalled = true)
static int LUACALL wxLuaHtmlWinTagEvent_SetParseInnerCalled(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool fParseInnerCalled = (argCount >= 2 ? getbooleantype(L, 2) : true);
    wxLuaHtmlWinTagEvent *self = (wxLuaHtmlWinTagEvent*)getuserdatatype(L, 1, s_wxLuaHtmlWinTagEvent);
    self->SetParseInnerCalled(fParseInnerCalled);
    return 0;
}

// bool                  GetParseInnerCalled() const
static int LUACALL wxLuaHtmlWinTagEvent_GetParseInnerCalled(lua_State *L)
{    
    bool returns;
    wxLuaHtmlWinTagEvent *self = (wxLuaHtmlWinTagEvent*)getuserdatatype(L, 1, s_wxLuaHtmlWinTagEvent);
    returns = self->GetParseInnerCalled();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxFrameLayout_destructor(lua_State *L)
{
    wxFrameLayout * self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxFrameLayout_Delete(lua_State *L)
{
    wxFrameLayout * self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %constructor wxFrameLayoutDefault()
static int LUACALL wxFrameLayoutDefault_constructor(lua_State *L)
{    
    wxFrameLayout *returns;
    returns = new wxFrameLayout();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFrameLayout, returns);
    return 1;
}

// wxFrameLayout(wxWindow* pParentFrame, wxWindow* pFrameClient = NULL, bool activateNow = TRUE)
static int LUACALL wxFrameLayout_constructor(lua_State *L)
{    
    wxFrameLayout *returns;
    int argCount = lua_gettop(L);    
    bool activateNow = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    wxWindow *pFrameClient = (argCount >= 2 ? (wxWindow*)getuserdatatype(L, 2, s_wxWindow) : NULL);
    wxWindow *pParentFrame = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxFrameLayout(pParentFrame, pFrameClient, activateNow);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxFrameLayout, returns);
    return 1;
}

// void EnableFloating(bool enable = TRUE)
static int LUACALL wxFrameLayout_EnableFloating(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool enable = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->EnableFloating(enable);
    return 0;
}

// void Activate()
static int LUACALL wxFrameLayout_Activate(lua_State *L)
{    
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->Activate();
    return 0;
}

// void Deactivate()
static int LUACALL wxFrameLayout_Deactivate(lua_State *L)
{    
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->Deactivate();
    return 0;
}

// void HideBarWindows()
static int LUACALL wxFrameLayout_HideBarWindows(lua_State *L)
{    
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->HideBarWindows();
    return 0;
}

// void DestroyBarWindows()
static int LUACALL wxFrameLayout_DestroyBarWindows(lua_State *L)
{    
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->DestroyBarWindows();
    return 0;
}

// void SetFrameClient(wxWindow* pFrameClient)
static int LUACALL wxFrameLayout_SetFrameClient(lua_State *L)
{        
    wxWindow *pFrameClient = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->SetFrameClient(pFrameClient);
    return 0;
}

// wxWindow* GetFrameClient()
static int LUACALL wxFrameLayout_GetFrameClient(lua_State *L)
{    
    wxWindow *returns;
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = self->GetFrameClient();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// wxWindow& GetParentFrame()
static int LUACALL wxFrameLayout_GetParentFrame(lua_State *L)
{    
    wxWindow *returns;
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = &self->GetParentFrame();
    pushuserdatatype(L, s_wxWindow, returns);
    return 1;
}

// cbDockPane* GetNthPane(int nth)
static int LUACALL wxFrameLayout_GetNthPane(lua_State *L)
{
    cbDockPane *returns;
    // int nth
    int nth = (int) getnumbertype(L, 2);
    // get this
    wxFrameLayout *self = ( wxFrameLayout * ) getuserdatatype(L, 1, s_wxFrameLayout );
    // call GetNthPane
    returns = self->GetPanesArray()[(nth)];
    // push the result datatype
    pushuserdatatype(L, s_cbDockPane, returns );
    // return the number of parameters
    return 1;
}

// cbDockPane* GetPane(int alignment)
static int LUACALL wxFrameLayout_GetPane(lua_State *L)
{    
    cbDockPane *returns;    
    int alignment = (int) getnumbertype(L, 2);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = self->GetPane(alignment);
    pushuserdatatype(L, s_cbDockPane, returns);
    return 1;
}

// void AddBar( wxWindow* pBarWnd, const cbDimInfo& dimInfo, int alignment = FL_ALIGN_TOP, int rowNo = 0, int columnPos = 0, const wxString& name="bar", bool spyEvents = FALSE, int state = wxCBAR_DOCKED_HORIZONTALLY)
static int LUACALL wxFrameLayout_AddBar(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int state = (argCount >= 9 ? (int) getnumbertype(L, 9) : wxCBAR_DOCKED_HORIZONTALLY);
    bool spyEvents = (argCount >= 8 ? getbooleantype(L, 8) : FALSE);
    wxString name = (argCount >= 7 ? lua2wx(getstringtype(L, 7)) : wxT("bar"));
    int columnPos = (argCount >= 6 ? (int) getnumbertype(L, 6) : 0);
    int rowNo = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    int alignment = (argCount >= 4 ? (int) getnumbertype(L, 4) : FL_ALIGN_TOP);
    const cbDimInfo *dimInfo = (cbDimInfo*)getuserdatatype(L, 3, s_cbDimInfo);
    wxWindow *pBarWnd = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->AddBar(pBarWnd, *dimInfo, alignment, rowNo, columnPos, name, spyEvents, state);
    return 0;
}

// bool RedockBar(cbBarInfo* pBar, const wxRect& shapeInParent, cbDockPane* pToPane = NULL, bool updateNow = TRUE)
static int LUACALL wxFrameLayout_RedockBar(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    bool updateNow = (argCount >= 5 ? getbooleantype(L, 5) : TRUE);
    cbDockPane *pToPane = (argCount >= 4 ? (cbDockPane*)getuserdatatype(L, 4, s_cbDockPane) : NULL);
    const wxRect *shapeInParent = (wxRect*)getuserdatatype(L, 3, s_wxRect);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = self->RedockBar(pBar, *shapeInParent, pToPane, updateNow);
    lua_pushboolean(L, returns);
    return 1;
}

// cbBarInfo* FindBarByName(const wxString& name)
static int LUACALL wxFrameLayout_FindBarByName(lua_State *L)
{    
    cbBarInfo *returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = self->FindBarByName(name);
    pushuserdatatype(L, s_cbBarInfo, returns);
    return 1;
}

// cbBarInfo* FindBarByWindow(const wxWindow* pWnd)
static int LUACALL wxFrameLayout_FindBarByWindow(lua_State *L)
{    
    cbBarInfo *returns;    
    const wxWindow *pWnd = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = self->FindBarByWindow(pWnd);
    pushuserdatatype(L, s_cbBarInfo, returns);
    return 1;
}

// int GetNumBars()
static int LUACALL wxFrameLayout_GetNumBars(lua_State *L)
{
    int returns;
    // get this
    wxFrameLayout *self = ( wxFrameLayout * ) getuserdatatype(L, 1, s_wxFrameLayout );
    // call GetNumBars
    returns = self->GetBars().Count();
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}

// cbBarInfo *GetNthBar(int nth)
static int LUACALL wxFrameLayout_GetNthBar(lua_State *L)
{
    cbBarInfo *returns;
    // int nth
    int nth = (int) getnumbertype(L, 2);
    // get this
    wxFrameLayout *self = ( wxFrameLayout * ) getuserdatatype(L, 1, s_wxFrameLayout );
    // call GetNthBar
    returns = self->GetBars().Item(nth);
    // push the result datatype
    pushuserdatatype(L, s_cbBarInfo, returns );
    // return the number of parameters
    return 1;
}

// void SetBarState(cbBarInfo* pBar, int newStatem, bool updateNow)
static int LUACALL wxFrameLayout_SetBarState(lua_State *L)
{        
    bool updateNow = getbooleantype(L, 4);
    int newStatem = (int) getnumbertype(L, 3);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->SetBarState(pBar, newStatem, updateNow);
    return 0;
}

// void InverseVisibility(cbBarInfo* pBar)
static int LUACALL wxFrameLayout_InverseVisibility(lua_State *L)
{        
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->InverseVisibility(pBar);
    return 0;
}

// void ApplyBarProperties(cbBarInfo* pBar)
static int LUACALL wxFrameLayout_ApplyBarProperties(lua_State *L)
{        
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->ApplyBarProperties(pBar);
    return 0;
}

// void RemoveBar(cbBarInfo* pBar)
static int LUACALL wxFrameLayout_RemoveBar(lua_State *L)
{        
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->RemoveBar(pBar);
    return 0;
}

// void RecalcLayout(bool repositionBarsNow = FALSE)
static int LUACALL wxFrameLayout_RecalcLayout(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool repositionBarsNow = (argCount >= 2 ? getbooleantype(L, 2) : FALSE);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->RecalcLayout(repositionBarsNow);
    return 0;
}

// int  GetClientHeight()
static int LUACALL wxFrameLayout_GetClientHeight(lua_State *L)
{    
    int returns;
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = self->GetClientHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetClientWidth()
static int LUACALL wxFrameLayout_GetClientWidth(lua_State *L)
{    
    int returns;
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = self->GetClientWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// wxRect GetClientRect()
static int LUACALL wxFrameLayout_GetClientRect(lua_State *L)
{    
    wxRect *returns;
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new wxRect(self->GetClientRect());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// cbUpdatesManagerBase &GetUpdatesManager()
static int LUACALL wxFrameLayout_GetUpdatesManager(lua_State *L)
{
    // get this
    wxFrameLayout *self = ( wxFrameLayout * ) getuserdatatype(L, 1, s_wxFrameLayout );
    // call GetUpdatesManager
    cbUpdatesManagerBase *returns = self->mpUpdatesMgr;
    // push the result datatype
    pushuserdatatype(L, s_cbUpdatesManagerBase, returns );
    // return the number of parameters
    return 1;
}

// void SetUpdatesManager(cbUpdatesManagerBase* pUMgr)
static int LUACALL wxFrameLayout_SetUpdatesManager(lua_State *L)
{        
    cbUpdatesManagerBase *pUMgr = (cbUpdatesManagerBase*)getuserdatatype(L, 2, s_cbUpdatesManagerBase);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->SetUpdatesManager(pUMgr);
    return 0;
}

class cbLuaCommonPaneProperties : public cbCommonPaneProperties
{
public:
    cbLuaCommonPaneProperties()
       : cbCommonPaneProperties()
    {
    }
    void SetRealTimeUpdates(bool fOn = true)
    {
        mRealTimeUpdatesOn = fOn;
    }
    void SetOutOfPaneDrag(bool fOn = true)
    {
        mOutOfPaneDragOn = fOn;
    }
    void SetExactDockPrediction(bool fOn = true)
    {
        mExactDockPredictionOn = fOn;
    }
    void SetNonDestructFriction(bool fOn = true)
    {
        mNonDestructFrictionOn = fOn;
    }
    void SetShow3DPaneBorder(bool fOn = true)
    {
        mShow3DPaneBorderOn = fOn;
    }
};
// void GetPaneProperties(cbCommonPaneProperties& props, int alignment = FL_ALIGN_TOP)
static int LUACALL wxFrameLayout_GetPaneProperties(lua_State *L)
{
    // cbCommonPaneProperties& props
    cbLuaCommonPaneProperties *returns = new cbLuaCommonPaneProperties;
    // get number of arguments
    int argCount = lua_gettop(L);
    // int alignment = FL_ALIGN_TOP
    int alignment = (argCount >= 2 ? (int) getnumbertype(L, 2) : FL_ALIGN_TOP);
    // get this
    wxFrameLayout *self = ( wxFrameLayout * ) getuserdatatype(L, 1, s_wxFrameLayout );
    // call GetPaneProperties
    self->GetPaneProperties(*returns, alignment);
    //
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_cbLuaCommonPaneProperties, returns);
    // return the number of parameters
    return 1;
}

// void SetPaneProperties(const cbCommonPaneProperties& props, int paneMask = wxALL_PANES)
static int LUACALL wxFrameLayout_SetPaneProperties(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxALL_PANES);
    const cbCommonPaneProperties *props = (cbCommonPaneProperties*)getuserdatatype(L, 2, s_cbCommonPaneProperties);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->SetPaneProperties(*props, paneMask);
    return 0;
}

// void SetMargins(int top, int bottom, int left, int right, int paneMask = wxALL_PANES)
static int LUACALL wxFrameLayout_SetMargins(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 6 ? (int) getnumbertype(L, 6) : wxALL_PANES);
    int right = (int) getnumbertype(L, 5);
    int left = (int) getnumbertype(L, 4);
    int bottom = (int) getnumbertype(L, 3);
    int top = (int) getnumbertype(L, 2);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->SetMargins(top, bottom, left, right, paneMask);
    return 0;
}

// void SetPaneBackground(const wxColour& colour)
static int LUACALL wxFrameLayout_SetPaneBackground(lua_State *L)
{        
    const wxColour *colour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->SetPaneBackground(*colour);
    return 0;
}

// void RefreshNow(bool recalcLayout = TRUE)
static int LUACALL wxFrameLayout_RefreshNow(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool recalcLayout = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->RefreshNow(recalcLayout);
    return 0;
}

// void FirePluginEvent(cbPluginEvent& event)
static int LUACALL wxFrameLayout_FirePluginEvent(lua_State *L)
{        
    cbPluginEvent *event = (cbPluginEvent*)getuserdatatype(L, 2, s_cbPluginEvent);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->FirePluginEvent(*event);
    return 0;
}

// void CaptureEventsForPlugin (cbPluginBase* pPlugin)
static int LUACALL wxFrameLayout_CaptureEventsForPlugin(lua_State *L)
{        
    cbPluginBase *pPlugin = (cbPluginBase*)getuserdatatype(L, 2, s_cbPluginBase);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->CaptureEventsForPlugin(pPlugin);
    return 0;
}

// void ReleaseEventsFromPlugin(cbPluginBase* pPlugin)
static int LUACALL wxFrameLayout_ReleaseEventsFromPlugin(lua_State *L)
{        
    cbPluginBase *pPlugin = (cbPluginBase*)getuserdatatype(L, 2, s_cbPluginBase);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->ReleaseEventsFromPlugin(pPlugin);
    return 0;
}

// void CaptureEventsForPane(cbDockPane* toPane)
static int LUACALL wxFrameLayout_CaptureEventsForPane(lua_State *L)
{        
    cbDockPane *toPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->CaptureEventsForPane(toPane);
    return 0;
}

// void ReleaseEventsFromPane(cbDockPane* fromPane)
static int LUACALL wxFrameLayout_ReleaseEventsFromPane(lua_State *L)
{        
    cbDockPane *fromPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->ReleaseEventsFromPane(fromPane);
    return 0;
}

// cbPluginBase& GetTopPlugin()
static int LUACALL wxFrameLayout_GetTopPlugin(lua_State *L)
{    
    cbPluginBase *returns;
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = &self->GetTopPlugin();
    pushuserdatatype(L, s_cbPluginBase, returns);
    return 1;
}

// void SetTopPlugin(cbPluginBase* pPlugin)
static int LUACALL wxFrameLayout_SetTopPlugin(lua_State *L)
{        
    cbPluginBase *pPlugin = (cbPluginBase*)getuserdatatype(L, 2, s_cbPluginBase);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->SetTopPlugin(pPlugin);
    return 0;
}

// void PushPlugin(cbPluginBase* pPugin)
static int LUACALL wxFrameLayout_PushPlugin(lua_State *L)
{        
    cbPluginBase *pPugin = (cbPluginBase*)getuserdatatype(L, 2, s_cbPluginBase);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->PushPlugin(pPugin);
    return 0;
}

// void PopPlugin()
static int LUACALL wxFrameLayout_PopPlugin(lua_State *L)
{    
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->PopPlugin();
    return 0;
}

// void PopAllPlugins()
static int LUACALL wxFrameLayout_PopAllPlugins(lua_State *L)
{    
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->PopAllPlugins();
    return 0;
}

// void PushDefaultPlugins()
static int LUACALL wxFrameLayout_PushDefaultPlugins(lua_State *L)
{    
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->PushDefaultPlugins();
    return 0;
}

// void AddPlugin(wxClassInfo* pPlInfo, int paneMask = wxALL_PANES)
static int LUACALL wxFrameLayout_AddPlugin(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 3 ? (int) getnumbertype(L, 3) : wxALL_PANES);
    wxClassInfo *pPlInfo = (wxClassInfo*)getuserdatatype(L, 2, s_wxClassInfo);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->AddPlugin(pPlInfo, paneMask);
    return 0;
}

// void AddPluginBefore(wxClassInfo* pNextPlInfo, wxClassInfo* pPlInfo, int paneMask = wxALL_PANES)
static int LUACALL wxFrameLayout_AddPluginBefore(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 4 ? (int) getnumbertype(L, 4) : wxALL_PANES);
    wxClassInfo *pPlInfo = (wxClassInfo*)getuserdatatype(L, 3, s_wxClassInfo);
    wxClassInfo *pNextPlInfo = (wxClassInfo*)getuserdatatype(L, 2, s_wxClassInfo);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->AddPluginBefore(pNextPlInfo, pPlInfo, paneMask);
    return 0;
}

// void RemovePlugin(wxClassInfo* pPlInfo)
static int LUACALL wxFrameLayout_RemovePlugin(lua_State *L)
{        
    wxClassInfo *pPlInfo = (wxClassInfo*)getuserdatatype(L, 2, s_wxClassInfo);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    self->RemovePlugin(pPlInfo);
    return 0;
}

// cbPluginBase* FindPlugin(wxClassInfo* pPlInfo)
static int LUACALL wxFrameLayout_FindPlugin(lua_State *L)
{    
    cbPluginBase *returns;    
    wxClassInfo *pPlInfo = (wxClassInfo*)getuserdatatype(L, 2, s_wxClassInfo);
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = self->FindPlugin(pPlInfo);
    pushuserdatatype(L, s_cbPluginBase, returns);
    return 1;
}

// bool HasTopPlugin()
static int LUACALL wxFrameLayout_HasTopPlugin(lua_State *L)
{    
    bool returns;
    wxFrameLayout *self = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = self->HasTopPlugin();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL cbBarSpy_destructor(lua_State *)
{
    return 0;
}

// %constructor cbBarSpyDefault()
static int LUACALL cbBarSpyDefault_constructor(lua_State *L)
{    
    cbBarSpy *returns;
    returns = new cbBarSpy();
    pushuserdatatype(L, s_cbBarSpy, returns);
    return 1;
}

// cbBarSpy( wxFrameLayout* pPanel)
static int LUACALL cbBarSpy_constructor(lua_State *L)
{    
    cbBarSpy *returns;    
    wxFrameLayout *pPanel = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new cbBarSpy(pPanel);
    pushuserdatatype(L, s_cbBarSpy, returns);
    return 1;
}

// void SetBarWindow(wxWindow* pWnd)
static int LUACALL cbBarSpy_SetBarWindow(lua_State *L)
{        
    wxWindow *pWnd = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    cbBarSpy *self = (cbBarSpy*)getuserdatatype(L, 1, s_cbBarSpy);
    self->SetBarWindow(pWnd);
    return 0;
}

static int LUACALL cbUpdateMgrData_destructor(lua_State *)
{
    return 0;
}

// cbUpdateMgrData()
static int LUACALL cbUpdateMgrData_constructor(lua_State *L)
{    
    cbUpdateMgrData *returns;
    returns = new cbUpdateMgrData();
    pushuserdatatype(L, s_cbUpdateMgrData, returns);
    return 1;
}

// void StoreItemState(const wxRect& boundsInParent)
static int LUACALL cbUpdateMgrData_StoreItemState(lua_State *L)
{        
    const wxRect *boundsInParent = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    cbUpdateMgrData *self = (cbUpdateMgrData*)getuserdatatype(L, 1, s_cbUpdateMgrData);
    self->StoreItemState(*boundsInParent);
    return 0;
}

// void SetDirty(bool isDirty = TRUE)
static int LUACALL cbUpdateMgrData_SetDirty(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool isDirty = (argCount >= 2 ? getbooleantype(L, 2) : TRUE);
    cbUpdateMgrData *self = (cbUpdateMgrData*)getuserdatatype(L, 1, s_cbUpdateMgrData);
    self->SetDirty(isDirty);
    return 0;
}

// void SetCustomData(wxObject* pCustomData)
static int LUACALL cbUpdateMgrData_SetCustomData(lua_State *L)
{        
    wxObject *pCustomData = (wxObject*)getuserdatatype(L, 2, s_wxObject);
    cbUpdateMgrData *self = (cbUpdateMgrData*)getuserdatatype(L, 1, s_cbUpdateMgrData);
    self->SetCustomData(pCustomData);
    return 0;
}

// bool IsDirty()
static int LUACALL cbUpdateMgrData_IsDirty(lua_State *L)
{    
    bool returns;
    cbUpdateMgrData *self = (cbUpdateMgrData*)getuserdatatype(L, 1, s_cbUpdateMgrData);
    returns = self->IsDirty();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL cbBarDimHandlerBase_destructor(lua_State *)
{
    return 0;
}

// void AddRef();
static int LUACALL cbBarDimHandlerBase_AddRef(lua_State *L)
{    
    cbBarDimHandlerBase *self = (cbBarDimHandlerBase*)getuserdatatype(L, 1, s_cbBarDimHandlerBase);
    self->AddRef();
    return 0;
}

// void RemoveRef();
static int LUACALL cbBarDimHandlerBase_RemoveRef(lua_State *L)
{    
    cbBarDimHandlerBase *self = (cbBarDimHandlerBase*)getuserdatatype(L, 1, s_cbBarDimHandlerBase);
    self->RemoveRef();
    return 0;
}

static int LUACALL cbDimInfo_destructor(lua_State *L)
{
    cbDimInfo * self = (cbDimInfo*)getuserdatatype(L, 1, s_cbDimInfo);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL cbDimInfo_Delete(lua_State *L)
{
    cbDimInfo * self = (cbDimInfo*)getuserdatatype(L, 1, s_cbDimInfo);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %constructor cbDimInfoDefault()
static int LUACALL cbDimInfoDefault_constructor(lua_State *L)
{    
    cbDimInfo *returns;
    returns = new cbDimInfo();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_cbDimInfo, returns);
    return 1;
}

// %constructor cbDimInfoFixed(cbBarDimHandlerBase* pDimHandler, bool isFixed)
static int LUACALL cbDimInfoFixed_constructor(lua_State *L)
{    
    cbDimInfo *returns;    
    bool isFixed = getbooleantype(L, 2);
    cbBarDimHandlerBase *pDimHandler = (cbBarDimHandlerBase*)getuserdatatype(L, 1, s_cbBarDimHandlerBase);
    returns = new cbDimInfo(pDimHandler, isFixed);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_cbDimInfo, returns);
    return 1;
}

// cbDimInfo(int dh_x, int dh_y, int dv_x, int dv_y, int f_x, int f_y, bool isFixed = TRUE, int horizGap = 6, int vertGap = 6, cbBarDimHandlerBase* pDimHandler = NULL)
static int LUACALL cbDimInfo_constructor(lua_State *L)
{    
    cbDimInfo *returns;
    int argCount = lua_gettop(L);    
    cbBarDimHandlerBase *pDimHandler = (argCount >= 10 ? (cbBarDimHandlerBase*)getuserdatatype(L, 10, s_cbBarDimHandlerBase) : NULL);
    int vertGap = (argCount >= 9 ? (int) getnumbertype(L, 9) : 6);
    int horizGap = (argCount >= 8 ? (int) getnumbertype(L, 8) : 6);
    bool isFixed = (argCount >= 7 ? getbooleantype(L, 7) : TRUE);
    int f_y = (int) getnumbertype(L, 6);
    int f_x = (int) getnumbertype(L, 5);
    int dv_y = (int) getnumbertype(L, 4);
    int dv_x = (int) getnumbertype(L, 3);
    int dh_y = (int) getnumbertype(L, 2);
    int dh_x = (int) getnumbertype(L, 1);
    returns = new cbDimInfo(dh_x, dh_y, dv_x, dv_y, f_x, f_y, isFixed, horizGap, vertGap, pDimHandler);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_cbDimInfo, returns);
    return 1;
}

// %constructor cbDimInfoXY( int x, int y, bool isFixed = TRUE, int gap = 6, cbBarDimHandlerBase *pDimHandler = NULL)
static int LUACALL cbDimInfoXY_constructor(lua_State *L)
{    
    cbDimInfo *returns;
    int argCount = lua_gettop(L);    
    cbBarDimHandlerBase *pDimHandler = (argCount >= 5 ? (cbBarDimHandlerBase*)getuserdatatype(L, 5, s_cbBarDimHandlerBase) : NULL);
    int gap = (argCount >= 4 ? (int) getnumbertype(L, 4) : 6);
    bool isFixed = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    int y = (int) getnumbertype(L, 2);
    int x = (int) getnumbertype(L, 1);
    returns = new cbDimInfo(x, y, isFixed, gap, pDimHandler);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_cbDimInfo, returns);
    return 1;
}

// cbBarDimHandlerBase* GetDimHandler()
static int LUACALL cbDimInfo_GetDimHandler(lua_State *L)
{    
    cbBarDimHandlerBase *returns;
    cbDimInfo *self = (cbDimInfo*)getuserdatatype(L, 1, s_cbDimInfo);
    returns = self->GetDimHandler();
    pushuserdatatype(L, s_cbBarDimHandlerBase, returns);
    return 1;
}

static int LUACALL cbRowInfo_destructor(lua_State *)
{
    return 0;
}

// cbRowInfo()
static int LUACALL cbRowInfo_constructor(lua_State *L)
{    
    cbRowInfo *returns;
    returns = new cbRowInfo();
    pushuserdatatype(L, s_cbRowInfo, returns);
    return 1;
}

// cbBarInfo* GetFirstBar()
static int LUACALL cbRowInfo_GetFirstBar(lua_State *L)
{    
    cbBarInfo *returns;
    cbRowInfo *self = (cbRowInfo*)getuserdatatype(L, 1, s_cbRowInfo);
    returns = self->GetFirstBar();
    pushuserdatatype(L, s_cbBarInfo, returns);
    return 1;
}

static int LUACALL cbBarInfo_destructor(lua_State *)
{
    return 0;
}

// cbBarInfo();
static int LUACALL cbBarInfo_constructor(lua_State *L)
{    
    cbBarInfo *returns;
    returns = new cbBarInfo();
    pushuserdatatype(L, s_cbBarInfo, returns);
    return 1;
}

// bool IsFixed() const
static int LUACALL cbBarInfo_IsFixed(lua_State *L)
{    
    bool returns;
    cbBarInfo *self = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = self->IsFixed();
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsExpanded() const
static int LUACALL cbBarInfo_IsExpanded(lua_State *L)
{    
    bool returns;
    cbBarInfo *self = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = self->IsExpanded();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL cbBarShapeData_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxBarIterator_destructor(lua_State *)
{
    return 0;
}

// void Reset()
static int LUACALL wxBarIterator_Reset(lua_State *L)
{    
    wxBarIterator *self = (wxBarIterator*)getuserdatatype(L, 1, s_wxBarIterator);
    self->Reset();
    return 0;
}

// bool Next()
static int LUACALL wxBarIterator_Next(lua_State *L)
{    
    bool returns;
    wxBarIterator *self = (wxBarIterator*)getuserdatatype(L, 1, s_wxBarIterator);
    returns = self->Next();
    lua_pushboolean(L, returns);
    return 1;
}

// cbBarInfo& BarInfo()
static int LUACALL wxBarIterator_BarInfo(lua_State *L)
{    
    cbBarInfo *returns;
    wxBarIterator *self = (wxBarIterator*)getuserdatatype(L, 1, s_wxBarIterator);
    returns = &self->BarInfo();
    pushuserdatatype(L, s_cbBarInfo, returns);
    return 1;
}

// cbRowInfo& RowInfo()
static int LUACALL wxBarIterator_RowInfo(lua_State *L)
{    
    cbRowInfo *returns;
    wxBarIterator *self = (wxBarIterator*)getuserdatatype(L, 1, s_wxBarIterator);
    returns = &self->RowInfo();
    pushuserdatatype(L, s_cbRowInfo, returns);
    return 1;
}

static int LUACALL cbCommonPaneProperties_destructor(lua_State *)
{
    return 0;
}

// cbCommonPaneProperties()
static int LUACALL cbCommonPaneProperties_constructor(lua_State *L)
{    
    cbCommonPaneProperties *returns;
    returns = new cbCommonPaneProperties();
    pushuserdatatype(L, s_cbCommonPaneProperties, returns);
    return 1;
}

static int LUACALL cbLuaCommonPaneProperties_destructor(lua_State *L)
{
    cbLuaCommonPaneProperties * self = (cbLuaCommonPaneProperties*)getuserdatatype(L, 1, s_cbLuaCommonPaneProperties);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL cbLuaCommonPaneProperties_Delete(lua_State *L)
{
    cbLuaCommonPaneProperties * self = (cbLuaCommonPaneProperties*)getuserdatatype(L, 1, s_cbLuaCommonPaneProperties);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// cbLuaCommonPaneProperties()
static int LUACALL cbLuaCommonPaneProperties_constructor(lua_State *L)
{    
    cbLuaCommonPaneProperties *returns;
    returns = new cbLuaCommonPaneProperties();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_cbLuaCommonPaneProperties, returns);
    return 1;
}

// void SetRealTimeUpdates(bool fOn = true)
static int LUACALL cbLuaCommonPaneProperties_SetRealTimeUpdates(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool fOn = (argCount >= 2 ? getbooleantype(L, 2) : true);
    cbLuaCommonPaneProperties *self = (cbLuaCommonPaneProperties*)getuserdatatype(L, 1, s_cbLuaCommonPaneProperties);
    self->SetRealTimeUpdates(fOn);
    return 0;
}

// void SetOutOfPaneDrag(bool fOn = true)
static int LUACALL cbLuaCommonPaneProperties_SetOutOfPaneDrag(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool fOn = (argCount >= 2 ? getbooleantype(L, 2) : true);
    cbLuaCommonPaneProperties *self = (cbLuaCommonPaneProperties*)getuserdatatype(L, 1, s_cbLuaCommonPaneProperties);
    self->SetOutOfPaneDrag(fOn);
    return 0;
}

// void SetExactDockPrediction(bool fOn = true)
static int LUACALL cbLuaCommonPaneProperties_SetExactDockPrediction(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool fOn = (argCount >= 2 ? getbooleantype(L, 2) : true);
    cbLuaCommonPaneProperties *self = (cbLuaCommonPaneProperties*)getuserdatatype(L, 1, s_cbLuaCommonPaneProperties);
    self->SetExactDockPrediction(fOn);
    return 0;
}

// void SetNonDestructFriction(bool fOn = true)
static int LUACALL cbLuaCommonPaneProperties_SetNonDestructFriction(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool fOn = (argCount >= 2 ? getbooleantype(L, 2) : true);
    cbLuaCommonPaneProperties *self = (cbLuaCommonPaneProperties*)getuserdatatype(L, 1, s_cbLuaCommonPaneProperties);
    self->SetNonDestructFriction(fOn);
    return 0;
}

// void SetShow3DPaneBorder(bool fOn = true)
static int LUACALL cbLuaCommonPaneProperties_SetShow3DPaneBorder(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool fOn = (argCount >= 2 ? getbooleantype(L, 2) : true);
    cbLuaCommonPaneProperties *self = (cbLuaCommonPaneProperties*)getuserdatatype(L, 1, s_cbLuaCommonPaneProperties);
    self->SetShow3DPaneBorder(fOn);
    return 0;
}

static int LUACALL cbDockPane_destructor(lua_State *)
{
    return 0;
}

// %constructor cbDockPaneDefault()
static int LUACALL cbDockPaneDefault_constructor(lua_State *L)
{    
    cbDockPane *returns;
    returns = new cbDockPane();
    pushuserdatatype(L, s_cbDockPane, returns);
    return 1;
}

// cbDockPane(int alignment, wxFrameLayout* pPanel)
static int LUACALL cbDockPane_constructor(lua_State *L)
{    
    cbDockPane *returns;    
    wxFrameLayout *pPanel = (wxFrameLayout*)getuserdatatype(L, 2, s_wxFrameLayout);
    int alignment = (int) getnumbertype(L, 1);
    returns = new cbDockPane(alignment, pPanel);
    pushuserdatatype(L, s_cbDockPane, returns);
    return 1;
}

// void SetMargins(int top, int bottom, int left, int right)
static int LUACALL cbDockPane_SetMargins(lua_State *L)
{        
    int right = (int) getnumbertype(L, 5);
    int left = (int) getnumbertype(L, 4);
    int bottom = (int) getnumbertype(L, 3);
    int top = (int) getnumbertype(L, 2);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->SetMargins(top, bottom, left, right);
    return 0;
}

// void RemoveBar(cbBarInfo* pBar)
static int LUACALL cbDockPane_RemoveBar(lua_State *L)
{        
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->RemoveBar(pBar);
    return 0;
}

// %rename InsertBarRect void InsertBar(cbBarInfo* pBar, const wxRect& rect)
static int LUACALL cbDockPane_InsertBarRect(lua_State *L)
{        
    const wxRect *rect = (wxRect*)getuserdatatype(L, 3, s_wxRect);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->InsertBar(pBar, *rect);
    return 0;
}

// %rename InsertBarInto void InsertBar(cbBarInfo* pBar, cbRowInfo* pIntoRow)
static int LUACALL cbDockPane_InsertBarInto(lua_State *L)
{        
    cbRowInfo *pIntoRow = (cbRowInfo*)getuserdatatype(L, 3, s_cbRowInfo);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->InsertBar(pBar, pIntoRow);
    return 0;
}

// void InsertBar(cbBarInfo* pBarInfo)
static int LUACALL cbDockPane_InsertBar(lua_State *L)
{        
    cbBarInfo *pBarInfo = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->InsertBar(pBarInfo);
    return 0;
}

// void RemoveRow(cbRowInfo* pRow)
static int LUACALL cbDockPane_RemoveRow(lua_State *L)
{        
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 2, s_cbRowInfo);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->RemoveRow(pRow);
    return 0;
}

// void InsertRow(cbRowInfo* pRow, cbRowInfo* pBeforeRow)
static int LUACALL cbDockPane_InsertRow(lua_State *L)
{        
    cbRowInfo *pBeforeRow = (cbRowInfo*)getuserdatatype(L, 3, s_cbRowInfo);
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 2, s_cbRowInfo);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->InsertRow(pRow, pBeforeRow);
    return 0;
}

// void SetPaneWidth(int width)
static int LUACALL cbDockPane_SetPaneWidth(lua_State *L)
{        
    int width = (int) getnumbertype(L, 2);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->SetPaneWidth(width);
    return 0;
}

// void SetBoundsInParent(const wxRect& rect)
static int LUACALL cbDockPane_SetBoundsInParent(lua_State *L)
{        
    const wxRect *rect = (wxRect*)getuserdatatype(L, 2, s_wxRect);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->SetBoundsInParent(*rect);
    return 0;
}

// wxRect& GetRealRect()
static int LUACALL cbDockPane_GetRealRect(lua_State *L)
{    
    wxRect *returns;
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = &self->GetRealRect();
    pushuserdatatype(L, s_wxRect, returns);
    return 1;
}

// wxBarIterator* GetRowList();
static int LUACALL cbDockPane_GetRowList(lua_State *L)
{
    wxBarIterator *returns;
    // get this
    cbDockPane *self = ( cbDockPane * ) getuserdatatype(L, 1, s_cbDockPane );
    // call GetRowList
    returns = new wxBarIterator(self->GetRowList());
    // push the result datatype
    pushuserdatatype(L, s_wxBarIterator, returns );
    // return the number of parameters
    return 1;
}

// cbRowInfo* GetFirstRow()
static int LUACALL cbDockPane_GetFirstRow(lua_State *L)
{    
    cbRowInfo *returns;
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = self->GetFirstRow();
    pushuserdatatype(L, s_cbRowInfo, returns);
    return 1;
}

// bool BarPresent(cbBarInfo* pBar)
static int LUACALL cbDockPane_BarPresent(lua_State *L)
{    
    bool returns;    
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 2, s_cbBarInfo);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = self->BarPresent(pBar);
    lua_pushboolean(L, returns);
    return 1;
}

// int GetPaneHeight()
static int LUACALL cbDockPane_GetPaneHeight(lua_State *L)
{    
    int returns;
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = self->GetPaneHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetAlignment()
static int LUACALL cbDockPane_GetAlignment(lua_State *L)
{    
    int returns;
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = self->GetAlignment();
    lua_pushnumber(L, returns);
    return 1;
}

// bool MatchesMask(int paneMask)
static int LUACALL cbDockPane_MatchesMask(lua_State *L)
{    
    bool returns;    
    int paneMask = (int) getnumbertype(L, 2);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = self->MatchesMask(paneMask);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsHorizontal()
static int LUACALL cbDockPane_IsHorizontal(lua_State *L)
{    
    bool returns;
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = self->IsHorizontal();
    lua_pushboolean(L, returns);
    return 1;
}

// void RecalcLayout()
static int LUACALL cbDockPane_RecalcLayout(lua_State *L)
{    
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    self->RecalcLayout();
    return 0;
}

// int GetDockingState()
static int LUACALL cbDockPane_GetDockingState(lua_State *L)
{    
    int returns;
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = self->GetDockingState();
    lua_pushnumber(L, returns);
    return 1;
}

// int HitTestPaneItems(const wxPoint& pos, cbRowInfo** ppRow, cbBarInfo** ppBar)
static int LUACALL cbDockPane_HitTestPaneItems(lua_State *L)
{
    int returns;
    // cbBarInfo** ppBar
    cbBarInfo *ppBar = NULL;
    // cbRowInfo** ppRow
    cbRowInfo *ppRow = NULL;
    // const wxPoint& pos
    const wxPoint *pos = (wxPoint *) getuserdatatype(L, 2, s_wxPoint);
    // get this
    cbDockPane *self = ( cbDockPane * ) getuserdatatype(L, 1, s_cbDockPane );
    // call HitTestPaneItems
    returns = self->HitTestPaneItems(*pos, &ppRow, &ppBar);
    // push the result number
    lua_pushnumber(L, returns);
    if (ppRow != NULL)
        pushuserdatatype(L, s_cbRowInfo, ppRow);
    else
        lua_pushnil(L);
    if (ppBar != NULL)
        pushuserdatatype(L, s_cbBarInfo, ppBar);
    else
        lua_pushnil(L);
    // return the number of parameters
    return 3;
}

// void GetBarResizeRange(cbBarInfo* pBar, int* from, int *till, bool forLeftHandle)
static int LUACALL cbDockPane_GetBarResizeRange(lua_State *L)
{
    // bool forLeftHandle
    bool forLeftHandle = getbooleantype(L, 3);
    // int *till
    int till;
    // int* from
    int from;
    // cbBarInfo* pBar
    cbBarInfo *pBar = (cbBarInfo *) getuserdatatype(L, 2, s_cbBarInfo);
    // get this
    cbDockPane *self = ( cbDockPane * ) getuserdatatype(L, 1, s_cbDockPane );
    // call GetBarResizeRange
    self->GetBarResizeRange(pBar, &from, &till, forLeftHandle);
    lua_pushnumber(L, from);
    lua_pushnumber(L, till);
    // return the number of parameters
    return 2;
}

// void GetRowResizeRange(cbRowInfo* pRow, int* from, int* till, bool forUpperHandle)
static int LUACALL cbDockPane_GetRowResizeRange(lua_State *L)
{
    // bool forUpperHandle
    bool forUpperHandle = getbooleantype(L, 3);
    // int* till
    int till;
    // int* from
    int from;
    // cbRowInfo* pRow
    cbRowInfo *pRow = (cbRowInfo *) getuserdatatype(L, 2, s_cbRowInfo);
    // get this
    cbDockPane *self = ( cbDockPane * ) getuserdatatype(L, 1, s_cbDockPane );
    // call GetRowResizeRange
    self->GetRowResizeRange(pRow, &from, &till, forUpperHandle);
    lua_pushnumber(L, from);
    lua_pushnumber(L, till);
    // return the number of parameters
    return 2;
}

// cbBarInfo* GetBarInfoByWindow(wxWindow* pBarWnd)
static int LUACALL cbDockPane_GetBarInfoByWindow(lua_State *L)
{    
    cbBarInfo *returns;    
    wxWindow *pBarWnd = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    cbDockPane *self = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = self->GetBarInfoByWindow(pBarWnd);
    pushuserdatatype(L, s_cbBarInfo, returns);
    return 1;
}

static int LUACALL cbUpdatesManagerBase_destructor(lua_State *)
{
    return 0;
}

// void SetLayout( wxFrameLayout* pLayout )
static int LUACALL cbUpdatesManagerBase_SetLayout(lua_State *L)
{        
    wxFrameLayout *pLayout = (wxFrameLayout*)getuserdatatype(L, 2, s_wxFrameLayout);
    cbUpdatesManagerBase *self = (cbUpdatesManagerBase*)getuserdatatype(L, 1, s_cbUpdatesManagerBase);
    self->SetLayout(pLayout);
    return 0;
}

static int LUACALL cbPluginEvent_destructor(lua_State *)
{
    return 0;
}

// cbPluginEvent(wxEventType eventType, cbDockPane* pPane)
static int LUACALL cbPluginEvent_constructor(lua_State *L)
{    
    cbPluginEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    wxEventType eventType = (wxEventType) getnumbertype(L, 1);
    returns = new cbPluginEvent(eventType, pPane);
    pushuserdatatype(L, s_cbPluginEvent, returns);
    return 1;
}

static int LUACALL cbPluginBase_destructor(lua_State *)
{
    return 0;
}

// %constructor cbPluginBaseDefault()
static int LUACALL cbPluginBaseDefault_constructor(lua_State *L)
{    
    cbPluginBase *returns;
    returns = new cbPluginBase();
    pushuserdatatype(L, s_cbPluginBase, returns);
    return 1;
}

// cbPluginBase(wxFrameLayout* pPanel, int paneMask = wxALL_PANES)
static int LUACALL cbPluginBase_constructor(lua_State *L)
{    
    cbPluginBase *returns;
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxALL_PANES);
    wxFrameLayout *pPanel = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new cbPluginBase(pPanel, paneMask);
    pushuserdatatype(L, s_cbPluginBase, returns);
    return 1;
}

// int GetPaneMask()
static int LUACALL cbPluginBase_GetPaneMask(lua_State *L)
{    
    int returns;
    cbPluginBase *self = (cbPluginBase*)getuserdatatype(L, 1, s_cbPluginBase);
    returns = self->GetPaneMask();
    lua_pushnumber(L, returns);
    return 1;
}

// void OnInitPlugin()
static int LUACALL cbPluginBase_OnInitPlugin(lua_State *L)
{    
    cbPluginBase *self = (cbPluginBase*)getuserdatatype(L, 1, s_cbPluginBase);
    self->OnInitPlugin();
    return 0;
}

// bool IsReady()
static int LUACALL cbPluginBase_IsReady(lua_State *L)
{    
    bool returns;
    cbPluginBase *self = (cbPluginBase*)getuserdatatype(L, 1, s_cbPluginBase);
    returns = self->IsReady();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL cbLeftDownEvent_destructor(lua_State *)
{
    return 0;
}

// cbLeftDownEvent(const wxPoint& pos, cbDockPane* pPane)
static int LUACALL cbLeftDownEvent_constructor(lua_State *L)
{    
    cbLeftDownEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new cbLeftDownEvent(*pos, pPane);
    pushuserdatatype(L, s_cbLeftDownEvent, returns);
    return 1;
}

static int LUACALL cbLeftUpEvent_destructor(lua_State *)
{
    return 0;
}

// cbLeftUpEvent(const wxPoint& pos, cbDockPane* pPane)
static int LUACALL cbLeftUpEvent_constructor(lua_State *L)
{    
    cbLeftUpEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new cbLeftUpEvent(*pos, pPane);
    pushuserdatatype(L, s_cbLeftUpEvent, returns);
    return 1;
}

static int LUACALL cbRightDownEvent_destructor(lua_State *)
{
    return 0;
}

// cbRightDownEvent(const wxPoint& pos, cbDockPane* pPane)
static int LUACALL cbRightDownEvent_constructor(lua_State *L)
{    
    cbRightDownEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new cbRightDownEvent(*pos, pPane);
    pushuserdatatype(L, s_cbRightDownEvent, returns);
    return 1;
}

static int LUACALL cbRightUpEvent_destructor(lua_State *)
{
    return 0;
}

// cbRightUpEvent(const wxPoint& pos, cbDockPane* pPane)
static int LUACALL cbRightUpEvent_constructor(lua_State *L)
{    
    cbRightUpEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new cbRightUpEvent(*pos, pPane);
    pushuserdatatype(L, s_cbRightUpEvent, returns);
    return 1;
}

static int LUACALL cbMotionEvent_destructor(lua_State *)
{
    return 0;
}

// cbMotionEvent( const wxPoint& pos, cbDockPane* pPane)
static int LUACALL cbMotionEvent_constructor(lua_State *L)
{    
    cbMotionEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new cbMotionEvent(*pos, pPane);
    pushuserdatatype(L, s_cbMotionEvent, returns);
    return 1;
}

static int LUACALL cbLeftDClickEvent_destructor(lua_State *)
{
    return 0;
}

// cbLeftDClickEvent(const wxPoint& pos, cbDockPane* pPane)
static int LUACALL cbLeftDClickEvent_constructor(lua_State *L)
{    
    cbLeftDClickEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new cbLeftDClickEvent(*pos, pPane);
    pushuserdatatype(L, s_cbLeftDClickEvent, returns);
    return 1;
}

static int LUACALL cbLayoutRowEvent_destructor(lua_State *)
{
    return 0;
}

// cbLayoutRowEvent(cbRowInfo* pRow, cbDockPane* pPane)
static int LUACALL cbLayoutRowEvent_constructor(lua_State *L)
{    
    cbLayoutRowEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 1, s_cbRowInfo);
    returns = new cbLayoutRowEvent(pRow, pPane);
    pushuserdatatype(L, s_cbLayoutRowEvent, returns);
    return 1;
}

static int LUACALL cbResizeRowEvent_destructor(lua_State *)
{
    return 0;
}

// cbResizeRowEvent(cbRowInfo* pRow, int handleOfs, bool forUpperHandle, cbDockPane* pPane)
static int LUACALL cbResizeRowEvent_constructor(lua_State *L)
{    
    cbResizeRowEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 4, s_cbDockPane);
    bool forUpperHandle = getbooleantype(L, 3);
    int handleOfs = (int) getnumbertype(L, 2);
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 1, s_cbRowInfo);
    returns = new cbResizeRowEvent(pRow, handleOfs, forUpperHandle, pPane);
    pushuserdatatype(L, s_cbResizeRowEvent, returns);
    return 1;
}

static int LUACALL cbLayoutRowsEvent_destructor(lua_State *)
{
    return 0;
}

// cbLayoutRowsEvent(cbDockPane* pPane)
static int LUACALL cbLayoutRowsEvent_constructor(lua_State *L)
{    
    cbLayoutRowsEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 1, s_cbDockPane);
    returns = new cbLayoutRowsEvent(pPane);
    pushuserdatatype(L, s_cbLayoutRowsEvent, returns);
    return 1;
}

static int LUACALL cbInsertBarEvent_destructor(lua_State *)
{
    return 0;
}

// cbInsertBarEvent(cbBarInfo* pBar, cbRowInfo* pIntoRow, cbDockPane* pPane)
static int LUACALL cbInsertBarEvent_constructor(lua_State *L)
{    
    cbInsertBarEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 3, s_cbDockPane);
    cbRowInfo *pIntoRow = (cbRowInfo*)getuserdatatype(L, 2, s_cbRowInfo);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = new cbInsertBarEvent(pBar, pIntoRow, pPane);
    pushuserdatatype(L, s_cbInsertBarEvent, returns);
    return 1;
}

static int LUACALL cbResizeBarEvent_destructor(lua_State *)
{
    return 0;
}

// cbResizeBarEvent(cbBarInfo* pBar, cbRowInfo* pRow, cbDockPane* pPane)
static int LUACALL cbResizeBarEvent_constructor(lua_State *L)
{    
    cbResizeBarEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 3, s_cbDockPane);
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 2, s_cbRowInfo);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = new cbResizeBarEvent(pBar, pRow, pPane);
    pushuserdatatype(L, s_cbResizeBarEvent, returns);
    return 1;
}

static int LUACALL cbRemoveBarEvent_destructor(lua_State *)
{
    return 0;
}

// cbRemoveBarEvent(cbBarInfo* pBar, cbDockPane* pPane)
static int LUACALL cbRemoveBarEvent_constructor(lua_State *L)
{    
    cbRemoveBarEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = new cbRemoveBarEvent(pBar, pPane);
    pushuserdatatype(L, s_cbRemoveBarEvent, returns);
    return 1;
}

static int LUACALL cbSizeBarWndEvent_destructor(lua_State *)
{
    return 0;
}

// cbSizeBarWndEvent( cbBarInfo* pBar, cbDockPane* pPane)
static int LUACALL cbSizeBarWndEvent_constructor(lua_State *L)
{    
    cbSizeBarWndEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = new cbSizeBarWndEvent(pBar, pPane);
    pushuserdatatype(L, s_cbSizeBarWndEvent, returns);
    return 1;
}

static int LUACALL cbDrawBarDecorEvent_destructor(lua_State *)
{
    return 0;
}

// cbDrawBarDecorEvent(cbBarInfo* pBar, wxDC& dc, cbDockPane* pPane)
static int LUACALL cbDrawBarDecorEvent_constructor(lua_State *L)
{    
    cbDrawBarDecorEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 3, s_cbDockPane);
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = new cbDrawBarDecorEvent(pBar, *dc, pPane);
    pushuserdatatype(L, s_cbDrawBarDecorEvent, returns);
    return 1;
}

static int LUACALL cbDrawRowDecorEvent_destructor(lua_State *)
{
    return 0;
}

// cbDrawRowDecorEvent(cbRowInfo* pRow, wxDC& dc, cbDockPane* pPane)
static int LUACALL cbDrawRowDecorEvent_constructor(lua_State *L)
{    
    cbDrawRowDecorEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 3, s_cbDockPane);
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 1, s_cbRowInfo);
    returns = new cbDrawRowDecorEvent(pRow, *dc, pPane);
    pushuserdatatype(L, s_cbDrawRowDecorEvent, returns);
    return 1;
}

static int LUACALL cbDrawPaneDecorEvent_destructor(lua_State *)
{
    return 0;
}

// cbDrawPaneDecorEvent(wxDC& dc, cbDockPane* pPane)
static int LUACALL cbDrawPaneDecorEvent_constructor(lua_State *L)
{    
    cbDrawPaneDecorEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    wxDC *dc = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = new cbDrawPaneDecorEvent(*dc, pPane);
    pushuserdatatype(L, s_cbDrawPaneDecorEvent, returns);
    return 1;
}

static int LUACALL cbDrawBarHandlesEvent_destructor(lua_State *)
{
    return 0;
}

// cbDrawBarHandlesEvent(cbBarInfo* pBar, wxDC& dc, cbDockPane* pPane)
static int LUACALL cbDrawBarHandlesEvent_constructor(lua_State *L)
{    
    cbDrawBarHandlesEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 3, s_cbDockPane);
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = new cbDrawBarHandlesEvent(pBar, *dc, pPane);
    pushuserdatatype(L, s_cbDrawBarHandlesEvent, returns);
    return 1;
}

static int LUACALL cbDrawRowHandlesEvent_destructor(lua_State *)
{
    return 0;
}

// cbDrawRowHandlesEvent(cbRowInfo* pRow, wxDC& dc, cbDockPane* pPane)
static int LUACALL cbDrawRowHandlesEvent_constructor(lua_State *L)
{    
    cbDrawRowHandlesEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 3, s_cbDockPane);
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 1, s_cbRowInfo);
    returns = new cbDrawRowHandlesEvent(pRow, *dc, pPane);
    pushuserdatatype(L, s_cbDrawRowHandlesEvent, returns);
    return 1;
}

static int LUACALL cbDrawRowBkGroundEvent_destructor(lua_State *)
{
    return 0;
}

// cbDrawRowBkGroundEvent(cbRowInfo* pRow, wxDC& dc, cbDockPane* pPane)
static int LUACALL cbDrawRowBkGroundEvent_constructor(lua_State *L)
{    
    cbDrawRowBkGroundEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 3, s_cbDockPane);
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 1, s_cbRowInfo);
    returns = new cbDrawRowBkGroundEvent(pRow, *dc, pPane);
    pushuserdatatype(L, s_cbDrawRowBkGroundEvent, returns);
    return 1;
}

static int LUACALL cbDrawPaneBkGroundEvent_destructor(lua_State *)
{
    return 0;
}

// cbDrawPaneBkGroundEvent(wxDC& dc, cbDockPane* pPane)
static int LUACALL cbDrawPaneBkGroundEvent_constructor(lua_State *L)
{    
    cbDrawPaneBkGroundEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    wxDC *dc = (wxDC*)getuserdatatype(L, 1, s_wxDC);
    returns = new cbDrawPaneBkGroundEvent(*dc, pPane);
    pushuserdatatype(L, s_cbDrawPaneBkGroundEvent, returns);
    return 1;
}

static int LUACALL cbStartBarDraggingEvent_destructor(lua_State *)
{
    return 0;
}

// cbStartBarDraggingEvent(cbBarInfo* pBar, const wxPoint& pos, cbDockPane* pPane)
static int LUACALL cbStartBarDraggingEvent_constructor(lua_State *L)
{    
    cbStartBarDraggingEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 3, s_cbDockPane);
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = new cbStartBarDraggingEvent(pBar, *pos, pPane);
    pushuserdatatype(L, s_cbStartBarDraggingEvent, returns);
    return 1;
}

static int LUACALL cbDrawHintRectEvent_destructor(lua_State *)
{
    return 0;
}

// cbDrawHintRectEvent(const wxRect& rect, bool isInClient, bool eraseRect, bool lastTime)
static int LUACALL cbDrawHintRectEvent_constructor(lua_State *L)
{    
    cbDrawHintRectEvent *returns;    
    bool lastTime = getbooleantype(L, 4);
    bool eraseRect = getbooleantype(L, 3);
    bool isInClient = getbooleantype(L, 2);
    const wxRect *rect = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = new cbDrawHintRectEvent(*rect, isInClient, eraseRect, lastTime);
    pushuserdatatype(L, s_cbDrawHintRectEvent, returns);
    return 1;
}

static int LUACALL cbStartDrawInAreaEvent_destructor(lua_State *)
{
    return 0;
}

static int LUACALL cbFinishDrawInAreaEvent_destructor(lua_State *)
{
    return 0;
}

// cbFinishDrawInAreaEvent( const wxRect& area, cbDockPane* pPane );
static int LUACALL cbFinishDrawInAreaEvent_constructor(lua_State *L)
{    
    cbFinishDrawInAreaEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 2, s_cbDockPane);
    const wxRect *area = (wxRect*)getuserdatatype(L, 1, s_wxRect);
    returns = new cbFinishDrawInAreaEvent(*area, pPane);
    pushuserdatatype(L, s_cbFinishDrawInAreaEvent, returns);
    return 1;
}

static int LUACALL cbCustomizeBarEvent_destructor(lua_State *)
{
    return 0;
}

// cbCustomizeBarEvent(cbBarInfo* pBar, const wxPoint& clickPos, cbDockPane* pPane)
static int LUACALL cbCustomizeBarEvent_constructor(lua_State *L)
{    
    cbCustomizeBarEvent *returns;    
    cbDockPane *pPane = (cbDockPane*)getuserdatatype(L, 3, s_cbDockPane);
    const wxPoint *clickPos = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    cbBarInfo *pBar = (cbBarInfo*)getuserdatatype(L, 1, s_cbBarInfo);
    returns = new cbCustomizeBarEvent(pBar, *clickPos, pPane);
    pushuserdatatype(L, s_cbCustomizeBarEvent, returns);
    return 1;
}

static int LUACALL cbCustomizeLayoutEvent_destructor(lua_State *)
{
    return 0;
}

// cbCustomizeLayoutEvent( const wxPoint& clickPos )
static int LUACALL cbCustomizeLayoutEvent_constructor(lua_State *L)
{    
    cbCustomizeLayoutEvent *returns;    
    const wxPoint *clickPos = (wxPoint*)getuserdatatype(L, 1, s_wxPoint);
    returns = new cbCustomizeLayoutEvent(*clickPos);
    pushuserdatatype(L, s_cbCustomizeLayoutEvent, returns);
    return 1;
}

static int LUACALL cbSimpleUpdatesMgr_destructor(lua_State *)
{
    return 0;
}

// %constructor cbSimpleUpdatesMgrDefault()
static int LUACALL cbSimpleUpdatesMgrDefault_constructor(lua_State *L)
{    
    cbSimpleUpdatesMgr *returns;
    returns = new cbSimpleUpdatesMgr();
    pushuserdatatype(L, s_cbSimpleUpdatesMgr, returns);
    return 1;
}

// cbSimpleUpdatesMgr(wxFrameLayout* pPanel)
static int LUACALL cbSimpleUpdatesMgr_constructor(lua_State *L)
{    
    cbSimpleUpdatesMgr *returns;    
    wxFrameLayout *pPanel = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new cbSimpleUpdatesMgr(pPanel);
    pushuserdatatype(L, s_cbSimpleUpdatesMgr, returns);
    return 1;
}

// virtual void UpdateNow()
static int LUACALL cbSimpleUpdatesMgr_UpdateNow(lua_State *L)
{    
    cbSimpleUpdatesMgr *self = (cbSimpleUpdatesMgr*)getuserdatatype(L, 1, s_cbSimpleUpdatesMgr);
    self->UpdateNow();
    return 0;
}

static int LUACALL cbGCUpdatesMgr_destructor(lua_State *)
{
    return 0;
}

// %constructor cbGCUpdatesMgrDefault()
static int LUACALL cbGCUpdatesMgrDefault_constructor(lua_State *L)
{    
    cbGCUpdatesMgr *returns;
    returns = new cbGCUpdatesMgr();
    pushuserdatatype(L, s_cbGCUpdatesMgr, returns);
    return 1;
}

// cbGCUpdatesMgr(wxFrameLayout* pPanel)
static int LUACALL cbGCUpdatesMgr_constructor(lua_State *L)
{    
    cbGCUpdatesMgr *returns;    
    wxFrameLayout *pPanel = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new cbGCUpdatesMgr(pPanel);
    pushuserdatatype(L, s_cbGCUpdatesMgr, returns);
    return 1;
}

static int LUACALL cbBarHintsPlugin_destructor(lua_State *)
{
    return 0;
}

// %constructor cbBarHintsPluginDefault()
static int LUACALL cbBarHintsPluginDefault_constructor(lua_State *L)
{    
    cbBarHintsPlugin *returns;
    returns = new cbBarHintsPlugin();
    pushuserdatatype(L, s_cbBarHintsPlugin, returns);
    return 1;
}

// cbBarHintsPlugin(wxFrameLayout* pLayout, int paneMask = wxALL_PANES)
static int LUACALL cbBarHintsPlugin_constructor(lua_State *L)
{    
    cbBarHintsPlugin *returns;
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxALL_PANES);
    wxFrameLayout *pLayout = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new cbBarHintsPlugin(pLayout, paneMask);
    pushuserdatatype(L, s_cbBarHintsPlugin, returns);
    return 1;
}

// void SetGrooveCount(int nGrooves)
static int LUACALL cbBarHintsPlugin_SetGrooveCount(lua_State *L)
{        
    int nGrooves = (int) getnumbertype(L, 2);
    cbBarHintsPlugin *self = (cbBarHintsPlugin*)getuserdatatype(L, 1, s_cbBarHintsPlugin);
    self->SetGrooveCount(nGrooves);
    return 0;
}

static int LUACALL cbHintAnimationPlugin_destructor(lua_State *)
{
    return 0;
}

// %constructor cbHintAnimationPluginDefault()
static int LUACALL cbHintAnimationPluginDefault_constructor(lua_State *L)
{    
    cbHintAnimationPlugin *returns;
    returns = new cbHintAnimationPlugin();
    pushuserdatatype(L, s_cbHintAnimationPlugin, returns);
    return 1;
}

// cbHintAnimationPlugin(wxFrameLayout* pPanel, int paneMask = wxALL_PANES)
static int LUACALL cbHintAnimationPlugin_constructor(lua_State *L)
{    
    cbHintAnimationPlugin *returns;
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxALL_PANES);
    wxFrameLayout *pPanel = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new cbHintAnimationPlugin(pPanel, paneMask);
    pushuserdatatype(L, s_cbHintAnimationPlugin, returns);
    return 1;
}

static int LUACALL cbRowDragPlugin_destructor(lua_State *)
{
    return 0;
}

// %constructor cbRowDragPluginDefault()
static int LUACALL cbRowDragPluginDefault_constructor(lua_State *L)
{    
    cbRowDragPlugin *returns;
    returns = new cbRowDragPlugin();
    pushuserdatatype(L, s_cbRowDragPlugin, returns);
    return 1;
}

// cbRowDragPlugin(wxFrameLayout* pLayout, int paneMask = wxALL_PANES)
static int LUACALL cbRowDragPlugin_constructor(lua_State *L)
{    
    cbRowDragPlugin *returns;
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxALL_PANES);
    wxFrameLayout *pLayout = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new cbRowDragPlugin(pLayout, paneMask);
    pushuserdatatype(L, s_cbRowDragPlugin, returns);
    return 1;
}

// virtual void OnInitPlugin()
static int LUACALL cbRowDragPlugin_OnInitPlugin(lua_State *L)
{    
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    self->OnInitPlugin();
    return 0;
}

// virtual void DrawCollapsedRowIcon( int index, wxDC& dc, bool isHighlighted )
static int LUACALL cbRowDragPlugin_DrawCollapsedRowIcon(lua_State *L)
{        
    bool isHighlighted = getbooleantype(L, 4);
    wxDC *dc = (wxDC*)getuserdatatype(L, 3, s_wxDC);
    int index = (int) getnumbertype(L, 2);
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    self->DrawCollapsedRowIcon(index, *dc, isHighlighted);
    return 0;
}

// virtual void DrawCollapsedRowsBorder( wxDC& dc )
static int LUACALL cbRowDragPlugin_DrawCollapsedRowsBorder(lua_State *L)
{        
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    self->DrawCollapsedRowsBorder(*dc);
    return 0;
}

// virtual void DrawRowsDragHintsBorder( wxDC& dc )
static int LUACALL cbRowDragPlugin_DrawRowsDragHintsBorder(lua_State *L)
{        
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    self->DrawRowsDragHintsBorder(*dc);
    return 0;
}

// virtual void DrawRowDragHint( cbRowInfo* pRow, wxDC& dc, bool isHighlighted )
static int LUACALL cbRowDragPlugin_DrawRowDragHint(lua_State *L)
{        
    bool isHighlighted = getbooleantype(L, 4);
    wxDC *dc = (wxDC*)getuserdatatype(L, 3, s_wxDC);
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 2, s_cbRowInfo);
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    self->DrawRowDragHint(pRow, *dc, isHighlighted);
    return 0;
}

// virtual void DrawEmptyRow( wxDC& dc, wxRect& rowBounds )
static int LUACALL cbRowDragPlugin_DrawEmptyRow(lua_State *L)
{        
    wxRect *rowBounds = (wxRect*)getuserdatatype(L, 3, s_wxRect);
    wxDC *dc = (wxDC*)getuserdatatype(L, 2, s_wxDC);
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    self->DrawEmptyRow(*dc, *rowBounds);
    return 0;
}

// virtual int GetCollapsedRowIconHeight()
static int LUACALL cbRowDragPlugin_GetCollapsedRowIconHeight(lua_State *L)
{    
    int returns;
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    returns = self->GetCollapsedRowIconHeight();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual int GetRowDragHintWidth()
static int LUACALL cbRowDragPlugin_GetRowDragHintWidth(lua_State *L)
{    
    int returns;
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    returns = self->GetRowDragHintWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// virtual void SetPaneMargins()
static int LUACALL cbRowDragPlugin_SetPaneMargins(lua_State *L)
{    
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    self->SetPaneMargins();
    return 0;
}

// virtual bool HitTestCollapsedRowIcon( int iconIdx, const wxPoint& pos )
static int LUACALL cbRowDragPlugin_HitTestCollapsedRowIcon(lua_State *L)
{    
    bool returns;    
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    int iconIdx = (int) getnumbertype(L, 2);
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    returns = self->HitTestCollapsedRowIcon(iconIdx, *pos);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool HitTestRowDragHint( cbRowInfo* pRow, const wxPoint& pos )
static int LUACALL cbRowDragPlugin_HitTestRowDragHint(lua_State *L)
{    
    bool returns;    
    const wxPoint *pos = (wxPoint*)getuserdatatype(L, 3, s_wxPoint);
    cbRowInfo *pRow = (cbRowInfo*)getuserdatatype(L, 2, s_cbRowInfo);
    cbRowDragPlugin *self = (cbRowDragPlugin*)getuserdatatype(L, 1, s_cbRowDragPlugin);
    returns = self->HitTestRowDragHint(pRow, *pos);
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL cbAntiflickerPlugin_destructor(lua_State *)
{
    return 0;
}

// %constructor cbAntiflickerPluginDefault()
static int LUACALL cbAntiflickerPluginDefault_constructor(lua_State *L)
{    
    cbAntiflickerPlugin *returns;
    returns = new cbAntiflickerPlugin();
    pushuserdatatype(L, s_cbAntiflickerPlugin, returns);
    return 1;
}

// cbAntiflickerPlugin(wxFrameLayout* pPanel, int paneMask = wxALL_PANES)
static int LUACALL cbAntiflickerPlugin_constructor(lua_State *L)
{    
    cbAntiflickerPlugin *returns;
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxALL_PANES);
    wxFrameLayout *pPanel = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new cbAntiflickerPlugin(pPanel, paneMask);
    pushuserdatatype(L, s_cbAntiflickerPlugin, returns);
    return 1;
}

static int LUACALL cbSimpleCustomizationPlugin_destructor(lua_State *)
{
    return 0;
}

// %constructor cbSimpleCustomizationPluginDefault()
static int LUACALL cbSimpleCustomizationPluginDefault_constructor(lua_State *L)
{    
    cbSimpleCustomizationPlugin *returns;
    returns = new cbSimpleCustomizationPlugin();
    pushuserdatatype(L, s_cbSimpleCustomizationPlugin, returns);
    return 1;
}

// cbSimpleCustomizationPlugin(wxFrameLayout* pPanel, int paneMask = wxALL_PANES)
static int LUACALL cbSimpleCustomizationPlugin_constructor(lua_State *L)
{    
    cbSimpleCustomizationPlugin *returns;
    int argCount = lua_gettop(L);    
    int paneMask = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxALL_PANES);
    wxFrameLayout *pPanel = (wxFrameLayout*)getuserdatatype(L, 1, s_wxFrameLayout);
    returns = new cbSimpleCustomizationPlugin(pPanel, paneMask);
    pushuserdatatype(L, s_cbSimpleCustomizationPlugin, returns);
    return 1;
}

static int LUACALL cbDynToolBarDimHandler_destructor(lua_State *)
{
    return 0;
}

// cbDynToolBarDimHandler()
static int LUACALL cbDynToolBarDimHandler_constructor(lua_State *L)
{    
    cbDynToolBarDimHandler *returns;
    returns = new cbDynToolBarDimHandler();
    pushuserdatatype(L, s_cbDynToolBarDimHandler, returns);
    return 1;
}

static int LUACALL wxToolLayoutItem_destructor(lua_State *)
{
    return 0;
}

// wxToolLayoutItem()
static int LUACALL wxToolLayoutItem_constructor(lua_State *L)
{    
    wxToolLayoutItem *returns;
    returns = new wxToolLayoutItem();
    pushuserdatatype(L, s_wxToolLayoutItem, returns);
    return 1;
}

static int LUACALL wxDynToolInfo_destructor(lua_State *)
{
    return 0;
}

// wxDynToolInfo()
static int LUACALL wxDynToolInfo_constructor(lua_State *L)
{    
    wxDynToolInfo *returns;
    returns = new wxDynToolInfo();
    pushuserdatatype(L, s_wxDynToolInfo, returns);
    return 1;
}

static int LUACALL wxDynamicToolBar_destructor(lua_State *)
{
    return 0;
}

// %constructor wxDynamicToolBarDefault()
static int LUACALL wxDynamicToolBarDefault_constructor(lua_State *L)
{    
    wxDynamicToolBar *returns;
    returns = new wxDynamicToolBar();
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxDynamicToolBar, returns);
    return 1;
}

// wxDynamicToolBar(wxWindow *parent, const wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const long style = wxNO_BORDER, const int orientation = wxVERTICAL, const int RowsOrColumns = 1, const wxString& name = wxToolBarNameStr)
static int LUACALL wxDynamicToolBar_constructor(lua_State *L)
{    
    wxDynamicToolBar *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 8 ? lua2wx(getstringtype(L, 8)) : wxString(wxToolBarNameStr));
    const int RowsOrColumns = (argCount >= 7 ? (int) getnumbertype(L, 7) : 1);
    const int orientation = (argCount >= 6 ? (int) getnumbertype(L, 6) : wxVERTICAL);
    const long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : wxNO_BORDER);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    const wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxDynamicToolBar(parent, id, *pos, *size, style, orientation, RowsOrColumns, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxDynamicToolBar, returns);
    return 1;
}

// bool Create(wxWindow *parent, const wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const long style = wxNO_BORDER, const int orientation = wxVERTICAL, const int RowsOrColumns = 1, const wxString& name = wxToolBarNameStr)
static int LUACALL wxDynamicToolBar_Create(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxString(wxToolBarNameStr));
    const int RowsOrColumns = (argCount >= 8 ? (int) getnumbertype(L, 8) : 1);
    const int orientation = (argCount >= 7 ? (int) getnumbertype(L, 7) : wxVERTICAL);
    const long style = (argCount >= 6 ? (long) getnumbertype(L, 6) : wxNO_BORDER);
    const wxSize *size = (argCount >= 5 ? (wxSize*)getuserdatatype(L, 5, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 4 ? (wxPoint*)getuserdatatype(L, 4, s_wxPoint) : &wxDefaultPosition);
    const wxWindowID id = (wxWindowID) getnumbertype(L, 3);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    returns = self->Create(parent, id, *pos, *size, style, orientation, RowsOrColumns, name);
    lua_pushboolean(L, returns);
    return 1;
}

// %rename AddToolWindow virtual void AddTool( int toolIndex, wxWindow* pToolWindow, const wxSize& size = wxDefaultSize )
static int LUACALL wxDynamicToolBar_AddToolWindow(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    wxWindow *pToolWindow = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    int toolIndex = (int) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->AddTool(toolIndex, pToolWindow, *size);
    return 0;
}

// %rename AddToolIndex virtual void AddTool(int toolIndex, const wxString& imageFileName, wxBitmapType imageFileType = wxBITMAP_TYPE_BMP, const wxString& labelText = "", bool alignTextRight = FALSE, bool isFlat = TRUE )
static int LUACALL wxDynamicToolBar_AddToolIndex(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool isFlat = (argCount >= 7 ? getbooleantype(L, 7) : TRUE);
    bool alignTextRight = (argCount >= 6 ? getbooleantype(L, 6) : FALSE);
    wxString labelText = (argCount >= 5 ? lua2wx(getstringtype(L, 5)) : wxT(""));
    wxBitmapType imageFileType = (argCount >= 4 ? (wxBitmapType) getenumerationtype(L, 4) : wxBITMAP_TYPE_BMP);
    wxString imageFileName = lua2wx(getstringtype(L, 3));
    int toolIndex = (int) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->AddTool(toolIndex, imageFileName, imageFileType, labelText, alignTextRight, isFlat);
    return 0;
}

// virtual void AddTool( int toolIndex, const wxBitmap &labelBmp, const wxString& labelText = "", bool alignTextRight = FALSE, bool isFlat = TRUE )
static int LUACALL wxDynamicToolBar_AddTool(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    bool isFlat = (argCount >= 6 ? getbooleantype(L, 6) : TRUE);
    bool alignTextRight = (argCount >= 5 ? getbooleantype(L, 5) : FALSE);
    wxString labelText = (argCount >= 4 ? lua2wx(getstringtype(L, 4)) : wxT(""));
    const wxBitmap *labelBmp = (wxBitmap*)getuserdatatype(L, 3, s_wxBitmap);
    int toolIndex = (int) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->AddTool(toolIndex, *labelBmp, labelText, alignTextRight, isFlat);
    return 0;
}

// %rename AddToolCompatible virtual wxToolBarToolBase *AddTool(const int toolIndex, const wxBitmap& bitmap, const wxBitmap& pushedBitmap = wxNullBitmap, const bool toggle = FALSE, const long xPos = -1, const long yPos = -1, wxObject *clientData = NULL, const wxString& helpString1 = "", const wxString& helpString2 = "")
static int LUACALL wxDynamicToolBar_AddToolCompatible(lua_State *L)
{    
    wxToolBarToolBase *returns;
    int argCount = lua_gettop(L);    
    wxString helpString2 = (argCount >= 10 ? lua2wx(getstringtype(L, 10)) : wxT(""));
    wxString helpString1 = (argCount >= 9 ? lua2wx(getstringtype(L, 9)) : wxT(""));
    wxObject *clientData = (argCount >= 8 ? (wxObject*)getuserdatatype(L, 8, s_wxObject) : NULL);
    const long yPos = (argCount >= 7 ? (long) getnumbertype(L, 7) : -1);
    const long xPos = (argCount >= 6 ? (long) getnumbertype(L, 6) : -1);
    const bool toggle = (argCount >= 5 ? getbooleantype(L, 5) : FALSE);
    const wxBitmap *pushedBitmap = (argCount >= 4 ? (wxBitmap*)getuserdatatype(L, 4, s_wxBitmap) : &wxNullBitmap);
    const wxBitmap *bitmap = (wxBitmap*)getuserdatatype(L, 3, s_wxBitmap);
    const int toolIndex = (int) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    returns = self->AddTool(toolIndex, *bitmap, *pushedBitmap, toggle, xPos, yPos, clientData, helpString1, helpString2);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// virtual void AddSeparator( wxWindow* pSeparatorWnd = NULL )
static int LUACALL wxDynamicToolBar_AddSeparator(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    wxWindow *pSeparatorWnd = (argCount >= 2 ? (wxWindow*)getuserdatatype(L, 2, s_wxWindow) : NULL);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->AddSeparator(pSeparatorWnd);
    return 0;
}

// wxDynToolInfo* GetToolInfo( int toolIndex )
static int LUACALL wxDynamicToolBar_GetToolInfo(lua_State *L)
{    
    wxDynToolInfo *returns;    
    int toolIndex = (int) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    returns = self->GetToolInfo(toolIndex);
    pushuserdatatype(L, s_wxDynToolInfo, returns);
    return 1;
}

// void RemveTool( int toolIndex )
static int LUACALL wxDynamicToolBar_RemveTool(lua_State *L)
{        
    int toolIndex = (int) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->RemveTool(toolIndex);
    return 0;
}

// virtual void DrawSeparator( wxDynToolInfo& info, wxDC& dc )
static int LUACALL wxDynamicToolBar_DrawSeparator(lua_State *L)
{        
    wxDC *dc = (wxDC*)getuserdatatype(L, 3, s_wxDC);
    wxDynToolInfo *info = (wxDynToolInfo*)getuserdatatype(L, 2, s_wxDynToolInfo);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->DrawSeparator(*info, *dc);
    return 0;
}

// virtual bool Layout()
static int LUACALL wxDynamicToolBar_Layout(lua_State *L)
{    
    bool returns;
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    returns = self->Layout();
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void GetPreferredDim( const wxSize& givenDim, wxSize& prefDim )
static int LUACALL wxDynamicToolBar_GetPreferredDim(lua_State *L)
{
    // wxSize& prefDim
    wxSize *prefDim = new wxSize();
    // const wxSize& givenDim
    const wxSize *givenDim = (wxSize *) getuserdatatype(L, 2, s_wxSize);
    // get this
    wxDynamicToolBar *self = ( wxDynamicToolBar * ) getuserdatatype(L, 1, s_wxDynamicToolBar );
    // call GetPreferredDim
    self->GetPreferredDim(*givenDim, *prefDim);
    // return the number of parameters
    addToTrackedMemoryList(L, prefDim);
    pushuserdatatype(L, s_wxSize, prefDim);
    return 1;
}

// virtual void EnableTool(const int toolIndex, const bool enable = TRUE)
static int LUACALL wxDynamicToolBar_EnableTool(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const bool enable = (argCount >= 3 ? getbooleantype(L, 3) : TRUE);
    const int toolIndex = (int) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->EnableTool(toolIndex, enable);
    return 0;
}

// virtual wxToolBarToolBase* FindToolForPosition(wxCoord x, wxCoord y) const
static int LUACALL wxDynamicToolBar_FindToolForPosition(lua_State *L)
{    
    wxToolBarToolBase *returns;    
    wxCoord y = (wxCoord) getnumbertype(L, 3);
    wxCoord x = (wxCoord) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    returns = self->FindToolForPosition(x, y);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// virtual bool DoInsertTool(size_t pos, wxToolBarToolBase *tool)
static int LUACALL wxDynamicToolBar_DoInsertTool(lua_State *L)
{    
    bool returns;    
    wxToolBarToolBase *tool = (wxToolBarToolBase*)getuserdatatype(L, 3, s_wxToolBarToolBase);
    size_t pos = (size_t) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    returns = self->DoInsertTool(pos, tool);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual bool DoDeleteTool(size_t pos, wxToolBarToolBase *tool)
static int LUACALL wxDynamicToolBar_DoDeleteTool(lua_State *L)
{    
    bool returns;    
    wxToolBarToolBase *tool = (wxToolBarToolBase*)getuserdatatype(L, 3, s_wxToolBarToolBase);
    size_t pos = (size_t) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    returns = self->DoDeleteTool(pos, tool);
    lua_pushboolean(L, returns);
    return 1;
}

// virtual void DoEnableTool(wxToolBarToolBase* tool, bool enable)
static int LUACALL wxDynamicToolBar_DoEnableTool(lua_State *L)
{        
    bool enable = getbooleantype(L, 3);
    wxToolBarToolBase *tool = (wxToolBarToolBase*)getuserdatatype(L, 2, s_wxToolBarToolBase);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->DoEnableTool(tool, enable);
    return 0;
}

// virtual void DoToggleTool(wxToolBarToolBase* tool, bool toggle)
static int LUACALL wxDynamicToolBar_DoToggleTool(lua_State *L)
{        
    bool toggle = getbooleantype(L, 3);
    wxToolBarToolBase *tool = (wxToolBarToolBase*)getuserdatatype(L, 2, s_wxToolBarToolBase);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->DoToggleTool(tool, toggle);
    return 0;
}

// virtual void DoSetToggle(wxToolBarToolBase* tool, bool toggle)
static int LUACALL wxDynamicToolBar_DoSetToggle(lua_State *L)
{        
    bool toggle = getbooleantype(L, 3);
    wxToolBarToolBase *tool = (wxToolBarToolBase*)getuserdatatype(L, 2, s_wxToolBarToolBase);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    self->DoSetToggle(tool, toggle);
    return 0;
}

// virtual wxToolBarToolBase* CreateTool(int id, const wxString& label, const wxBitmap& bmpNormal, const wxBitmap& bmpDisabled, wxItemKind kind, wxObject *clientData, const wxString& shortHelp, const wxString& longHelp)
static int LUACALL wxDynamicToolBar_CreateTool(lua_State *L)
{    
    wxToolBarToolBase *returns;    
    wxString longHelp = lua2wx(getstringtype(L, 9));
    wxString shortHelp = lua2wx(getstringtype(L, 8));
    wxObject *clientData = (wxObject*)getuserdatatype(L, 7, s_wxObject);
    wxItemKind kind = (wxItemKind) getenumerationtype(L, 6);
    const wxBitmap *bmpDisabled = (wxBitmap*)getuserdatatype(L, 5, s_wxBitmap);
    const wxBitmap *bmpNormal = (wxBitmap*)getuserdatatype(L, 4, s_wxBitmap);
    wxString label = lua2wx(getstringtype(L, 3));
    int id = (int) getnumbertype(L, 2);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    returns = self->CreateTool(id, label, *bmpNormal, *bmpDisabled, kind, clientData, shortHelp, longHelp);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

// %rename CreateToolWindow virtual wxToolBarToolBase* CreateTool(wxControl *control)
static int LUACALL wxDynamicToolBar_CreateToolWindow(lua_State *L)
{    
    wxToolBarToolBase *returns;    
    wxControl *control = (wxControl*)getuserdatatype(L, 2, s_wxControl);
    wxDynamicToolBar *self = (wxDynamicToolBar*)getuserdatatype(L, 1, s_wxDynamicToolBar);
    returns = self->CreateTool(control);
    pushuserdatatype(L, s_wxToolBarToolBase, returns);
    return 1;
}

static int LUACALL wxStyledTextCtrlDocument_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxStyledTextCtrl_destructor(lua_State *)
{
    return 0;
}

// wxStyledTextCtrl(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString &name = "styledtext")
static int LUACALL wxStyledTextCtrl_constructor(lua_State *L)
{    
    wxStyledTextCtrl *returns;
    int argCount = lua_gettop(L);    
    wxString name = (argCount >= 6 ? lua2wx(getstringtype(L, 6)) : wxT("styledtext"));
    long style = (argCount >= 5 ? (long) getnumbertype(L, 5) : 0);
    const wxSize *size = (argCount >= 4 ? (wxSize*)getuserdatatype(L, 4, s_wxSize) : &wxDefaultSize);
    const wxPoint *pos = (argCount >= 3 ? (wxPoint*)getuserdatatype(L, 3, s_wxPoint) : &wxDefaultPosition);
    wxWindowID id = (wxWindowID) getnumbertype(L, 2);
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 1, s_wxWindow);
    returns = new wxStyledTextCtrl(parent, id, *pos, *size, style, name);
    if (wxDynamicCast(returns, wxWindow) != NULL)
        addToTrackedWindowList(L, (wxWindow*)returns);
    pushuserdatatype(L, s_wxStyledTextCtrl, returns);
    return 1;
}

// void AddText(const wxString& text)
static int LUACALL wxStyledTextCtrl_AddText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AddText(text);
    return 0;
}

// void InsertText(int pos, const wxString& text)
static int LUACALL wxStyledTextCtrl_InsertText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 3));
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->InsertText(pos, text);
    return 0;
}

// void ClearAll()
static int LUACALL wxStyledTextCtrl_ClearAll(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->ClearAll();
    return 0;
}

// void ClearDocumentStyle()
static int LUACALL wxStyledTextCtrl_ClearDocumentStyle(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->ClearDocumentStyle();
    return 0;
}

// int GetLength()
static int LUACALL wxStyledTextCtrl_GetLength(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLength();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetCharAt(int pos)
static int LUACALL wxStyledTextCtrl_GetCharAt(lua_State *L)
{    
    int returns;    
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetCharAt(pos);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetCurrentPos()
static int LUACALL wxStyledTextCtrl_GetCurrentPos(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetCurrentPos();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetAnchor()
static int LUACALL wxStyledTextCtrl_GetAnchor(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetAnchor();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetStyleAt(int pos)
static int LUACALL wxStyledTextCtrl_GetStyleAt(lua_State *L)
{    
    int returns;    
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetStyleAt(pos);
    lua_pushnumber(L, returns);
    return 1;
}

// void Redo()
static int LUACALL wxStyledTextCtrl_Redo(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->Redo();
    return 0;
}

// void SetUndoCollection(bool collectUndo)
static int LUACALL wxStyledTextCtrl_SetUndoCollection(lua_State *L)
{        
    bool collectUndo = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetUndoCollection(collectUndo);
    return 0;
}

// void SelectAll()
static int LUACALL wxStyledTextCtrl_SelectAll(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SelectAll();
    return 0;
}

// void SetSavePoint()
static int LUACALL wxStyledTextCtrl_SetSavePoint(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetSavePoint();
    return 0;
}

// bool CanRedo()
static int LUACALL wxStyledTextCtrl_CanRedo(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->CanRedo();
    lua_pushboolean(L, returns);
    return 1;
}

// int MarkerLineFromHandle(int handle)
static int LUACALL wxStyledTextCtrl_MarkerLineFromHandle(lua_State *L)
{    
    int returns;    
    int handle = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->MarkerLineFromHandle(handle);
    lua_pushnumber(L, returns);
    return 1;
}

// void MarkerDeleteHandle(int handle)
static int LUACALL wxStyledTextCtrl_MarkerDeleteHandle(lua_State *L)
{        
    int handle = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->MarkerDeleteHandle(handle);
    return 0;
}

// bool GetUndoCollection()
static int LUACALL wxStyledTextCtrl_GetUndoCollection(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetUndoCollection();
    lua_pushboolean(L, returns);
    return 1;
}

// int GetViewWhiteSpace()
static int LUACALL wxStyledTextCtrl_GetViewWhiteSpace(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetViewWhiteSpace();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetViewWhiteSpace(int viewWS)
static int LUACALL wxStyledTextCtrl_SetViewWhiteSpace(lua_State *L)
{        
    int viewWS = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetViewWhiteSpace(viewWS);
    return 0;
}

// int PositionFromPoint(wxPoint &pt)
static int LUACALL wxStyledTextCtrl_PositionFromPoint(lua_State *L)
{    
    int returns;    
    wxPoint *pt = (wxPoint*)getuserdatatype(L, 2, s_wxPoint);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->PositionFromPoint(*pt);
    lua_pushnumber(L, returns);
    return 1;
}

// int PositionFromPointClose(int x, int y)
static int LUACALL wxStyledTextCtrl_PositionFromPointClose(lua_State *L)
{    
    int returns;    
    int y = (int) getnumbertype(L, 3);
    int x = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->PositionFromPointClose(x, y);
    lua_pushnumber(L, returns);
    return 1;
}

// void GotoLine(int line)
static int LUACALL wxStyledTextCtrl_GotoLine(lua_State *L)
{        
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->GotoLine(line);
    return 0;
}

// void GotoPos(int pos)
static int LUACALL wxStyledTextCtrl_GotoPos(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->GotoPos(pos);
    return 0;
}

// void SetAnchor(int posAnchor)
static int LUACALL wxStyledTextCtrl_SetAnchor(lua_State *L)
{        
    int posAnchor = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetAnchor(posAnchor);
    return 0;
}

// wxString GetCurLine(int* linePos=NULL)
static int LUACALL wxStyledTextCtrl_GetCurLine(lua_State *L)
{
    wxString returns;
    int linePos;
    // get this
    wxStyledTextCtrl *self = ( wxStyledTextCtrl * ) getuserdatatype(L, 1, s_wxStyledTextCtrl );
    // call GetCurLine
    returns = self->GetCurLine(&linePos);
    // push the result string
    lua_pushstring(L, wx2lua(returns) );
    lua_pushnumber(L, linePos);
    // return the number of parameters
    return 2;
}

// int GetEndStyled()
static int LUACALL wxStyledTextCtrl_GetEndStyled(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetEndStyled();
    lua_pushnumber(L, returns);
    return 1;
}

// void ConvertEOLs(int eolMode)
static int LUACALL wxStyledTextCtrl_ConvertEOLs(lua_State *L)
{        
    int eolMode = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->ConvertEOLs(eolMode);
    return 0;
}

// int GetEOLMode()
static int LUACALL wxStyledTextCtrl_GetEOLMode(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetEOLMode();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetEOLMode(int eolMode)
static int LUACALL wxStyledTextCtrl_SetEOLMode(lua_State *L)
{        
    int eolMode = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetEOLMode(eolMode);
    return 0;
}

// void StartStyling(int pos, int mask)
static int LUACALL wxStyledTextCtrl_StartStyling(lua_State *L)
{        
    int mask = (int) getnumbertype(L, 3);
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StartStyling(pos, mask);
    return 0;
}

// void SetStyling(int length, int style)
static int LUACALL wxStyledTextCtrl_SetStyling(lua_State *L)
{        
    int style = (int) getnumbertype(L, 3);
    int length = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetStyling(length, style);
    return 0;
}

// bool GetBufferedDraw()
static int LUACALL wxStyledTextCtrl_GetBufferedDraw(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetBufferedDraw();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetBufferedDraw(bool buffered)
static int LUACALL wxStyledTextCtrl_SetBufferedDraw(lua_State *L)
{        
    bool buffered = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetBufferedDraw(buffered);
    return 0;
}

// void SetTabWidth(int tabWidth)
static int LUACALL wxStyledTextCtrl_SetTabWidth(lua_State *L)
{        
    int tabWidth = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetTabWidth(tabWidth);
    return 0;
}

// int GetTabWidth()
static int LUACALL wxStyledTextCtrl_GetTabWidth(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetTabWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetCodePage(int codePage)
static int LUACALL wxStyledTextCtrl_SetCodePage(lua_State *L)
{        
    int codePage = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetCodePage(codePage);
    return 0;
}

// void MarkerDefine(int markerNumber, int markerSymbol, const wxColour& foreground = wxNullColour, const wxColour& background = wxNullColour)
static int LUACALL wxStyledTextCtrl_MarkerDefine(lua_State *L)
{    
    int argCount = lua_gettop(L);    
    const wxColour *background = (argCount >= 5 ? (wxColour*)getuserdatatype(L, 5, s_wxColour) : &wxNullColour);
    const wxColour *foreground = (argCount >= 4 ? (wxColour*)getuserdatatype(L, 4, s_wxColour) : &wxNullColour);
    int markerSymbol = (int) getnumbertype(L, 3);
    int markerNumber = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->MarkerDefine(markerNumber, markerSymbol, *foreground, *background);
    return 0;
}

// void MarkerSetForeground(int markerNumber, const wxColour& fore)
static int LUACALL wxStyledTextCtrl_MarkerSetForeground(lua_State *L)
{        
    const wxColour *fore = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    int markerNumber = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->MarkerSetForeground(markerNumber, *fore);
    return 0;
}

// void MarkerSetBackground(int markerNumber, const wxColour& back)
static int LUACALL wxStyledTextCtrl_MarkerSetBackground(lua_State *L)
{        
    const wxColour *back = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    int markerNumber = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->MarkerSetBackground(markerNumber, *back);
    return 0;
}

// int MarkerAdd(int line, int markerNumber)
static int LUACALL wxStyledTextCtrl_MarkerAdd(lua_State *L)
{    
    int returns;    
    int markerNumber = (int) getnumbertype(L, 3);
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->MarkerAdd(line, markerNumber);
    lua_pushnumber(L, returns);
    return 1;
}

// void MarkerDelete(int line, int markerNumber)
static int LUACALL wxStyledTextCtrl_MarkerDelete(lua_State *L)
{        
    int markerNumber = (int) getnumbertype(L, 3);
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->MarkerDelete(line, markerNumber);
    return 0;
}

// void MarkerDeleteAll(int markerNumber)
static int LUACALL wxStyledTextCtrl_MarkerDeleteAll(lua_State *L)
{        
    int markerNumber = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->MarkerDeleteAll(markerNumber);
    return 0;
}

// int MarkerGet(int line)
static int LUACALL wxStyledTextCtrl_MarkerGet(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->MarkerGet(line);
    lua_pushnumber(L, returns);
    return 1;
}

// int MarkerNext(int lineStart, int markerMask)
static int LUACALL wxStyledTextCtrl_MarkerNext(lua_State *L)
{    
    int returns;    
    int markerMask = (int) getnumbertype(L, 3);
    int lineStart = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->MarkerNext(lineStart, markerMask);
    lua_pushnumber(L, returns);
    return 1;
}

// int MarkerPrevious(int lineStart, int markerMask)
static int LUACALL wxStyledTextCtrl_MarkerPrevious(lua_State *L)
{    
    int returns;    
    int markerMask = (int) getnumbertype(L, 3);
    int lineStart = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->MarkerPrevious(lineStart, markerMask);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetMarginType(int margin, int marginType)
static int LUACALL wxStyledTextCtrl_SetMarginType(lua_State *L)
{        
    int marginType = (int) getnumbertype(L, 3);
    int margin = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetMarginType(margin, marginType);
    return 0;
}

// int GetMarginType(int margin)
static int LUACALL wxStyledTextCtrl_GetMarginType(lua_State *L)
{    
    int returns;    
    int margin = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetMarginType(margin);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetMarginWidth(int margin, int pixelWidth)
static int LUACALL wxStyledTextCtrl_SetMarginWidth(lua_State *L)
{        
    int pixelWidth = (int) getnumbertype(L, 3);
    int margin = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetMarginWidth(margin, pixelWidth);
    return 0;
}

// int GetMarginWidth(int margin)
static int LUACALL wxStyledTextCtrl_GetMarginWidth(lua_State *L)
{    
    int returns;    
    int margin = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetMarginWidth(margin);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetMarginMask(int margin, int mask)
static int LUACALL wxStyledTextCtrl_SetMarginMask(lua_State *L)
{        
    int mask = (int) getnumbertype(L, 3);
    int margin = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetMarginMask(margin, mask);
    return 0;
}

// int GetMarginMask(int margin)
static int LUACALL wxStyledTextCtrl_GetMarginMask(lua_State *L)
{    
    int returns;    
    int margin = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetMarginMask(margin);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetMarginSensitive(int margin, bool sensitive)
static int LUACALL wxStyledTextCtrl_SetMarginSensitive(lua_State *L)
{        
    bool sensitive = getbooleantype(L, 3);
    int margin = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetMarginSensitive(margin, sensitive);
    return 0;
}

// bool GetMarginSensitive(int margin)
static int LUACALL wxStyledTextCtrl_GetMarginSensitive(lua_State *L)
{    
    bool returns;    
    int margin = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetMarginSensitive(margin);
    lua_pushboolean(L, returns);
    return 1;
}

// void StyleClearAll()
static int LUACALL wxStyledTextCtrl_StyleClearAll(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleClearAll();
    return 0;
}

// void StyleSetForeground(int style, const wxColour& fore)
static int LUACALL wxStyledTextCtrl_StyleSetForeground(lua_State *L)
{        
    const wxColour *fore = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetForeground(style, *fore);
    return 0;
}

// void StyleSetBackground(int style, const wxColour& back)
static int LUACALL wxStyledTextCtrl_StyleSetBackground(lua_State *L)
{        
    const wxColour *back = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetBackground(style, *back);
    return 0;
}

// void StyleSetBold(int style, bool bold)
static int LUACALL wxStyledTextCtrl_StyleSetBold(lua_State *L)
{        
    bool bold = getbooleantype(L, 3);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetBold(style, bold);
    return 0;
}

// void StyleSetItalic(int style, bool italic)
static int LUACALL wxStyledTextCtrl_StyleSetItalic(lua_State *L)
{        
    bool italic = getbooleantype(L, 3);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetItalic(style, italic);
    return 0;
}

// void StyleSetSize(int style, int sizePoints)
static int LUACALL wxStyledTextCtrl_StyleSetSize(lua_State *L)
{        
    int sizePoints = (int) getnumbertype(L, 3);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetSize(style, sizePoints);
    return 0;
}

// void StyleSetFaceName(int style, const wxString& fontName)
static int LUACALL wxStyledTextCtrl_StyleSetFaceName(lua_State *L)
{        
    wxString fontName = lua2wx(getstringtype(L, 3));
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetFaceName(style, fontName);
    return 0;
}

// void StyleSetEOLFilled(int style, bool filled)
static int LUACALL wxStyledTextCtrl_StyleSetEOLFilled(lua_State *L)
{        
    bool filled = getbooleantype(L, 3);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetEOLFilled(style, filled);
    return 0;
}

// void StyleResetDefault()
static int LUACALL wxStyledTextCtrl_StyleResetDefault(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleResetDefault();
    return 0;
}

// void StyleSetUnderline(int style, bool underline)
static int LUACALL wxStyledTextCtrl_StyleSetUnderline(lua_State *L)
{        
    bool underline = getbooleantype(L, 3);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetUnderline(style, underline);
    return 0;
}

// void StyleSetCase(int style, int caseForce)
static int LUACALL wxStyledTextCtrl_StyleSetCase(lua_State *L)
{        
    int caseForce = (int) getnumbertype(L, 3);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetCase(style, caseForce);
    return 0;
}

// void StyleSetCharacterSet(int style, int characterSet)
static int LUACALL wxStyledTextCtrl_StyleSetCharacterSet(lua_State *L)
{        
    int characterSet = (int) getnumbertype(L, 3);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetCharacterSet(style, characterSet);
    return 0;
}

// void SetSelForeground(bool useSetting, const wxColour& fore)
static int LUACALL wxStyledTextCtrl_SetSelForeground(lua_State *L)
{        
    const wxColour *fore = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    bool useSetting = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetSelForeground(useSetting, *fore);
    return 0;
}

// void SetSelBackground(bool useSetting, const wxColour& back)
static int LUACALL wxStyledTextCtrl_SetSelBackground(lua_State *L)
{        
    const wxColour *back = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    bool useSetting = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetSelBackground(useSetting, *back);
    return 0;
}

// void SetCaretForeground(const wxColour& fore)
static int LUACALL wxStyledTextCtrl_SetCaretForeground(lua_State *L)
{        
    const wxColour *fore = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetCaretForeground(*fore);
    return 0;
}

// void CmdKeyAssign(int key, int modifiers, int cmd)
static int LUACALL wxStyledTextCtrl_CmdKeyAssign(lua_State *L)
{        
    int cmd = (int) getnumbertype(L, 4);
    int modifiers = (int) getnumbertype(L, 3);
    int key = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->CmdKeyAssign(key, modifiers, cmd);
    return 0;
}

// void CmdKeyClear(int key, int modifiers)
static int LUACALL wxStyledTextCtrl_CmdKeyClear(lua_State *L)
{        
    int modifiers = (int) getnumbertype(L, 3);
    int key = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->CmdKeyClear(key, modifiers);
    return 0;
}

// void CmdKeyClearAll()
static int LUACALL wxStyledTextCtrl_CmdKeyClearAll(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->CmdKeyClearAll();
    return 0;
}

// void    SetStyleBytes(int length, const wxString &styleBytes)
static int LUACALL wxStyledTextCtrl_SetStyleBytes(lua_State *L)
{
    // const wxString &styleBytes
    wxCharBuffer styleBytes(lua_tostring(L, 3));
    // int length
    int length = (int) lua_tonumber(L, 2);
    // get this
    wxStyledTextCtrl *self = ( wxStyledTextCtrl * ) getuserdatatype(L, 1, s_wxStyledTextCtrl );
    // call SetStyleBytes
    self->SetStyleBytes(length, styleBytes.data());
    // push result
    lua_pushstring(L, styleBytes);
    // return the number of parameters
    return 1;
}

// void StyleSetVisible(int style, bool visible)
static int LUACALL wxStyledTextCtrl_StyleSetVisible(lua_State *L)
{        
    bool visible = getbooleantype(L, 3);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetVisible(style, visible);
    return 0;
}

// int GetCaretPeriod()
static int LUACALL wxStyledTextCtrl_GetCaretPeriod(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetCaretPeriod();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetCaretPeriod(int periodMilliseconds)
static int LUACALL wxStyledTextCtrl_SetCaretPeriod(lua_State *L)
{        
    int periodMilliseconds = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetCaretPeriod(periodMilliseconds);
    return 0;
}

// void SetWordChars(const wxString& characters)
static int LUACALL wxStyledTextCtrl_SetWordChars(lua_State *L)
{        
    wxString characters = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetWordChars(characters);
    return 0;
}

// void BeginUndoAction()
static int LUACALL wxStyledTextCtrl_BeginUndoAction(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->BeginUndoAction();
    return 0;
}

// void EndUndoAction()
static int LUACALL wxStyledTextCtrl_EndUndoAction(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->EndUndoAction();
    return 0;
}

// void IndicatorSetStyle(int indic, int style)
static int LUACALL wxStyledTextCtrl_IndicatorSetStyle(lua_State *L)
{        
    int style = (int) getnumbertype(L, 3);
    int indic = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->IndicatorSetStyle(indic, style);
    return 0;
}

// int IndicatorGetStyle(int indic)
static int LUACALL wxStyledTextCtrl_IndicatorGetStyle(lua_State *L)
{    
    int returns;    
    int indic = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->IndicatorGetStyle(indic);
    lua_pushnumber(L, returns);
    return 1;
}

// void IndicatorSetForeground(int indic, const wxColour& fore)
static int LUACALL wxStyledTextCtrl_IndicatorSetForeground(lua_State *L)
{        
    const wxColour *fore = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    int indic = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->IndicatorSetForeground(indic, *fore);
    return 0;
}

// wxColour IndicatorGetForeground(int indic)
static int LUACALL wxStyledTextCtrl_IndicatorGetForeground(lua_State *L)
{    
    wxColour *returns;    
    int indic = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = new wxColour(self->IndicatorGetForeground(indic));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// void SetWhitespaceForeground(bool useSetting, const wxColour& fore)
static int LUACALL wxStyledTextCtrl_SetWhitespaceForeground(lua_State *L)
{        
    const wxColour *fore = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    bool useSetting = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetWhitespaceForeground(useSetting, *fore);
    return 0;
}

// void SetWhitespaceBackground(bool useSetting, const wxColour& back)
static int LUACALL wxStyledTextCtrl_SetWhitespaceBackground(lua_State *L)
{        
    const wxColour *back = (wxColour*)getuserdatatype(L, 3, s_wxColour);
    bool useSetting = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetWhitespaceBackground(useSetting, *back);
    return 0;
}

// void SetStyleBits(int bits)
static int LUACALL wxStyledTextCtrl_SetStyleBits(lua_State *L)
{        
    int bits = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetStyleBits(bits);
    return 0;
}

// int GetStyleBits()
static int LUACALL wxStyledTextCtrl_GetStyleBits(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetStyleBits();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetLineState(int line, int state)
static int LUACALL wxStyledTextCtrl_SetLineState(lua_State *L)
{        
    int state = (int) getnumbertype(L, 3);
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetLineState(line, state);
    return 0;
}

// int GetLineState(int line)
static int LUACALL wxStyledTextCtrl_GetLineState(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLineState(line);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetMaxLineState()
static int LUACALL wxStyledTextCtrl_GetMaxLineState(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetMaxLineState();
    lua_pushnumber(L, returns);
    return 1;
}

// bool GetCaretLineVisible()
static int LUACALL wxStyledTextCtrl_GetCaretLineVisible(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetCaretLineVisible();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetCaretLineVisible(bool show)
static int LUACALL wxStyledTextCtrl_SetCaretLineVisible(lua_State *L)
{        
    bool show = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetCaretLineVisible(show);
    return 0;
}

// wxColour GetCaretLineBack()
static int LUACALL wxStyledTextCtrl_GetCaretLineBack(lua_State *L)
{    
    wxColour *returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = new wxColour(self->GetCaretLineBack());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// void SetCaretLineBack(const wxColour& back)
static int LUACALL wxStyledTextCtrl_SetCaretLineBack(lua_State *L)
{        
    const wxColour *back = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetCaretLineBack(*back);
    return 0;
}

// void StyleSetChangeable(int style, bool changeable)
static int LUACALL wxStyledTextCtrl_StyleSetChangeable(lua_State *L)
{        
    bool changeable = getbooleantype(L, 3);
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetChangeable(style, changeable);
    return 0;
}

// void AutoCompShow(int lenEntered, const wxString& itemList)
static int LUACALL wxStyledTextCtrl_AutoCompShow(lua_State *L)
{        
    wxString itemList = lua2wx(getstringtype(L, 3));
    int lenEntered = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompShow(lenEntered, itemList);
    return 0;
}

// void AutoCompCancel()
static int LUACALL wxStyledTextCtrl_AutoCompCancel(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompCancel();
    return 0;
}

// bool AutoCompActive()
static int LUACALL wxStyledTextCtrl_AutoCompActive(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->AutoCompActive();
    lua_pushboolean(L, returns);
    return 1;
}

// int AutoCompPosStart()
static int LUACALL wxStyledTextCtrl_AutoCompPosStart(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->AutoCompPosStart();
    lua_pushnumber(L, returns);
    return 1;
}

// void AutoCompComplete()
static int LUACALL wxStyledTextCtrl_AutoCompComplete(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompComplete();
    return 0;
}

// void AutoCompStops(const wxString& characterSet)
static int LUACALL wxStyledTextCtrl_AutoCompStops(lua_State *L)
{        
    wxString characterSet = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompStops(characterSet);
    return 0;
}

// void AutoCompSetSeparator(int separatorCharacter)
static int LUACALL wxStyledTextCtrl_AutoCompSetSeparator(lua_State *L)
{        
    int separatorCharacter = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompSetSeparator(separatorCharacter);
    return 0;
}

// int AutoCompGetSeparator()
static int LUACALL wxStyledTextCtrl_AutoCompGetSeparator(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->AutoCompGetSeparator();
    lua_pushnumber(L, returns);
    return 1;
}

// void AutoCompSelect(const wxString& text)
static int LUACALL wxStyledTextCtrl_AutoCompSelect(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompSelect(text);
    return 0;
}

// void AutoCompSetCancelAtStart(bool cancel)
static int LUACALL wxStyledTextCtrl_AutoCompSetCancelAtStart(lua_State *L)
{        
    bool cancel = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompSetCancelAtStart(cancel);
    return 0;
}

// bool AutoCompGetCancelAtStart()
static int LUACALL wxStyledTextCtrl_AutoCompGetCancelAtStart(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->AutoCompGetCancelAtStart();
    lua_pushboolean(L, returns);
    return 1;
}

// void AutoCompSetFillUps(const wxString& characterSet)
static int LUACALL wxStyledTextCtrl_AutoCompSetFillUps(lua_State *L)
{        
    wxString characterSet = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompSetFillUps(characterSet);
    return 0;
}

// void AutoCompSetChooseSingle(bool chooseSingle)
static int LUACALL wxStyledTextCtrl_AutoCompSetChooseSingle(lua_State *L)
{        
    bool chooseSingle = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompSetChooseSingle(chooseSingle);
    return 0;
}

// bool AutoCompGetChooseSingle()
static int LUACALL wxStyledTextCtrl_AutoCompGetChooseSingle(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->AutoCompGetChooseSingle();
    lua_pushboolean(L, returns);
    return 1;
}

// void AutoCompSetIgnoreCase(bool ignoreCase)
static int LUACALL wxStyledTextCtrl_AutoCompSetIgnoreCase(lua_State *L)
{        
    bool ignoreCase = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompSetIgnoreCase(ignoreCase);
    return 0;
}

// bool AutoCompGetIgnoreCase()
static int LUACALL wxStyledTextCtrl_AutoCompGetIgnoreCase(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->AutoCompGetIgnoreCase();
    lua_pushboolean(L, returns);
    return 1;
}

// void UserListShow(int listType, const wxString& itemList)
static int LUACALL wxStyledTextCtrl_UserListShow(lua_State *L)
{        
    wxString itemList = lua2wx(getstringtype(L, 3));
    int listType = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->UserListShow(listType, itemList);
    return 0;
}

// void AutoCompSetAutoHide(bool autoHide)
static int LUACALL wxStyledTextCtrl_AutoCompSetAutoHide(lua_State *L)
{        
    bool autoHide = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompSetAutoHide(autoHide);
    return 0;
}

// bool AutoCompGetAutoHide()
static int LUACALL wxStyledTextCtrl_AutoCompGetAutoHide(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->AutoCompGetAutoHide();
    lua_pushboolean(L, returns);
    return 1;
}

// void AutoCompSetDropRestOfWord(bool dropRestOfWord)
static int LUACALL wxStyledTextCtrl_AutoCompSetDropRestOfWord(lua_State *L)
{        
    bool dropRestOfWord = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AutoCompSetDropRestOfWord(dropRestOfWord);
    return 0;
}

// bool AutoCompGetDropRestOfWord()
static int LUACALL wxStyledTextCtrl_AutoCompGetDropRestOfWord(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->AutoCompGetDropRestOfWord();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetIndent(int indentSize)
static int LUACALL wxStyledTextCtrl_SetIndent(lua_State *L)
{        
    int indentSize = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetIndent(indentSize);
    return 0;
}

// int GetIndent()
static int LUACALL wxStyledTextCtrl_GetIndent(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetIndent();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetUseTabs(bool useTabs)
static int LUACALL wxStyledTextCtrl_SetUseTabs(lua_State *L)
{        
    bool useTabs = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetUseTabs(useTabs);
    return 0;
}

// bool GetUseTabs()
static int LUACALL wxStyledTextCtrl_GetUseTabs(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetUseTabs();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetLineIndentation(int line, int indentSize)
static int LUACALL wxStyledTextCtrl_SetLineIndentation(lua_State *L)
{        
    int indentSize = (int) getnumbertype(L, 3);
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetLineIndentation(line, indentSize);
    return 0;
}

// int GetLineIndentation(int line)
static int LUACALL wxStyledTextCtrl_GetLineIndentation(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLineIndentation(line);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetLineIndentPosition(int line)
static int LUACALL wxStyledTextCtrl_GetLineIndentPosition(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLineIndentPosition(line);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetColumn(int pos)
static int LUACALL wxStyledTextCtrl_GetColumn(lua_State *L)
{    
    int returns;    
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetColumn(pos);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetUseHorizontalScrollBar(bool show)
static int LUACALL wxStyledTextCtrl_SetUseHorizontalScrollBar(lua_State *L)
{        
    bool show = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetUseHorizontalScrollBar(show);
    return 0;
}

// bool GetUseHorizontalScrollBar()
static int LUACALL wxStyledTextCtrl_GetUseHorizontalScrollBar(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetUseHorizontalScrollBar();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetIndentationGuides(bool show)
static int LUACALL wxStyledTextCtrl_SetIndentationGuides(lua_State *L)
{        
    bool show = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetIndentationGuides(show);
    return 0;
}

// bool GetIndentationGuides()
static int LUACALL wxStyledTextCtrl_GetIndentationGuides(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetIndentationGuides();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetHighlightGuide(int column)
static int LUACALL wxStyledTextCtrl_SetHighlightGuide(lua_State *L)
{        
    int column = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetHighlightGuide(column);
    return 0;
}

// int GetHighlightGuide()
static int LUACALL wxStyledTextCtrl_GetHighlightGuide(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetHighlightGuide();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetLineEndPosition(int line)
static int LUACALL wxStyledTextCtrl_GetLineEndPosition(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLineEndPosition(line);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetCodePage()
static int LUACALL wxStyledTextCtrl_GetCodePage(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetCodePage();
    lua_pushnumber(L, returns);
    return 1;
}

// wxColour GetCaretForeground()
static int LUACALL wxStyledTextCtrl_GetCaretForeground(lua_State *L)
{    
    wxColour *returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = new wxColour(self->GetCaretForeground());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// bool GetReadOnly()
static int LUACALL wxStyledTextCtrl_GetReadOnly(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetReadOnly();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetCurrentPos(int pos)
static int LUACALL wxStyledTextCtrl_SetCurrentPos(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetCurrentPos(pos);
    return 0;
}

// void SetSelectionStart(int pos)
static int LUACALL wxStyledTextCtrl_SetSelectionStart(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetSelectionStart(pos);
    return 0;
}

// int GetSelectionStart()
static int LUACALL wxStyledTextCtrl_GetSelectionStart(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetSelectionStart();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetSelectionEnd(int pos)
static int LUACALL wxStyledTextCtrl_SetSelectionEnd(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetSelectionEnd(pos);
    return 0;
}

// int GetSelectionEnd()
static int LUACALL wxStyledTextCtrl_GetSelectionEnd(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetSelectionEnd();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetPrintMagnification(int magnification)
static int LUACALL wxStyledTextCtrl_SetPrintMagnification(lua_State *L)
{        
    int magnification = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetPrintMagnification(magnification);
    return 0;
}

// int GetPrintMagnification()
static int LUACALL wxStyledTextCtrl_GetPrintMagnification(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetPrintMagnification();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetPrintColourMode(int mode)
static int LUACALL wxStyledTextCtrl_SetPrintColourMode(lua_State *L)
{        
    int mode = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetPrintColourMode(mode);
    return 0;
}

// int GetPrintColourMode()
static int LUACALL wxStyledTextCtrl_GetPrintColourMode(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetPrintColourMode();
    lua_pushnumber(L, returns);
    return 1;
}

// int FindText(int minPos, int maxPos, const wxString& text, int flags=0)
static int LUACALL wxStyledTextCtrl_FindText(lua_State *L)
{    
    int returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 5 ? (int) getnumbertype(L, 5) : 0);
    wxString text = lua2wx(getstringtype(L, 4));
    int maxPos = (int) getnumbertype(L, 3);
    int minPos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->FindText(minPos, maxPos, text, flags);
    lua_pushnumber(L, returns);
    return 1;
}

// int FormatRange(bool doDraw, int startPos, int endPos, wxDC *draw, wxDC *target, wxRect &renderRect, wxRect &pageRect)
static int LUACALL wxStyledTextCtrl_FormatRange(lua_State *L)
{    
    int returns;    
    wxRect *pageRect = (wxRect*)getuserdatatype(L, 8, s_wxRect);
    wxRect *renderRect = (wxRect*)getuserdatatype(L, 7, s_wxRect);
    wxDC *target = (wxDC*)getuserdatatype(L, 6, s_wxDC);
    wxDC *draw = (wxDC*)getuserdatatype(L, 5, s_wxDC);
    int endPos = (int) getnumbertype(L, 4);
    int startPos = (int) getnumbertype(L, 3);
    bool doDraw = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->FormatRange(doDraw, startPos, endPos, draw, target, *renderRect, *pageRect);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetFirstVisibleLine()
static int LUACALL wxStyledTextCtrl_GetFirstVisibleLine(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetFirstVisibleLine();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetLine(int line)
static int LUACALL wxStyledTextCtrl_GetLine(lua_State *L)
{    
    wxString returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLine(line);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetLineCount()
static int LUACALL wxStyledTextCtrl_GetLineCount(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLineCount();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetMarginLeft(int pixelWidth)
static int LUACALL wxStyledTextCtrl_SetMarginLeft(lua_State *L)
{        
    int pixelWidth = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetMarginLeft(pixelWidth);
    return 0;
}

// int GetMarginLeft()
static int LUACALL wxStyledTextCtrl_GetMarginLeft(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetMarginLeft();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetMarginRight(int pixelWidth)
static int LUACALL wxStyledTextCtrl_SetMarginRight(lua_State *L)
{        
    int pixelWidth = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetMarginRight(pixelWidth);
    return 0;
}

// int GetMarginRight()
static int LUACALL wxStyledTextCtrl_GetMarginRight(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetMarginRight();
    lua_pushnumber(L, returns);
    return 1;
}

// bool GetModify()
static int LUACALL wxStyledTextCtrl_GetModify(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetModify();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetSelection(int start, int end)
static int LUACALL wxStyledTextCtrl_SetSelection(lua_State *L)
{        
    int end = (int) getnumbertype(L, 3);
    int start = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetSelection(start, end);
    return 0;
}

// wxString GetSelectedText()
static int LUACALL wxStyledTextCtrl_GetSelectedText(lua_State *L)
{    
    wxString returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetSelectedText();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetTextRange(int startPos, int endPos)
static int LUACALL wxStyledTextCtrl_GetTextRange(lua_State *L)
{    
    wxString returns;    
    int endPos = (int) getnumbertype(L, 3);
    int startPos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetTextRange(startPos, endPos);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void HideSelection(bool normal)
static int LUACALL wxStyledTextCtrl_HideSelection(lua_State *L)
{        
    bool normal = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->HideSelection(normal);
    return 0;
}

// int LineFromPosition(int pos)
static int LUACALL wxStyledTextCtrl_LineFromPosition(lua_State *L)
{    
    int returns;    
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->LineFromPosition(pos);
    lua_pushnumber(L, returns);
    return 1;
}

// int PositionFromLine(int line)
static int LUACALL wxStyledTextCtrl_PositionFromLine(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->PositionFromLine(line);
    lua_pushnumber(L, returns);
    return 1;
}

// void LineScroll(int columns, int lines)
static int LUACALL wxStyledTextCtrl_LineScroll(lua_State *L)
{        
    int lines = (int) getnumbertype(L, 3);
    int columns = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->LineScroll(columns, lines);
    return 0;
}

// void EnsureCaretVisible()
static int LUACALL wxStyledTextCtrl_EnsureCaretVisible(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->EnsureCaretVisible();
    return 0;
}

// void ReplaceSelection(const wxString& text)
static int LUACALL wxStyledTextCtrl_ReplaceSelection(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->ReplaceSelection(text);
    return 0;
}

// void SetReadOnly(bool readOnly)
static int LUACALL wxStyledTextCtrl_SetReadOnly(lua_State *L)
{        
    bool readOnly = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetReadOnly(readOnly);
    return 0;
}

// bool CanPaste()
static int LUACALL wxStyledTextCtrl_CanPaste(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->CanPaste();
    lua_pushboolean(L, returns);
    return 1;
}

// bool CanUndo()
static int LUACALL wxStyledTextCtrl_CanUndo(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->CanUndo();
    lua_pushboolean(L, returns);
    return 1;
}

// void EmptyUndoBuffer()
static int LUACALL wxStyledTextCtrl_EmptyUndoBuffer(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->EmptyUndoBuffer();
    return 0;
}

// void Undo()
static int LUACALL wxStyledTextCtrl_Undo(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->Undo();
    return 0;
}

// void Cut()
static int LUACALL wxStyledTextCtrl_Cut(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->Cut();
    return 0;
}

// void Copy()
static int LUACALL wxStyledTextCtrl_Copy(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->Copy();
    return 0;
}

// void Paste()
static int LUACALL wxStyledTextCtrl_Paste(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->Paste();
    return 0;
}

// void Clear()
static int LUACALL wxStyledTextCtrl_Clear(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->Clear();
    return 0;
}

// void SetText(const wxString& text)
static int LUACALL wxStyledTextCtrl_SetText(lua_State *L)
{        
    wxString text = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetText(text);
    return 0;
}

// wxString GetText()
static int LUACALL wxStyledTextCtrl_GetText(lua_State *L)
{    
    wxString returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetText();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int GetTextLength()
static int LUACALL wxStyledTextCtrl_GetTextLength(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetTextLength();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetOvertype(bool overtype)
static int LUACALL wxStyledTextCtrl_SetOvertype(lua_State *L)
{        
    bool overtype = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetOvertype(overtype);
    return 0;
}

// bool GetOvertype()
static int LUACALL wxStyledTextCtrl_GetOvertype(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetOvertype();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetCaretWidth(int pixelWidth)
static int LUACALL wxStyledTextCtrl_SetCaretWidth(lua_State *L)
{        
    int pixelWidth = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetCaretWidth(pixelWidth);
    return 0;
}

// int GetCaretWidth()
static int LUACALL wxStyledTextCtrl_GetCaretWidth(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetCaretWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetTargetStart(int pos)
static int LUACALL wxStyledTextCtrl_SetTargetStart(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetTargetStart(pos);
    return 0;
}

// int GetTargetStart()
static int LUACALL wxStyledTextCtrl_GetTargetStart(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetTargetStart();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetTargetEnd(int pos)
static int LUACALL wxStyledTextCtrl_SetTargetEnd(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetTargetEnd(pos);
    return 0;
}

// int GetTargetEnd()
static int LUACALL wxStyledTextCtrl_GetTargetEnd(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetTargetEnd();
    lua_pushnumber(L, returns);
    return 1;
}

// int ReplaceTarget(const wxString& text)
static int LUACALL wxStyledTextCtrl_ReplaceTarget(lua_State *L)
{    
    int returns;    
    wxString text = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->ReplaceTarget(text);
    lua_pushnumber(L, returns);
    return 1;
}

// int ReplaceTargetRE(const wxString& text)
static int LUACALL wxStyledTextCtrl_ReplaceTargetRE(lua_State *L)
{    
    int returns;    
    wxString text = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->ReplaceTargetRE(text);
    lua_pushnumber(L, returns);
    return 1;
}

// int SearchInTarget(const wxString& text)
static int LUACALL wxStyledTextCtrl_SearchInTarget(lua_State *L)
{    
    int returns;    
    wxString text = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->SearchInTarget(text);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetSearchFlags(int flags)
static int LUACALL wxStyledTextCtrl_SetSearchFlags(lua_State *L)
{        
    int flags = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetSearchFlags(flags);
    return 0;
}

// int GetSearchFlags()
static int LUACALL wxStyledTextCtrl_GetSearchFlags(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetSearchFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// void CallTipShow(int pos, const wxString& definition)
static int LUACALL wxStyledTextCtrl_CallTipShow(lua_State *L)
{        
    wxString definition = lua2wx(getstringtype(L, 3));
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->CallTipShow(pos, definition);
    return 0;
}

// void CallTipCancel()
static int LUACALL wxStyledTextCtrl_CallTipCancel(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->CallTipCancel();
    return 0;
}

// bool CallTipActive()
static int LUACALL wxStyledTextCtrl_CallTipActive(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->CallTipActive();
    lua_pushboolean(L, returns);
    return 1;
}

// int CallTipPosAtStart()
static int LUACALL wxStyledTextCtrl_CallTipPosAtStart(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->CallTipPosAtStart();
    lua_pushnumber(L, returns);
    return 1;
}

// void CallTipSetHighlight(int start, int end)
static int LUACALL wxStyledTextCtrl_CallTipSetHighlight(lua_State *L)
{        
    int end = (int) getnumbertype(L, 3);
    int start = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->CallTipSetHighlight(start, end);
    return 0;
}

// void CallTipSetBackground(const wxColour& back)
static int LUACALL wxStyledTextCtrl_CallTipSetBackground(lua_State *L)
{        
    const wxColour *back = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->CallTipSetBackground(*back);
    return 0;
}

// int VisibleFromDocLine(int line)
static int LUACALL wxStyledTextCtrl_VisibleFromDocLine(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->VisibleFromDocLine(line);
    lua_pushnumber(L, returns);
    return 1;
}

// int DocLineFromVisible(int lineDisplay)
static int LUACALL wxStyledTextCtrl_DocLineFromVisible(lua_State *L)
{    
    int returns;    
    int lineDisplay = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->DocLineFromVisible(lineDisplay);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetFoldLevel(int line, int level)
static int LUACALL wxStyledTextCtrl_SetFoldLevel(lua_State *L)
{        
    int level = (int) getnumbertype(L, 3);
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetFoldLevel(line, level);
    return 0;
}

// int GetFoldLevel(int line)
static int LUACALL wxStyledTextCtrl_GetFoldLevel(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetFoldLevel(line);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetLastChild(int line, int level)
static int LUACALL wxStyledTextCtrl_GetLastChild(lua_State *L)
{    
    int returns;    
    int level = (int) getnumbertype(L, 3);
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLastChild(line, level);
    lua_pushnumber(L, returns);
    return 1;
}

// int GetFoldParent(int line)
static int LUACALL wxStyledTextCtrl_GetFoldParent(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetFoldParent(line);
    lua_pushnumber(L, returns);
    return 1;
}

// void ShowLines(int lineStart, int lineEnd)
static int LUACALL wxStyledTextCtrl_ShowLines(lua_State *L)
{        
    int lineEnd = (int) getnumbertype(L, 3);
    int lineStart = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->ShowLines(lineStart, lineEnd);
    return 0;
}

// void HideLines(int lineStart, int lineEnd)
static int LUACALL wxStyledTextCtrl_HideLines(lua_State *L)
{        
    int lineEnd = (int) getnumbertype(L, 3);
    int lineStart = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->HideLines(lineStart, lineEnd);
    return 0;
}

// bool GetLineVisible(int line)
static int LUACALL wxStyledTextCtrl_GetLineVisible(lua_State *L)
{    
    bool returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLineVisible(line);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetFoldExpanded(int line, bool expanded)
static int LUACALL wxStyledTextCtrl_SetFoldExpanded(lua_State *L)
{        
    bool expanded = getbooleantype(L, 3);
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetFoldExpanded(line, expanded);
    return 0;
}

// bool GetFoldExpanded(int line)
static int LUACALL wxStyledTextCtrl_GetFoldExpanded(lua_State *L)
{    
    bool returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetFoldExpanded(line);
    lua_pushboolean(L, returns);
    return 1;
}

// void ToggleFold(int line)
static int LUACALL wxStyledTextCtrl_ToggleFold(lua_State *L)
{        
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->ToggleFold(line);
    return 0;
}

// void EnsureVisible(int line)
static int LUACALL wxStyledTextCtrl_EnsureVisible(lua_State *L)
{        
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->EnsureVisible(line);
    return 0;
}

// void SetFoldFlags(int flags)
static int LUACALL wxStyledTextCtrl_SetFoldFlags(lua_State *L)
{        
    int flags = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetFoldFlags(flags);
    return 0;
}

// void EnsureVisibleEnforcePolicy(int line)
static int LUACALL wxStyledTextCtrl_EnsureVisibleEnforcePolicy(lua_State *L)
{        
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->EnsureVisibleEnforcePolicy(line);
    return 0;
}

// void SetTabIndents(bool tabIndents)
static int LUACALL wxStyledTextCtrl_SetTabIndents(lua_State *L)
{        
    bool tabIndents = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetTabIndents(tabIndents);
    return 0;
}

// bool GetTabIndents()
static int LUACALL wxStyledTextCtrl_GetTabIndents(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetTabIndents();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetBackSpaceUnIndents(bool bsUnIndents)
static int LUACALL wxStyledTextCtrl_SetBackSpaceUnIndents(lua_State *L)
{        
    bool bsUnIndents = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetBackSpaceUnIndents(bsUnIndents);
    return 0;
}

// bool GetBackSpaceUnIndents()
static int LUACALL wxStyledTextCtrl_GetBackSpaceUnIndents(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetBackSpaceUnIndents();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetMouseDwellTime(int periodMilliseconds)
static int LUACALL wxStyledTextCtrl_SetMouseDwellTime(lua_State *L)
{        
    int periodMilliseconds = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetMouseDwellTime(periodMilliseconds);
    return 0;
}

// int GetMouseDwellTime()
static int LUACALL wxStyledTextCtrl_GetMouseDwellTime(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetMouseDwellTime();
    lua_pushnumber(L, returns);
    return 1;
}

// int WordStartPosition(int pos, bool onlyWordCharacters)
static int LUACALL wxStyledTextCtrl_WordStartPosition(lua_State *L)
{    
    int returns;    
    bool onlyWordCharacters = getbooleantype(L, 3);
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->WordStartPosition(pos, onlyWordCharacters);
    lua_pushnumber(L, returns);
    return 1;
}

// int WordEndPosition(int pos, bool onlyWordCharacters)
static int LUACALL wxStyledTextCtrl_WordEndPosition(lua_State *L)
{    
    int returns;    
    bool onlyWordCharacters = getbooleantype(L, 3);
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->WordEndPosition(pos, onlyWordCharacters);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetWrapMode(int mode)
static int LUACALL wxStyledTextCtrl_SetWrapMode(lua_State *L)
{        
    int mode = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetWrapMode(mode);
    return 0;
}

// int GetWrapMode()
static int LUACALL wxStyledTextCtrl_GetWrapMode(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetWrapMode();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetLayoutCache(int mode)
static int LUACALL wxStyledTextCtrl_SetLayoutCache(lua_State *L)
{        
    int mode = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetLayoutCache(mode);
    return 0;
}

// int GetLayoutCache()
static int LUACALL wxStyledTextCtrl_GetLayoutCache(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLayoutCache();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetScrollWidth(int pixelWidth)
static int LUACALL wxStyledTextCtrl_SetScrollWidth(lua_State *L)
{        
    int pixelWidth = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetScrollWidth(pixelWidth);
    return 0;
}

// int GetScrollWidth()
static int LUACALL wxStyledTextCtrl_GetScrollWidth(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetScrollWidth();
    lua_pushnumber(L, returns);
    return 1;
}

// int TextWidth(int style, const wxString& text)
static int LUACALL wxStyledTextCtrl_TextWidth(lua_State *L)
{    
    int returns;    
    wxString text = lua2wx(getstringtype(L, 3));
    int style = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->TextWidth(style, text);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetEndAtLastLine(bool endAtLastLine)
static int LUACALL wxStyledTextCtrl_SetEndAtLastLine(lua_State *L)
{        
    bool endAtLastLine = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetEndAtLastLine(endAtLastLine);
    return 0;
}

// int GetEndAtLastLine()
static int LUACALL wxStyledTextCtrl_GetEndAtLastLine(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetEndAtLastLine();
    lua_pushnumber(L, returns);
    return 1;
}

// int TextHeight(int line)
static int LUACALL wxStyledTextCtrl_TextHeight(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->TextHeight(line);
    lua_pushnumber(L, returns);
    return 1;
}

// void HomeDisplay()
static int LUACALL wxStyledTextCtrl_HomeDisplay(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->HomeDisplay();
    return 0;
}

// void HomeDisplayExtend()
static int LUACALL wxStyledTextCtrl_HomeDisplayExtend(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->HomeDisplayExtend();
    return 0;
}

// void LineEndDisplay()
static int LUACALL wxStyledTextCtrl_LineEndDisplay(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->LineEndDisplay();
    return 0;
}

// void LineEndDisplayExtend()
static int LUACALL wxStyledTextCtrl_LineEndDisplayExtend(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->LineEndDisplayExtend();
    return 0;
}

// void MoveCaretInsideView()
static int LUACALL wxStyledTextCtrl_MoveCaretInsideView(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->MoveCaretInsideView();
    return 0;
}

// int LineLength(int line)
static int LUACALL wxStyledTextCtrl_LineLength(lua_State *L)
{    
    int returns;    
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->LineLength(line);
    lua_pushnumber(L, returns);
    return 1;
}

// void BraceHighlight(int pos1, int pos2)
static int LUACALL wxStyledTextCtrl_BraceHighlight(lua_State *L)
{        
    int pos2 = (int) getnumbertype(L, 3);
    int pos1 = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->BraceHighlight(pos1, pos2);
    return 0;
}

// void BraceBadLight(int pos)
static int LUACALL wxStyledTextCtrl_BraceBadLight(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->BraceBadLight(pos);
    return 0;
}

// int BraceMatch(int pos)
static int LUACALL wxStyledTextCtrl_BraceMatch(lua_State *L)
{    
    int returns;    
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->BraceMatch(pos);
    lua_pushnumber(L, returns);
    return 1;
}

// bool GetViewEOL()
static int LUACALL wxStyledTextCtrl_GetViewEOL(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetViewEOL();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetViewEOL(bool visible)
static int LUACALL wxStyledTextCtrl_SetViewEOL(lua_State *L)
{        
    bool visible = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetViewEOL(visible);
    return 0;
}

// void* GetDocPointer()
static int LUACALL wxStyledTextCtrl_GetDocPointer(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->GetDocPointer();
    return 0;
}

// void SetDocPointer(void* docPointer)
static int LUACALL wxStyledTextCtrl_SetDocPointer(lua_State *L)
{        
    void *docPointer = (void*)ttouserdata(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetDocPointer(docPointer);
    return 0;
}

// void SetModEventMask(int mask)
static int LUACALL wxStyledTextCtrl_SetModEventMask(lua_State *L)
{        
    int mask = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetModEventMask(mask);
    return 0;
}

// int GetEdgeColumn()
static int LUACALL wxStyledTextCtrl_GetEdgeColumn(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetEdgeColumn();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetEdgeColumn(int column)
static int LUACALL wxStyledTextCtrl_SetEdgeColumn(lua_State *L)
{        
    int column = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetEdgeColumn(column);
    return 0;
}

// int GetEdgeMode()
static int LUACALL wxStyledTextCtrl_GetEdgeMode(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetEdgeMode();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetEdgeMode(int mode)
static int LUACALL wxStyledTextCtrl_SetEdgeMode(lua_State *L)
{        
    int mode = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetEdgeMode(mode);
    return 0;
}

// wxColour GetEdgeColour()
static int LUACALL wxStyledTextCtrl_GetEdgeColour(lua_State *L)
{    
    wxColour *returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = new wxColour(self->GetEdgeColour());
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxColour, returns);
    return 1;
}

// void SetEdgeColour(const wxColour& edgeColour)
static int LUACALL wxStyledTextCtrl_SetEdgeColour(lua_State *L)
{        
    const wxColour *edgeColour = (wxColour*)getuserdatatype(L, 2, s_wxColour);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetEdgeColour(*edgeColour);
    return 0;
}

// void SearchAnchor()
static int LUACALL wxStyledTextCtrl_SearchAnchor(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SearchAnchor();
    return 0;
}

// int SearchNext(int flags, const wxString& text)
static int LUACALL wxStyledTextCtrl_SearchNext(lua_State *L)
{    
    int returns;    
    wxString text = lua2wx(getstringtype(L, 3));
    int flags = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->SearchNext(flags, text);
    lua_pushnumber(L, returns);
    return 1;
}

// int SearchPrev(int flags, const wxString& text)
static int LUACALL wxStyledTextCtrl_SearchPrev(lua_State *L)
{    
    int returns;    
    wxString text = lua2wx(getstringtype(L, 3));
    int flags = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->SearchPrev(flags, text);
    lua_pushnumber(L, returns);
    return 1;
}

// int LinesOnScreen()
static int LUACALL wxStyledTextCtrl_LinesOnScreen(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->LinesOnScreen();
    lua_pushnumber(L, returns);
    return 1;
}

// void UsePopUp(bool allowPopUp)
static int LUACALL wxStyledTextCtrl_UsePopUp(lua_State *L)
{        
    bool allowPopUp = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->UsePopUp(allowPopUp);
    return 0;
}

// bool SelectionIsRectangle()
static int LUACALL wxStyledTextCtrl_SelectionIsRectangle(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->SelectionIsRectangle();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetZoom(int zoom)
static int LUACALL wxStyledTextCtrl_SetZoom(lua_State *L)
{        
    int zoom = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetZoom(zoom);
    return 0;
}

// int GetZoom()
static int LUACALL wxStyledTextCtrl_GetZoom(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetZoom();
    lua_pushnumber(L, returns);
    return 1;
}

// void* CreateDocument()
static int LUACALL wxStyledTextCtrl_CreateDocument(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->CreateDocument();
    return 0;
}

// void AddRefDocument(void* docPointer)
static int LUACALL wxStyledTextCtrl_AddRefDocument(lua_State *L)
{        
    void *docPointer = (void*)ttouserdata(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->AddRefDocument(docPointer);
    return 0;
}

// void ReleaseDocument(void* docPointer)
static int LUACALL wxStyledTextCtrl_ReleaseDocument(lua_State *L)
{        
    void *docPointer = (void*)ttouserdata(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->ReleaseDocument(docPointer);
    return 0;
}

// int GetModEventMask()
static int LUACALL wxStyledTextCtrl_GetModEventMask(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetModEventMask();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetSTCFocus(bool focus)
static int LUACALL wxStyledTextCtrl_SetSTCFocus(lua_State *L)
{        
    bool focus = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetSTCFocus(focus);
    return 0;
}

// bool GetSTCFocus()
static int LUACALL wxStyledTextCtrl_GetSTCFocus(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetSTCFocus();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetStatus(int statusCode)
static int LUACALL wxStyledTextCtrl_SetStatus(lua_State *L)
{        
    int statusCode = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetStatus(statusCode);
    return 0;
}

// int GetStatus()
static int LUACALL wxStyledTextCtrl_GetStatus(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetStatus();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetMouseDownCaptures(bool captures)
static int LUACALL wxStyledTextCtrl_SetMouseDownCaptures(lua_State *L)
{        
    bool captures = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetMouseDownCaptures(captures);
    return 0;
}

// bool GetMouseDownCaptures()
static int LUACALL wxStyledTextCtrl_GetMouseDownCaptures(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetMouseDownCaptures();
    lua_pushboolean(L, returns);
    return 1;
}

// ~<wxver24 void SetSTCCursor(int cursorType)
static int LUACALL wxStyledTextCtrl_SetSTCCursor(lua_State *L)
{        
    int cursorType = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetSTCCursor(cursorType);
    return 0;
}

// ~<wxver24 int GetSTCCursor()
static int LUACALL wxStyledTextCtrl_GetSTCCursor(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetSTCCursor();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetControlCharSymbol(int symbol)
static int LUACALL wxStyledTextCtrl_SetControlCharSymbol(lua_State *L)
{        
    int symbol = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetControlCharSymbol(symbol);
    return 0;
}

// int GetControlCharSymbol()
static int LUACALL wxStyledTextCtrl_GetControlCharSymbol(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetControlCharSymbol();
    lua_pushnumber(L, returns);
    return 1;
}

// void WordPartLeft()
static int LUACALL wxStyledTextCtrl_WordPartLeft(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->WordPartLeft();
    return 0;
}

// void WordPartLeftExtend()
static int LUACALL wxStyledTextCtrl_WordPartLeftExtend(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->WordPartLeftExtend();
    return 0;
}

// void WordPartRight()
static int LUACALL wxStyledTextCtrl_WordPartRight(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->WordPartRight();
    return 0;
}

// void WordPartRightExtend()
static int LUACALL wxStyledTextCtrl_WordPartRightExtend(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->WordPartRightExtend();
    return 0;
}

// void SetVisiblePolicy(int visiblePolicy, int visibleSlop)
static int LUACALL wxStyledTextCtrl_SetVisiblePolicy(lua_State *L)
{        
    int visibleSlop = (int) getnumbertype(L, 3);
    int visiblePolicy = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetVisiblePolicy(visiblePolicy, visibleSlop);
    return 0;
}

// void DelLineLeft()
static int LUACALL wxStyledTextCtrl_DelLineLeft(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->DelLineLeft();
    return 0;
}

// void DelLineRight()
static int LUACALL wxStyledTextCtrl_DelLineRight(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->DelLineRight();
    return 0;
}

// void SetXOffset(int newOffset)
static int LUACALL wxStyledTextCtrl_SetXOffset(lua_State *L)
{        
    int newOffset = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetXOffset(newOffset);
    return 0;
}

// int GetXOffset()
static int LUACALL wxStyledTextCtrl_GetXOffset(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetXOffset();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetXCaretPolicy(int caretPolicy, int caretSlop)
static int LUACALL wxStyledTextCtrl_SetXCaretPolicy(lua_State *L)
{        
    int caretSlop = (int) getnumbertype(L, 3);
    int caretPolicy = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetXCaretPolicy(caretPolicy, caretSlop);
    return 0;
}

// void SetYCaretPolicy(int caretPolicy, int caretSlop)
static int LUACALL wxStyledTextCtrl_SetYCaretPolicy(lua_State *L)
{        
    int caretSlop = (int) getnumbertype(L, 3);
    int caretPolicy = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetYCaretPolicy(caretPolicy, caretSlop);
    return 0;
}

// void StartRecord()
static int LUACALL wxStyledTextCtrl_StartRecord(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StartRecord();
    return 0;
}

// void StopRecord()
static int LUACALL wxStyledTextCtrl_StopRecord(lua_State *L)
{    
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StopRecord();
    return 0;
}

// void SetLexer(int lexer)
static int LUACALL wxStyledTextCtrl_SetLexer(lua_State *L)
{        
    int lexer = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetLexer(lexer);
    return 0;
}

// int GetLexer()
static int LUACALL wxStyledTextCtrl_GetLexer(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLexer();
    lua_pushnumber(L, returns);
    return 1;
}

// void Colourise(int start, int end)
static int LUACALL wxStyledTextCtrl_Colourise(lua_State *L)
{        
    int end = (int) getnumbertype(L, 3);
    int start = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->Colourise(start, end);
    return 0;
}

// void SetProperty(const wxString& key, const wxString& value)
static int LUACALL wxStyledTextCtrl_SetProperty(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 3));
    wxString key = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetProperty(key, value);
    return 0;
}

// void SetKeyWords(int keywordSet, const wxString& keyWords)
static int LUACALL wxStyledTextCtrl_SetKeyWords(lua_State *L)
{        
    wxString keyWords = lua2wx(getstringtype(L, 3));
    int keywordSet = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetKeyWords(keywordSet, keyWords);
    return 0;
}

// void SetLexerLanguage(const wxString& language)
static int LUACALL wxStyledTextCtrl_SetLexerLanguage(lua_State *L)
{        
    wxString language = lua2wx(getstringtype(L, 2));
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetLexerLanguage(language);
    return 0;
}

// int GetCurrentLine()
static int LUACALL wxStyledTextCtrl_GetCurrentLine(lua_State *L)
{    
    int returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetCurrentLine();
    lua_pushnumber(L, returns);
    return 1;
}

// void StyleSetSpec(int styleNum, const wxString& spec)
static int LUACALL wxStyledTextCtrl_StyleSetSpec(lua_State *L)
{        
    wxString spec = lua2wx(getstringtype(L, 3));
    int styleNum = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetSpec(styleNum, spec);
    return 0;
}

// void StyleSetFont(int styleNum, wxFont& font)
static int LUACALL wxStyledTextCtrl_StyleSetFont(lua_State *L)
{        
    wxFont *font = (wxFont*)getuserdatatype(L, 3, s_wxFont);
    int styleNum = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetFont(styleNum, *font);
    return 0;
}

// void StyleSetFontAttr(int styleNum, int size, const wxString& faceName, bool bold, bool italic, bool underline)
static int LUACALL wxStyledTextCtrl_StyleSetFontAttr(lua_State *L)
{        
    bool underline = getbooleantype(L, 7);
    bool italic = getbooleantype(L, 6);
    bool bold = getbooleantype(L, 5);
    wxString faceName = lua2wx(getstringtype(L, 4));
    int size = (int) getnumbertype(L, 3);
    int styleNum = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->StyleSetFontAttr(styleNum, size, faceName, bold, italic, underline);
    return 0;
}

// void CmdKeyExecute(int cmd)
static int LUACALL wxStyledTextCtrl_CmdKeyExecute(lua_State *L)
{        
    int cmd = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->CmdKeyExecute(cmd);
    return 0;
}

// void SetMargins(int left, int right)
static int LUACALL wxStyledTextCtrl_SetMargins(lua_State *L)
{        
    int right = (int) getnumbertype(L, 3);
    int left = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetMargins(left, right);
    return 0;
}

// void GetSelection(int* startPos, int* endPos)
static int LUACALL wxStyledTextCtrl_GetSelection(lua_State *L)
{
    int endPos;
    int startPos;
    // get this
    wxStyledTextCtrl *self = ( wxStyledTextCtrl * ) getuserdatatype(L, 1, s_wxStyledTextCtrl );
    // call GetSelection
    self->GetSelection(&startPos, &endPos);
    // push results
    lua_pushnumber(L, startPos);
    lua_pushnumber(L, endPos);
    // return the number of parameters
    return 2;
}

// wxPoint PointFromPosition(int pos)
static int LUACALL wxStyledTextCtrl_PointFromPosition(lua_State *L)
{    
    wxPoint *returns;    
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = new wxPoint(self->PointFromPosition(pos));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxPoint, returns);
    return 1;
}

// void ScrollToLine(int line)
static int LUACALL wxStyledTextCtrl_ScrollToLine(lua_State *L)
{        
    int line = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->ScrollToLine(line);
    return 0;
}

// void ScrollToColumn(int column)
static int LUACALL wxStyledTextCtrl_ScrollToColumn(lua_State *L)
{        
    int column = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->ScrollToColumn(column);
    return 0;
}

// long SendMsg(int msg, long wp = 0, long lp = 0)
static int LUACALL wxStyledTextCtrl_SendMsg(lua_State *L)
{    
    long returns;
    int argCount = lua_gettop(L);    
    long lp = (argCount >= 4 ? (long) getnumbertype(L, 4) : 0);
    long wp = (argCount >= 3 ? (long) getnumbertype(L, 3) : 0);
    int msg = (int) getnumbertype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->SendMsg(msg, wp, lp);
    lua_pushnumber(L, returns);
    return 1;
}

// void SetVScrollBar(wxScrollBar *bar)
static int LUACALL wxStyledTextCtrl_SetVScrollBar(lua_State *L)
{        
    wxScrollBar *bar = (wxScrollBar*)getuserdatatype(L, 2, s_wxScrollBar);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetVScrollBar(bar);
    return 0;
}

// void SetHScrollBar(wxScrollBar *bar)
static int LUACALL wxStyledTextCtrl_SetHScrollBar(lua_State *L)
{        
    wxScrollBar *bar = (wxScrollBar*)getuserdatatype(L, 2, s_wxScrollBar);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetHScrollBar(bar);
    return 0;
}

// bool GetLastKeydownProcessed()
static int LUACALL wxStyledTextCtrl_GetLastKeydownProcessed(lua_State *L)
{    
    bool returns;
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    returns = self->GetLastKeydownProcessed();
    lua_pushboolean(L, returns);
    return 1;
}

// void SetLastKeydownProcessed(bool val)
static int LUACALL wxStyledTextCtrl_SetLastKeydownProcessed(lua_State *L)
{        
    bool val = getbooleantype(L, 2);
    wxStyledTextCtrl *self = (wxStyledTextCtrl*)getuserdatatype(L, 1, s_wxStyledTextCtrl);
    self->SetLastKeydownProcessed(val);
    return 0;
}

static int LUACALL wxStyledTextEvent_destructor(lua_State *L)
{
    wxStyledTextEvent * self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxStyledTextEvent_Delete(lua_State *L)
{
    wxStyledTextEvent * self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxStyledTextEvent(wxEventType commandType = 0, int id = 0)
static int LUACALL wxStyledTextEvent_constructor(lua_State *L)
{    
    wxStyledTextEvent *returns;
    int argCount = lua_gettop(L);    
    int id = (argCount >= 2 ? (int) getnumbertype(L, 2) : 0);
    wxEventType commandType = (argCount >= 1 ? (wxEventType) getnumbertype(L, 1) : 0);
    returns = new wxStyledTextEvent(commandType, id);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxStyledTextEvent, returns);
    return 1;
}

// void SetPosition(int pos)
static int LUACALL wxStyledTextEvent_SetPosition(lua_State *L)
{        
    int pos = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetPosition(pos);
    return 0;
}

// void SetKey(int k)
static int LUACALL wxStyledTextEvent_SetKey(lua_State *L)
{        
    int k = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetKey(k);
    return 0;
}

// void SetModifiers(int m)
static int LUACALL wxStyledTextEvent_SetModifiers(lua_State *L)
{        
    int m = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetModifiers(m);
    return 0;
}

// void SetModificationType(int t)
static int LUACALL wxStyledTextEvent_SetModificationType(lua_State *L)
{        
    int t = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetModificationType(t);
    return 0;
}

// void SetText(const wxString& t)
static int LUACALL wxStyledTextEvent_SetText(lua_State *L)
{        
    wxString t = lua2wx(getstringtype(L, 2));
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetText(t);
    return 0;
}

// void SetLength(int len)
static int LUACALL wxStyledTextEvent_SetLength(lua_State *L)
{        
    int len = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetLength(len);
    return 0;
}

// void SetLinesAdded(int num)
static int LUACALL wxStyledTextEvent_SetLinesAdded(lua_State *L)
{        
    int num = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetLinesAdded(num);
    return 0;
}

// void SetLine(int val)
static int LUACALL wxStyledTextEvent_SetLine(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetLine(val);
    return 0;
}

// void SetFoldLevelNow(int val)
static int LUACALL wxStyledTextEvent_SetFoldLevelNow(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetFoldLevelNow(val);
    return 0;
}

// void SetFoldLevelPrev(int val)
static int LUACALL wxStyledTextEvent_SetFoldLevelPrev(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetFoldLevelPrev(val);
    return 0;
}

// void SetMargin(int val)
static int LUACALL wxStyledTextEvent_SetMargin(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetMargin(val);
    return 0;
}

// void SetMessage(int val)
static int LUACALL wxStyledTextEvent_SetMessage(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetMessage(val);
    return 0;
}

// void SetWParam(int val)
static int LUACALL wxStyledTextEvent_SetWParam(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetWParam(val);
    return 0;
}

// void SetLParam(int val)
static int LUACALL wxStyledTextEvent_SetLParam(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetLParam(val);
    return 0;
}

// void SetListType(int val)
static int LUACALL wxStyledTextEvent_SetListType(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetListType(val);
    return 0;
}

// void SetX(int val)
static int LUACALL wxStyledTextEvent_SetX(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetX(val);
    return 0;
}

// void SetY(int val)
static int LUACALL wxStyledTextEvent_SetY(lua_State *L)
{        
    int val = (int) getnumbertype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetY(val);
    return 0;
}

// void SetDragText(const wxString& val)
static int LUACALL wxStyledTextEvent_SetDragText(lua_State *L)
{        
    wxString val = lua2wx(getstringtype(L, 2));
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetDragText(val);
    return 0;
}

// void SetDragAllowMove(bool val)
static int LUACALL wxStyledTextEvent_SetDragAllowMove(lua_State *L)
{        
    bool val = getbooleantype(L, 2);
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    self->SetDragAllowMove(val);
    return 0;
}

// void SetDragResult(wxDragResult val)
static int LUACALL wxStyledTextEvent_SetDragResult(lua_State *L)
{
    // wxDragResult val
    wxDragResult val = (wxDragResult)(int) lua_tonumber(L, 2);
    // get this
    wxStyledTextEvent *self = ( wxStyledTextEvent * ) getuserdatatype(L, 1, s_wxStyledTextEvent );
    // call SetDragResult
    self->SetDragResult(val);
    // return the number of parameters
    return 0;
}

// int  GetPosition() const
static int LUACALL wxStyledTextEvent_GetPosition(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetPosition();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetKey()  const
static int LUACALL wxStyledTextEvent_GetKey(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetKey();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetModifiers() const
static int LUACALL wxStyledTextEvent_GetModifiers(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetModifiers();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetModificationType() const
static int LUACALL wxStyledTextEvent_GetModificationType(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetModificationType();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetText() const
static int LUACALL wxStyledTextEvent_GetText(lua_State *L)
{    
    wxString returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetText();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// int  GetLength() const
static int LUACALL wxStyledTextEvent_GetLength(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetLength();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetLinesAdded() const
static int LUACALL wxStyledTextEvent_GetLinesAdded(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetLinesAdded();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetLine() const
static int LUACALL wxStyledTextEvent_GetLine(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetLine();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetFoldLevelNow() const
static int LUACALL wxStyledTextEvent_GetFoldLevelNow(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetFoldLevelNow();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetFoldLevelPrev() const
static int LUACALL wxStyledTextEvent_GetFoldLevelPrev(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetFoldLevelPrev();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetMargin() const
static int LUACALL wxStyledTextEvent_GetMargin(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetMargin();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetMessage() const
static int LUACALL wxStyledTextEvent_GetMessage(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetMessage();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetWParam() const
static int LUACALL wxStyledTextEvent_GetWParam(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetWParam();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetLParam() const
static int LUACALL wxStyledTextEvent_GetLParam(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetLParam();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetListType() const
static int LUACALL wxStyledTextEvent_GetListType(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetListType();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetX() const
static int LUACALL wxStyledTextEvent_GetX(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetX();
    lua_pushnumber(L, returns);
    return 1;
}

// int  GetY() const
static int LUACALL wxStyledTextEvent_GetY(lua_State *L)
{    
    int returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetY();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetDragText()
static int LUACALL wxStyledTextEvent_GetDragText(lua_State *L)
{    
    wxString returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetDragText();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool GetDragAllowMove()
static int LUACALL wxStyledTextEvent_GetDragAllowMove(lua_State *L)
{    
    bool returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetDragAllowMove();
    lua_pushboolean(L, returns);
    return 1;
}

// wxDragResult GetDragResult()
static int LUACALL wxStyledTextEvent_GetDragResult(lua_State *L)
{
    wxDragResult returns;
    // get this
    wxStyledTextEvent *self = ( wxStyledTextEvent * ) getuserdatatype(L, 1, s_wxStyledTextEvent );
    // call GetDragResult
    returns = self->GetDragResult();
    // push the result datatype
    lua_pushnumber(L, (long) returns );
    // return the number of parameters
    return 1;
}

// bool GetShift() const
static int LUACALL wxStyledTextEvent_GetShift(lua_State *L)
{    
    bool returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetShift();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetControl() const
static int LUACALL wxStyledTextEvent_GetControl(lua_State *L)
{    
    bool returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetControl();
    lua_pushboolean(L, returns);
    return 1;
}

// bool GetAlt() const
static int LUACALL wxStyledTextEvent_GetAlt(lua_State *L)
{    
    bool returns;
    wxStyledTextEvent *self = (wxStyledTextEvent*)getuserdatatype(L, 1, s_wxStyledTextEvent);
    returns = self->GetAlt();
    lua_pushboolean(L, returns);
    return 1;
}

static int LUACALL wxXmlNode_destructor(lua_State *L)
{
    wxXmlNode * self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxXmlNode_Delete(lua_State *L)
{
    wxXmlNode * self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxXmlNode(wxXmlNodeType type, const wxString& name, const wxString& content = wxEmptyString);
static int LUACALL wxXmlNode_constructor(lua_State *L)
{    
    wxXmlNode *returns;
    int argCount = lua_gettop(L);    
    wxString content = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxString(wxEmptyString));
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlNodeType type = (wxXmlNodeType) getenumerationtype(L, 1);
    returns = new wxXmlNode(type, name, content);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxXmlNode, returns);
    return 1;
}

// %constructor wxXmlDefaultNode()
static int LUACALL wxXmlDefaultNode_constructor(lua_State *L)
{    
    wxXmlNode *returns;
    returns = new wxXmlNode();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxXmlNode, returns);
    return 1;
}

// %constructor wxXmlNodeEntry(wxXmlNode *parent, wxXmlNodeType type, const wxString& name, const wxString& content, wxXmlProperty *props, wxXmlNode *next);
static int LUACALL wxXmlNodeEntry_constructor(lua_State *L)
{    
    wxXmlNode *returns;    
    wxXmlNode *next = (wxXmlNode*)getuserdatatype(L, 6, s_wxXmlNode);
    wxXmlProperty *props = (wxXmlProperty*)getuserdatatype(L, 5, s_wxXmlProperty);
    wxString content = lua2wx(getstringtype(L, 4));
    wxString name = lua2wx(getstringtype(L, 3));
    wxXmlNodeType type = (wxXmlNodeType) getenumerationtype(L, 2);
    wxXmlNode *parent = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = new wxXmlNode(parent, type, name, content, props, next);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxXmlNode, returns);
    return 1;
}

// void AddChild(wxXmlNode *child);
static int LUACALL wxXmlNode_AddChild(lua_State *L)
{        
    wxXmlNode *child = (wxXmlNode*)getuserdatatype(L, 2, s_wxXmlNode);
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->AddChild(child);
    return 0;
}

// void InsertChild(wxXmlNode *child, wxXmlNode *before_node);
static int LUACALL wxXmlNode_InsertChild(lua_State *L)
{        
    wxXmlNode *before_node = (wxXmlNode*)getuserdatatype(L, 3, s_wxXmlNode);
    wxXmlNode *child = (wxXmlNode*)getuserdatatype(L, 2, s_wxXmlNode);
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->InsertChild(child, before_node);
    return 0;
}

// bool RemoveChild(wxXmlNode *child);
static int LUACALL wxXmlNode_RemoveChild(lua_State *L)
{    
    bool returns;    
    wxXmlNode *child = (wxXmlNode*)getuserdatatype(L, 2, s_wxXmlNode);
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->RemoveChild(child);
    lua_pushboolean(L, returns);
    return 1;
}

// void AddProperty(const wxString& name, const wxString& value);
static int LUACALL wxXmlNode_AddProperty(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 3));
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->AddProperty(name, value);
    return 0;
}

// bool DeleteProperty(const wxString& name);
static int LUACALL wxXmlNode_DeleteProperty(lua_State *L)
{    
    bool returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->DeleteProperty(name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxXmlNodeType GetType() const;
static int LUACALL wxXmlNode_GetType(lua_State *L)
{    
    wxXmlNodeType returns;
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->GetType();
    lua_pushnumber(L, returns);
    return 1;
}

// wxString GetName() const;
static int LUACALL wxXmlNode_GetName(lua_State *L)
{    
    wxString returns;
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->GetName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetContent() const;
static int LUACALL wxXmlNode_GetContent(lua_State *L)
{    
    wxString returns;
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->GetContent();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxXmlNode *GetParent() const;
static int LUACALL wxXmlNode_GetParent(lua_State *L)
{    
    wxXmlNode *returns;
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->GetParent();
    pushuserdatatype(L, s_wxXmlNode, returns);
    return 1;
}

// wxXmlNode *GetNext() const;
static int LUACALL wxXmlNode_GetNext(lua_State *L)
{    
    wxXmlNode *returns;
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->GetNext();
    pushuserdatatype(L, s_wxXmlNode, returns);
    return 1;
}

// wxXmlNode *GetChildren() const;
static int LUACALL wxXmlNode_GetChildren(lua_State *L)
{    
    wxXmlNode *returns;
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->GetChildren();
    pushuserdatatype(L, s_wxXmlNode, returns);
    return 1;
}

// wxXmlProperty *GetProperties() const;
static int LUACALL wxXmlNode_GetProperties(lua_State *L)
{    
    wxXmlProperty *returns;
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->GetProperties();
    pushuserdatatype(L, s_wxXmlProperty, returns);
    return 1;
}

// %rename GetPropValPtr bool GetPropVal(const wxString& propName, wxString *value) const;
static int LUACALL wxXmlNode_GetPropValPtr(lua_State *L)
{
    bool returns;
    // wxString *value
    wxString value;
    // const wxString& propName
    wxString propName = lua2wx(getstringtype(L, 2));
    // get this
    wxXmlNode *self = ( wxXmlNode * ) getuserdatatype(L, 1, s_wxXmlNode );
    // call GetPropVal
    returns = self->GetPropVal(propName, &value);
    // push the result number
    lua_pushboolean(L, returns);
    // push the result string
    lua_pushstring(L, wx2lua(value));
    // return the number of parameters
    return 2;
}

// wxString GetPropVal(const wxString& propName, const wxString& defaultVal) const;
static int LUACALL wxXmlNode_GetPropVal(lua_State *L)
{    
    wxString returns;    
    wxString defaultVal = lua2wx(getstringtype(L, 3));
    wxString propName = lua2wx(getstringtype(L, 2));
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->GetPropVal(propName, defaultVal);
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// bool HasProp(const wxString& propName) const;
static int LUACALL wxXmlNode_HasProp(lua_State *L)
{    
    bool returns;    
    wxString propName = lua2wx(getstringtype(L, 2));
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    returns = self->HasProp(propName);
    lua_pushboolean(L, returns);
    return 1;
}

// void SetType(wxXmlNodeType type);
static int LUACALL wxXmlNode_SetType(lua_State *L)
{        
    wxXmlNodeType type = (wxXmlNodeType) getenumerationtype(L, 2);
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->SetType(type);
    return 0;
}

// void SetName(const wxString& name);
static int LUACALL wxXmlNode_SetName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->SetName(name);
    return 0;
}

// void SetContent(const wxString& con);
static int LUACALL wxXmlNode_SetContent(lua_State *L)
{        
    wxString con = lua2wx(getstringtype(L, 2));
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->SetContent(con);
    return 0;
}

// void SetParent(wxXmlNode *parent);
static int LUACALL wxXmlNode_SetParent(lua_State *L)
{        
    wxXmlNode *parent = (wxXmlNode*)getuserdatatype(L, 2, s_wxXmlNode);
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->SetParent(parent);
    return 0;
}

// void SetNext(wxXmlNode *next);
static int LUACALL wxXmlNode_SetNext(lua_State *L)
{        
    wxXmlNode *next = (wxXmlNode*)getuserdatatype(L, 2, s_wxXmlNode);
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->SetNext(next);
    return 0;
}

// void SetChildren(wxXmlNode *child);
static int LUACALL wxXmlNode_SetChildren(lua_State *L)
{        
    wxXmlNode *child = (wxXmlNode*)getuserdatatype(L, 2, s_wxXmlNode);
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->SetChildren(child);
    return 0;
}

// void SetProperties(wxXmlProperty *prop);
static int LUACALL wxXmlNode_SetProperties(lua_State *L)
{        
    wxXmlProperty *prop = (wxXmlProperty*)getuserdatatype(L, 2, s_wxXmlProperty);
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->SetProperties(prop);
    return 0;
}

// %rename AddPropertyEntry void AddProperty(wxXmlProperty *prop);
static int LUACALL wxXmlNode_AddPropertyEntry(lua_State *L)
{        
    wxXmlProperty *prop = (wxXmlProperty*)getuserdatatype(L, 2, s_wxXmlProperty);
    wxXmlNode *self = (wxXmlNode*)getuserdatatype(L, 1, s_wxXmlNode);
    self->AddProperty(prop);
    return 0;
}

static int LUACALL wxXmlProperty_destructor(lua_State *L)
{
    wxXmlProperty * self = (wxXmlProperty*)getuserdatatype(L, 1, s_wxXmlProperty);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxXmlProperty_Delete(lua_State *L)
{
    wxXmlProperty * self = (wxXmlProperty*)getuserdatatype(L, 1, s_wxXmlProperty);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxXmlProperty(const wxString& name, const wxString& value, wxXmlProperty *next);
static int LUACALL wxXmlProperty_constructor(lua_State *L)
{    
    wxXmlProperty *returns;    
    wxXmlProperty *next = (wxXmlProperty*)getuserdatatype(L, 3, s_wxXmlProperty);
    wxString value = lua2wx(getstringtype(L, 2));
    wxString name = lua2wx(getstringtype(L, 1));
    returns = new wxXmlProperty(name, value, next);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxXmlProperty, returns);
    return 1;
}

// %constructor wxXmlPropertyDefault();
static int LUACALL wxXmlPropertyDefault_constructor(lua_State *L)
{    
    wxXmlProperty *returns;
    returns = new wxXmlProperty();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxXmlProperty, returns);
    return 1;
}

// wxString GetName();
static int LUACALL wxXmlProperty_GetName(lua_State *L)
{    
    wxString returns;
    wxXmlProperty *self = (wxXmlProperty*)getuserdatatype(L, 1, s_wxXmlProperty);
    returns = self->GetName();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetValue();
static int LUACALL wxXmlProperty_GetValue(lua_State *L)
{    
    wxString returns;
    wxXmlProperty *self = (wxXmlProperty*)getuserdatatype(L, 1, s_wxXmlProperty);
    returns = self->GetValue();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxXmlProperty *GetNext();
static int LUACALL wxXmlProperty_GetNext(lua_State *L)
{    
    wxXmlProperty *returns;
    wxXmlProperty *self = (wxXmlProperty*)getuserdatatype(L, 1, s_wxXmlProperty);
    returns = self->GetNext();
    pushuserdatatype(L, s_wxXmlProperty, returns);
    return 1;
}

// void SetName(const wxString& name);
static int LUACALL wxXmlProperty_SetName(lua_State *L)
{        
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlProperty *self = (wxXmlProperty*)getuserdatatype(L, 1, s_wxXmlProperty);
    self->SetName(name);
    return 0;
}

// void SetValue(const wxString& value);
static int LUACALL wxXmlProperty_SetValue(lua_State *L)
{        
    wxString value = lua2wx(getstringtype(L, 2));
    wxXmlProperty *self = (wxXmlProperty*)getuserdatatype(L, 1, s_wxXmlProperty);
    self->SetValue(value);
    return 0;
}

// void SetNext(wxXmlProperty *next);
static int LUACALL wxXmlProperty_SetNext(lua_State *L)
{        
    wxXmlProperty *next = (wxXmlProperty*)getuserdatatype(L, 2, s_wxXmlProperty);
    wxXmlProperty *self = (wxXmlProperty*)getuserdatatype(L, 1, s_wxXmlProperty);
    self->SetNext(next);
    return 0;
}

static int LUACALL wxXmlDocument_destructor(lua_State *L)
{
    wxXmlDocument * self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxXmlDocument_Delete(lua_State *L)
{
    wxXmlDocument * self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// %constructor wxXmlDocumentDefault();
static int LUACALL wxXmlDocumentDefault_constructor(lua_State *L)
{    
    wxXmlDocument *returns;
    returns = new wxXmlDocument();
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxXmlDocument, returns);
    return 1;
}

// wxXmlDocument(const wxString& filename, const wxString& encoding = "UTF-8");
static int LUACALL wxXmlDocument_constructor(lua_State *L)
{    
    wxXmlDocument *returns;
    int argCount = lua_gettop(L);    
    wxString encoding = (argCount >= 2 ? lua2wx(getstringtype(L, 2)) : wxT("UTF-8"));
    wxString filename = lua2wx(getstringtype(L, 1));
    returns = new wxXmlDocument(filename, encoding);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxXmlDocument, returns);
    return 1;
}

// bool Load(const wxString& filename, const wxString& encoding = "UTF-8");
static int LUACALL wxXmlDocument_Load(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxString encoding = (argCount >= 3 ? lua2wx(getstringtype(L, 3)) : wxT("UTF-8"));
    wxString filename = lua2wx(getstringtype(L, 2));
    wxXmlDocument *self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    returns = self->Load(filename, encoding);
    lua_pushboolean(L, returns);
    return 1;
}

// bool Save(const wxString& filename) const;
static int LUACALL wxXmlDocument_Save(lua_State *L)
{    
    bool returns;    
    wxString filename = lua2wx(getstringtype(L, 2));
    wxXmlDocument *self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    returns = self->Save(filename);
    lua_pushboolean(L, returns);
    return 1;
}

// bool IsOk() const;
static int LUACALL wxXmlDocument_IsOk(lua_State *L)
{    
    bool returns;
    wxXmlDocument *self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    returns = self->IsOk();
    lua_pushboolean(L, returns);
    return 1;
}

// wxXmlNode *GetRoot() const;
static int LUACALL wxXmlDocument_GetRoot(lua_State *L)
{    
    wxXmlNode *returns;
    wxXmlDocument *self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    returns = self->GetRoot();
    pushuserdatatype(L, s_wxXmlNode, returns);
    return 1;
}

// wxString GetVersion() const;
static int LUACALL wxXmlDocument_GetVersion(lua_State *L)
{    
    wxString returns;
    wxXmlDocument *self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    returns = self->GetVersion();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// wxString GetFileEncoding() const;
static int LUACALL wxXmlDocument_GetFileEncoding(lua_State *L)
{    
    wxString returns;
    wxXmlDocument *self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    returns = self->GetFileEncoding();
    lua_pushstring(L, wx2lua(returns));
    return 1;
}

// void SetRoot(wxXmlNode *node);
static int LUACALL wxXmlDocument_SetRoot(lua_State *L)
{        
    wxXmlNode *node = (wxXmlNode*)getuserdatatype(L, 2, s_wxXmlNode);
    wxXmlDocument *self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    self->SetRoot(node);
    return 0;
}

// void SetVersion(const wxString& version);
static int LUACALL wxXmlDocument_SetVersion(lua_State *L)
{        
    wxString version = lua2wx(getstringtype(L, 2));
    wxXmlDocument *self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    self->SetVersion(version);
    return 0;
}

// void SetFileEncoding(const wxString& encoding);
static int LUACALL wxXmlDocument_SetFileEncoding(lua_State *L)
{        
    wxString encoding = lua2wx(getstringtype(L, 2));
    wxXmlDocument *self = (wxXmlDocument*)getuserdatatype(L, 1, s_wxXmlDocument);
    self->SetFileEncoding(encoding);
    return 0;
}

static int LUACALL wxXmlResourceHandler_destructor(lua_State *)
{
    return 0;
}

static int LUACALL wxXmlResource_destructor(lua_State *L)
{
    wxXmlResource * self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    if (self != 0)
        removeTrackedMemory(L, self);
    return 0;
}

static int LUACALL wxXmlResource_Delete(lua_State *L)
{
    wxXmlResource * self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    if (self != 0)
        if (removeTrackedMemory(L, self))
        {
            lua_pushnil(L);
            lua_setmetatable(L, -2);
        }
    return 0;
}

// wxXmlResource(const wxString& filemask, int flags = wxXRC_USE_LOCALE);
static int LUACALL wxXmlResource_constructor(lua_State *L)
{    
    wxXmlResource *returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 2 ? (int) getnumbertype(L, 2) : wxXRC_USE_LOCALE);
    wxString filemask = lua2wx(getstringtype(L, 1));
    returns = new wxXmlResource(filemask, flags);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxXmlResource, returns);
    return 1;
}

// %constructor wxXmlResourceGetDefault()
static int LUACALL wxXmlResourceGetDefault_constructor(lua_State *L)
{
    wxXmlResource *returns;
    // call constructor
    returns = wxXmlResource::Get();
    // push the constructed class pointer
    pushuserdatatype(L, s_wxXmlResource, returns );
    // return the number of parameters
    return 1;
}

// %constructor wxXmlResourceDefault(int flags = wxXRC_USE_LOCALE);
static int LUACALL wxXmlResourceDefault_constructor(lua_State *L)
{    
    wxXmlResource *returns;
    int argCount = lua_gettop(L);    
    int flags = (argCount >= 1 ? (int) getnumbertype(L, 1) : wxXRC_USE_LOCALE);
    returns = new wxXmlResource(flags);
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxXmlResource, returns);
    return 1;
}

// void AddHandler(wxXmlResourceHandler* handler);
static int LUACALL wxXmlResource_AddHandler(lua_State *L)
{        
    wxXmlResourceHandler *handler = (wxXmlResourceHandler*)getuserdatatype(L, 2, s_wxXmlResourceHandler);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    self->AddHandler(handler);
    return 0;
}

// bool AttachUnknownControl(const wxString& name, wxWindow* control, wxWindow* parent = NULL);
static int LUACALL wxXmlResource_AttachUnknownControl(lua_State *L)
{    
    bool returns;
    int argCount = lua_gettop(L);    
    wxWindow *parent = (argCount >= 4 ? (wxWindow*)getuserdatatype(L, 4, s_wxWindow) : NULL);
    wxWindow *control = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->AttachUnknownControl(name, control, parent);
    lua_pushboolean(L, returns);
    return 1;
}

// void ClearHandlers();
static int LUACALL wxXmlResource_ClearHandlers(lua_State *L)
{    
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    self->ClearHandlers();
    return 0;
}

// int CompareVersion(int major, int minor, int release, int revision) const;
static int LUACALL wxXmlResource_CompareVersion(lua_State *L)
{    
    int returns;    
    int revision = (int) getnumbertype(L, 5);
    int release = (int) getnumbertype(L, 4);
    int minor = (int) getnumbertype(L, 3);
    int major = (int) getnumbertype(L, 2);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->CompareVersion(major, minor, release, revision);
    lua_pushnumber(L, returns);
    return 1;
}

// wxXmlResource* Get()
static int LUACALL wxXmlResource_Get(lua_State *L)
{
    wxXmlResource *returns;
    // call Get
    returns = wxXmlResource::Get();
    // push the result datatype
    pushuserdatatype(L, s_wxXmlResource, returns );
    // return the number of parameters
    return 1;
}

// long GetVersion() const;
static int LUACALL wxXmlResource_GetVersion(lua_State *L)
{    
    long returns;
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->GetVersion();
    lua_pushnumber(L, returns);
    return 1;
}

// int GetXRCID(const wxString &stringID)
static int LUACALL wxXmlResource_GetXRCID(lua_State *L)
{
    int returns;
    // const wxString &stringID
    wxString stringID = lua2wx(getstringtype(L, 2));
    // call GetXRCID
    returns = wxXmlResource::GetXRCID(stringID);
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}

// void InitAllHandlers();
static int LUACALL wxXmlResource_InitAllHandlers(lua_State *L)
{    
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    self->InitAllHandlers();
    return 0;
}

// bool Load(const wxString& filemask);
static int LUACALL wxXmlResource_Load(lua_State *L)
{    
    bool returns;    
    wxString filemask = lua2wx(getstringtype(L, 2));
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->Load(filemask);
    lua_pushboolean(L, returns);
    return 1;
}

// wxBitmap LoadBitmap(const wxString& name);
static int LUACALL wxXmlResource_LoadBitmap(lua_State *L)
{    
    wxBitmap *returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = new wxBitmap(self->LoadBitmap(name));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxBitmap, returns);
    return 1;
}

// wxDialog* LoadDialog(wxWindow* parent, const wxString& name);
static int LUACALL wxXmlResource_LoadDialog(lua_State *L)
{    
    wxDialog *returns;    
    wxString name = lua2wx(getstringtype(L, 3));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->LoadDialog(parent, name);
    pushuserdatatype(L, s_wxDialog, returns);
    return 1;
}

// %rename LoadDialogCreate bool LoadDialog(wxDialog* dlg, wxWindow *parent, const wxString &name);
static int LUACALL wxXmlResource_LoadDialogCreate(lua_State *L)
{    
    bool returns;    
    wxString name = lua2wx(getstringtype(L, 4));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    wxDialog *dlg = (wxDialog*)getuserdatatype(L, 2, s_wxDialog);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->LoadDialog(dlg, parent, name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxFrame* CreateFrame(wxWindow* parent, const wxString& name)
static int LUACALL wxXmlResource_CreateDialog(lua_State *L)
{
    wxDialog *returns = NULL;
    // create an empty frame
    returns = new wxDialog;
    // const wxString& name
    wxString name = lua2wx(getstringtype(L, 3));
    // wxWindow* parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 2, s_wxWindow);
    // get this
    wxXmlResource *self = (wxXmlResource *) getuserdatatype(L, 1, s_wxXmlResource );
    // call LoadFrame
    if (self->LoadDialog(returns, parent, name))
    {
        // push the result datatype
        pushuserdatatype(L, s_wxDialog, returns );
        // return the number of parameters
        return 1;
    }
    return 0;
}

// bool LoadFrame(wxFrame* frame, wxWindow* parent, const wxString& name);
static int LUACALL wxXmlResource_LoadFrame(lua_State *L)
{    
    bool returns;    
    wxString name = lua2wx(getstringtype(L, 4));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    wxFrame *frame = (wxFrame*)getuserdatatype(L, 2, s_wxFrame);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->LoadFrame(frame, parent, name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxFrame* CreateFrame(wxWindow* parent, const wxString& name)
static int LUACALL wxXmlResource_CreateFrame(lua_State *L)
{
    wxFrame *returns = NULL;
    // create an empty frame
    returns = new wxFrame;
    // const wxString& name
    wxString name = lua2wx(getstringtype(L, 3));
    // wxWindow* parent
    wxWindow *parent = (wxWindow *) getuserdatatype(L, 2, s_wxWindow);
    // get this
    wxXmlResource *self = ( wxXmlResource * ) getuserdatatype(L, 1, s_wxXmlResource );
    // call LoadFrame
    if (self->LoadFrame(returns, parent, name))
    {
        // push the result datatype
        pushuserdatatype(L, s_wxFrame, returns );
        // return the number of parameters
        return 1;
    }
    return 0;
}

// wxIcon LoadIcon(const wxString& name);
static int LUACALL wxXmlResource_LoadIcon(lua_State *L)
{    
    wxIcon *returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = new wxIcon(self->LoadIcon(name));
    addToTrackedMemoryList(L, returns);
    pushuserdatatype(L, s_wxIcon, returns);
    return 1;
}

// wxMenu* LoadMenu(const wxString& name);
static int LUACALL wxXmlResource_LoadMenu(lua_State *L)
{    
    wxMenu *returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->LoadMenu(name);
    pushuserdatatype(L, s_wxMenu, returns);
    return 1;
}

// %rename LoadMenuBarWindow wxMenuBar* LoadMenuBar(wxWindow* parent, const wxString& name);
static int LUACALL wxXmlResource_LoadMenuBarWindow(lua_State *L)
{    
    wxMenuBar *returns;    
    wxString name = lua2wx(getstringtype(L, 3));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->LoadMenuBar(parent, name);
    pushuserdatatype(L, s_wxMenuBar, returns);
    return 1;
}

// wxMenuBar* LoadMenuBar(const wxString& name);
static int LUACALL wxXmlResource_LoadMenuBar(lua_State *L)
{    
    wxMenuBar *returns;    
    wxString name = lua2wx(getstringtype(L, 2));
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->LoadMenuBar(name);
    pushuserdatatype(L, s_wxMenuBar, returns);
    return 1;
}

// wxPanel* LoadPanel(wxWindow* parent, const wxString &name);
static int LUACALL wxXmlResource_LoadPanel(lua_State *L)
{    
    wxPanel *returns;    
    wxString name = lua2wx(getstringtype(L, 3));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->LoadPanel(parent, name);
    pushuserdatatype(L, s_wxPanel, returns);
    return 1;
}

// %rename LoadPanelCreate bool LoadPanel(wxPanel *panel, wxWindow *parent, const wxString &name);
static int LUACALL wxXmlResource_LoadPanelCreate(lua_State *L)
{    
    bool returns;    
    wxString name = lua2wx(getstringtype(L, 4));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 3, s_wxWindow);
    wxPanel *panel = (wxPanel*)getuserdatatype(L, 2, s_wxPanel);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->LoadPanel(panel, parent, name);
    lua_pushboolean(L, returns);
    return 1;
}

// wxToolBar* LoadToolBar(wxWindow *parent, const wxString& name);
static int LUACALL wxXmlResource_LoadToolBar(lua_State *L)
{    
    wxToolBar *returns;    
    wxString name = lua2wx(getstringtype(L, 3));
    wxWindow *parent = (wxWindow*)getuserdatatype(L, 2, s_wxWindow);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->LoadToolBar(parent, name);
    pushuserdatatype(L, s_wxToolBar, returns);
    return 1;
}

// wxXmlResource* Set(wxXmlResource *res)
static int LUACALL wxXmlResource_Set(lua_State *L)
{
    wxXmlResource *returns;
    // wxXmlResource *res
    wxXmlResource *res = (wxXmlResource *) getuserdatatype(L, 2, s_wxXmlResource);
    // call Set
    returns = wxXmlResource::Set(res);
    // push the result datatype
    pushuserdatatype(L, s_wxXmlResource, returns );
    // return the number of parameters
    return 1;
}

// int GetFlags();
static int LUACALL wxXmlResource_GetFlags(lua_State *L)
{    
    int returns;
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    returns = self->GetFlags();
    lua_pushnumber(L, returns);
    return 1;
}

// void SetFlags(int flags);
static int LUACALL wxXmlResource_SetFlags(lua_State *L)
{        
    int flags = (int) getnumbertype(L, 2);
    wxXmlResource *self = (wxXmlResource*)getuserdatatype(L, 1, s_wxXmlResource);
    self->SetFlags(flags);
    return 0;
}

static WXLUAMETHOD wxLog_methods[] = {
    { LuaDelete,      "wxLog", wxLog_destructor, 0, 0 },
};

static WXLUAMETHOD wxProcess_methods[] = {
    { LuaDelete,      "wxProcess", wxProcess_destructor, 0, 0 },
    { LuaGlobal,      "wxCreateDynamicObject", builtin_wxCreateDynamicObject, 1, 1 },
};

static WXLUAMETHOD wxObject_methods[] = {
    { LuaDelete,      "wxObject", wxObject_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxObject_Delete, 0, 0 },
    { LuaConstructor, "wxObject", wxObject_constructor, 0, 0 },
    { LuaMethod,      "GetClassInfo", wxObject_GetClassInfo, 0, 0 },
    { LuaMethod,      "GetRefData", wxObject_GetRefData, 0, 0 },
    { LuaMethod,      "IsKindOf", wxObject_IsKindOf, 1, 1 },
    { LuaMethod,      "Ref", wxObject_Ref, 1, 1 },
    { LuaMethod,      "SetRefData", wxObject_SetRefData, 1, 1 },
    { LuaMethod,      "UnRef", wxObject_UnRef, 0, 0 },
    { LuaMethod,      "DynamicCast", wxObject_DynamicCast, 1, 1 },
};

static WXLUAMETHOD wxObjectRefData_methods[] = {
    { LuaDelete,      "wxObjectRefData", wxObjectRefData_destructor, 0, 0 },
    { LuaMethod,      "GetRefCount", wxObjectRefData_GetRefCount, 0, 0 },
};

static WXLUAMETHOD wxClassInfo_methods[] = {
    { LuaDelete,      "wxClassInfo", wxClassInfo_destructor, 0, 0 },
    { LuaConstructor, "wxClassInfo", wxClassInfo_constructor, 1, 1 },
    { LuaMethod,      "CreateObject", wxClassInfo_CreateObject, 0, 0 },
    { LuaMethod,      "FindClass", wxClassInfo_FindClass, 1, 1 },
    { LuaMethod,      "GetBaseClassName1", wxClassInfo_GetBaseClassName1, 0, 0 },
    { LuaGetProp,     "BaseClassName1", wxClassInfo_GetBaseClassName1, 0, 0 },
    { LuaMethod,      "GetBaseClassName2", wxClassInfo_GetBaseClassName2, 0, 0 },
    { LuaGetProp,     "BaseClassName2", wxClassInfo_GetBaseClassName2, 0, 0 },
    { LuaMethod,      "GetClassName", wxClassInfo_GetClassName, 0, 0 },
    { LuaGetProp,     "ClassName", wxClassInfo_GetClassName, 0, 0 },
    { LuaMethod,      "GetSize", wxClassInfo_GetSize, 0, 0 },
    { LuaGetProp,     "Size", wxClassInfo_GetSize, 0, 0 },
    { LuaMethod,      "IsKindOf", wxClassInfo_IsKindOf, 1, 1 },
};

static WXLUAMETHOD wxValidator_methods[] = {
    { LuaDelete,      "wxValidator", wxValidator_destructor, 0, 0 },
    { LuaMethod,      "GetWindow", wxValidator_GetWindow, 0, 0 },
    { LuaMethod,      "SetBellOnError", wxValidator_SetBellOnError, 0, 1 },
    { LuaMethod,      "SetWindow", wxValidator_SetWindow, 1, 1 },
    { LuaGetProp,     "Window", wxValidator_GetWindow, 0, 0 },
    { LuaSetProp,     "Window", wxValidator_SetWindow, 1, 1 },
    { LuaMethod,      "TransferFromWindow", wxValidator_TransferFromWindow, 0, 0 },
    { LuaMethod,      "TransferToWindow", wxValidator_TransferToWindow, 0, 0 },
    { LuaMethod,      "Validate", wxValidator_Validate, 1, 1 },
};

static WXLUAMETHOD wxTextValidator_methods[] = {
    { LuaDelete,      "wxTextValidator", wxTextValidator_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxTextValidator_Delete, 0, 0 },
    { LuaConstructor, "wxTextValidator", wxTextValidator_constructor, 0, 2 },
    { LuaMethod,      "GetStyle", wxTextValidator_GetStyle, 0, 0 },
    { LuaMethod,      "SetStyle", wxTextValidator_SetStyle, 1, 1 },
    { LuaGetProp,     "Style", wxTextValidator_GetStyle, 0, 0 },
    { LuaSetProp,     "Style", wxTextValidator_SetStyle, 1, 1 },
    { LuaMethod,      "SetExcludeList", wxTextValidator_SetExcludeList, 1, 1 },
    { LuaMethod,      "SetIncludeList", wxTextValidator_SetIncludeList, 1, 1 },
};

static WXLUAMETHOD wxGenericValidator_methods[] = {
    { LuaDelete,      "wxGenericValidator", wxGenericValidator_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxGenericValidator_Delete, 0, 0 },
    { LuaConstructor, "wxGenericValidatorBool", wxGenericValidatorBool_constructor, 1, 1 },
    { LuaConstructor, "wxGenericValidatorString", wxGenericValidatorString_constructor, 1, 1 },
    { LuaConstructor, "wxGenericValidatorInt", wxGenericValidatorInt_constructor, 1, 1 },
    { LuaConstructor, "wxGenericValidatorArray", wxGenericValidatorArray_constructor, 1, 1 },
};

static WXLUAMETHOD wxList_methods[] = {
    { LuaDelete,      "wxList", wxList_destructor, 0, 0 },
    { LuaConstructor, "wxList", wxList_constructor, 0, 0 },
    { LuaConstructor, "wxListFromTable", wxListFromTable_constructor, 0, 0 },
    { LuaMethod,      "Append", wxList_Append, 1, 1 },
    { LuaMethod,      "AppendNumKey", wxList_AppendNumKey, 2, 2 },
    { LuaMethod,      "AppendStringKey", wxList_AppendStringKey, 2, 2 },
    { LuaMethod,      "Clear", wxList_Clear, 0, 0 },
    { LuaMethod,      "DeleteContents", wxList_DeleteContents, 1, 1 },
    { LuaMethod,      "DeleteNode", wxList_DeleteNode, 1, 1 },
    { LuaMethod,      "DeleteObject", wxList_DeleteObject, 1, 1 },
    { LuaMethod,      "FindNumKey", wxList_FindNumKey, 1, 1 },
    { LuaMethod,      "FindStringKey", wxList_FindStringKey, 1, 1 },
    { LuaMethod,      "GetCount", wxList_GetCount, 0, 0 },
    { LuaMethod,      "GetFirst", wxList_GetFirst, 0, 0 },
    { LuaMethod,      "GetLast", wxList_GetLast, 0, 0 },
    { LuaMethod,      "Insert", wxList_Insert, 1, 1 },
    { LuaMethod,      "InsertAt", wxList_InsertAt, 2, 2 },
    { LuaMethod,      "InsertBefore", wxList_InsertBefore, 2, 2 },
    { LuaMethod,      "Item", wxList_Item, 1, 1 },
    { LuaMethod,      "Member", wxList_Member, 1, 1 },
    { LuaGetProp,     "Count", wxList_GetCount, 0, 0 },
    { LuaGetProp,     "First", wxList_GetFirst, 0, 0 },
    { LuaGetProp,     "Last", wxList_GetLast, 0, 0 },
};

static WXLUAMETHOD wxNode_methods[] = {
    { LuaDelete,      "wxNode", wxNode_destructor, 0, 0 },
    { LuaMethod,      "GetData", wxNode_GetData, 0, 0 },
    { LuaMethod,      "GetNext", wxNode_GetNext, 0, 0 },
    { LuaMethod,      "GetPrevious", wxNode_GetPrevious, 0, 0 },
    { LuaMethod,      "SetData", wxNode_SetData, 1, 1 },
    { LuaGetProp,     "Data", wxNode_GetData, 0, 0 },
    { LuaSetProp,     "Data", wxNode_SetData, 1, 1 },
    { LuaGetProp,     "Previous", wxNode_GetPrevious, 0, 0 },
    { LuaGetProp,     "Next", wxNode_GetNext, 0, 0 },
};

static WXLUAMETHOD wxArrayInt_methods[] = {
    { LuaDelete,      "wxArrayInt", wxArrayInt_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxArrayInt_Delete, 0, 0 },
    { LuaMethod,      "Clear", wxArrayInt_Clear, 0, 0 },
    { LuaMethod,      "GetCount", wxArrayInt_GetCount, 0, 0 },
    { LuaGetProp,     "Count", wxArrayInt_GetCount, 0, 0 },
    { LuaMethod,      "Empty", wxArrayInt_Empty, 0, 0 },
    { LuaMethod,      "IsEmpty", wxArrayInt_IsEmpty, 0, 0 },
    { LuaMethod,      "Shrink", wxArrayInt_Shrink, 0, 0 },
    { LuaMethod,      "RemoveAt", wxArrayInt_RemoveAt, 1, 1 },
    { LuaMethod,      "Item", wxArrayInt_Item, 1, 1 },
    { LuaMethod,      "Add", wxArrayInt_Add, 1, 1 },
    { LuaMethod,      "Insert", wxArrayInt_Insert, 2, 3 },
};

static WXLUAMETHOD wxArrayString_methods[] = {
    { LuaDelete,      "wxArrayString", wxArrayString_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxArrayString_Delete, 0, 0 },
    { LuaConstructor, "wxArrayString", wxArrayString_constructor, 0, 0 },
    { LuaConstructor, "wxArrayStringCopy", wxArrayStringCopy_constructor, 1, 1 },
    { LuaMethod,      "Add", wxArrayString_Add, 1, 1 },
    { LuaMethod,      "Alloc", wxArrayString_Alloc, 1, 1 },
    { LuaMethod,      "Clear", wxArrayString_Clear, 0, 0 },
    { LuaMethod,      "Count", wxArrayString_Count, 0, 0 },
    { LuaMethod,      "Empty", wxArrayString_Empty, 0, 0 },
    { LuaMethod,      "GetCount", wxArrayString_GetCount, 0, 0 },
    { LuaMethod,      "Index", wxArrayString_Index, 1, 3 },
    { LuaMethod,      "Insert", wxArrayString_Insert, 2, 2 },
    { LuaMethod,      "IsEmpty", wxArrayString_IsEmpty, 0, 0 },
    { LuaMethod,      "Item", wxArrayString_Item, 1, 1 },
    { LuaMethod,      "Last", wxArrayString_Last, 0, 0 },
    { LuaMethod,      "Remove", wxArrayString_Remove, 1, 1 },
    { LuaMethod,      "RemoveAt", wxArrayString_RemoveAt, 1, 1 },
    { LuaMethod,      "Shrink", wxArrayString_Shrink, 0, 0 },
    { LuaMethod,      "Sort", wxArrayString_Sort, 0, 1 },
};

static WXLUAMETHOD wxStringList_methods[] = {
    { LuaDelete,      "wxStringList", wxStringList_destructor, 0, 0 },
    { LuaConstructor, "wxStringList", wxStringList_constructor, 0, 0 },
    { LuaMethod,      "Add", wxStringList_Add, 1, 1 },
    { LuaMethod,      "Clear", wxStringList_Clear, 0, 0 },
    { LuaMethod,      "Delete", wxStringList_Delete, 1, 1 },
    { LuaMethod,      "Member", wxStringList_Member, 1, 1 },
    { LuaMethod,      "Sort", wxStringList_Sort, 0, 0 },
};

static WXLUAMETHOD wxHashTable_methods[] = {
    { LuaDelete,      "wxHashTable", wxHashTable_destructor, 0, 0 },
    { LuaConstructor, "wxHashTable", wxHashTable_constructor, 1, 2 },
    { LuaMethod,      "BeginFind", wxHashTable_BeginFind, 0, 0 },
    { LuaMethod,      "Clear", wxHashTable_Clear, 0, 0 },
    { LuaMethod,      "Delete", wxHashTable_Delete, 1, 1 },
    { LuaMethod,      "DeleteContents", wxHashTable_DeleteContents, 1, 1 },
    { LuaMethod,      "GetNumKey", wxHashTable_GetNumKey, 1, 1 },
    { LuaMethod,      "GetStringKey", wxHashTable_GetStringKey, 1, 1 },
    { LuaMethod,      "MakeKey", wxHashTable_MakeKey, 1, 1 },
    { LuaMethod,      "Next", wxHashTable_Next, 0, 0 },
    { LuaMethod,      "PutNumKey", wxHashTable_PutNumKey, 2, 2 },
    { LuaMethod,      "PutStringKey", wxHashTable_PutStringKey, 2, 2 },
    { LuaMethod,      "GetCount", wxHashTable_GetCount, 0, 0 },
    { LuaGetProp,     "Count", wxHashTable_GetCount, 0, 0 },
};

static WXLUAMETHOD wxStreamBase_methods[] = {
    { LuaDelete,      "wxStreamBase", wxStreamBase_destructor, 0, 0 },
    { LuaConstructor, "wxStreamBase", wxStreamBase_constructor, 0, 0 },
    { LuaMethod,      "IsOk", wxStreamBase_IsOk, 0, 0 },
    { LuaMethod,      "Reset", wxStreamBase_Reset, 0, 0 },
    { LuaMethod,      "GetLastError", wxStreamBase_GetLastError, 0, 0 },
    { LuaMethod,      "GetSize", wxStreamBase_GetSize, 0, 0 },
};

static WXLUAMETHOD wxInputStream_methods[] = {
    { LuaDelete,      "wxInputStream", wxInputStream_destructor, 0, 0 },
    { LuaMethod,      "GetC", wxInputStream_GetC, 0, 0 },
    { LuaMethod,      "Eof", wxInputStream_Eof, 0, 0 },
    { LuaMethod,      "LastRead", wxInputStream_LastRead, 0, 0 },
    { LuaMethod,      "Peek", wxInputStream_Peek, 0, 0 },
    { LuaMethod,      "Read", wxInputStream_Read, 2, 2 },
    { LuaMethod,      "ReadStream", wxInputStream_ReadStream, 1, 1 },
    { LuaMethod,      "SeekI", wxInputStream_SeekI, 2, 2 },
    { LuaMethod,      "TellI", wxInputStream_TellI, 0, 0 },
    { LuaMethod,      "Unget", wxInputStream_Unget, 2, 2 },
    { LuaMethod,      "Ungetch", wxInputStream_Ungetch, 1, 1 },
};

static WXLUAMETHOD wxOutputStream_methods[] = {
    { LuaDelete,      "wxOutputStream", wxOutputStream_destructor, 0, 0 },
    { LuaConstructor, "wxOutputStream", wxOutputStream_constructor, 0, 0 },
    { LuaMethod,      "LastWrite", wxOutputStream_LastWrite, 0, 0 },
    { LuaMethod,      "PutC", wxOutputStream_PutC, 1, 1 },
    { LuaMethod,      "SeekO", wxOutputStream_SeekO, 2, 2 },
    { LuaMethod,      "TellO", wxOutputStream_TellO, 0, 0 },
    { LuaMethod,      "Write", wxOutputStream_Write, 2, 2 },
    { LuaMethod,      "WriteStream", wxOutputStream_WriteStream, 1, 1 },
};

static WXLUAMETHOD wxProtocol_methods[] = {
    { LuaDelete,      "wxProtocol", wxProtocol_destructor, 0, 0 },
    { LuaMethod,      "Reconnect", wxProtocol_Reconnect, 0, 0 },
    { LuaMethod,      "GetInputStream", wxProtocol_GetInputStream, 1, 1 },
    { LuaMethod,      "Abort", wxProtocol_Abort, 0, 0 },
    { LuaMethod,      "GetError", wxProtocol_GetError, 0, 0 },
    { LuaMethod,      "GetContentType", wxProtocol_GetContentType, 0, 0 },
    { LuaMethod,      "SetUser", wxProtocol_SetUser, 1, 1 },
    { LuaMethod,      "SetPassword", wxProtocol_SetPassword, 1, 1 },
};

static WXLUAMETHOD wxHTTP_methods[] = {
    { LuaDelete,      "wxHTTP", wxHTTP_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxHTTP_Delete, 0, 0 },
    { LuaConstructor, "wxHTTP", wxHTTP_constructor, 0, 0 },
    { LuaMethod,      "GetInputStream", wxHTTP_GetInputStream, 1, 1 },
    { LuaMethod,      "SetHeader", wxHTTP_SetHeader, 2, 2 },
    { LuaMethod,      "GetHeader", wxHTTP_GetHeader, 1, 1 },
};

static WXLUAMETHOD wxFTP_methods[] = {
    { LuaDelete,      "wxFTP", wxFTP_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFTP_Delete, 0, 0 },
    { LuaConstructor, "wxFTP", wxFTP_constructor, 0, 0 },
    { LuaMethod,      "Abort", wxFTP_Abort, 0, 0 },
    { LuaMethod,      "CheckCommand", wxFTP_CheckCommand, 2, 2 },
    { LuaMethod,      "SendCommand", wxFTP_SendCommand, 1, 1 },
    { LuaMethod,      "GetLastResult", wxFTP_GetLastResult, 0, 0 },
    { LuaMethod,      "ChDir", wxFTP_ChDir, 1, 1 },
    { LuaMethod,      "MkDir", wxFTP_MkDir, 1, 1 },
    { LuaMethod,      "RmDir", wxFTP_RmDir, 1, 1 },
    { LuaMethod,      "Pwd", wxFTP_Pwd, 0, 0 },
    { LuaMethod,      "Rename", wxFTP_Rename, 2, 2 },
    { LuaMethod,      "RmFile", wxFTP_RmFile, 1, 1 },
    { LuaMethod,      "SetAscii", wxFTP_SetAscii, 0, 0 },
    { LuaMethod,      "SetBinary", wxFTP_SetBinary, 0, 0 },
    { LuaMethod,      "SetUser", wxFTP_SetUser, 1, 1 },
    { LuaMethod,      "SetPassword", wxFTP_SetPassword, 1, 1 },
    { LuaMethod,      "FileExists", wxFTP_FileExists, 1, 1 },
    { LuaMethod,      "GetFileSize", wxFTP_GetFileSize, 1, 1 },
    { LuaMethod,      "GetDirList", wxFTP_GetDirList, 1, 2 },
    { LuaMethod,      "GetFilesList", wxFTP_GetFilesList, 1, 2 },
    { LuaMethod,      "GetOutputStream", wxFTP_GetOutputStream, 1, 1 },
    { LuaMethod,      "GetInputStream", wxFTP_GetInputStream, 1, 1 },
};

static WXLUAMETHOD wxEvtHandler_methods[] = {
    { LuaDelete,      "wxEvtHandler", wxEvtHandler_destructor, 0, 0 },
    { LuaConstructor, "wxEvtHandler", wxEvtHandler_constructor, 0, 0 },
    { LuaMethod,      "ConnectEvent", wxEvtHandler_ConnectEvent, 0, 0 },
};

static WXLUAMETHOD wxEvent_methods[] = {
    { LuaDelete,      "wxEvent", wxEvent_destructor, 0, 0 },
    { LuaMethod,      "GetEventObject", wxEvent_GetEventObject, 0, 0 },
    { LuaMethod,      "GetEventType", wxEvent_GetEventType, 0, 0 },
    { LuaMethod,      "GetId", wxEvent_GetId, 0, 0 },
    { LuaMethod,      "GetSkipped", wxEvent_GetSkipped, 0, 0 },
    { LuaMethod,      "GetTimestamp", wxEvent_GetTimestamp, 0, 0 },
    { LuaMethod,      "SetEventObject", wxEvent_SetEventObject, 1, 1 },
    { LuaGetProp,     "EventObject", wxEvent_GetEventObject, 0, 0 },
    { LuaSetProp,     "EventObject", wxEvent_SetEventObject, 1, 1 },
    { LuaMethod,      "SetEventType", wxEvent_SetEventType, 1, 1 },
    { LuaGetProp,     "EventType", wxEvent_GetEventType, 0, 0 },
    { LuaSetProp,     "EventType", wxEvent_SetEventType, 1, 1 },
    { LuaMethod,      "SetId", wxEvent_SetId, 1, 1 },
    { LuaGetProp,     "Id", wxEvent_GetId, 0, 0 },
    { LuaSetProp,     "Id", wxEvent_SetId, 1, 1 },
    { LuaMethod,      "SetTimestamp", wxEvent_SetTimestamp, 1, 1 },
    { LuaGetProp,     "Timestamp", wxEvent_GetTimestamp, 0, 0 },
    { LuaSetProp,     "Timestamp", wxEvent_SetTimestamp, 1, 1 },
    { LuaMethod,      "Skip", wxEvent_Skip, 0, 1 },
};

static WXLUAMETHOD wxCommandEvent_methods[] = {
    { LuaDelete,      "wxCommandEvent", wxCommandEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxCommandEvent_Delete, 0, 0 },
    { LuaConstructor, "wxCommandEvent", wxCommandEvent_constructor, 0, 2 },
    { LuaMethod,      "GetClientData", wxCommandEvent_GetClientData, 0, 0 },
    { LuaMethod,      "GetExtraLong", wxCommandEvent_GetExtraLong, 0, 0 },
    { LuaMethod,      "GetInt", wxCommandEvent_GetInt, 0, 0 },
    { LuaMethod,      "GetSelection", wxCommandEvent_GetSelection, 0, 0 },
    { LuaGetProp,     "Selection", wxCommandEvent_GetSelection, 0, 0 },
    { LuaMethod,      "GetString", wxCommandEvent_GetString, 0, 0 },
    { LuaMethod,      "IsChecked", wxCommandEvent_IsChecked, 0, 0 },
    { LuaMethod,      "IsSelection", wxCommandEvent_IsSelection, 0, 0 },
    { LuaMethod,      "SetClientData", wxCommandEvent_SetClientData, 1, 1 },
    { LuaGetProp,     "ClientData", wxCommandEvent_GetClientData, 0, 0 },
    { LuaSetProp,     "ClientData", wxCommandEvent_SetClientData, 1, 1 },
    { LuaMethod,      "SetExtraLong", wxCommandEvent_SetExtraLong, 1, 1 },
    { LuaGetProp,     "ExtraLong", wxCommandEvent_GetExtraLong, 0, 0 },
    { LuaSetProp,     "ExtraLong", wxCommandEvent_SetExtraLong, 1, 1 },
    { LuaMethod,      "SetInt", wxCommandEvent_SetInt, 1, 1 },
    { LuaGetProp,     "Int", wxCommandEvent_GetInt, 0, 0 },
    { LuaSetProp,     "Int", wxCommandEvent_SetInt, 1, 1 },
    { LuaMethod,      "SetString", wxCommandEvent_SetString, 1, 1 },
    { LuaGetProp,     "String", wxCommandEvent_GetString, 0, 0 },
    { LuaSetProp,     "String", wxCommandEvent_SetString, 1, 1 },
};

static WXLUAMETHOD wxNotifyEvent_methods[] = {
    { LuaDelete,      "wxNotifyEvent", wxNotifyEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxNotifyEvent_Delete, 0, 0 },
    { LuaConstructor, "wxNotifyEvent", wxNotifyEvent_constructor, 0, 2 },
    { LuaMethod,      "IsAllowed", wxNotifyEvent_IsAllowed, 0, 0 },
    { LuaMethod,      "Veto", wxNotifyEvent_Veto, 0, 0 },
};

static WXLUAMETHOD wxActivateEvent_methods[] = {
    { LuaDelete,      "wxActivateEvent", wxActivateEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxActivateEvent_Delete, 0, 0 },
    { LuaConstructor, "wxActivateEvent", wxActivateEvent_constructor, 0, 3 },
    { LuaMethod,      "GetActive", wxActivateEvent_GetActive, 0, 0 },
    { LuaGetProp,     "Active", wxActivateEvent_GetActive, 0, 0 },
};

static WXLUAMETHOD wxCloseEvent_methods[] = {
    { LuaDelete,      "wxCloseEvent", wxCloseEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxCloseEvent_Delete, 0, 0 },
    { LuaConstructor, "wxCloseEvent", wxCloseEvent_constructor, 0, 2 },
    { LuaMethod,      "CanVeto", wxCloseEvent_CanVeto, 0, 0 },
    { LuaMethod,      "GetLoggingOff", wxCloseEvent_GetLoggingOff, 0, 0 },
    { LuaMethod,      "SetCanVeto", wxCloseEvent_SetCanVeto, 1, 1 },
    { LuaMethod,      "SetLoggingOff", wxCloseEvent_SetLoggingOff, 1, 1 },
    { LuaMethod,      "Veto", wxCloseEvent_Veto, 0, 1 },
};

static WXLUAMETHOD wxDialUpEvent_methods[] = {
    { LuaDelete,      "wxDialUpEvent", wxDialUpEvent_destructor, 0, 0 },
    { LuaConstructor, "wxDialUpEvent", wxDialUpEvent_constructor, 2, 2 },
    { LuaMethod,      "IsConnectedEvent", wxDialUpEvent_IsConnectedEvent, 0, 0 },
    { LuaMethod,      "IsOwnEvent", wxDialUpEvent_IsOwnEvent, 0, 0 },
};

static WXLUAMETHOD wxEraseEvent_methods[] = {
    { LuaDelete,      "wxEraseEvent", wxEraseEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxEraseEvent_Delete, 0, 0 },
    { LuaConstructor, "wxEraseEvent", wxEraseEvent_constructor, 0, 2 },
    { LuaMethod,      "GetDC", wxEraseEvent_GetDC, 0, 0 },
};

static WXLUAMETHOD wxFocusEvent_methods[] = {
    { LuaDelete,      "wxFocusEvent", wxFocusEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFocusEvent_Delete, 0, 0 },
    { LuaConstructor, "wxFocusEvent", wxFocusEvent_constructor, 0, 2 },
};

static WXLUAMETHOD wxKeyEvent_methods[] = {
    { LuaDelete,      "wxKeyEvent", wxKeyEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxKeyEvent_Delete, 0, 0 },
    { LuaConstructor, "wxKeyEvent", wxKeyEvent_constructor, 1, 1 },
    { LuaMethod,      "AltDown", wxKeyEvent_AltDown, 0, 0 },
    { LuaMethod,      "ControlDown", wxKeyEvent_ControlDown, 0, 0 },
    { LuaMethod,      "GetKeyCode", wxKeyEvent_GetKeyCode, 0, 0 },
    { LuaMethod,      "GetX", wxKeyEvent_GetX, 0, 0 },
    { LuaMethod,      "GetY", wxKeyEvent_GetY, 0, 0 },
    { LuaMethod,      "MetaDown", wxKeyEvent_MetaDown, 0, 0 },
    { LuaMethod,      "GetPosition", wxKeyEvent_GetPosition, 0, 0 },
    { LuaMethod,      "GetPositionXY", wxKeyEvent_GetPositionXY, 2, 2 },
    { LuaMethod,      "HasModifiers", wxKeyEvent_HasModifiers, 0, 0 },
    { LuaMethod,      "ShiftDown", wxKeyEvent_ShiftDown, 0, 0 },
};

static WXLUAMETHOD wxIdleEvent_methods[] = {
    { LuaDelete,      "wxIdleEvent", wxIdleEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxIdleEvent_Delete, 0, 0 },
    { LuaConstructor, "wxIdleEvent", wxIdleEvent_constructor, 0, 0 },
    { LuaMethod,      "RequestMore", wxIdleEvent_RequestMore, 0, 1 },
    { LuaMethod,      "MoreRequested", wxIdleEvent_MoreRequested, 0, 0 },
};

static WXLUAMETHOD wxInitDialogEvent_methods[] = {
    { LuaDelete,      "wxInitDialogEvent", wxInitDialogEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxInitDialogEvent_Delete, 0, 0 },
    { LuaConstructor, "wxInitDialogEvent", wxInitDialogEvent_constructor, 0, 1 },
};

static WXLUAMETHOD wxJoystickEvent_methods[] = {
    { LuaDelete,      "wxJoystickEvent", wxJoystickEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxJoystickEvent_Delete, 0, 0 },
    { LuaConstructor, "wxJoystickEvent", wxJoystickEvent_constructor, 0, 4 },
    { LuaMethod,      "ButtonDown", wxJoystickEvent_ButtonDown, 0, 1 },
    { LuaMethod,      "ButtonIsDown", wxJoystickEvent_ButtonIsDown, 0, 1 },
    { LuaMethod,      "ButtonUp", wxJoystickEvent_ButtonUp, 0, 1 },
    { LuaMethod,      "GetButtonChange", wxJoystickEvent_GetButtonChange, 0, 0 },
    { LuaMethod,      "GetButtonState", wxJoystickEvent_GetButtonState, 0, 0 },
    { LuaMethod,      "GetJoystick", wxJoystickEvent_GetJoystick, 0, 0 },
    { LuaMethod,      "GetPosition", wxJoystickEvent_GetPosition, 0, 0 },
    { LuaMethod,      "GetZPosition", wxJoystickEvent_GetZPosition, 0, 0 },
    { LuaMethod,      "IsButton", wxJoystickEvent_IsButton, 0, 0 },
    { LuaMethod,      "IsMove", wxJoystickEvent_IsMove, 0, 0 },
    { LuaMethod,      "IsZMove", wxJoystickEvent_IsZMove, 0, 0 },
};

static WXLUAMETHOD wxMouseEvent_methods[] = {
    { LuaDelete,      "wxMouseEvent", wxMouseEvent_destructor, 0, 0 },
    { LuaMethod,      "AltDown", wxMouseEvent_AltDown, 0, 0 },
    { LuaMethod,      "Button", wxMouseEvent_Button, 1, 1 },
    { LuaMethod,      "ButtonDClick", wxMouseEvent_ButtonDClick, 0, 1 },
    { LuaMethod,      "ButtonDown", wxMouseEvent_ButtonDown, 0, 1 },
    { LuaMethod,      "ButtonUp", wxMouseEvent_ButtonUp, 0, 1 },
    { LuaMethod,      "ControlDown", wxMouseEvent_ControlDown, 0, 0 },
    { LuaMethod,      "Dragging", wxMouseEvent_Dragging, 0, 0 },
    { LuaMethod,      "Entering", wxMouseEvent_Entering, 0, 0 },
    { LuaMethod,      "GetPosition", wxMouseEvent_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxMouseEvent_GetPosition, 0, 0 },
    { LuaMethod,      "GetPositionXY", wxMouseEvent_GetPositionXY, 2, 2 },
    { LuaMethod,      "GetLogicalPosition", wxMouseEvent_GetLogicalPosition, 1, 1 },
    { LuaGetProp,     "LogicalPosition", wxMouseEvent_GetLogicalPosition, 0, 0 },
    { LuaMethod,      "GetX", wxMouseEvent_GetX, 0, 0 },
    { LuaGetProp,     "X", wxMouseEvent_GetX, 0, 0 },
    { LuaMethod,      "GetY", wxMouseEvent_GetY, 0, 0 },
    { LuaGetProp,     "Y", wxMouseEvent_GetY, 0, 0 },
    { LuaMethod,      "IsButton", wxMouseEvent_IsButton, 0, 0 },
    { LuaMethod,      "Leaving", wxMouseEvent_Leaving, 0, 0 },
    { LuaMethod,      "LeftDClick", wxMouseEvent_LeftDClick, 0, 0 },
    { LuaMethod,      "LeftDown", wxMouseEvent_LeftDown, 0, 0 },
    { LuaMethod,      "LeftIsDown", wxMouseEvent_LeftIsDown, 0, 0 },
    { LuaMethod,      "LeftUp", wxMouseEvent_LeftUp, 0, 0 },
    { LuaMethod,      "MetaDown", wxMouseEvent_MetaDown, 0, 0 },
    { LuaMethod,      "MiddleDClick", wxMouseEvent_MiddleDClick, 0, 0 },
    { LuaMethod,      "MiddleDown", wxMouseEvent_MiddleDown, 0, 0 },
    { LuaMethod,      "MiddleIsDown", wxMouseEvent_MiddleIsDown, 0, 0 },
    { LuaMethod,      "MiddleUp", wxMouseEvent_MiddleUp, 0, 0 },
    { LuaMethod,      "Moving", wxMouseEvent_Moving, 0, 0 },
    { LuaMethod,      "RightDClick", wxMouseEvent_RightDClick, 0, 0 },
    { LuaMethod,      "RightDown", wxMouseEvent_RightDown, 0, 0 },
    { LuaMethod,      "RightIsDown", wxMouseEvent_RightIsDown, 0, 0 },
    { LuaMethod,      "RightUp", wxMouseEvent_RightUp, 0, 0 },
    { LuaMethod,      "ShiftDown", wxMouseEvent_ShiftDown, 0, 0 },
};

static WXLUAMETHOD wxMoveEvent_methods[] = {
    { LuaDelete,      "wxMoveEvent", wxMoveEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxMoveEvent_Delete, 0, 0 },
    { LuaConstructor, "wxMoveEvent", wxMoveEvent_constructor, 1, 2 },
    { LuaMethod,      "GetPosition", wxMoveEvent_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxMoveEvent_GetPosition, 0, 0 },
};

static WXLUAMETHOD wxPaintEvent_methods[] = {
    { LuaDelete,      "wxPaintEvent", wxPaintEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPaintEvent_Delete, 0, 0 },
    { LuaConstructor, "wxPaintEvent", wxPaintEvent_constructor, 0, 1 },
};

static WXLUAMETHOD wxProcessEvent_methods[] = {
    { LuaDelete,      "wxProcessEvent", wxProcessEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxProcessEvent_Delete, 0, 0 },
    { LuaConstructor, "wxProcessEvent", wxProcessEvent_constructor, 0, 2 },
    { LuaMethod,      "GetPid", wxProcessEvent_GetPid, 0, 0 },
    { LuaGetProp,     "Pid", wxProcessEvent_GetPid, 0, 0 },
};

static WXLUAMETHOD wxScrollEvent_methods[] = {
    { LuaDelete,      "wxScrollEvent", wxScrollEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxScrollEvent_Delete, 0, 0 },
    { LuaConstructor, "wxScrollEvent", wxScrollEvent_constructor, 0, 4 },
    { LuaMethod,      "GetOrientation", wxScrollEvent_GetOrientation, 0, 0 },
    { LuaGetProp,     "Orientation", wxScrollEvent_GetOrientation, 0, 0 },
    { LuaMethod,      "GetPosition", wxScrollEvent_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxScrollEvent_GetPosition, 0, 0 },
};

static WXLUAMETHOD wxScrollWinEvent_methods[] = {
    { LuaDelete,      "wxScrollWinEvent", wxScrollWinEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxScrollWinEvent_Delete, 0, 0 },
    { LuaMethod,      "GetOrientation", wxScrollWinEvent_GetOrientation, 0, 0 },
    { LuaGetProp,     "Orientation", wxScrollWinEvent_GetOrientation, 0, 0 },
    { LuaMethod,      "GetPosition", wxScrollWinEvent_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxScrollWinEvent_GetPosition, 0, 0 },
};

static WXLUAMETHOD wxSizeEvent_methods[] = {
    { LuaDelete,      "wxSizeEvent", wxSizeEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxSizeEvent_Delete, 0, 0 },
    { LuaConstructor, "wxSizeEvent", wxSizeEvent_constructor, 1, 2 },
    { LuaMethod,      "GetSize", wxSizeEvent_GetSize, 0, 0 },
    { LuaGetProp,     "Size", wxSizeEvent_GetSize, 0, 0 },
};

static WXLUAMETHOD wxSysColourChangedEvent_methods[] = {
    { LuaDelete,      "wxSysColourChangedEvent", wxSysColourChangedEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxSysColourChangedEvent_Delete, 0, 0 },
    { LuaConstructor, "wxSysColourChangedEvent", wxSysColourChangedEvent_constructor, 0, 0 },
};

static WXLUAMETHOD wxTimerEvent_methods[] = {
    { LuaDelete,      "wxTimerEvent", wxTimerEvent_destructor, 0, 0 },
    { LuaMethod,      "GetInterval", wxTimerEvent_GetInterval, 0, 0 },
};

static WXLUAMETHOD wxUpdateUIEvent_methods[] = {
    { LuaDelete,      "wxUpdateUIEvent", wxUpdateUIEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxUpdateUIEvent_Delete, 0, 0 },
    { LuaConstructor, "wxUpdateUIEvent", wxUpdateUIEvent_constructor, 0, 1 },
    { LuaMethod,      "Check", wxUpdateUIEvent_Check, 1, 1 },
    { LuaMethod,      "Enable", wxUpdateUIEvent_Enable, 1, 1 },
    { LuaMethod,      "GetChecked", wxUpdateUIEvent_GetChecked, 0, 0 },
    { LuaGetProp,     "Checked", wxUpdateUIEvent_GetChecked, 0, 0 },
    { LuaMethod,      "GetEnabled", wxUpdateUIEvent_GetEnabled, 0, 0 },
    { LuaGetProp,     "Enabled", wxUpdateUIEvent_GetEnabled, 0, 0 },
    { LuaMethod,      "GetSetChecked", wxUpdateUIEvent_GetSetChecked, 0, 0 },
    { LuaGetProp,     "SetChecked", wxUpdateUIEvent_GetSetChecked, 0, 0 },
    { LuaMethod,      "GetSetEnabled", wxUpdateUIEvent_GetSetEnabled, 0, 0 },
    { LuaGetProp,     "SetEnabled", wxUpdateUIEvent_GetSetEnabled, 0, 0 },
    { LuaMethod,      "GetSetText", wxUpdateUIEvent_GetSetText, 0, 0 },
    { LuaGetProp,     "SetText", wxUpdateUIEvent_GetSetText, 0, 0 },
    { LuaMethod,      "GetText", wxUpdateUIEvent_GetText, 0, 0 },
    { LuaMethod,      "SetText", wxUpdateUIEvent_SetText, 1, 1 },
    { LuaGetProp,     "Text", wxUpdateUIEvent_GetText, 0, 0 },
    { LuaSetProp,     "Text", wxUpdateUIEvent_SetText, 1, 1 },
};

static WXLUAMETHOD wxHelpEvent_methods[] = {
    { LuaDelete,      "wxHelpEvent", wxHelpEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxHelpEvent_Delete, 0, 0 },
    { LuaConstructor, "wxHelpEvent", wxHelpEvent_constructor, 0, 3 },
    { LuaMethod,      "GetPosition", wxHelpEvent_GetPosition, 0, 0 },
    { LuaMethod,      "SetPosition", wxHelpEvent_SetPosition, 1, 1 },
    { LuaGetProp,     "Position", wxHelpEvent_GetPosition, 0, 0 },
    { LuaSetProp,     "Position", wxHelpEvent_SetPosition, 1, 1 },
    { LuaMethod,      "GetLink", wxHelpEvent_GetLink, 0, 0 },
    { LuaMethod,      "SetLink", wxHelpEvent_SetLink, 1, 1 },
    { LuaGetProp,     "Link", wxHelpEvent_GetLink, 0, 0 },
    { LuaSetProp,     "Link", wxHelpEvent_SetLink, 1, 1 },
    { LuaMethod,      "GetTarget", wxHelpEvent_GetTarget, 0, 0 },
    { LuaMethod,      "SetTarget", wxHelpEvent_SetTarget, 1, 1 },
    { LuaGetProp,     "Target", wxHelpEvent_GetTarget, 0, 0 },
    { LuaSetProp,     "Target", wxHelpEvent_SetTarget, 1, 1 },
};

static WXLUAMETHOD wxWindow_methods[] = {
    { LuaDelete,      "wxWindow", wxWindow_destructor, 0, 0 },
    { LuaConstructor, "wxWindow", wxWindow_constructor, 2, 6 },
    { LuaMethod,      "AddChild", wxWindow_AddChild, 1, 1 },
    { LuaMethod,      "CaptureMouse", wxWindow_CaptureMouse, 0, 0 },
    { LuaMethod,      "Center", wxWindow_Center, 0, 1 },
    { LuaMethod,      "CenterOnParent", wxWindow_CenterOnParent, 0, 1 },
    { LuaMethod,      "CenterOnScreen", wxWindow_CenterOnScreen, 0, 1 },
    { LuaMethod,      "Centre", wxWindow_Centre, 0, 1 },
    { LuaMethod,      "CentreOnParent", wxWindow_CentreOnParent, 0, 1 },
    { LuaMethod,      "CentreOnScreen", wxWindow_CentreOnScreen, 0, 1 },
    { LuaMethod,      "ClearBackground", wxWindow_ClearBackground, 0, 0 },
    { LuaMethod,      "ClientToScreen", wxWindow_ClientToScreen, 2, 2 },
    { LuaMethod,      "Close", wxWindow_Close, 0, 1 },
    { LuaMethod,      "ConvertDialogPointToPixels", wxWindow_ConvertDialogPointToPixels, 1, 1 },
    { LuaMethod,      "ConvertDialogSizeToPixels", wxWindow_ConvertDialogSizeToPixels, 1, 1 },
    { LuaMethod,      "Destroy", wxWindow_Destroy, 0, 0 },
    { LuaMethod,      "DestroyChildren", wxWindow_DestroyChildren, 0, 0 },
    { LuaMethod,      "DragAcceptFiles", wxWindow_DragAcceptFiles, 1, 1 },
    { LuaMethod,      "Enable", wxWindow_Enable, 1, 1 },
    { LuaMethod,      "FindFocus", wxWindow_FindFocus, 0, 0 },
    { LuaMethod,      "FindWindow", wxWindow_FindWindow, 1, 1 },
    { LuaMethod,      "Fit", wxWindow_Fit, 0, 0 },
    { LuaMethod,      "GetBackgroundColour", wxWindow_GetBackgroundColour, 0, 0 },
    { LuaMethod,      "GetBestSize", wxWindow_GetBestSize, 0, 0 },
    { LuaGetProp,     "BestSize", wxWindow_GetBestSize, 0, 0 },
    { LuaMethod,      "GetCaret", wxWindow_GetCaret, 0, 0 },
    { LuaMethod,      "GetCharHeight", wxWindow_GetCharHeight, 0, 0 },
    { LuaGetProp,     "CharHeight", wxWindow_GetCharHeight, 0, 0 },
    { LuaMethod,      "GetCharWidth", wxWindow_GetCharWidth, 0, 0 },
    { LuaGetProp,     "CharWidth", wxWindow_GetCharWidth, 0, 0 },
    { LuaMethod,      "GetChildren", wxWindow_GetChildren, 0, 0 },
    { LuaGetProp,     "Children", wxWindow_GetChildren, 0, 0 },
    { LuaMethod,      "GetClientSize", wxWindow_GetClientSize, 2, 2 },
    { LuaMethod,      "GetConstraints", wxWindow_GetConstraints, 0, 0 },
    { LuaMethod,      "GetDropTarget", wxWindow_GetDropTarget, 0, 0 },
    { LuaMethod,      "GetEventHandler", wxWindow_GetEventHandler, 0, 0 },
    { LuaMethod,      "GetExtraStyle", wxWindow_GetExtraStyle, 0, 0 },
    { LuaMethod,      "GetFont", wxWindow_GetFont, 0, 0 },
    { LuaMethod,      "GetForegroundColour", wxWindow_GetForegroundColour, 0, 0 },
    { LuaMethod,      "GetGrandParent", wxWindow_GetGrandParent, 0, 0 },
    { LuaGetProp,     "GrandParent", wxWindow_GetGrandParent, 0, 0 },
    { LuaMethod,      "GetHandle", wxWindow_GetHandle, 0, 0 },
    { LuaMethod,      "GetId", wxWindow_GetId, 0, 0 },
    { LuaMethod,      "GetLabel", wxWindow_GetLabel, 0, 0 },
    { LuaMethod,      "GetName", wxWindow_GetName, 0, 0 },
    { LuaMethod,      "GetParent", wxWindow_GetParent, 0, 0 },
    { LuaMethod,      "GetPosition", wxWindow_GetPosition, 2, 2 },
    { LuaMethod,      "GetPositionPoint", wxWindow_GetPositionPoint, 0, 0 },
    { LuaMethod,      "GetRect", wxWindow_GetRect, 0, 0 },
    { LuaMethod,      "GetScrollThumb", wxWindow_GetScrollThumb, 1, 1 },
    { LuaMethod,      "GetScrollPos", wxWindow_GetScrollPos, 1, 1 },
    { LuaMethod,      "GetScrollRange", wxWindow_GetScrollRange, 1, 1 },
    { LuaMethod,      "GetSize", wxWindow_GetSize, 2, 2 },
    { LuaMethod,      "GetTextExtent", wxWindow_GetTextExtent, 3, 6 },
    { LuaMethod,      "GetTitle", wxWindow_GetTitle, 0, 0 },
    { LuaMethod,      "GetUpdateRegion", wxWindow_GetUpdateRegion, 0, 0 },
    { LuaMethod,      "GetValidator", wxWindow_GetValidator, 0, 0 },
    { LuaMethod,      "GetWindowStyleFlag", wxWindow_GetWindowStyleFlag, 0, 0 },
    { LuaMethod,      "HasCapture", wxWindow_HasCapture, 0, 0 },
    { LuaMethod,      "InitDialog", wxWindow_InitDialog, 0, 0 },
    { LuaMethod,      "IsEnabled", wxWindow_IsEnabled, 0, 0 },
    { LuaMethod,      "IsExposed", wxWindow_IsExposed, 2, 2 },
    { LuaMethod,      "IsExposedPoint", wxWindow_IsExposedPoint, 1, 1 },
    { LuaMethod,      "IsExposedRect", wxWindow_IsExposedRect, 1, 1 },
    { LuaMethod,      "IsRetained", wxWindow_IsRetained, 0, 0 },
    { LuaMethod,      "IsShown", wxWindow_IsShown, 0, 0 },
    { LuaMethod,      "IsTopLevel", wxWindow_IsTopLevel, 0, 0 },
    { LuaMethod,      "Layout", wxWindow_Layout, 0, 0 },
    { LuaMethod,      "Lower", wxWindow_Lower, 0, 0 },
    { LuaMethod,      "MakeModal", wxWindow_MakeModal, 1, 1 },
    { LuaMethod,      "Move", wxWindow_Move, 2, 2 },
    { LuaMethod,      "MoveXY", wxWindow_MoveXY, 1, 1 },
    { LuaMethod,      "PopEventHandler", wxWindow_PopEventHandler, 0, 1 },
    { LuaMethod,      "PopupMenu", wxWindow_PopupMenu, 2, 2 },
    { LuaMethod,      "PopupMenuXY", wxWindow_PopupMenuXY, 3, 3 },
    { LuaMethod,      "PushEventHandler", wxWindow_PushEventHandler, 1, 1 },
    { LuaMethod,      "Raise", wxWindow_Raise, 0, 0 },
    { LuaMethod,      "Refresh", wxWindow_Refresh, 0, 2 },
    { LuaMethod,      "ReleaseMouse", wxWindow_ReleaseMouse, 0, 0 },
    { LuaMethod,      "RemoveChild", wxWindow_RemoveChild, 1, 1 },
    { LuaMethod,      "Reparent", wxWindow_Reparent, 1, 1 },
    { LuaMethod,      "ScreenToClient", wxWindow_ScreenToClient, 1, 1 },
    { LuaMethod,      "ScreenToClientXY", wxWindow_ScreenToClientXY, 2, 2 },
    { LuaMethod,      "ScrollWindow", wxWindow_ScrollWindow, 2, 3 },
    { LuaMethod,      "SetAcceleratorTable", wxWindow_SetAcceleratorTable, 1, 1 },
    { LuaMethod,      "SetAutoLayout", wxWindow_SetAutoLayout, 1, 1 },
    { LuaMethod,      "SetBackgroundColour", wxWindow_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "SetCaret", wxWindow_SetCaret, 1, 1 },
    { LuaGetProp,     "Caret", wxWindow_GetCaret, 0, 0 },
    { LuaSetProp,     "Caret", wxWindow_SetCaret, 1, 1 },
    { LuaMethod,      "SetClientSize", wxWindow_SetClientSize, 1, 1 },
    { LuaGetProp,     "ClientSize", wxWindow_GetClientSize, 0, 0 },
    { LuaSetProp,     "ClientSize", wxWindow_SetClientSize, 1, 1 },
    { LuaMethod,      "SetClientSizeWH", wxWindow_SetClientSizeWH, 2, 2 },
    { LuaMethod,      "SetCursor", wxWindow_SetCursor, 1, 1 },
    { LuaMethod,      "SetConstraints", wxWindow_SetConstraints, 1, 1 },
    { LuaGetProp,     "Constraints", wxWindow_GetConstraints, 0, 0 },
    { LuaSetProp,     "Constraints", wxWindow_SetConstraints, 1, 1 },
    { LuaMethod,      "SetDropTarget", wxWindow_SetDropTarget, 1, 1 },
    { LuaGetProp,     "DropTarget", wxWindow_GetDropTarget, 0, 0 },
    { LuaSetProp,     "DropTarget", wxWindow_SetDropTarget, 1, 1 },
    { LuaMethod,      "SetEventHandler", wxWindow_SetEventHandler, 1, 1 },
    { LuaGetProp,     "EventHandler", wxWindow_GetEventHandler, 0, 0 },
    { LuaSetProp,     "EventHandler", wxWindow_SetEventHandler, 1, 1 },
    { LuaMethod,      "SetExtraStyle", wxWindow_SetExtraStyle, 1, 1 },
    { LuaGetProp,     "ExtraStyle", wxWindow_GetExtraStyle, 0, 0 },
    { LuaSetProp,     "ExtraStyle", wxWindow_SetExtraStyle, 1, 1 },
    { LuaMethod,      "SetFocus", wxWindow_SetFocus, 0, 0 },
    { LuaMethod,      "SetFont", wxWindow_SetFont, 1, 1 },
    { LuaGetProp,     "Font", wxWindow_GetFont, 0, 0 },
    { LuaSetProp,     "Font", wxWindow_SetFont, 1, 1 },
    { LuaMethod,      "SetForegroundColour", wxWindow_SetForegroundColour, 1, 1 },
    { LuaGetProp,     "ForegroundColour", wxWindow_GetForegroundColour, 0, 0 },
    { LuaSetProp,     "ForegroundColour", wxWindow_SetForegroundColour, 1, 1 },
    { LuaMethod,      "SetId", wxWindow_SetId, 1, 1 },
    { LuaGetProp,     "Id", wxWindow_GetId, 0, 0 },
    { LuaSetProp,     "Id", wxWindow_SetId, 1, 1 },
    { LuaMethod,      "SetName", wxWindow_SetName, 1, 1 },
    { LuaGetProp,     "Name", wxWindow_GetName, 0, 0 },
    { LuaSetProp,     "Name", wxWindow_SetName, 1, 1 },
    { LuaMethod,      "SetScrollbar", wxWindow_SetScrollbar, 4, 5 },
    { LuaMethod,      "SetScrollPos", wxWindow_SetScrollPos, 2, 3 },
    { LuaMethod,      "SetDimensions", wxWindow_SetDimensions, 4, 5 },
    { LuaMethod,      "SetSize", wxWindow_SetSize, 2, 2 },
    { LuaMethod,      "SetPosition", wxWindow_SetPosition, 1, 1 },
    { LuaMethod,      "SetSizeHints", wxWindow_SetSizeHints, 0, 6 },
    { LuaMethod,      "SetSizer", wxWindow_SetSizer, 1, 1 },
    { LuaMethod,      "SetTitle", wxWindow_SetTitle, 1, 1 },
    { LuaGetProp,     "Title", wxWindow_GetTitle, 0, 0 },
    { LuaSetProp,     "Title", wxWindow_SetTitle, 1, 1 },
    { LuaMethod,      "SetValidator", wxWindow_SetValidator, 1, 1 },
    { LuaGetProp,     "Validator", wxWindow_GetValidator, 0, 0 },
    { LuaSetProp,     "Validator", wxWindow_SetValidator, 1, 1 },
    { LuaMethod,      "SetToolTip", wxWindow_SetToolTip, 1, 1 },
    { LuaMethod,      "GetToolTip", wxWindow_GetToolTip, 0, 0 },
    { LuaGetProp,     "ToolTip", wxWindow_GetToolTip, 0, 0 },
    { LuaSetProp,     "ToolTip", wxWindow_SetToolTip, 1, 1 },
    { LuaMethod,      "SetWindowStyle", wxWindow_SetWindowStyle, 1, 1 },
    { LuaMethod,      "SetWindowStyleFlag", wxWindow_SetWindowStyleFlag, 1, 1 },
    { LuaGetProp,     "WindowStyleFlag", wxWindow_GetWindowStyleFlag, 0, 0 },
    { LuaSetProp,     "WindowStyleFlag", wxWindow_SetWindowStyleFlag, 1, 1 },
    { LuaMethod,      "Show", wxWindow_Show, 1, 1 },
    { LuaMethod,      "TransferDataFromWindow", wxWindow_TransferDataFromWindow, 0, 0 },
    { LuaMethod,      "TransferDataToWindow", wxWindow_TransferDataToWindow, 0, 0 },
    { LuaMethod,      "Validate", wxWindow_Validate, 0, 0 },
    { LuaMethod,      "WarpPointer", wxWindow_WarpPointer, 2, 2 },
};

static WXLUAMETHOD wxWindowList_methods[] = {
    { LuaDelete,      "wxWindowList", wxWindowList_destructor, 0, 0 },
    { LuaMethod,      "Clear", wxWindowList_Clear, 0, 0 },
    { LuaMethod,      "DeleteContents", wxWindowList_DeleteContents, 1, 1 },
    { LuaMethod,      "DeleteObject", wxWindowList_DeleteObject, 1, 1 },
    { LuaMethod,      "GetCount", wxWindowList_GetCount, 0, 0 },
    { LuaGetProp,     "Count", wxWindowList_GetCount, 0, 0 },
};

static WXLUAMETHOD wxPanel_methods[] = {
    { LuaDelete,      "wxPanel", wxPanel_destructor, 0, 0 },
    { LuaConstructor, "wxPanel", wxPanel_constructor, 2, 6 },
    { LuaConstructor, "wxPanelDefault", wxPanelDefault_constructor, 0, 0 },
    { LuaMethod,      "Create", wxPanel_Create, 2, 6 },
    { LuaMethod,      "GetDefaultItem", wxPanel_GetDefaultItem, 0, 0 },
    { LuaMethod,      "InitDialog", wxPanel_InitDialog, 0, 0 },
    { LuaMethod,      "SetDefaultItem", wxPanel_SetDefaultItem, 1, 1 },
    { LuaGetProp,     "DefaultItem", wxPanel_GetDefaultItem, 0, 0 },
    { LuaSetProp,     "DefaultItem", wxPanel_SetDefaultItem, 1, 1 },
};

static WXLUAMETHOD wxControl_methods[] = {
    { LuaDelete,      "wxControl", wxControl_destructor, 0, 0 },
    { LuaMethod,      "Command", wxControl_Command, 1, 1 },
    { LuaMethod,      "GetLabel", wxControl_GetLabel, 0, 0 },
    { LuaMethod,      "SetLabel", wxControl_SetLabel, 1, 1 },
    { LuaGetProp,     "Label", wxControl_GetLabel, 0, 0 },
    { LuaSetProp,     "Label", wxControl_SetLabel, 1, 1 },
};

static WXLUAMETHOD wxNotebook_methods[] = {
    { LuaDelete,      "wxNotebook", wxNotebook_destructor, 0, 0 },
    { LuaConstructor, "wxNotebook", wxNotebook_constructor, 2, 6 },
    { LuaMethod,      "AddPage", wxNotebook_AddPage, 2, 4 },
    { LuaMethod,      "AdvanceSelection", wxNotebook_AdvanceSelection, 0, 1 },
    { LuaMethod,      "Create", wxNotebook_Create, 2, 6 },
    { LuaMethod,      "DeleteAllPages", wxNotebook_DeleteAllPages, 0, 0 },
    { LuaMethod,      "DeletePage", wxNotebook_DeletePage, 1, 1 },
    { LuaMethod,      "GetImageList", wxNotebook_GetImageList, 0, 0 },
    { LuaMethod,      "GetPage", wxNotebook_GetPage, 1, 1 },
    { LuaMethod,      "GetPageCount", wxNotebook_GetPageCount, 0, 0 },
    { LuaGetProp,     "PageCount", wxNotebook_GetPageCount, 0, 0 },
    { LuaMethod,      "GetPageImage", wxNotebook_GetPageImage, 1, 1 },
    { LuaMethod,      "GetPageText", wxNotebook_GetPageText, 1, 1 },
    { LuaMethod,      "GetRowCount", wxNotebook_GetRowCount, 0, 0 },
    { LuaGetProp,     "RowCount", wxNotebook_GetRowCount, 0, 0 },
    { LuaMethod,      "GetSelection", wxNotebook_GetSelection, 0, 0 },
    { LuaMethod,      "InsertPage", wxNotebook_InsertPage, 3, 5 },
    { LuaMethod,      "RemovePage", wxNotebook_RemovePage, 1, 1 },
    { LuaMethod,      "SetImageList", wxNotebook_SetImageList, 1, 1 },
    { LuaGetProp,     "ImageList", wxNotebook_GetImageList, 0, 0 },
    { LuaSetProp,     "ImageList", wxNotebook_SetImageList, 1, 1 },
    { LuaMethod,      "SetPadding", wxNotebook_SetPadding, 1, 1 },
    { LuaMethod,      "SetPageSize", wxNotebook_SetPageSize, 1, 1 },
    { LuaMethod,      "SetPageImage", wxNotebook_SetPageImage, 2, 2 },
    { LuaMethod,      "SetPageText", wxNotebook_SetPageText, 2, 2 },
    { LuaMethod,      "SetSelection", wxNotebook_SetSelection, 1, 1 },
    { LuaGetProp,     "Selection", wxNotebook_GetSelection, 0, 0 },
    { LuaSetProp,     "Selection", wxNotebook_SetSelection, 1, 1 },
};

static WXLUAMETHOD wxNotebookEvent_methods[] = {
    { LuaDelete,      "wxNotebookEvent", wxNotebookEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxNotebookEvent_Delete, 0, 0 },
    { LuaConstructor, "wxNotebookEvent", wxNotebookEvent_constructor, 0, 4 },
    { LuaMethod,      "GetOldSelection", wxNotebookEvent_GetOldSelection, 0, 0 },
    { LuaMethod,      "GetSelection", wxNotebookEvent_GetSelection, 0, 0 },
    { LuaMethod,      "SetOldSelection", wxNotebookEvent_SetOldSelection, 1, 1 },
    { LuaMethod,      "SetSelection", wxNotebookEvent_SetSelection, 1, 1 },
    { LuaGetProp,     "OldSelection", wxNotebookEvent_GetOldSelection, 0, 0 },
    { LuaSetProp,     "OldSelection", wxNotebookEvent_SetOldSelection, 1, 1 },
    { LuaGetProp,     "Selection", wxNotebookEvent_GetSelection, 0, 0 },
    { LuaSetProp,     "Selection", wxNotebookEvent_SetSelection, 1, 1 },
};

static WXLUAMETHOD wxTabCtrl_methods[] = {
    { LuaDelete,      "wxTabCtrl", wxTabCtrl_destructor, 0, 0 },
    { LuaConstructor, "wxTabCtrl", wxTabCtrl_constructor, 2, 6 },
    { LuaMethod,      "Create", wxTabCtrl_Create, 2, 6 },
    { LuaMethod,      "DeleteAllItems", wxTabCtrl_DeleteAllItems, 0, 0 },
    { LuaMethod,      "DeleteItem", wxTabCtrl_DeleteItem, 1, 1 },
    { LuaMethod,      "GetCurFocus", wxTabCtrl_GetCurFocus, 0, 0 },
    { LuaGetProp,     "CurFocus", wxTabCtrl_GetCurFocus, 0, 0 },
    { LuaMethod,      "GetImageList", wxTabCtrl_GetImageList, 0, 0 },
    { LuaMethod,      "GetItemCount", wxTabCtrl_GetItemCount, 0, 0 },
    { LuaGetProp,     "ItemCount", wxTabCtrl_GetItemCount, 0, 0 },
    { LuaMethod,      "GetItemData", wxTabCtrl_GetItemData, 1, 1 },
    { LuaMethod,      "GetItemImage", wxTabCtrl_GetItemImage, 1, 1 },
    { LuaMethod,      "GetItemRect", wxTabCtrl_GetItemRect, 2, 2 },
    { LuaMethod,      "GetItemText", wxTabCtrl_GetItemText, 1, 1 },
    { LuaMethod,      "GetRowCount", wxTabCtrl_GetRowCount, 0, 0 },
    { LuaGetProp,     "RowCount", wxTabCtrl_GetRowCount, 0, 0 },
    { LuaMethod,      "GetSelection", wxTabCtrl_GetSelection, 0, 0 },
    { LuaMethod,      "HitTest", wxTabCtrl_HitTest, 2, 2 },
    { LuaMethod,      "InsertItem", wxTabCtrl_InsertItem, 2, 4 },
    { LuaMethod,      "SetItemData", wxTabCtrl_SetItemData, 2, 2 },
    { LuaMethod,      "SetItemImage", wxTabCtrl_SetItemImage, 2, 2 },
    { LuaMethod,      "SetImageList", wxTabCtrl_SetImageList, 1, 1 },
    { LuaGetProp,     "ImageList", wxTabCtrl_GetImageList, 0, 0 },
    { LuaSetProp,     "ImageList", wxTabCtrl_SetImageList, 1, 1 },
    { LuaMethod,      "SetItemSize", wxTabCtrl_SetItemSize, 1, 1 },
    { LuaMethod,      "SetItemText", wxTabCtrl_SetItemText, 2, 2 },
    { LuaMethod,      "SetPadding", wxTabCtrl_SetPadding, 1, 1 },
    { LuaMethod,      "SetSelection", wxTabCtrl_SetSelection, 1, 1 },
    { LuaGetProp,     "Selection", wxTabCtrl_GetSelection, 0, 0 },
    { LuaSetProp,     "Selection", wxTabCtrl_SetSelection, 1, 1 },
};

static WXLUAMETHOD wxTabEvent_methods[] = {
    { LuaDelete,      "wxTabEvent", wxTabEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxTabEvent_Delete, 0, 0 },
    { LuaConstructor, "wxTabEvent", wxTabEvent_constructor, 0, 2 },
};

static WXLUAMETHOD wxSashWindow_methods[] = {
    { LuaDelete,      "wxSashWindow", wxSashWindow_destructor, 0, 0 },
    { LuaConstructor, "wxSashWindow", wxSashWindow_constructor, 1, 6 },
    { LuaMethod,      "GetSashVisible", wxSashWindow_GetSashVisible, 1, 1 },
    { LuaMethod,      "GetMaximumSizeX", wxSashWindow_GetMaximumSizeX, 0, 0 },
    { LuaMethod,      "GetMaximumSizeY", wxSashWindow_GetMaximumSizeY, 0, 0 },
    { LuaMethod,      "GetMinimumSizeX", wxSashWindow_GetMinimumSizeX, 0, 0 },
    { LuaMethod,      "GetMinimumSizeY", wxSashWindow_GetMinimumSizeY, 0, 0 },
    { LuaMethod,      "HasBorder", wxSashWindow_HasBorder, 1, 1 },
    { LuaMethod,      "SetMaximumSizeX", wxSashWindow_SetMaximumSizeX, 1, 1 },
    { LuaGetProp,     "MaximumSizeX", wxSashWindow_GetMaximumSizeX, 0, 0 },
    { LuaSetProp,     "MaximumSizeX", wxSashWindow_SetMaximumSizeX, 1, 1 },
    { LuaMethod,      "SetMaximumSizeY", wxSashWindow_SetMaximumSizeY, 1, 1 },
    { LuaGetProp,     "MaximumSizeY", wxSashWindow_GetMaximumSizeY, 0, 0 },
    { LuaSetProp,     "MaximumSizeY", wxSashWindow_SetMaximumSizeY, 1, 1 },
    { LuaMethod,      "SetMinimumSizeX", wxSashWindow_SetMinimumSizeX, 1, 1 },
    { LuaGetProp,     "MinimumSizeX", wxSashWindow_GetMinimumSizeX, 0, 0 },
    { LuaSetProp,     "MinimumSizeX", wxSashWindow_SetMinimumSizeX, 1, 1 },
    { LuaMethod,      "SetMinimumSizeY", wxSashWindow_SetMinimumSizeY, 1, 1 },
    { LuaGetProp,     "MinimumSizeY", wxSashWindow_GetMinimumSizeY, 0, 0 },
    { LuaSetProp,     "MinimumSizeY", wxSashWindow_SetMinimumSizeY, 1, 1 },
    { LuaMethod,      "SetSashVisible", wxSashWindow_SetSashVisible, 2, 2 },
    { LuaMethod,      "SetSashBorder", wxSashWindow_SetSashBorder, 2, 2 },
};

static WXLUAMETHOD wxSashLayoutWindow_methods[] = {
    { LuaDelete,      "wxSashLayoutWindow", wxSashLayoutWindow_destructor, 0, 0 },
    { LuaConstructor, "wxSashLayoutWindow", wxSashLayoutWindow_constructor, 1, 6 },
    { LuaMethod,      "GetAlignment", wxSashLayoutWindow_GetAlignment, 0, 0 },
    { LuaMethod,      "GetOrientation", wxSashLayoutWindow_GetOrientation, 0, 0 },
    { LuaMethod,      "SetAlignment", wxSashLayoutWindow_SetAlignment, 1, 1 },
    { LuaGetProp,     "Alignment", wxSashLayoutWindow_GetAlignment, 0, 0 },
    { LuaSetProp,     "Alignment", wxSashLayoutWindow_SetAlignment, 1, 1 },
    { LuaMethod,      "SetDefaultSize", wxSashLayoutWindow_SetDefaultSize, 1, 1 },
    { LuaMethod,      "SetOrientation", wxSashLayoutWindow_SetOrientation, 1, 1 },
    { LuaGetProp,     "Orientation", wxSashLayoutWindow_GetOrientation, 0, 0 },
    { LuaSetProp,     "Orientation", wxSashLayoutWindow_SetOrientation, 1, 1 },
};

static WXLUAMETHOD wxLayoutAlgorithm_methods[] = {
    { LuaDelete,      "wxLayoutAlgorithm", wxLayoutAlgorithm_destructor, 0, 0 },
    { LuaConstructor, "wxLayoutAlgorithm", wxLayoutAlgorithm_constructor, 0, 0 },
    { LuaMethod,      "LayoutMDIFrame", wxLayoutAlgorithm_LayoutMDIFrame, 1, 2 },
    { LuaMethod,      "LayoutWindow", wxLayoutAlgorithm_LayoutWindow, 1, 2 },
};

static WXLUAMETHOD wxQueryLayoutInfoEvent_methods[] = {
    { LuaDelete,      "wxQueryLayoutInfoEvent", wxQueryLayoutInfoEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxQueryLayoutInfoEvent_Delete, 0, 0 },
    { LuaConstructor, "wxQueryLayoutInfoEvent", wxQueryLayoutInfoEvent_constructor, 0, 1 },
    { LuaMethod,      "GetFlags", wxQueryLayoutInfoEvent_GetFlags, 0, 0 },
    { LuaMethod,      "GetOrientation", wxQueryLayoutInfoEvent_GetOrientation, 0, 0 },
    { LuaMethod,      "GetRequestedLength", wxQueryLayoutInfoEvent_GetRequestedLength, 0, 0 },
    { LuaMethod,      "GetSize", wxQueryLayoutInfoEvent_GetSize, 0, 0 },
    { LuaMethod,      "SetAlignment", wxQueryLayoutInfoEvent_SetAlignment, 1, 1 },
    { LuaMethod,      "SetFlags", wxQueryLayoutInfoEvent_SetFlags, 1, 1 },
    { LuaGetProp,     "Flags", wxQueryLayoutInfoEvent_GetFlags, 0, 0 },
    { LuaSetProp,     "Flags", wxQueryLayoutInfoEvent_SetFlags, 1, 1 },
    { LuaMethod,      "SetOrientation", wxQueryLayoutInfoEvent_SetOrientation, 1, 1 },
    { LuaGetProp,     "Orientation", wxQueryLayoutInfoEvent_GetOrientation, 0, 0 },
    { LuaSetProp,     "Orientation", wxQueryLayoutInfoEvent_SetOrientation, 1, 1 },
    { LuaMethod,      "SetRequestedLength", wxQueryLayoutInfoEvent_SetRequestedLength, 1, 1 },
    { LuaGetProp,     "RequestedLength", wxQueryLayoutInfoEvent_GetRequestedLength, 0, 0 },
    { LuaSetProp,     "RequestedLength", wxQueryLayoutInfoEvent_SetRequestedLength, 1, 1 },
    { LuaMethod,      "SetSize", wxQueryLayoutInfoEvent_SetSize, 1, 1 },
    { LuaGetProp,     "Size", wxQueryLayoutInfoEvent_GetSize, 0, 0 },
    { LuaSetProp,     "Size", wxQueryLayoutInfoEvent_SetSize, 1, 1 },
};

static WXLUAMETHOD wxCalculateLayoutEvent_methods[] = {
    { LuaDelete,      "wxCalculateLayoutEvent", wxCalculateLayoutEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxCalculateLayoutEvent_Delete, 0, 0 },
    { LuaConstructor, "wxCalculateLayoutEvent", wxCalculateLayoutEvent_constructor, 0, 1 },
    { LuaMethod,      "GetFlags", wxCalculateLayoutEvent_GetFlags, 0, 0 },
    { LuaMethod,      "GetRect", wxCalculateLayoutEvent_GetRect, 0, 0 },
    { LuaMethod,      "SetFlags", wxCalculateLayoutEvent_SetFlags, 1, 1 },
    { LuaGetProp,     "Flags", wxCalculateLayoutEvent_GetFlags, 0, 0 },
    { LuaSetProp,     "Flags", wxCalculateLayoutEvent_SetFlags, 1, 1 },
    { LuaMethod,      "SetRect", wxCalculateLayoutEvent_SetRect, 1, 1 },
    { LuaGetProp,     "Rect", wxCalculateLayoutEvent_GetRect, 0, 0 },
    { LuaSetProp,     "Rect", wxCalculateLayoutEvent_SetRect, 1, 1 },
};

static WXLUAMETHOD wxSashEvent_methods[] = {
    { LuaDelete,      "wxSashEvent", wxSashEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxSashEvent_Delete, 0, 0 },
    { LuaConstructor, "wxSashEvent", wxSashEvent_constructor, 0, 2 },
    { LuaMethod,      "SetEdge", wxSashEvent_SetEdge, 1, 1 },
    { LuaMethod,      "GetEdge", wxSashEvent_GetEdge, 0, 0 },
    { LuaGetProp,     "Edge", wxSashEvent_GetEdge, 0, 0 },
    { LuaSetProp,     "Edge", wxSashEvent_SetEdge, 1, 1 },
    { LuaMethod,      "SetDragRect", wxSashEvent_SetDragRect, 1, 1 },
    { LuaMethod,      "GetDragRect", wxSashEvent_GetDragRect, 0, 0 },
    { LuaGetProp,     "DragRect", wxSashEvent_GetDragRect, 0, 0 },
    { LuaSetProp,     "DragRect", wxSashEvent_SetDragRect, 1, 1 },
    { LuaMethod,      "SetDragStatus", wxSashEvent_SetDragStatus, 1, 1 },
    { LuaMethod,      "GetDragStatus", wxSashEvent_GetDragStatus, 0, 0 },
    { LuaGetProp,     "DragStatus", wxSashEvent_GetDragStatus, 0, 0 },
    { LuaSetProp,     "DragStatus", wxSashEvent_SetDragStatus, 1, 1 },
};

static WXLUAMETHOD wxScrolledWindow_methods[] = {
    { LuaDelete,      "wxScrolledWindow", wxScrolledWindow_destructor, 0, 0 },
    { LuaConstructor, "wxScrolledWindow", wxScrolledWindow_constructor, 1, 6 },
    { LuaMethod,      "CalcScrolledPosition", wxScrolledWindow_CalcScrolledPosition, 4, 4 },
    { LuaMethod,      "CalcUnscrolledPosition", wxScrolledWindow_CalcUnscrolledPosition, 4, 4 },
    { LuaMethod,      "Create", wxScrolledWindow_Create, 1, 6 },
    { LuaMethod,      "EnableScrolling", wxScrolledWindow_EnableScrolling, 2, 2 },
    { LuaMethod,      "GetScrollPixelsPerUnit", wxScrolledWindow_GetScrollPixelsPerUnit, 2, 2 },
    { LuaMethod,      "GetVirtualSize", wxScrolledWindow_GetVirtualSize, 2, 2 },
    { LuaMethod,      "IsRetained", wxScrolledWindow_IsRetained, 0, 0 },
    { LuaMethod,      "PrepareDC", wxScrolledWindow_PrepareDC, 1, 1 },
    { LuaMethod,      "Scroll", wxScrolledWindow_Scroll, 2, 2 },
    { LuaMethod,      "SetScrollbars", wxScrolledWindow_SetScrollbars, 4, 7 },
    { LuaMethod,      "SetTargetWindow", wxScrolledWindow_SetTargetWindow, 1, 1 },
    { LuaMethod,      "GetViewStart", wxScrolledWindow_GetViewStart, 2, 2 },
};

static WXLUAMETHOD wxSplitterWindow_methods[] = {
    { LuaDelete,      "wxSplitterWindow", wxSplitterWindow_destructor, 0, 0 },
    { LuaConstructor, "wxSplitterWindow", wxSplitterWindow_constructor, 2, 6 },
    { LuaConstructor, "wxSplitterWindowDefault", wxSplitterWindowDefault_constructor, 0, 0 },
    { LuaMethod,      "Create", wxSplitterWindow_Create, 1, 6 },
    { LuaMethod,      "GetMinimumPaneSize", wxSplitterWindow_GetMinimumPaneSize, 0, 0 },
    { LuaMethod,      "GetSashPosition", wxSplitterWindow_GetSashPosition, 0, 0 },
    { LuaMethod,      "GetSplitMode", wxSplitterWindow_GetSplitMode, 0, 0 },
    { LuaMethod,      "GetWindow1", wxSplitterWindow_GetWindow1, 0, 0 },
    { LuaGetProp,     "Window1", wxSplitterWindow_GetWindow1, 0, 0 },
    { LuaMethod,      "GetWindow2", wxSplitterWindow_GetWindow2, 0, 0 },
    { LuaGetProp,     "Window2", wxSplitterWindow_GetWindow2, 0, 0 },
    { LuaMethod,      "Initialize", wxSplitterWindow_Initialize, 1, 1 },
    { LuaMethod,      "IsSplit", wxSplitterWindow_IsSplit, 0, 0 },
    { LuaMethod,      "ReplaceWindow", wxSplitterWindow_ReplaceWindow, 2, 2 },
    { LuaMethod,      "SetSashPosition", wxSplitterWindow_SetSashPosition, 1, 2 },
    { LuaGetProp,     "SashPosition", wxSplitterWindow_GetSashPosition, 0, 0 },
    { LuaSetProp,     "SashPosition", wxSplitterWindow_SetSashPosition, 1, 1 },
    { LuaMethod,      "SetMinimumPaneSize", wxSplitterWindow_SetMinimumPaneSize, 1, 1 },
    { LuaGetProp,     "MinimumPaneSize", wxSplitterWindow_GetMinimumPaneSize, 0, 0 },
    { LuaSetProp,     "MinimumPaneSize", wxSplitterWindow_SetMinimumPaneSize, 1, 1 },
    { LuaMethod,      "SetSplitMode", wxSplitterWindow_SetSplitMode, 1, 1 },
    { LuaGetProp,     "SplitMode", wxSplitterWindow_GetSplitMode, 0, 0 },
    { LuaSetProp,     "SplitMode", wxSplitterWindow_SetSplitMode, 1, 1 },
    { LuaMethod,      "SplitHorizontally", wxSplitterWindow_SplitHorizontally, 2, 3 },
    { LuaMethod,      "SplitVertically", wxSplitterWindow_SplitVertically, 2, 3 },
    { LuaMethod,      "Unsplit", wxSplitterWindow_Unsplit, 0, 1 },
};

static WXLUAMETHOD wxSplitterEvent_methods[] = {
    { LuaDelete,      "wxSplitterEvent", wxSplitterEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxSplitterEvent_Delete, 0, 0 },
    { LuaConstructor, "wxSplitterEvent", wxSplitterEvent_constructor, 0, 2 },
    { LuaMethod,      "GetSashPosition", wxSplitterEvent_GetSashPosition, 0, 0 },
    { LuaMethod,      "GetX", wxSplitterEvent_GetX, 0, 0 },
    { LuaGetProp,     "X", wxSplitterEvent_GetX, 0, 0 },
    { LuaMethod,      "GetY", wxSplitterEvent_GetY, 0, 0 },
    { LuaGetProp,     "Y", wxSplitterEvent_GetY, 0, 0 },
    { LuaMethod,      "GetWindowBeingRemoved", wxSplitterEvent_GetWindowBeingRemoved, 0, 0 },
    { LuaGetProp,     "WindowBeingRemoved", wxSplitterEvent_GetWindowBeingRemoved, 0, 0 },
    { LuaMethod,      "SetSashPosition", wxSplitterEvent_SetSashPosition, 1, 1 },
    { LuaGetProp,     "SashPosition", wxSplitterEvent_GetSashPosition, 0, 0 },
    { LuaSetProp,     "SashPosition", wxSplitterEvent_SetSashPosition, 1, 1 },
};

static WXLUAMETHOD wxStaticBox_methods[] = {
    { LuaDelete,      "wxStaticBox", wxStaticBox_destructor, 0, 0 },
    { LuaConstructor, "wxStaticBox", wxStaticBox_constructor, 3, 7 },
    { LuaMethod,      "Create", wxStaticBox_Create, 3, 7 },
};

static WXLUAMETHOD wxStaticBitmap_methods[] = {
    { LuaDelete,      "wxStaticBitmap", wxStaticBitmap_destructor, 0, 0 },
    { LuaConstructor, "wxStaticBitmap", wxStaticBitmap_constructor, 3, 7 },
    { LuaMethod,      "Create", wxStaticBitmap_Create, 3, 7 },
    { LuaMethod,      "GetBitmap", wxStaticBitmap_GetBitmap, 0, 0 },
    { LuaMethod,      "SetBitmap", wxStaticBitmap_SetBitmap, 1, 1 },
    { LuaGetProp,     "Bitmap", wxStaticBitmap_GetBitmap, 0, 0 },
    { LuaSetProp,     "Bitmap", wxStaticBitmap_SetBitmap, 1, 1 },
};

static WXLUAMETHOD wxStaticText_methods[] = {
    { LuaDelete,      "wxStaticText", wxStaticText_destructor, 0, 0 },
    { LuaConstructor, "wxStaticText", wxStaticText_constructor, 4, 7 },
    { LuaMethod,      "Create", wxStaticText_Create, 4, 7 },
    { LuaMethod,      "GetLabel", wxStaticText_GetLabel, 0, 0 },
    { LuaMethod,      "SetLabel", wxStaticText_SetLabel, 1, 1 },
    { LuaGetProp,     "Label", wxStaticText_GetLabel, 0, 0 },
    { LuaSetProp,     "Label", wxStaticText_SetLabel, 1, 1 },
};

static WXLUAMETHOD wxStaticLine_methods[] = {
    { LuaDelete,      "wxStaticLine", wxStaticLine_destructor, 0, 0 },
    { LuaConstructor, "wxStaticLine", wxStaticLine_constructor, 2, 6 },
    { LuaMethod,      "Create", wxStaticLine_Create, 2, 6 },
    { LuaMethod,      "IsVertical", wxStaticLine_IsVertical, 0, 0 },
    { LuaMethod,      "GetDefaultSize", wxStaticLine_GetDefaultSize, 0, 0 },
    { LuaGetProp,     "DefaultSize", wxStaticLine_GetDefaultSize, 0, 0 },
};

static WXLUAMETHOD wxPoint_methods[] = {
    { LuaDelete,      "wxPoint", wxPoint_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPoint_Delete, 0, 0 },
    { LuaConstructor, "wxPoint", wxPoint_constructor, 2, 2 },
    { LuaMethod,      "GetX", wxPoint_GetX, 0, 0 },
    { LuaMethod,      "GetY", wxPoint_GetY, 0, 0 },
    { LuaMethod,      "GetXY", wxPoint_GetXY, 0, 0 },
    { LuaMethod,      "SetX", wxPoint_SetX, 1, 1 },
    { LuaGetProp,     "X", wxPoint_GetX, 0, 0 },
    { LuaSetProp,     "X", wxPoint_SetX, 1, 1 },
    { LuaMethod,      "SetY", wxPoint_SetY, 1, 1 },
    { LuaGetProp,     "Y", wxPoint_GetY, 0, 0 },
    { LuaSetProp,     "Y", wxPoint_SetY, 1, 1 },
    { LuaMethod,      "Set", wxPoint_Set, 2, 2 },
};

static WXLUAMETHOD wxSize_methods[] = {
    { LuaDelete,      "wxSize", wxSize_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxSize_Delete, 0, 0 },
    { LuaConstructor, "wxSize", wxSize_constructor, 2, 2 },
    { LuaMethod,      "GetWidth", wxSize_GetWidth, 0, 0 },
    { LuaMethod,      "GetHeight", wxSize_GetHeight, 0, 0 },
    { LuaMethod,      "Set", wxSize_Set, 2, 2 },
    { LuaMethod,      "SetHeight", wxSize_SetHeight, 1, 1 },
    { LuaGetProp,     "Height", wxSize_GetHeight, 0, 0 },
    { LuaSetProp,     "Height", wxSize_SetHeight, 1, 1 },
    { LuaMethod,      "SetWidth", wxSize_SetWidth, 1, 1 },
    { LuaGetProp,     "Width", wxSize_GetWidth, 0, 0 },
    { LuaSetProp,     "Width", wxSize_SetWidth, 1, 1 },
};

static WXLUAMETHOD wxRect_methods[] = {
    { LuaDelete,      "wxRect", wxRect_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxRect_Delete, 0, 0 },
    { LuaConstructor, "wxRect", wxRect_constructor, 0, 4 },
    { LuaConstructor, "wxRectFromPoints", wxRectFromPoints_constructor, 2, 2 },
    { LuaConstructor, "wxRectFromPosSize", wxRectFromPosSize_constructor, 2, 2 },
    { LuaMethod,      "GetX", wxRect_GetX, 0, 0 },
    { LuaMethod,      "SetX", wxRect_SetX, 1, 1 },
    { LuaGetProp,     "X", wxRect_GetX, 0, 0 },
    { LuaSetProp,     "X", wxRect_SetX, 1, 1 },
    { LuaMethod,      "GetY", wxRect_GetY, 0, 0 },
    { LuaMethod,      "SetY", wxRect_SetY, 1, 1 },
    { LuaGetProp,     "Y", wxRect_GetY, 0, 0 },
    { LuaSetProp,     "Y", wxRect_SetY, 1, 1 },
    { LuaMethod,      "GetWidth", wxRect_GetWidth, 0, 0 },
    { LuaMethod,      "GetHeight", wxRect_GetHeight, 0, 0 },
    { LuaMethod,      "GetPosition", wxRect_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxRect_GetPosition, 0, 0 },
    { LuaMethod,      "GetSize", wxRect_GetSize, 0, 0 },
    { LuaGetProp,     "Size", wxRect_GetSize, 0, 0 },
    { LuaMethod,      "GetLeft", wxRect_GetLeft, 0, 0 },
    { LuaMethod,      "GetTop", wxRect_GetTop, 0, 0 },
    { LuaMethod,      "GetBottom", wxRect_GetBottom, 0, 0 },
    { LuaMethod,      "GetRight", wxRect_GetRight, 0, 0 },
    { LuaMethod,      "SetWidth", wxRect_SetWidth, 1, 1 },
    { LuaGetProp,     "Width", wxRect_GetWidth, 0, 0 },
    { LuaSetProp,     "Width", wxRect_SetWidth, 1, 1 },
    { LuaMethod,      "SetHeight", wxRect_SetHeight, 1, 1 },
    { LuaGetProp,     "Height", wxRect_GetHeight, 0, 0 },
    { LuaSetProp,     "Height", wxRect_SetHeight, 1, 1 },
    { LuaMethod,      "SetLeft", wxRect_SetLeft, 1, 1 },
    { LuaGetProp,     "Left", wxRect_GetLeft, 0, 0 },
    { LuaSetProp,     "Left", wxRect_SetLeft, 1, 1 },
    { LuaMethod,      "SetTop", wxRect_SetTop, 1, 1 },
    { LuaGetProp,     "Top", wxRect_GetTop, 0, 0 },
    { LuaSetProp,     "Top", wxRect_SetTop, 1, 1 },
    { LuaMethod,      "SetRight", wxRect_SetRight, 1, 1 },
    { LuaGetProp,     "Right", wxRect_GetRight, 0, 0 },
    { LuaSetProp,     "Right", wxRect_SetRight, 1, 1 },
    { LuaMethod,      "SetBottom", wxRect_SetBottom, 1, 1 },
    { LuaGetProp,     "Bottom", wxRect_GetBottom, 0, 0 },
    { LuaSetProp,     "Bottom", wxRect_SetBottom, 1, 1 },
    { LuaMethod,      "Inflate", wxRect_Inflate, 2, 2 },
    { LuaMethod,      "Inside", wxRect_Inside, 2, 2 },
};

static WXLUAMETHOD wxGDIObject_methods[] = {
    { LuaDelete,      "wxGDIObject", wxGDIObject_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxGDIObject_Delete, 0, 0 },
    { LuaConstructor, "wxGDIObject", wxGDIObject_constructor, 0, 0 },
    { LuaMethod,      "GetVisible", wxGDIObject_GetVisible, 0, 0 },
    { LuaMethod,      "SetVisible", wxGDIObject_SetVisible, 1, 1 },
    { LuaMethod,      "IsNull", wxGDIObject_IsNull, 0, 0 },
    { LuaGetProp,     "Visible", wxGDIObject_GetVisible, 0, 0 },
    { LuaSetProp,     "Visible", wxGDIObject_SetVisible, 1, 1 },
};

static WXLUAMETHOD wxRegion_methods[] = {
    { LuaDelete,      "wxRegion", wxRegion_destructor, 0, 0 },
    { LuaConstructor, "wxRegion", wxRegion_constructor, 0, 4 },
    { LuaConstructor, "wxRegionFromPoints", wxRegionFromPoints_constructor, 2, 2 },
    { LuaConstructor, "wxRegionFromRect", wxRegionFromRect_constructor, 1, 1 },
    { LuaMethod,      "Clear", wxRegion_Clear, 0, 0 },
    { LuaMethod,      "Contains", wxRegion_Contains, 2, 2 },
    { LuaMethod,      "ContainsPoint", wxRegion_ContainsPoint, 1, 1 },
    { LuaMethod,      "ContainsRect", wxRegion_ContainsRect, 1, 1 },
    { LuaMethod,      "ContainsRectDim", wxRegion_ContainsRectDim, 4, 4 },
    { LuaMethod,      "GetBox", wxRegion_GetBox, 0, 0 },
    { LuaMethod,      "GetBoxCoords", wxRegion_GetBoxCoords, 4, 4 },
    { LuaMethod,      "Intersect", wxRegion_Intersect, 4, 4 },
    { LuaMethod,      "IntersectRect", wxRegion_IntersectRect, 1, 1 },
    { LuaMethod,      "IntersectRegion", wxRegion_IntersectRegion, 1, 1 },
    { LuaMethod,      "IsEmpty", wxRegion_IsEmpty, 0, 0 },
    { LuaMethod,      "Subtract", wxRegion_Subtract, 4, 4 },
    { LuaMethod,      "SubtractRect", wxRegion_SubtractRect, 1, 1 },
    { LuaMethod,      "SubtractRegion", wxRegion_SubtractRegion, 1, 1 },
    { LuaMethod,      "Union", wxRegion_Union, 4, 4 },
    { LuaMethod,      "UnionRect", wxRegion_UnionRect, 1, 1 },
    { LuaMethod,      "UnionRegion", wxRegion_UnionRegion, 1, 1 },
    { LuaMethod,      "Xor", wxRegion_Xor, 4, 4 },
    { LuaMethod,      "XorRect", wxRegion_XorRect, 1, 1 },
    { LuaMethod,      "XorRegion", wxRegion_XorRegion, 1, 1 },
    { LuaGetProp,     "Box", wxRegion_GetBox, 0, 0 },
};

static WXLUAMETHOD wxRegionIterator_methods[] = {
    { LuaDelete,      "wxRegionIterator", wxRegionIterator_destructor, 0, 0 },
    { LuaConstructor, "wxRegionIterator", wxRegionIterator_constructor, 1, 1 },
    { LuaMethod,      "GetX", wxRegionIterator_GetX, 0, 0 },
    { LuaMethod,      "GetY", wxRegionIterator_GetY, 0, 0 },
    { LuaMethod,      "GetW", wxRegionIterator_GetW, 0, 0 },
    { LuaMethod,      "GetWidth", wxRegionIterator_GetWidth, 0, 0 },
    { LuaMethod,      "GetH", wxRegionIterator_GetH, 0, 0 },
    { LuaMethod,      "GetHeight", wxRegionIterator_GetHeight, 0, 0 },
    { LuaMethod,      "GetRect", wxRegionIterator_GetRect, 0, 0 },
    { LuaMethod,      "HaveRects", wxRegionIterator_HaveRects, 0, 0 },
    { LuaMethod,      "Reset", wxRegionIterator_Reset, 0, 0 },
    { LuaGetProp,     "X", wxRegionIterator_GetX, 0, 0 },
    { LuaGetProp,     "Y", wxRegionIterator_GetY, 0, 0 },
    { LuaGetProp,     "W", wxRegionIterator_GetW, 0, 0 },
    { LuaGetProp,     "Width", wxRegionIterator_GetWidth, 0, 0 },
    { LuaGetProp,     "H", wxRegionIterator_GetH, 0, 0 },
    { LuaGetProp,     "Height", wxRegionIterator_GetHeight, 0, 0 },
    { LuaGetProp,     "Rect", wxRegionIterator_GetRect, 0, 0 },
};

static WXLUAMETHOD wxFont_methods[] = {
    { LuaDelete,      "wxFont", wxFont_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFont_Delete, 0, 0 },
    { LuaConstructor, "wxFont", wxFont_constructor, 4, 7 },
    { LuaMethod,      "GetDefaultEncoding", wxFont_GetDefaultEncoding, 0, 0 },
    { LuaMethod,      "GetFaceName", wxFont_GetFaceName, 0, 0 },
    { LuaMethod,      "GetFamily", wxFont_GetFamily, 0, 0 },
    { LuaMethod,      "GetPointSize", wxFont_GetPointSize, 0, 0 },
    { LuaMethod,      "GetStyle", wxFont_GetStyle, 0, 0 },
    { LuaMethod,      "GetUnderlined", wxFont_GetUnderlined, 0, 0 },
    { LuaMethod,      "GetWeight", wxFont_GetWeight, 0, 0 },
    { LuaMethod,      "SetDefaultEncoding", wxFont_SetDefaultEncoding, 1, 1 },
    { LuaMethod,      "SetFaceName", wxFont_SetFaceName, 1, 1 },
    { LuaMethod,      "SetFamily", wxFont_SetFamily, 1, 1 },
    { LuaMethod,      "SetPointSize", wxFont_SetPointSize, 1, 1 },
    { LuaMethod,      "SetStyle", wxFont_SetStyle, 1, 1 },
    { LuaMethod,      "SetUnderlined", wxFont_SetUnderlined, 1, 1 },
    { LuaMethod,      "SetWeight", wxFont_SetWeight, 1, 1 },
    { LuaGetProp,     "FaceName", wxFont_GetFaceName, 0, 0 },
    { LuaSetProp,     "FaceName", wxFont_SetFaceName, 1, 1 },
    { LuaGetProp,     "Family", wxFont_GetFamily, 0, 0 },
    { LuaSetProp,     "Family", wxFont_SetFamily, 1, 1 },
    { LuaGetProp,     "PointSize", wxFont_GetPointSize, 0, 0 },
    { LuaSetProp,     "PointSize", wxFont_SetPointSize, 1, 1 },
    { LuaGetProp,     "Style", wxFont_GetStyle, 0, 0 },
    { LuaSetProp,     "Style", wxFont_SetStyle, 1, 1 },
    { LuaGetProp,     "Underlined", wxFont_GetUnderlined, 0, 0 },
    { LuaSetProp,     "Underlined", wxFont_SetUnderlined, 1, 1 },
    { LuaGetProp,     "Weight", wxFont_GetWeight, 0, 0 },
    { LuaSetProp,     "Weight", wxFont_SetWeight, 1, 1 },
    { LuaGetProp,     "DefaultEncoding", wxFont_GetDefaultEncoding, 0, 0 },
    { LuaSetProp,     "DefaultEncoding", wxFont_SetDefaultEncoding, 1, 1 },
};

static WXLUAMETHOD wxFontEnumerator_methods[] = {
    { LuaDelete,      "wxFontEnumerator", wxFontEnumerator_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFontEnumerator_Delete, 0, 0 },
    { LuaConstructor, "wxFontEnumerator", wxFontEnumerator_constructor, 0, 0 },
    { LuaMethod,      "EnumerateFacenames", wxFontEnumerator_EnumerateFacenames, 0, 2 },
    { LuaMethod,      "EnumerateEncodings", wxFontEnumerator_EnumerateEncodings, 0, 1 },
    { LuaMethod,      "GetEncodings", wxFontEnumerator_GetEncodings, 0, 0 },
    { LuaGetProp,     "Encodings", wxFontEnumerator_GetEncodings, 0, 0 },
    { LuaMethod,      "GetFacenames", wxFontEnumerator_GetFacenames, 0, 0 },
    { LuaGetProp,     "Facenames", wxFontEnumerator_GetFacenames, 0, 0 },
};

static WXLUAMETHOD wxFontList_methods[] = {
    { LuaDelete,      "wxFontList", wxFontList_destructor, 0, 0 },
    { LuaMethod,      "AddFont", wxFontList_AddFont, 1, 1 },
    { LuaMethod,      "FindOrCreateFont", wxFontList_FindOrCreateFont, 4, 7 },
    { LuaMethod,      "RemoveFont", wxFontList_RemoveFont, 1, 1 },
};

static WXLUAMETHOD wxFontMapper_methods[] = {
    { LuaDelete,      "wxFontMapper", wxFontMapper_destructor, 0, 0 },
    { LuaMethod,      "GetAltForEncoding", wxFontMapper_GetAltForEncoding, 2, 4 },
    { LuaMethod,      "IsEncodingAvailable", wxFontMapper_IsEncodingAvailable, 1, 2 },
    { LuaMethod,      "CharsetToEncoding", wxFontMapper_CharsetToEncoding, 1, 2 },
    { LuaMethod,      "GetEncodingName", wxFontMapper_GetEncodingName, 1, 1 },
    { LuaMethod,      "GetEncodingDescription", wxFontMapper_GetEncodingDescription, 1, 1 },
    { LuaMethod,      "SetDialogParent", wxFontMapper_SetDialogParent, 1, 1 },
    { LuaMethod,      "SetDialogTitle", wxFontMapper_SetDialogTitle, 1, 1 },
    { LuaMethod,      "SetConfig", wxFontMapper_SetConfig, 0, 1 },
    { LuaMethod,      "SetConfigPath", wxFontMapper_SetConfigPath, 1, 1 },
    { LuaMethod,      "Get", wxFontMapper_Get, 0, 0 },
    { LuaMethod,      "Set", wxFontMapper_Set, 1, 1 },
};

static WXLUAMETHOD wxColour_methods[] = {
    { LuaDelete,      "wxColour", wxColour_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxColour_Delete, 0, 0 },
    { LuaConstructor, "wxColour", wxColour_constructor, 3, 3 },
    { LuaMethod,      "Blue", wxColour_Blue, 0, 0 },
    { LuaMethod,      "GetPixel", wxColour_GetPixel, 0, 0 },
    { LuaMethod,      "Green", wxColour_Green, 0, 0 },
    { LuaMethod,      "Ok", wxColour_Ok, 0, 0 },
    { LuaMethod,      "Red", wxColour_Red, 0, 0 },
    { LuaMethod,      "Set", wxColour_Set, 3, 3 },
};

static WXLUAMETHOD wxPen_methods[] = {
    { LuaDelete,      "wxPen", wxPen_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPen_Delete, 0, 0 },
    { LuaConstructor, "wxPen", wxPen_constructor, 0, 0 },
    { LuaMethod,      "GetCap", wxPen_GetCap, 0, 0 },
    { LuaMethod,      "GetColour", wxPen_GetColour, 0, 0 },
    { LuaMethod,      "GetJoin", wxPen_GetJoin, 0, 0 },
    { LuaMethod,      "GetStipple", wxPen_GetStipple, 0, 0 },
    { LuaMethod,      "GetStyle", wxPen_GetStyle, 0, 0 },
    { LuaMethod,      "GetWidth", wxPen_GetWidth, 0, 0 },
    { LuaMethod,      "Ok", wxPen_Ok, 0, 0 },
    { LuaMethod,      "SetCap", wxPen_SetCap, 1, 1 },
    { LuaMethod,      "SetColour", wxPen_SetColour, 1, 1 },
    { LuaMethod,      "SetColourString", wxPen_SetColourString, 1, 1 },
    { LuaMethod,      "SetColourRGB", wxPen_SetColourRGB, 3, 3 },
    { LuaMethod,      "SetJoin", wxPen_SetJoin, 1, 1 },
    { LuaMethod,      "SetStyle", wxPen_SetStyle, 1, 1 },
    { LuaMethod,      "SetWidth", wxPen_SetWidth, 1, 1 },
    { LuaGetProp,     "Cap", wxPen_GetCap, 0, 0 },
    { LuaSetProp,     "Cap", wxPen_SetCap, 1, 1 },
    { LuaGetProp,     "Colour", wxPen_GetColour, 0, 0 },
    { LuaSetProp,     "Colour", wxPen_SetColour, 1, 1 },
    { LuaGetProp,     "Join", wxPen_GetJoin, 0, 0 },
    { LuaSetProp,     "Join", wxPen_SetJoin, 1, 1 },
    { LuaGetProp,     "Width", wxPen_GetWidth, 0, 0 },
    { LuaSetProp,     "Width", wxPen_SetWidth, 1, 1 },
    { LuaGetProp,     "Stipple", wxPen_GetStipple, 0, 0 },
    { LuaGetProp,     "Style", wxPen_GetStyle, 0, 0 },
    { LuaSetProp,     "Style", wxPen_SetStyle, 1, 1 },
    { LuaConstructor, "wxPenFromColour", wxPenFromColour_constructor, 3, 3 },
    { LuaConstructor, "wxPenFromColourName", wxPenFromColourName_constructor, 3, 3 },
    { LuaConstructor, "wxPenFromBitmap", wxPenFromBitmap_constructor, 2, 2 },
    { LuaConstructor, "wxPenCopy", wxPenCopy_constructor, 1, 1 },
};

static WXLUAMETHOD wxPenList_methods[] = {
    { LuaDelete,      "wxPenList", wxPenList_destructor, 0, 0 },
    { LuaMethod,      "AddPen", wxPenList_AddPen, 1, 1 },
    { LuaMethod,      "RemovePen", wxPenList_RemovePen, 1, 1 },
    { LuaMethod,      "FindOrCreatePen", wxPenList_FindOrCreatePen, 3, 3 },
};

static WXLUAMETHOD wxBrush_methods[] = {
    { LuaDelete,      "wxBrush", wxBrush_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxBrush_Delete, 0, 0 },
    { LuaConstructor, "wxBrush", wxBrush_constructor, 2, 2 },
    { LuaConstructor, "wxBrushFromColourName", wxBrushFromColourName_constructor, 2, 2 },
    { LuaConstructor, "wxBrushFromBitmap", wxBrushFromBitmap_constructor, 1, 1 },
    { LuaConstructor, "wxBrushCopy", wxBrushCopy_constructor, 1, 1 },
    { LuaMethod,      "GetColour", wxBrush_GetColour, 0, 0 },
    { LuaMethod,      "GetStipple", wxBrush_GetStipple, 0, 0 },
    { LuaMethod,      "GetStyle", wxBrush_GetStyle, 0, 0 },
    { LuaMethod,      "Ok", wxBrush_Ok, 0, 0 },
    { LuaMethod,      "SetColour", wxBrush_SetColour, 1, 1 },
    { LuaMethod,      "SetColourString", wxBrush_SetColourString, 1, 1 },
    { LuaMethod,      "SetColourRGB", wxBrush_SetColourRGB, 3, 3 },
    { LuaMethod,      "SetStipple", wxBrush_SetStipple, 1, 1 },
    { LuaMethod,      "SetStyle", wxBrush_SetStyle, 1, 1 },
    { LuaGetProp,     "Colour", wxBrush_GetColour, 0, 0 },
    { LuaSetProp,     "Colour", wxBrush_SetColour, 1, 1 },
    { LuaGetProp,     "Stipple", wxBrush_GetStipple, 0, 0 },
    { LuaSetProp,     "Stipple", wxBrush_SetStipple, 1, 1 },
    { LuaGetProp,     "Style", wxBrush_GetStyle, 0, 0 },
    { LuaSetProp,     "Style", wxBrush_SetStyle, 1, 1 },
};

static WXLUAMETHOD wxBrushList_methods[] = {
    { LuaDelete,      "wxBrushList", wxBrushList_destructor, 0, 0 },
    { LuaConstructor, "wxBrushList", wxBrushList_constructor, 0, 0 },
    { LuaMethod,      "AddBrush", wxBrushList_AddBrush, 1, 1 },
    { LuaMethod,      "RemoveBrush", wxBrushList_RemoveBrush, 1, 1 },
    { LuaMethod,      "FindOrCreateBrush", wxBrushList_FindOrCreateBrush, 2, 2 },
};

static WXLUAMETHOD wxPalette_methods[] = {
    { LuaDelete,      "wxPalette", wxPalette_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPalette_Delete, 0, 0 },
    { LuaMethod,      "Create", wxPalette_Create, 4, 4 },
    { LuaMethod,      "Ok", wxPalette_Ok, 0, 0 },
};

static WXLUAMETHOD wxIcon_methods[] = {
    { LuaDelete,      "wxIcon", wxIcon_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxIcon_Delete, 0, 0 },
    { LuaConstructor, "wxIcon", wxIcon_constructor, 2, 4 },
    { LuaConstructor, "wxDefaultIcon", wxDefaultIcon_constructor, 0, 0 },
    { LuaMethod,      "CopyFromBitmap", wxIcon_CopyFromBitmap, 1, 1 },
    { LuaMethod,      "GetDepth", wxIcon_GetDepth, 0, 0 },
    { LuaMethod,      "GetWidth", wxIcon_GetWidth, 0, 0 },
    { LuaMethod,      "GetHeight", wxIcon_GetHeight, 0, 0 },
    { LuaMethod,      "LoadFile", wxIcon_LoadFile, 2, 2 },
    { LuaMethod,      "Ok", wxIcon_Ok, 0, 0 },
    { LuaMethod,      "SetWidth", wxIcon_SetWidth, 1, 1 },
    { LuaGetProp,     "Width", wxIcon_GetWidth, 0, 0 },
    { LuaSetProp,     "Width", wxIcon_SetWidth, 1, 1 },
    { LuaMethod,      "SetHeight", wxIcon_SetHeight, 1, 1 },
    { LuaGetProp,     "Height", wxIcon_GetHeight, 0, 0 },
    { LuaSetProp,     "Height", wxIcon_SetHeight, 1, 1 },
    { LuaMethod,      "SetDepth", wxIcon_SetDepth, 1, 1 },
    { LuaGetProp,     "Depth", wxIcon_GetDepth, 0, 0 },
    { LuaSetProp,     "Depth", wxIcon_SetDepth, 1, 1 },
    { LuaMethod,      "SetSize", wxIcon_SetSize, 1, 1 },
};

static WXLUAMETHOD wxBitmapHandler_methods[] = {
    { LuaDelete,      "wxBitmapHandler", wxBitmapHandler_destructor, 0, 0 },
};

static WXLUAMETHOD wxGDIImageHandler_methods[] = {
    { LuaDelete,      "wxGDIImageHandler", wxGDIImageHandler_destructor, 0, 0 },
};

static WXLUAMETHOD wxGDIImageHandlerList_methods[] = {
    { LuaDelete,      "wxGDIImageHandlerList", wxGDIImageHandlerList_destructor, 0, 0 },
};

static WXLUAMETHOD wxBitmap_methods[] = {
    { LuaDelete,      "wxBitmap", wxBitmap_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxBitmap_Delete, 0, 0 },
    { LuaConstructor, "wxDefaultBitmap", wxDefaultBitmap_constructor, 0, 0 },
    { LuaConstructor, "wxBitmap", wxBitmap_constructor, 4, 5 },
    { LuaConstructor, "wxBitmapCopy", wxBitmapCopy_constructor, 1, 1 },
    { LuaConstructor, "wxEmptyBitmap", wxEmptyBitmap_constructor, 2, 3 },
    { LuaConstructor, "wxBitmapFromFile", wxBitmapFromFile_constructor, 2, 2 },
    { LuaConstructor, "wxBitmapFromXPMData", wxBitmapFromXPMData_constructor, 1, 1 },
    { LuaConstructor, "wxBitmapFromImage", wxBitmapFromImage_constructor, 1, 2 },
    { LuaMethod,      "AddHandler", wxBitmap_AddHandler, 1, 1 },
    { LuaMethod,      "CleanUpHandlers", wxBitmap_CleanUpHandlers, 0, 0 },
    { LuaMethod,      "Create", wxBitmap_Create, 2, 3 },
    { LuaMethod,      "GetDepth", wxBitmap_GetDepth, 0, 0 },
    { LuaMethod,      "GetHandlers", wxBitmap_GetHandlers, 0, 0 },
    { LuaMethod,      "GetHeight", wxBitmap_GetHeight, 0, 0 },
    { LuaMethod,      "GetPalette", wxBitmap_GetPalette, 0, 0 },
    { LuaMethod,      "GetMask", wxBitmap_GetMask, 0, 0 },
    { LuaMethod,      "GetWidth", wxBitmap_GetWidth, 0, 0 },
    { LuaMethod,      "GetSubBitmap", wxBitmap_GetSubBitmap, 1, 1 },
    { LuaMethod,      "InitStandardHandlers", wxBitmap_InitStandardHandlers, 0, 0 },
    { LuaMethod,      "InsertHandler", wxBitmap_InsertHandler, 1, 1 },
    { LuaMethod,      "LoadFile", wxBitmap_LoadFile, 2, 2 },
    { LuaMethod,      "Ok", wxBitmap_Ok, 0, 0 },
    { LuaMethod,      "RemoveHandler", wxBitmap_RemoveHandler, 1, 1 },
    { LuaMethod,      "SaveFile", wxBitmap_SaveFile, 2, 3 },
    { LuaMethod,      "SetDepth", wxBitmap_SetDepth, 1, 1 },
    { LuaGetProp,     "Depth", wxBitmap_GetDepth, 0, 0 },
    { LuaSetProp,     "Depth", wxBitmap_SetDepth, 1, 1 },
    { LuaMethod,      "SetHeight", wxBitmap_SetHeight, 1, 1 },
    { LuaGetProp,     "Height", wxBitmap_GetHeight, 0, 0 },
    { LuaSetProp,     "Height", wxBitmap_SetHeight, 1, 1 },
    { LuaMethod,      "SetMask", wxBitmap_SetMask, 1, 1 },
    { LuaGetProp,     "Mask", wxBitmap_GetMask, 0, 0 },
    { LuaSetProp,     "Mask", wxBitmap_SetMask, 1, 1 },
    { LuaMethod,      "SetPalette", wxBitmap_SetPalette, 1, 1 },
    { LuaGetProp,     "Palette", wxBitmap_GetPalette, 0, 0 },
    { LuaSetProp,     "Palette", wxBitmap_SetPalette, 1, 1 },
    { LuaMethod,      "SetWidth", wxBitmap_SetWidth, 1, 1 },
    { LuaGetProp,     "Width", wxBitmap_GetWidth, 0, 0 },
    { LuaSetProp,     "Width", wxBitmap_SetWidth, 1, 1 },
};

static WXLUAMETHOD wxCursor_methods[] = {
    { LuaDelete,      "wxCursor", wxCursor_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxCursor_Delete, 0, 0 },
    { LuaConstructor, "wxCursor", wxCursor_constructor, 2, 4 },
    { LuaConstructor, "wxDefaultCursor", wxDefaultCursor_constructor, 0, 0 },
    { LuaConstructor, "wxStockCursor", wxStockCursor_constructor, 1, 1 },
    { LuaMethod,      "Ok", wxCursor_Ok, 0, 0 },
    { LuaMethod,      "GetWidth", wxCursor_GetWidth, 0, 0 },
    { LuaMethod,      "GetHeight", wxCursor_GetHeight, 0, 0 },
    { LuaMethod,      "GetDepth", wxCursor_GetDepth, 0, 0 },
    { LuaGetProp,     "Width", wxCursor_GetWidth, 0, 0 },
    { LuaSetProp,     "Width", wxCursor_SetWidth, 1, 1 },
    { LuaMethod,      "SetWidth", wxCursor_SetWidth, 1, 1 },
    { LuaGetProp,     "Height", wxCursor_GetHeight, 0, 0 },
    { LuaSetProp,     "Height", wxCursor_SetHeight, 1, 1 },
    { LuaMethod,      "SetHeight", wxCursor_SetHeight, 1, 1 },
    { LuaGetProp,     "Depth", wxCursor_GetDepth, 0, 0 },
    { LuaSetProp,     "Depth", wxCursor_SetDepth, 1, 1 },
    { LuaMethod,      "SetDepth", wxCursor_SetDepth, 1, 1 },
    { LuaMethod,      "SetSize", wxCursor_SetSize, 1, 1 },
};

static WXLUAMETHOD wxMask_methods[] = {
    { LuaDelete,      "wxMask", wxMask_destructor, 0, 0 },
    { LuaConstructor, "wxMask", wxMask_constructor, 1, 1 },
    { LuaConstructor, "wxEmptyMask", wxEmptyMask_constructor, 0, 0 },
    { LuaConstructor, "wxMaskColour", wxMaskColour_constructor, 2, 2 },
    { LuaConstructor, "wxMaskIndex", wxMaskIndex_constructor, 2, 2 },
    { LuaMethod,      "Create", wxMask_Create, 1, 1 },
    { LuaMethod,      "CreateColour", wxMask_CreateColour, 2, 2 },
    { LuaMethod,      "CreateIndex", wxMask_CreateIndex, 2, 2 },
};

static WXLUAMETHOD wxImageList_methods[] = {
    { LuaDelete,      "wxImageList", wxImageList_destructor, 0, 0 },
    { LuaConstructor, "wxImageList", wxImageList_constructor, 2, 4 },
    { LuaMethod,      "Add", wxImageList_Add, 1, 2 },
    { LuaMethod,      "AddWithColourMask", wxImageList_AddWithColourMask, 2, 2 },
    { LuaMethod,      "AddIcon", wxImageList_AddIcon, 1, 1 },
    { LuaMethod,      "Draw", wxImageList_Draw, 4, 6 },
    { LuaMethod,      "GetImageCount", wxImageList_GetImageCount, 0, 0 },
    { LuaGetProp,     "ImageCount", wxImageList_GetImageCount, 0, 0 },
    { LuaMethod,      "GetSize", wxImageList_GetSize, 3, 3 },
    { LuaMethod,      "Remove", wxImageList_Remove, 1, 1 },
    { LuaMethod,      "Replace", wxImageList_Replace, 2, 3 },
    { LuaMethod,      "RemoveAll", wxImageList_RemoveAll, 0, 0 },
};

static WXLUAMETHOD wxDC_methods[] = {
    { LuaDelete,      "wxDC", wxDC_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxDC_Delete, 0, 0 },
    { LuaConstructor, "wxDC", wxDC_constructor, 0, 0 },
    { LuaMethod,      "BeginDrawing", wxDC_BeginDrawing, 0, 0 },
    { LuaMethod,      "Blit", wxDC_Blit, 7, 9 },
    { LuaMethod,      "CalcBoundingBox", wxDC_CalcBoundingBox, 2, 2 },
    { LuaMethod,      "Clear", wxDC_Clear, 0, 0 },
    { LuaMethod,      "CrossHair", wxDC_CrossHair, 2, 2 },
    { LuaMethod,      "DestroyClippingRegion", wxDC_DestroyClippingRegion, 0, 0 },
    { LuaMethod,      "DeviceToLogicalX", wxDC_DeviceToLogicalX, 1, 1 },
    { LuaMethod,      "DeviceToLogicalXRel", wxDC_DeviceToLogicalXRel, 1, 1 },
    { LuaMethod,      "DeviceToLogicalY", wxDC_DeviceToLogicalY, 1, 1 },
    { LuaMethod,      "DeviceToLogicalYRel", wxDC_DeviceToLogicalYRel, 1, 1 },
    { LuaMethod,      "DrawArc", wxDC_DrawArc, 6, 6 },
    { LuaMethod,      "DrawBitmap", wxDC_DrawBitmap, 4, 4 },
    { LuaMethod,      "DrawCheckMark", wxDC_DrawCheckMark, 4, 4 },
    { LuaMethod,      "DrawCheckMarkRect", wxDC_DrawCheckMarkRect, 1, 1 },
    { LuaMethod,      "DrawEllipse", wxDC_DrawEllipse, 4, 4 },
    { LuaMethod,      "DrawEllipticArc", wxDC_DrawEllipticArc, 6, 6 },
    { LuaMethod,      "DrawIcon", wxDC_DrawIcon, 3, 3 },
    { LuaMethod,      "DrawLine", wxDC_DrawLine, 4, 4 },
    { LuaMethod,      "DrawLines", wxDC_DrawLines, 2, 4 },
    { LuaMethod,      "DrawLinesList", wxDC_DrawLinesList, 1, 3 },
    { LuaMethod,      "DrawPolygon", wxDC_DrawPolygon, 2, 5 },
    { LuaMethod,      "DrawPolygonList", wxDC_DrawPolygonList, 1, 4 },
    { LuaMethod,      "DrawPoint", wxDC_DrawPoint, 2, 2 },
    { LuaMethod,      "DrawRectangle", wxDC_DrawRectangle, 4, 4 },
    { LuaMethod,      "DrawRotatedText", wxDC_DrawRotatedText, 4, 4 },
    { LuaMethod,      "DrawRoundedRectangle", wxDC_DrawRoundedRectangle, 4, 5 },
    { LuaMethod,      "DrawText", wxDC_DrawText, 3, 3 },
    { LuaMethod,      "EndDoc", wxDC_EndDoc, 0, 0 },
    { LuaMethod,      "EndDrawing", wxDC_EndDrawing, 0, 0 },
    { LuaMethod,      "EndPage", wxDC_EndPage, 0, 0 },
    { LuaMethod,      "FloodFill", wxDC_FloodFill, 3, 4 },
    { LuaMethod,      "GetBackground", wxDC_GetBackground, 0, 0 },
    { LuaMethod,      "GetBackgroundMode", wxDC_GetBackgroundMode, 0, 0 },
    { LuaMethod,      "GetBrush", wxDC_GetBrush, 0, 0 },
    { LuaMethod,      "GetCharHeight", wxDC_GetCharHeight, 0, 0 },
    { LuaMethod,      "GetCharWidth", wxDC_GetCharWidth, 0, 0 },
    { LuaMethod,      "GetClippingBox", wxDC_GetClippingBox, 4, 4 },
    { LuaMethod,      "GetFont", wxDC_GetFont, 0, 0 },
    { LuaMethod,      "GetLogicalFunction", wxDC_GetLogicalFunction, 0, 0 },
    { LuaMethod,      "GetMapMode", wxDC_GetMapMode, 0, 0 },
    { LuaMethod,      "GetOptimization", wxDC_GetOptimization, 0, 0 },
    { LuaMethod,      "GetPen", wxDC_GetPen, 0, 0 },
    { LuaMethod,      "GetPixel", wxDC_GetPixel, 3, 3 },
    { LuaMethod,      "GetSize", wxDC_GetSize, 2, 2 },
    { LuaMethod,      "GetTextBackground", wxDC_GetTextBackground, 0, 0 },
    { LuaMethod,      "GetTextExtent", wxDC_GetTextExtent, 3, 6 },
    { LuaMethod,      "GetTextForeground", wxDC_GetTextForeground, 0, 0 },
    { LuaMethod,      "GetUserScale", wxDC_GetUserScale, 2, 2 },
    { LuaMethod,      "LogicalToDeviceX", wxDC_LogicalToDeviceX, 1, 1 },
    { LuaMethod,      "LogicalToDeviceXRel", wxDC_LogicalToDeviceXRel, 1, 1 },
    { LuaMethod,      "LogicalToDeviceY", wxDC_LogicalToDeviceY, 1, 1 },
    { LuaMethod,      "LogicalToDeviceYRel", wxDC_LogicalToDeviceYRel, 1, 1 },
    { LuaMethod,      "MaxX", wxDC_MaxX, 0, 0 },
    { LuaMethod,      "MaxY", wxDC_MaxY, 0, 0 },
    { LuaMethod,      "MinX", wxDC_MinX, 0, 0 },
    { LuaMethod,      "MinY", wxDC_MinY, 0, 0 },
    { LuaMethod,      "Ok", wxDC_Ok, 0, 0 },
    { LuaMethod,      "ResetBoundingBox", wxDC_ResetBoundingBox, 0, 0 },
    { LuaMethod,      "SetDeviceOrigin", wxDC_SetDeviceOrigin, 2, 2 },
    { LuaMethod,      "SetBackground", wxDC_SetBackground, 1, 1 },
    { LuaGetProp,     "Background", wxDC_GetBackground, 0, 0 },
    { LuaSetProp,     "Background", wxDC_SetBackground, 1, 1 },
    { LuaMethod,      "SetBackgroundMode", wxDC_SetBackgroundMode, 1, 1 },
    { LuaGetProp,     "BackgroundMode", wxDC_GetBackgroundMode, 0, 0 },
    { LuaSetProp,     "BackgroundMode", wxDC_SetBackgroundMode, 1, 1 },
    { LuaMethod,      "SetClippingRegionXY", wxDC_SetClippingRegionXY, 4, 4 },
    { LuaMethod,      "SetClippingRegion", wxDC_SetClippingRegion, 1, 1 },
    { LuaMethod,      "SetPalette", wxDC_SetPalette, 1, 1 },
    { LuaMethod,      "SetBrush", wxDC_SetBrush, 1, 1 },
    { LuaGetProp,     "Brush", wxDC_GetBrush, 0, 0 },
    { LuaSetProp,     "Brush", wxDC_SetBrush, 1, 1 },
    { LuaMethod,      "SetFont", wxDC_SetFont, 1, 1 },
    { LuaGetProp,     "Font", wxDC_GetFont, 0, 0 },
    { LuaSetProp,     "Font", wxDC_SetFont, 1, 1 },
    { LuaMethod,      "SetOptimization", wxDC_SetOptimization, 1, 1 },
    { LuaGetProp,     "Optimization", wxDC_GetOptimization, 0, 0 },
    { LuaSetProp,     "Optimization", wxDC_SetOptimization, 1, 1 },
    { LuaMethod,      "SetPen", wxDC_SetPen, 1, 1 },
    { LuaGetProp,     "Pen", wxDC_GetPen, 0, 0 },
    { LuaSetProp,     "Pen", wxDC_SetPen, 1, 1 },
    { LuaMethod,      "SetTextBackground", wxDC_SetTextBackground, 1, 1 },
    { LuaGetProp,     "TextBackground", wxDC_GetTextBackground, 0, 0 },
    { LuaSetProp,     "TextBackground", wxDC_SetTextBackground, 1, 1 },
    { LuaMethod,      "SetTextForeground", wxDC_SetTextForeground, 1, 1 },
    { LuaGetProp,     "TextForeground", wxDC_GetTextForeground, 0, 0 },
    { LuaSetProp,     "TextForeground", wxDC_SetTextForeground, 1, 1 },
    { LuaMethod,      "SetUserScale", wxDC_SetUserScale, 2, 2 },
    { LuaGetProp,     "UserScale", wxDC_GetUserScale, 0, 0 },
    { LuaSetProp,     "UserScale", wxDC_SetUserScale, 1, 1 },
    { LuaMethod,      "StartDoc", wxDC_StartDoc, 1, 1 },
    { LuaMethod,      "StartPage", wxDC_StartPage, 0, 0 },
};

static WXLUAMETHOD wxMemoryDC_methods[] = {
    { LuaDelete,      "wxMemoryDC", wxMemoryDC_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxMemoryDC_Delete, 0, 0 },
    { LuaConstructor, "wxMemoryDC", wxMemoryDC_constructor, 0, 0 },
    { LuaMethod,      "SelectObject", wxMemoryDC_SelectObject, 1, 1 },
};

static WXLUAMETHOD wxWindowDC_methods[] = {
    { LuaDelete,      "wxWindowDC", wxWindowDC_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxWindowDC_Delete, 0, 0 },
    { LuaConstructor, "wxWindowDC", wxWindowDC_constructor, 1, 1 },
};

static WXLUAMETHOD wxClientDC_methods[] = {
    { LuaDelete,      "wxClientDC", wxClientDC_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxClientDC_Delete, 0, 0 },
    { LuaConstructor, "wxClientDC", wxClientDC_constructor, 1, 1 },
};

static WXLUAMETHOD wxPaintDC_methods[] = {
    { LuaDelete,      "wxPaintDC", wxPaintDC_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPaintDC_Delete, 0, 0 },
    { LuaConstructor, "wxPaintDC", wxPaintDC_constructor, 1, 1 },
};

static WXLUAMETHOD wxScreenDC_methods[] = {
    { LuaDelete,      "wxScreenDC", wxScreenDC_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxScreenDC_Delete, 0, 0 },
    { LuaConstructor, "wxScreenDC", wxScreenDC_constructor, 0, 0 },
    { LuaMethod,      "StartDrawingOnTop", wxScreenDC_StartDrawingOnTop, 1, 1 },
    { LuaMethod,      "StartDrawingOnTopRect", wxScreenDC_StartDrawingOnTopRect, 0, 1 },
    { LuaMethod,      "EndDrawingOnTop", wxScreenDC_EndDrawingOnTop, 0, 0 },
};

static WXLUAMETHOD wxCaret_methods[] = {
    { LuaDelete,      "wxCaret", wxCaret_destructor, 0, 0 },
    { LuaConstructor, "wxCaret", wxCaret_constructor, 2, 2 },
    { LuaConstructor, "wxDefaultCaret", wxDefaultCaret_constructor, 0, 0 },
    { LuaConstructor, "wxCaretFromWidthHeight", wxCaretFromWidthHeight_constructor, 3, 3 },
    { LuaMethod,      "Create", wxCaret_Create, 2, 2 },
    { LuaMethod,      "CreateFromWidthHeight", wxCaret_CreateFromWidthHeight, 3, 3 },
    { LuaMethod,      "GetPositionXY", wxCaret_GetPositionXY, 2, 2 },
    { LuaMethod,      "GetPosition", wxCaret_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxCaret_GetPosition, 0, 0 },
    { LuaMethod,      "GetSizeXY", wxCaret_GetSizeXY, 2, 2 },
    { LuaMethod,      "GetSize", wxCaret_GetSize, 0, 0 },
    { LuaMethod,      "GetWindow", wxCaret_GetWindow, 0, 0 },
    { LuaGetProp,     "Window", wxCaret_GetWindow, 0, 0 },
    { LuaMethod,      "IsOk", wxCaret_IsOk, 0, 0 },
    { LuaMethod,      "IsVisible", wxCaret_IsVisible, 0, 0 },
    { LuaMethod,      "MoveXY", wxCaret_MoveXY, 2, 2 },
    { LuaMethod,      "Move", wxCaret_Move, 1, 1 },
    { LuaMethod,      "SetSizeWH", wxCaret_SetSizeWH, 2, 2 },
    { LuaMethod,      "SetSize", wxCaret_SetSize, 1, 1 },
    { LuaGetProp,     "Size", wxCaret_GetSize, 0, 0 },
    { LuaSetProp,     "Size", wxCaret_SetSize, 1, 1 },
    { LuaMethod,      "Show", wxCaret_Show, 0, 1 },
    { LuaMethod,      "Hide", wxCaret_Hide, 0, 0 },
    { LuaMethod,      "GetBlinkTime", wxCaret_GetBlinkTime, 0, 0 },
    { LuaMethod,      "SetBlinkTime", wxCaret_SetBlinkTime, 1, 1 },
    { LuaGetProp,     "BlinkTime", wxCaret_GetBlinkTime, 0, 0 },
    { LuaSetProp,     "BlinkTime", wxCaret_SetBlinkTime, 1, 1 },
};

static WXLUAMETHOD wxApp_methods[] = {
    { LuaDelete,      "wxApp", wxApp_destructor, 0, 0 },
    { LuaGlobal,      "wxGetBaseApp", builtin_wxGetBaseApp, 0, 0 },
    { LuaMethod,      "Dispatch", wxApp_Dispatch, 0, 0 },
    { LuaMethod,      "GetAppName", wxApp_GetAppName, 0, 0 },
    { LuaMethod,      "GetClassName", wxApp_GetClassName, 0, 0 },
    { LuaMethod,      "GetExitOnFrameDelete", wxApp_GetExitOnFrameDelete, 0, 0 },
    { LuaMethod,      "GetTopWindow", wxApp_GetTopWindow, 0, 0 },
    { LuaMethod,      "GetUseBestVisual", wxApp_GetUseBestVisual, 0, 0 },
    { LuaMethod,      "GetVendorName", wxApp_GetVendorName, 0, 0 },
    { LuaMethod,      "ExitMainLoop", wxApp_ExitMainLoop, 0, 0 },
    { LuaMethod,      "Initialized", wxApp_Initialized, 0, 0 },
    { LuaMethod,      "MainLoop", wxApp_MainLoop, 0, 0 },
    { LuaMethod,      "Pending", wxApp_Pending, 0, 0 },
    { LuaMethod,      "SendIdleEvents", wxApp_SendIdleEvents, 2, 2 },
    { LuaMethod,      "SetAppName", wxApp_SetAppName, 1, 1 },
    { LuaGetProp,     "AppName", wxApp_GetAppName, 0, 0 },
    { LuaSetProp,     "AppName", wxApp_SetAppName, 1, 1 },
    { LuaMethod,      "SetClassName", wxApp_SetClassName, 1, 1 },
    { LuaGetProp,     "ClassName", wxApp_GetClassName, 0, 0 },
    { LuaSetProp,     "ClassName", wxApp_SetClassName, 1, 1 },
    { LuaMethod,      "SetExitOnFrameDelete", wxApp_SetExitOnFrameDelete, 1, 1 },
    { LuaGetProp,     "ExitOnFrameDelete", wxApp_GetExitOnFrameDelete, 0, 0 },
    { LuaSetProp,     "ExitOnFrameDelete", wxApp_SetExitOnFrameDelete, 1, 1 },
    { LuaMethod,      "SetTopWindow", wxApp_SetTopWindow, 1, 1 },
    { LuaGetProp,     "TopWindow", wxApp_GetTopWindow, 0, 0 },
    { LuaSetProp,     "TopWindow", wxApp_SetTopWindow, 1, 1 },
    { LuaMethod,      "SetVendorName", wxApp_SetVendorName, 1, 1 },
    { LuaGetProp,     "VendorName", wxApp_GetVendorName, 0, 0 },
    { LuaSetProp,     "VendorName", wxApp_SetVendorName, 1, 1 },
    { LuaMethod,      "SetUseBestVisual", wxApp_SetUseBestVisual, 1, 1 },
    { LuaGetProp,     "UseBestVisual", wxApp_GetUseBestVisual, 0, 0 },
    { LuaSetProp,     "UseBestVisual", wxApp_SetUseBestVisual, 1, 1 },
};

static WXLUAMETHOD wxFrame_methods[] = {
    { LuaDelete,      "wxFrame", wxFrame_destructor, 0, 0 },
    { LuaConstructor, "wxFrameDefault", wxFrameDefault_constructor, 0, 0 },
    { LuaConstructor, "wxFrame", wxFrame_constructor, 3, 7 },
    { LuaMethod,      "Centre", wxFrame_Centre, 0, 1 },
    { LuaMethod,      "Create", wxFrame_Create, 3, 7 },
    { LuaMethod,      "CreateStatusBar", wxFrame_CreateStatusBar, 0, 4 },
    { LuaMethod,      "CreateToolBar", wxFrame_CreateToolBar, 0, 3 },
    { LuaMethod,      "GetClientAreaOrigin", wxFrame_GetClientAreaOrigin, 0, 0 },
    { LuaMethod,      "GetMenuBar", wxFrame_GetMenuBar, 0, 0 },
    { LuaMethod,      "GetStatusBar", wxFrame_GetStatusBar, 0, 0 },
    { LuaMethod,      "GetTitle", wxFrame_GetTitle, 0, 0 },
    { LuaMethod,      "GetToolBar", wxFrame_GetToolBar, 0, 0 },
    { LuaMethod,      "Iconize", wxFrame_Iconize, 1, 1 },
    { LuaMethod,      "IsIconized", wxFrame_IsIconized, 0, 0 },
    { LuaMethod,      "IsMaximized", wxFrame_IsMaximized, 0, 0 },
    { LuaMethod,      "Maximize", wxFrame_Maximize, 1, 1 },
    { LuaMethod,      "SetIcon", wxFrame_SetIcon, 1, 1 },
    { LuaMethod,      "SetMenuBar", wxFrame_SetMenuBar, 1, 1 },
    { LuaGetProp,     "MenuBar", wxFrame_GetMenuBar, 0, 0 },
    { LuaSetProp,     "MenuBar", wxFrame_SetMenuBar, 1, 1 },
    { LuaMethod,      "SetStatusBar", wxFrame_SetStatusBar, 1, 1 },
    { LuaGetProp,     "StatusBar", wxFrame_GetStatusBar, 0, 0 },
    { LuaSetProp,     "StatusBar", wxFrame_SetStatusBar, 1, 1 },
    { LuaMethod,      "SetStatusText", wxFrame_SetStatusText, 1, 2 },
    { LuaMethod,      "SetStatusWidths", wxFrame_SetStatusWidths, 2, 2 },
    { LuaMethod,      "SetToolBar", wxFrame_SetToolBar, 1, 1 },
    { LuaGetProp,     "ToolBar", wxFrame_GetToolBar, 0, 0 },
    { LuaSetProp,     "ToolBar", wxFrame_SetToolBar, 1, 1 },
    { LuaMethod,      "SetTitle", wxFrame_SetTitle, 1, 1 },
    { LuaGetProp,     "Title", wxFrame_GetTitle, 0, 0 },
    { LuaSetProp,     "Title", wxFrame_SetTitle, 1, 1 },
    { LuaMethod,      "ShowFullScreen", wxFrame_ShowFullScreen, 1, 2 },
};

static WXLUAMETHOD wxMiniFrame_methods[] = {
    { LuaDelete,      "wxMiniFrame", wxMiniFrame_destructor, 0, 0 },
    { LuaConstructor, "wxMiniFrameDefault", wxMiniFrameDefault_constructor, 0, 0 },
    { LuaConstructor, "wxMiniFrame", wxMiniFrame_constructor, 3, 7 },
    { LuaMethod,      "Create", wxMiniFrame_Create, 3, 7 },
};

static WXLUAMETHOD wxStatusBar_methods[] = {
    { LuaDelete,      "wxStatusBar", wxStatusBar_destructor, 0, 0 },
    { LuaConstructor, "wxStatusBar", wxStatusBar_constructor, 2, 4 },
    { LuaConstructor, "wxStatusBarDefault", wxStatusBarDefault_constructor, 0, 0 },
    { LuaMethod,      "Create", wxStatusBar_Create, 3, 4 },
    { LuaMethod,      "GetFieldRect", wxStatusBar_GetFieldRect, 2, 2 },
    { LuaMethod,      "GetFieldsCount", wxStatusBar_GetFieldsCount, 0, 0 },
    { LuaGetProp,     "FieldsCount", wxStatusBar_GetFieldsCount, 0, 0 },
    { LuaMethod,      "GetStatusText", wxStatusBar_GetStatusText, 0, 1 },
    { LuaMethod,      "SetFieldsCount", wxStatusBar_SetFieldsCount, 0, 2 },
    { LuaMethod,      "SetMinHeight", wxStatusBar_SetMinHeight, 1, 1 },
    { LuaMethod,      "SetStatusText", wxStatusBar_SetStatusText, 1, 2 },
    { LuaMethod,      "SetStatusWidths", wxStatusBar_SetStatusWidths, 2, 2 },
};

static WXLUAMETHOD wxToolTip_methods[] = {
    { LuaDelete,      "wxToolTip", wxToolTip_destructor, 0, 0 },
    { LuaConstructor, "wxToolTip", wxToolTip_constructor, 1, 1 },
    { LuaMethod,      "Enable", wxToolTip_Enable, 1, 1 },
    { LuaMethod,      "SetDelay", wxToolTip_SetDelay, 1, 1 },
    { LuaMethod,      "SetTip", wxToolTip_SetTip, 1, 1 },
    { LuaMethod,      "GetTip", wxToolTip_GetTip, 0, 0 },
    { LuaGetProp,     "Tip", wxToolTip_GetTip, 0, 0 },
    { LuaSetProp,     "Tip", wxToolTip_SetTip, 1, 1 },
    { LuaMethod,      "GetWindow", wxToolTip_GetWindow, 0, 0 },
    { LuaGetProp,     "Window", wxToolTip_GetWindow, 0, 0 },
};

static WXLUAMETHOD wxAcceleratorTable_methods[] = {
    { LuaDelete,      "wxAcceleratorTable", wxAcceleratorTable_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxAcceleratorTable_Delete, 0, 0 },
    { LuaConstructor, "wxAcceleratorTable", wxAcceleratorTable_constructor, 2, 2 },
    { LuaMethod,      "Ok", wxAcceleratorTable_Ok, 0, 0 },
    { LuaGlobal,      "wxGetAccelFromString", builtin_wxGetAccelFromString, 1, 1 },
};

static WXLUAMETHOD wxAcceleratorEntry_methods[] = {
    { LuaDelete,      "wxAcceleratorEntry", wxAcceleratorEntry_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxAcceleratorEntry_Delete, 0, 0 },
    { LuaConstructor, "wxAcceleratorEntry", wxAcceleratorEntry_constructor, 0, 3 },
    { LuaMethod,      "GetCommand", wxAcceleratorEntry_GetCommand, 0, 0 },
    { LuaGetProp,     "Command", wxAcceleratorEntry_GetCommand, 0, 0 },
    { LuaMethod,      "GetFlags", wxAcceleratorEntry_GetFlags, 0, 0 },
    { LuaGetProp,     "Flags", wxAcceleratorEntry_GetFlags, 0, 0 },
    { LuaMethod,      "GetKeyCode", wxAcceleratorEntry_GetKeyCode, 0, 0 },
    { LuaGetProp,     "KeyCode", wxAcceleratorEntry_GetKeyCode, 0, 0 },
    { LuaMethod,      "Set", wxAcceleratorEntry_Set, 3, 3 },
};

static WXLUAMETHOD wxTaskBarIcon_methods[] = {
    { LuaDelete,      "wxTaskBarIcon", wxTaskBarIcon_destructor, 0, 0 },
    { LuaConstructor, "wxTaskBarIcon", wxTaskBarIcon_constructor, 0, 0 },
    { LuaMethod,      "IsIconInstalled", wxTaskBarIcon_IsIconInstalled, 0, 0 },
    { LuaMethod,      "RemoveIcon", wxTaskBarIcon_RemoveIcon, 0, 0 },
    { LuaMethod,      "SetIcon", wxTaskBarIcon_SetIcon, 2, 2 },
};

static WXLUAMETHOD wxTaskBarIconEvent_methods[] = {
    { LuaDelete,      "wxTaskBarIconEvent", wxTaskBarIconEvent_destructor, 0, 0 },
};

static WXLUAMETHOD wxSystemSettings_methods[] = {
    { LuaDelete,      "wxSystemSettings", wxSystemSettings_destructor, 0, 0 },
    { LuaMethod,      "GetColour", wxSystemSettings_GetColour, 1, 1 },
    { LuaMethod,      "GetFont", wxSystemSettings_GetFont, 1, 1 },
    { LuaMethod,      "GetMetric", wxSystemSettings_GetMetric, 1, 1 },
};

static WXLUAMETHOD wxSystemOptions_methods[] = {
    { LuaDelete,      "wxSystemOptions", wxSystemOptions_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxSystemOptions_Delete, 0, 0 },
    { LuaConstructor, "wxSystemOptions", wxSystemOptions_constructor, 0, 0 },
    { LuaMethod,      "GetOption", wxSystemOptions_GetOption, 1, 1 },
    { LuaMethod,      "GetOptionInt", wxSystemOptions_GetOptionInt, 1, 1 },
    { LuaMethod,      "HasOption", wxSystemOptions_HasOption, 1, 1 },
    { LuaMethod,      "SetOption", wxSystemOptions_SetOption, 2, 2 },
    { LuaMethod,      "SetOptionInt", wxSystemOptions_SetOptionInt, 2, 2 },
    { LuaGlobal,      "wxFileSelector", builtin_wxFileSelector, 1, 9 },
    { LuaGlobal,      "wxGetColourFromUser", builtin_wxGetColourFromUser, 2, 2 },
    { LuaGlobal,      "wxGetNumberFromUser", builtin_wxGetNumberFromUser, 4, 8 },
    { LuaGlobal,      "wxGetPasswordFromUser", builtin_wxGetPasswordFromUser, 1, 4 },
    { LuaGlobal,      "wxGetTextFromUser", builtin_wxGetTextFromUser, 1, 7 },
    { LuaGlobal,      "wxMessageBox", builtin_wxMessageBox, 1, 6 },
};

static WXLUAMETHOD wxDialog_methods[] = {
    { LuaDelete,      "wxDialog", wxDialog_destructor, 0, 0 },
    { LuaConstructor, "wxDialog", wxDialog_constructor, 3, 7 },
    { LuaConstructor, "wxEmptyDialog", wxEmptyDialog_constructor, 0, 0 },
    { LuaMethod,      "Centre", wxDialog_Centre, 0, 1 },
    { LuaMethod,      "Create", wxDialog_Create, 3, 7 },
    { LuaMethod,      "EndModal", wxDialog_EndModal, 1, 1 },
    { LuaMethod,      "GetReturnCode", wxDialog_GetReturnCode, 0, 0 },
    { LuaMethod,      "GetTitle", wxDialog_GetTitle, 0, 0 },
    { LuaMethod,      "Iconize", wxDialog_Iconize, 1, 1 },
    { LuaMethod,      "IsIconized", wxDialog_IsIconized, 0, 0 },
    { LuaMethod,      "IsModal", wxDialog_IsModal, 0, 0 },
    { LuaMethod,      "SetModal", wxDialog_SetModal, 1, 1 },
    { LuaMethod,      "SetReturnCode", wxDialog_SetReturnCode, 1, 1 },
    { LuaGetProp,     "ReturnCode", wxDialog_GetReturnCode, 0, 0 },
    { LuaSetProp,     "ReturnCode", wxDialog_SetReturnCode, 1, 1 },
    { LuaMethod,      "SetTitle", wxDialog_SetTitle, 1, 1 },
    { LuaGetProp,     "Title", wxDialog_GetTitle, 0, 0 },
    { LuaSetProp,     "Title", wxDialog_SetTitle, 1, 1 },
    { LuaMethod,      "Show", wxDialog_Show, 1, 1 },
    { LuaMethod,      "ShowModal", wxDialog_ShowModal, 0, 0 },
    { LuaMethod,      "SetIcon", wxDialog_SetIcon, 1, 1 },
};

static WXLUAMETHOD wxColourDialog_methods[] = {
    { LuaDelete,      "wxColourDialog", wxColourDialog_destructor, 0, 0 },
    { LuaConstructor, "wxColourDialog", wxColourDialog_constructor, 1, 2 },
    { LuaMethod,      "Create", wxColourDialog_Create, 1, 2 },
    { LuaMethod,      "GetColourData", wxColourDialog_GetColourData, 0, 0 },
    { LuaGetProp,     "ColourData", wxColourDialog_GetColourData, 0, 0 },
    { LuaMethod,      "ShowModal", wxColourDialog_ShowModal, 0, 0 },
};

static WXLUAMETHOD wxColourData_methods[] = {
    { LuaDelete,      "wxColourData", wxColourData_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxColourData_Delete, 0, 0 },
    { LuaConstructor, "wxColourData", wxColourData_constructor, 0, 0 },
    { LuaMethod,      "GetChooseFull", wxColourData_GetChooseFull, 0, 0 },
    { LuaMethod,      "GetColour", wxColourData_GetColour, 0, 0 },
    { LuaMethod,      "GetCustomColour", wxColourData_GetCustomColour, 1, 1 },
    { LuaMethod,      "SetChooseFull", wxColourData_SetChooseFull, 1, 1 },
    { LuaMethod,      "SetColour", wxColourData_SetColour, 1, 1 },
    { LuaGetProp,     "Colour", wxColourData_GetColour, 0, 0 },
    { LuaSetProp,     "Colour", wxColourData_SetColour, 1, 1 },
    { LuaGetProp,     "ChooseFull", wxColourData_GetChooseFull, 0, 0 },
    { LuaSetProp,     "ChooseFull", wxColourData_SetChooseFull, 1, 1 },
    { LuaMethod,      "SetCustomColour", wxColourData_SetCustomColour, 2, 2 },
};

static WXLUAMETHOD wxFileDialog_methods[] = {
    { LuaDelete,      "wxFileDialog", wxFileDialog_destructor, 0, 0 },
    { LuaConstructor, "wxFileDialog", wxFileDialog_constructor, 1, 7 },
    { LuaMethod,      "GetDirectory", wxFileDialog_GetDirectory, 0, 0 },
    { LuaMethod,      "GetFilename", wxFileDialog_GetFilename, 0, 0 },
    { LuaMethod,      "GetFilenames", wxFileDialog_GetFilenames, 1, 1 },
    { LuaMethod,      "GetFilterIndex", wxFileDialog_GetFilterIndex, 0, 0 },
    { LuaMethod,      "GetMessage", wxFileDialog_GetMessage, 0, 0 },
    { LuaMethod,      "GetPath", wxFileDialog_GetPath, 0, 0 },
    { LuaMethod,      "GetPaths", wxFileDialog_GetPaths, 1, 1 },
    { LuaMethod,      "GetStyle", wxFileDialog_GetStyle, 0, 0 },
    { LuaMethod,      "GetWildcard", wxFileDialog_GetWildcard, 0, 0 },
    { LuaMethod,      "SetDirectory", wxFileDialog_SetDirectory, 1, 1 },
    { LuaGetProp,     "Directory", wxFileDialog_GetDirectory, 0, 0 },
    { LuaSetProp,     "Directory", wxFileDialog_SetDirectory, 1, 1 },
    { LuaMethod,      "SetFilename", wxFileDialog_SetFilename, 1, 1 },
    { LuaGetProp,     "Filename", wxFileDialog_GetFilename, 0, 0 },
    { LuaSetProp,     "Filename", wxFileDialog_SetFilename, 1, 1 },
    { LuaMethod,      "SetFilterIndex", wxFileDialog_SetFilterIndex, 1, 1 },
    { LuaGetProp,     "FilterIndex", wxFileDialog_GetFilterIndex, 0, 0 },
    { LuaSetProp,     "FilterIndex", wxFileDialog_SetFilterIndex, 1, 1 },
    { LuaMethod,      "SetMessage", wxFileDialog_SetMessage, 1, 1 },
    { LuaGetProp,     "Message", wxFileDialog_GetMessage, 0, 0 },
    { LuaSetProp,     "Message", wxFileDialog_SetMessage, 1, 1 },
    { LuaMethod,      "SetPath", wxFileDialog_SetPath, 1, 1 },
    { LuaGetProp,     "Path", wxFileDialog_GetPath, 0, 0 },
    { LuaSetProp,     "Path", wxFileDialog_SetPath, 1, 1 },
    { LuaMethod,      "SetStyle", wxFileDialog_SetStyle, 1, 1 },
    { LuaGetProp,     "Style", wxFileDialog_GetStyle, 0, 0 },
    { LuaSetProp,     "Style", wxFileDialog_SetStyle, 1, 1 },
    { LuaMethod,      "SetWildcard", wxFileDialog_SetWildcard, 1, 1 },
    { LuaGetProp,     "Wildcard", wxFileDialog_GetWildcard, 0, 0 },
    { LuaSetProp,     "Wildcard", wxFileDialog_SetWildcard, 1, 1 },
    { LuaMethod,      "ShowModal", wxFileDialog_ShowModal, 0, 0 },
};

static WXLUAMETHOD wxDirDialog_methods[] = {
    { LuaDelete,      "wxDirDialog", wxDirDialog_destructor, 0, 0 },
    { LuaConstructor, "wxDirDialog", wxDirDialog_constructor, 1, 5 },
    { LuaMethod,      "GetPath", wxDirDialog_GetPath, 0, 0 },
    { LuaMethod,      "GetMessage", wxDirDialog_GetMessage, 0, 0 },
    { LuaMethod,      "GetStyle", wxDirDialog_GetStyle, 0, 0 },
    { LuaMethod,      "SetMessage", wxDirDialog_SetMessage, 1, 1 },
    { LuaGetProp,     "Message", wxDirDialog_GetMessage, 0, 0 },
    { LuaSetProp,     "Message", wxDirDialog_SetMessage, 1, 1 },
    { LuaMethod,      "SetPath", wxDirDialog_SetPath, 1, 1 },
    { LuaGetProp,     "Path", wxDirDialog_GetPath, 0, 0 },
    { LuaSetProp,     "Path", wxDirDialog_SetPath, 1, 1 },
    { LuaMethod,      "SetStyle", wxDirDialog_SetStyle, 1, 1 },
    { LuaGetProp,     "Style", wxDirDialog_GetStyle, 0, 0 },
    { LuaSetProp,     "Style", wxDirDialog_SetStyle, 1, 1 },
    { LuaMethod,      "ShowModal", wxDirDialog_ShowModal, 0, 0 },
};

static WXLUAMETHOD wxMessageDialog_methods[] = {
    { LuaDelete,      "wxMessageDialog", wxMessageDialog_destructor, 0, 0 },
    { LuaConstructor, "wxMessageDialog", wxMessageDialog_constructor, 2, 5 },
    { LuaMethod,      "ShowModal", wxMessageDialog_ShowModal, 0, 0 },
};

static WXLUAMETHOD wxSingleChoiceDialog_methods[] = {
    { LuaDelete,      "wxSingleChoiceDialog", wxSingleChoiceDialog_destructor, 0, 0 },
    { LuaMethod,      "GetSelection", wxSingleChoiceDialog_GetSelection, 0, 0 },
    { LuaMethod,      "GetStringSelection", wxSingleChoiceDialog_GetStringSelection, 0, 0 },
    { LuaGetProp,     "StringSelection", wxSingleChoiceDialog_GetStringSelection, 0, 0 },
    { LuaMethod,      "SetSelection", wxSingleChoiceDialog_SetSelection, 1, 1 },
    { LuaGetProp,     "Selection", wxSingleChoiceDialog_GetSelection, 0, 0 },
    { LuaSetProp,     "Selection", wxSingleChoiceDialog_SetSelection, 1, 1 },
    { LuaMethod,      "ShowModal", wxSingleChoiceDialog_ShowModal, 0, 0 },
};

static WXLUAMETHOD wxTextEntryDialog_methods[] = {
    { LuaDelete,      "wxTextEntryDialog", wxTextEntryDialog_destructor, 0, 0 },
    { LuaConstructor, "wxTextEntryDialog", wxTextEntryDialog_constructor, 2, 6 },
    { LuaMethod,      "GetValue", wxTextEntryDialog_GetValue, 0, 0 },
    { LuaMethod,      "SetValue", wxTextEntryDialog_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxTextEntryDialog_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxTextEntryDialog_SetValue, 1, 1 },
    { LuaMethod,      "ShowModal", wxTextEntryDialog_ShowModal, 0, 0 },
};

static WXLUAMETHOD wxFontDialog_methods[] = {
    { LuaDelete,      "wxFontDialog", wxFontDialog_destructor, 0, 0 },
    { LuaConstructor, "wxFontDialog", wxFontDialog_constructor, 1, 2 },
    { LuaMethod,      "GetFontData", wxFontDialog_GetFontData, 0, 0 },
    { LuaGetProp,     "FontData", wxFontDialog_GetFontData, 0, 0 },
    { LuaMethod,      "ShowModal", wxFontDialog_ShowModal, 0, 0 },
};

static WXLUAMETHOD wxFontData_methods[] = {
    { LuaDelete,      "wxFontData", wxFontData_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFontData_Delete, 0, 0 },
    { LuaConstructor, "wxFontData", wxFontData_constructor, 0, 0 },
    { LuaMethod,      "EnableEffects", wxFontData_EnableEffects, 1, 1 },
    { LuaMethod,      "GetAllowSymbols", wxFontData_GetAllowSymbols, 0, 0 },
    { LuaMethod,      "GetColour", wxFontData_GetColour, 0, 0 },
    { LuaMethod,      "GetChosenFont", wxFontData_GetChosenFont, 0, 0 },
    { LuaMethod,      "GetEnableEffects", wxFontData_GetEnableEffects, 0, 0 },
    { LuaMethod,      "GetInitialFont", wxFontData_GetInitialFont, 0, 0 },
    { LuaMethod,      "GetShowHelp", wxFontData_GetShowHelp, 0, 0 },
    { LuaMethod,      "SetAllowSymbols", wxFontData_SetAllowSymbols, 1, 1 },
    { LuaGetProp,     "AllowSymbols", wxFontData_GetAllowSymbols, 0, 0 },
    { LuaSetProp,     "AllowSymbols", wxFontData_SetAllowSymbols, 1, 1 },
    { LuaMethod,      "SetChosenFont", wxFontData_SetChosenFont, 1, 1 },
    { LuaGetProp,     "ChosenFont", wxFontData_GetChosenFont, 0, 0 },
    { LuaSetProp,     "ChosenFont", wxFontData_SetChosenFont, 1, 1 },
    { LuaMethod,      "SetColour", wxFontData_SetColour, 1, 1 },
    { LuaGetProp,     "Colour", wxFontData_GetColour, 0, 0 },
    { LuaSetProp,     "Colour", wxFontData_SetColour, 1, 1 },
    { LuaMethod,      "SetInitialFont", wxFontData_SetInitialFont, 1, 1 },
    { LuaMethod,      "SetRange", wxFontData_SetRange, 2, 2 },
    { LuaMethod,      "SetShowHelp", wxFontData_SetShowHelp, 1, 1 },
    { LuaGetProp,     "ShowHelp", wxFontData_GetShowHelp, 0, 0 },
    { LuaSetProp,     "ShowHelp", wxFontData_SetShowHelp, 1, 1 },
};

static WXLUAMETHOD wxFindReplaceDialog_methods[] = {
    { LuaDelete,      "wxFindReplaceDialog", wxFindReplaceDialog_destructor, 0, 0 },
    { LuaConstructor, "wxFindReplaceDialog", wxFindReplaceDialog_constructor, 3, 4 },
    { LuaConstructor, "wxFindReplaceDialogDefault", wxFindReplaceDialogDefault_constructor, 0, 0 },
    { LuaMethod,      "Create", wxFindReplaceDialog_Create, 3, 4 },
    { LuaMethod,      "GetData", wxFindReplaceDialog_GetData, 0, 0 },
    { LuaMethod,      "SetData", wxFindReplaceDialog_SetData, 1, 1 },
    { LuaGetProp,     "Data", wxFindReplaceDialog_GetData, 0, 0 },
    { LuaSetProp,     "Data", wxFindReplaceDialog_SetData, 1, 1 },
};

static WXLUAMETHOD wxFindReplaceData_methods[] = {
    { LuaDelete,      "wxFindReplaceData", wxFindReplaceData_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFindReplaceData_Delete, 0, 0 },
    { LuaConstructor, "wxFindReplaceData", wxFindReplaceData_constructor, 0, 1 },
    { LuaMethod,      "GetFlags", wxFindReplaceData_GetFlags, 0, 0 },
    { LuaMethod,      "GetFindString", wxFindReplaceData_GetFindString, 0, 0 },
    { LuaMethod,      "GetReplaceString", wxFindReplaceData_GetReplaceString, 0, 0 },
    { LuaMethod,      "SetFlags", wxFindReplaceData_SetFlags, 1, 1 },
    { LuaMethod,      "SetFindString", wxFindReplaceData_SetFindString, 1, 1 },
    { LuaGetProp,     "FindString", wxFindReplaceData_GetFindString, 0, 0 },
    { LuaSetProp,     "FindString", wxFindReplaceData_SetFindString, 1, 1 },
    { LuaMethod,      "SetReplaceString", wxFindReplaceData_SetReplaceString, 1, 1 },
    { LuaGetProp,     "ReplaceString", wxFindReplaceData_GetReplaceString, 0, 0 },
    { LuaSetProp,     "ReplaceString", wxFindReplaceData_SetReplaceString, 1, 1 },
};

static WXLUAMETHOD wxFindDialogEvent_methods[] = {
    { LuaDelete,      "wxFindDialogEvent", wxFindDialogEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFindDialogEvent_Delete, 0, 0 },
    { LuaConstructor, "wxFindDialogEvent", wxFindDialogEvent_constructor, 0, 2 },
    { LuaMethod,      "GetFlags", wxFindDialogEvent_GetFlags, 0, 0 },
    { LuaMethod,      "GetFindString", wxFindDialogEvent_GetFindString, 0, 0 },
    { LuaMethod,      "GetReplaceString", wxFindDialogEvent_GetReplaceString, 0, 0 },
    { LuaMethod,      "SetFlags", wxFindDialogEvent_SetFlags, 1, 1 },
    { LuaGetProp,     "Flags", wxFindDialogEvent_GetFlags, 0, 0 },
    { LuaSetProp,     "Flags", wxFindDialogEvent_SetFlags, 1, 1 },
    { LuaMethod,      "SetFindString", wxFindDialogEvent_SetFindString, 1, 1 },
    { LuaGetProp,     "FindString", wxFindDialogEvent_GetFindString, 0, 0 },
    { LuaSetProp,     "FindString", wxFindDialogEvent_SetFindString, 1, 1 },
    { LuaMethod,      "SetReplaceString", wxFindDialogEvent_SetReplaceString, 1, 1 },
    { LuaGetProp,     "ReplaceString", wxFindDialogEvent_GetReplaceString, 0, 0 },
    { LuaSetProp,     "ReplaceString", wxFindDialogEvent_SetReplaceString, 1, 1 },
    { LuaMethod,      "GetDialog", wxFindDialogEvent_GetDialog, 0, 0 },
    { LuaGetProp,     "Dialog", wxFindDialogEvent_GetDialog, 0, 0 },
};

static WXLUAMETHOD wxProgressDialog_methods[] = {
    { LuaDelete,      "wxProgressDialog", wxProgressDialog_destructor, 0, 0 },
    { LuaConstructor, "wxProgressDialog", wxProgressDialog_constructor, 2, 5 },
    { LuaMethod,      "Update", wxProgressDialog_Update, 0, 2 },
    { LuaMethod,      "Resume", wxProgressDialog_Resume, 0, 0 },
};

static WXLUAMETHOD wxPrintout_methods[] = {
    { LuaDelete,      "wxPrintout", wxPrintout_destructor, 0, 0 },
    { LuaMethod,      "GetDC", wxPrintout_GetDC, 0, 0 },
    { LuaMethod,      "GetPageSizeMM", wxPrintout_GetPageSizeMM, 2, 2 },
    { LuaMethod,      "GetPageSizePixels", wxPrintout_GetPageSizePixels, 2, 2 },
    { LuaMethod,      "GetPPIPrinter", wxPrintout_GetPPIPrinter, 2, 2 },
    { LuaMethod,      "GetPPIScreen", wxPrintout_GetPPIScreen, 2, 2 },
    { LuaMethod,      "IsPreview", wxPrintout_IsPreview, 0, 0 },
    { LuaMethod,      "HasPage", wxPrintout_HasPage, 1, 1 },
    { LuaMethod,      "OnBeginDocument", wxPrintout_OnBeginDocument, 2, 2 },
    { LuaMethod,      "OnEndDocument", wxPrintout_OnEndDocument, 0, 0 },
    { LuaMethod,      "OnBeginPrinting", wxPrintout_OnBeginPrinting, 0, 0 },
    { LuaMethod,      "OnEndPrinting", wxPrintout_OnEndPrinting, 0, 0 },
    { LuaMethod,      "OnPreparePrinting", wxPrintout_OnPreparePrinting, 0, 0 },
    { LuaMethod,      "OnPrintPage", wxPrintout_OnPrintPage, 1, 1 },
};

static WXLUAMETHOD wxPrinter_methods[] = {
    { LuaDelete,      "wxPrinter", wxPrinter_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPrinter_Delete, 0, 0 },
    { LuaConstructor, "wxPrinter", wxPrinter_constructor, 0, 1 },
    { LuaMethod,      "CreateAbortWindow", wxPrinter_CreateAbortWindow, 2, 2 },
    { LuaMethod,      "GetLastError", wxPrinter_GetLastError, 0, 0 },
    { LuaMethod,      "GetPrintDialogData", wxPrinter_GetPrintDialogData, 0, 0 },
    { LuaMethod,      "Print", wxPrinter_Print, 2, 3 },
    { LuaMethod,      "PrintDialog", wxPrinter_PrintDialog, 1, 1 },
    { LuaMethod,      "ReportError", wxPrinter_ReportError, 3, 3 },
    { LuaMethod,      "Setup", wxPrinter_Setup, 1, 1 },
};

static WXLUAMETHOD wxPrintData_methods[] = {
    { LuaDelete,      "wxPrintData", wxPrintData_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPrintData_Delete, 0, 0 },
    { LuaConstructor, "wxPrintData", wxPrintData_constructor, 0, 0 },
    { LuaMethod,      "Copy", wxPrintData_Copy, 0, 0 },
    { LuaMethod,      "GetCollate", wxPrintData_GetCollate, 0, 0 },
    { LuaMethod,      "GetColour", wxPrintData_GetColour, 0, 0 },
    { LuaMethod,      "GetDuplex", wxPrintData_GetDuplex, 0, 0 },
    { LuaMethod,      "GetNoCopies", wxPrintData_GetNoCopies, 0, 0 },
    { LuaMethod,      "GetOrientation", wxPrintData_GetOrientation, 0, 0 },
    { LuaMethod,      "GetPaperId", wxPrintData_GetPaperId, 0, 0 },
    { LuaMethod,      "GetPrinterName", wxPrintData_GetPrinterName, 0, 0 },
    { LuaMethod,      "GetQuality", wxPrintData_GetQuality, 0, 0 },
    { LuaMethod,      "GetPaperSize", wxPrintData_GetPaperSize, 0, 0 },
    { LuaMethod,      "GetPrinterCommand", wxPrintData_GetPrinterCommand, 0, 0 },
    { LuaMethod,      "GetPrinterOptions", wxPrintData_GetPrinterOptions, 0, 0 },
    { LuaMethod,      "GetPreviewCommand", wxPrintData_GetPreviewCommand, 0, 0 },
    { LuaMethod,      "GetFilename", wxPrintData_GetFilename, 0, 0 },
    { LuaMethod,      "GetFontMetricPath", wxPrintData_GetFontMetricPath, 0, 0 },
    { LuaMethod,      "GetPrinterScaleX", wxPrintData_GetPrinterScaleX, 0, 0 },
    { LuaMethod,      "GetPrinterScaleY", wxPrintData_GetPrinterScaleY, 0, 0 },
    { LuaMethod,      "GetPrinterTranslateX", wxPrintData_GetPrinterTranslateX, 0, 0 },
    { LuaMethod,      "GetPrinterTranslateY", wxPrintData_GetPrinterTranslateY, 0, 0 },
    { LuaMethod,      "GetPrintMode", wxPrintData_GetPrintMode, 0, 0 },
    { LuaMethod,      "SetCollate", wxPrintData_SetCollate, 1, 1 },
    { LuaGetProp,     "Collate", wxPrintData_GetCollate, 0, 0 },
    { LuaSetProp,     "Collate", wxPrintData_SetCollate, 1, 1 },
    { LuaMethod,      "SetColour", wxPrintData_SetColour, 1, 1 },
    { LuaGetProp,     "Colour", wxPrintData_GetColour, 0, 0 },
    { LuaSetProp,     "Colour", wxPrintData_SetColour, 1, 1 },
    { LuaMethod,      "SetDuplex", wxPrintData_SetDuplex, 1, 1 },
    { LuaGetProp,     "Duplex", wxPrintData_GetDuplex, 0, 0 },
    { LuaSetProp,     "Duplex", wxPrintData_SetDuplex, 1, 1 },
    { LuaMethod,      "SetNoCopies", wxPrintData_SetNoCopies, 1, 1 },
    { LuaGetProp,     "NoCopies", wxPrintData_GetNoCopies, 0, 0 },
    { LuaSetProp,     "NoCopies", wxPrintData_SetNoCopies, 1, 1 },
    { LuaMethod,      "SetOrientation", wxPrintData_SetOrientation, 1, 1 },
    { LuaGetProp,     "Orientation", wxPrintData_GetOrientation, 0, 0 },
    { LuaSetProp,     "Orientation", wxPrintData_SetOrientation, 1, 1 },
    { LuaMethod,      "SetPaperId", wxPrintData_SetPaperId, 1, 1 },
    { LuaGetProp,     "PaperId", wxPrintData_GetPaperId, 0, 0 },
    { LuaSetProp,     "PaperId", wxPrintData_SetPaperId, 1, 1 },
    { LuaMethod,      "SetPrinterName", wxPrintData_SetPrinterName, 1, 1 },
    { LuaGetProp,     "PrinterName", wxPrintData_GetPrinterName, 0, 0 },
    { LuaSetProp,     "PrinterName", wxPrintData_SetPrinterName, 1, 1 },
    { LuaMethod,      "SetQuality", wxPrintData_SetQuality, 1, 1 },
    { LuaGetProp,     "Quality", wxPrintData_GetQuality, 0, 0 },
    { LuaSetProp,     "Quality", wxPrintData_SetQuality, 1, 1 },
    { LuaMethod,      "SetPaperSize", wxPrintData_SetPaperSize, 1, 1 },
    { LuaGetProp,     "PaperSize", wxPrintData_GetPaperSize, 0, 0 },
    { LuaSetProp,     "PaperSize", wxPrintData_SetPaperSize, 1, 1 },
    { LuaMethod,      "SetPrinterCommand", wxPrintData_SetPrinterCommand, 1, 1 },
    { LuaGetProp,     "PrinterCommand", wxPrintData_GetPrinterCommand, 0, 0 },
    { LuaSetProp,     "PrinterCommand", wxPrintData_SetPrinterCommand, 1, 1 },
    { LuaMethod,      "SetPrinterOptions", wxPrintData_SetPrinterOptions, 1, 1 },
    { LuaGetProp,     "PrinterOptions", wxPrintData_GetPrinterOptions, 0, 0 },
    { LuaSetProp,     "PrinterOptions", wxPrintData_SetPrinterOptions, 1, 1 },
    { LuaMethod,      "SetPreviewCommand", wxPrintData_SetPreviewCommand, 1, 1 },
    { LuaGetProp,     "PreviewCommand", wxPrintData_GetPreviewCommand, 0, 0 },
    { LuaSetProp,     "PreviewCommand", wxPrintData_SetPreviewCommand, 1, 1 },
    { LuaMethod,      "SetFilename", wxPrintData_SetFilename, 1, 1 },
    { LuaGetProp,     "Filename", wxPrintData_GetFilename, 0, 0 },
    { LuaSetProp,     "Filename", wxPrintData_SetFilename, 1, 1 },
    { LuaMethod,      "SetFontMetricPath", wxPrintData_SetFontMetricPath, 1, 1 },
    { LuaGetProp,     "FontMetricPath", wxPrintData_GetFontMetricPath, 0, 0 },
    { LuaSetProp,     "FontMetricPath", wxPrintData_SetFontMetricPath, 1, 1 },
    { LuaMethod,      "SetPrinterScaleX", wxPrintData_SetPrinterScaleX, 1, 1 },
    { LuaGetProp,     "PrinterScaleX", wxPrintData_GetPrinterScaleX, 0, 0 },
    { LuaSetProp,     "PrinterScaleX", wxPrintData_SetPrinterScaleX, 1, 1 },
    { LuaMethod,      "SetPrinterScaleY", wxPrintData_SetPrinterScaleY, 1, 1 },
    { LuaGetProp,     "PrinterScaleY", wxPrintData_GetPrinterScaleY, 0, 0 },
    { LuaSetProp,     "PrinterScaleY", wxPrintData_SetPrinterScaleY, 1, 1 },
    { LuaMethod,      "SetPrinterScaling", wxPrintData_SetPrinterScaling, 2, 2 },
    { LuaMethod,      "SetPrinterTranslateX", wxPrintData_SetPrinterTranslateX, 1, 1 },
    { LuaGetProp,     "PrinterTranslateX", wxPrintData_GetPrinterTranslateX, 0, 0 },
    { LuaSetProp,     "PrinterTranslateX", wxPrintData_SetPrinterTranslateX, 1, 1 },
    { LuaMethod,      "SetPrinterTranslateY", wxPrintData_SetPrinterTranslateY, 1, 1 },
    { LuaGetProp,     "PrinterTranslateY", wxPrintData_GetPrinterTranslateY, 0, 0 },
    { LuaSetProp,     "PrinterTranslateY", wxPrintData_SetPrinterTranslateY, 1, 1 },
    { LuaMethod,      "SetPrinterTranslation", wxPrintData_SetPrinterTranslation, 2, 2 },
    { LuaGetProp,     "PrintMode", wxPrintData_GetPrintMode, 0, 0 },
    { LuaSetProp,     "PrintMode", wxPrintData_SetPrintMode, 1, 1 },
    { LuaMethod,      "SetPrintMode", wxPrintData_SetPrintMode, 1, 1 },
};

static WXLUAMETHOD wxPageSetupDialogData_methods[] = {
    { LuaDelete,      "wxPageSetupDialogData", wxPageSetupDialogData_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPageSetupDialogData_Delete, 0, 0 },
    { LuaConstructor, "wxPageSetupDialogData", wxPageSetupDialogData_constructor, 0, 0 },
    { LuaMethod,      "EnableHelp", wxPageSetupDialogData_EnableHelp, 1, 1 },
    { LuaMethod,      "EnableMargins", wxPageSetupDialogData_EnableMargins, 1, 1 },
    { LuaMethod,      "EnableOrientation", wxPageSetupDialogData_EnableOrientation, 1, 1 },
    { LuaMethod,      "EnablePaper", wxPageSetupDialogData_EnablePaper, 1, 1 },
    { LuaMethod,      "EnablePrinter", wxPageSetupDialogData_EnablePrinter, 1, 1 },
    { LuaMethod,      "GetDefaultMinMargins", wxPageSetupDialogData_GetDefaultMinMargins, 0, 0 },
    { LuaMethod,      "GetEnableMargins", wxPageSetupDialogData_GetEnableMargins, 0, 0 },
    { LuaGetProp,     "EnableMargins", wxPageSetupDialogData_GetEnableMargins, 0, 0 },
    { LuaMethod,      "GetEnableOrientation", wxPageSetupDialogData_GetEnableOrientation, 0, 0 },
    { LuaGetProp,     "EnableOrientation", wxPageSetupDialogData_GetEnableOrientation, 0, 0 },
    { LuaMethod,      "GetEnablePaper", wxPageSetupDialogData_GetEnablePaper, 0, 0 },
    { LuaGetProp,     "EnablePaper", wxPageSetupDialogData_GetEnablePaper, 0, 0 },
    { LuaMethod,      "GetEnablePrinter", wxPageSetupDialogData_GetEnablePrinter, 0, 0 },
    { LuaGetProp,     "EnablePrinter", wxPageSetupDialogData_GetEnablePrinter, 0, 0 },
    { LuaMethod,      "GetEnableHelp", wxPageSetupDialogData_GetEnableHelp, 0, 0 },
    { LuaGetProp,     "EnableHelp", wxPageSetupDialogData_GetEnableHelp, 0, 0 },
    { LuaMethod,      "GetDefaultInfo", wxPageSetupDialogData_GetDefaultInfo, 0, 0 },
    { LuaMethod,      "GetMarginTopLeft", wxPageSetupDialogData_GetMarginTopLeft, 0, 0 },
    { LuaMethod,      "GetMarginBottomRight", wxPageSetupDialogData_GetMarginBottomRight, 0, 0 },
    { LuaMethod,      "GetMinMarginTopLeft", wxPageSetupDialogData_GetMinMarginTopLeft, 0, 0 },
    { LuaMethod,      "GetMinMarginBottomRight", wxPageSetupDialogData_GetMinMarginBottomRight, 0, 0 },
    { LuaMethod,      "GetPaperId", wxPageSetupDialogData_GetPaperId, 0, 0 },
    { LuaMethod,      "GetPaperSize", wxPageSetupDialogData_GetPaperSize, 0, 0 },
    { LuaMethod,      "GetPrintData", wxPageSetupDialogData_GetPrintData, 0, 0 },
    { LuaMethod,      "SetDefaultInfo", wxPageSetupDialogData_SetDefaultInfo, 1, 1 },
    { LuaGetProp,     "DefaultInfo", wxPageSetupDialogData_GetDefaultInfo, 0, 0 },
    { LuaSetProp,     "DefaultInfo", wxPageSetupDialogData_SetDefaultInfo, 1, 1 },
    { LuaMethod,      "SetDefaultMinMargins", wxPageSetupDialogData_SetDefaultMinMargins, 1, 1 },
    { LuaGetProp,     "DefaultMinMargins", wxPageSetupDialogData_GetDefaultMinMargins, 0, 0 },
    { LuaSetProp,     "DefaultMinMargins", wxPageSetupDialogData_SetDefaultMinMargins, 1, 1 },
    { LuaMethod,      "SetMarginTopLeft", wxPageSetupDialogData_SetMarginTopLeft, 1, 1 },
    { LuaGetProp,     "MarginTopLeft", wxPageSetupDialogData_GetMarginTopLeft, 0, 0 },
    { LuaSetProp,     "MarginTopLeft", wxPageSetupDialogData_SetMarginTopLeft, 1, 1 },
    { LuaMethod,      "SetMarginBottomRight", wxPageSetupDialogData_SetMarginBottomRight, 1, 1 },
    { LuaGetProp,     "MarginBottomRight", wxPageSetupDialogData_GetMarginBottomRight, 0, 0 },
    { LuaSetProp,     "MarginBottomRight", wxPageSetupDialogData_SetMarginBottomRight, 1, 1 },
    { LuaMethod,      "SetMinMarginTopLeft", wxPageSetupDialogData_SetMinMarginTopLeft, 1, 1 },
    { LuaGetProp,     "MinMarginTopLeft", wxPageSetupDialogData_GetMinMarginTopLeft, 0, 0 },
    { LuaSetProp,     "MinMarginTopLeft", wxPageSetupDialogData_SetMinMarginTopLeft, 1, 1 },
    { LuaMethod,      "SetMinMarginBottomRight", wxPageSetupDialogData_SetMinMarginBottomRight, 1, 1 },
    { LuaGetProp,     "MinMarginBottomRight", wxPageSetupDialogData_GetMinMarginBottomRight, 0, 0 },
    { LuaSetProp,     "MinMarginBottomRight", wxPageSetupDialogData_SetMinMarginBottomRight, 1, 1 },
    { LuaMethod,      "SetPaperId", wxPageSetupDialogData_SetPaperId, 1, 1 },
    { LuaGetProp,     "PaperId", wxPageSetupDialogData_GetPaperId, 0, 0 },
    { LuaSetProp,     "PaperId", wxPageSetupDialogData_SetPaperId, 1, 1 },
    { LuaMethod,      "SetPaperSize", wxPageSetupDialogData_SetPaperSize, 1, 1 },
    { LuaGetProp,     "PaperSize", wxPageSetupDialogData_GetPaperSize, 0, 0 },
    { LuaSetProp,     "PaperSize", wxPageSetupDialogData_SetPaperSize, 1, 1 },
    { LuaMethod,      "SetPrintData", wxPageSetupDialogData_SetPrintData, 1, 1 },
    { LuaGetProp,     "PrintData", wxPageSetupDialogData_GetPrintData, 0, 0 },
    { LuaSetProp,     "PrintData", wxPageSetupDialogData_SetPrintData, 1, 1 },
    { LuaMethod,      "Copy", wxPageSetupDialogData_Copy, 0, 0 },
};

static WXLUAMETHOD wxPageSetupDialog_methods[] = {
    { LuaDelete,      "wxPageSetupDialog", wxPageSetupDialog_destructor, 0, 0 },
    { LuaConstructor, "wxPageSetupDialog", wxPageSetupDialog_constructor, 1, 2 },
    { LuaMethod,      "GetPageSetupData", wxPageSetupDialog_GetPageSetupData, 0, 0 },
    { LuaGetProp,     "PageSetupData", wxPageSetupDialog_GetPageSetupData, 0, 0 },
    { LuaMethod,      "ShowModal", wxPageSetupDialog_ShowModal, 0, 0 },
};

static WXLUAMETHOD wxPrintDialog_methods[] = {
    { LuaDelete,      "wxPrintDialog", wxPrintDialog_destructor, 0, 0 },
    { LuaConstructor, "wxPrintDialog", wxPrintDialog_constructor, 1, 2 },
    { LuaMethod,      "GetPrintDialogData", wxPrintDialog_GetPrintDialogData, 0, 0 },
    { LuaGetProp,     "PrintDialogData", wxPrintDialog_GetPrintDialogData, 0, 0 },
    { LuaMethod,      "GetPrintDC", wxPrintDialog_GetPrintDC, 0, 0 },
    { LuaGetProp,     "PrintDC", wxPrintDialog_GetPrintDC, 0, 0 },
    { LuaMethod,      "ShowModal", wxPrintDialog_ShowModal, 0, 0 },
};

static WXLUAMETHOD wxPrintDialogData_methods[] = {
    { LuaDelete,      "wxPrintDialogData", wxPrintDialogData_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPrintDialogData_Delete, 0, 0 },
    { LuaConstructor, "wxPrintDialogData", wxPrintDialogData_constructor, 0, 0 },
    { LuaConstructor, "wxPrintDialogDataFromDialogData", wxPrintDialogDataFromDialogData_constructor, 1, 1 },
    { LuaConstructor, "wxPrintDialogDataFromPrintData", wxPrintDialogDataFromPrintData_constructor, 1, 1 },
    { LuaMethod,      "EnableHelp", wxPrintDialogData_EnableHelp, 1, 1 },
    { LuaMethod,      "EnablePageNumbers", wxPrintDialogData_EnablePageNumbers, 1, 1 },
    { LuaMethod,      "EnablePrintToFile", wxPrintDialogData_EnablePrintToFile, 1, 1 },
    { LuaMethod,      "EnableSelection", wxPrintDialogData_EnableSelection, 1, 1 },
    { LuaMethod,      "GetAllPages", wxPrintDialogData_GetAllPages, 0, 0 },
    { LuaGetProp,     "AllPages", wxPrintDialogData_GetAllPages, 0, 0 },
    { LuaMethod,      "GetCollate", wxPrintDialogData_GetCollate, 0, 0 },
    { LuaMethod,      "GetFromPage", wxPrintDialogData_GetFromPage, 0, 0 },
    { LuaMethod,      "GetMinPage", wxPrintDialogData_GetMinPage, 0, 0 },
    { LuaMethod,      "GetMaxPage", wxPrintDialogData_GetMaxPage, 0, 0 },
    { LuaMethod,      "GetNoCopies", wxPrintDialogData_GetNoCopies, 0, 0 },
    { LuaMethod,      "GetPrintData", wxPrintDialogData_GetPrintData, 0, 0 },
    { LuaMethod,      "GetPrintToFile", wxPrintDialogData_GetPrintToFile, 0, 0 },
    { LuaMethod,      "GetToPage", wxPrintDialogData_GetToPage, 0, 0 },
    { LuaMethod,      "SetCollate", wxPrintDialogData_SetCollate, 1, 1 },
    { LuaGetProp,     "Collate", wxPrintDialogData_GetCollate, 0, 0 },
    { LuaSetProp,     "Collate", wxPrintDialogData_SetCollate, 1, 1 },
    { LuaMethod,      "SetFromPage", wxPrintDialogData_SetFromPage, 1, 1 },
    { LuaGetProp,     "FromPage", wxPrintDialogData_GetFromPage, 0, 0 },
    { LuaSetProp,     "FromPage", wxPrintDialogData_SetFromPage, 1, 1 },
    { LuaMethod,      "SetMinPage", wxPrintDialogData_SetMinPage, 1, 1 },
    { LuaGetProp,     "MinPage", wxPrintDialogData_GetMinPage, 0, 0 },
    { LuaSetProp,     "MinPage", wxPrintDialogData_SetMinPage, 1, 1 },
    { LuaMethod,      "SetMaxPage", wxPrintDialogData_SetMaxPage, 1, 1 },
    { LuaGetProp,     "MaxPage", wxPrintDialogData_GetMaxPage, 0, 0 },
    { LuaSetProp,     "MaxPage", wxPrintDialogData_SetMaxPage, 1, 1 },
    { LuaMethod,      "SetNoCopies", wxPrintDialogData_SetNoCopies, 1, 1 },
    { LuaGetProp,     "NoCopies", wxPrintDialogData_GetNoCopies, 0, 0 },
    { LuaSetProp,     "NoCopies", wxPrintDialogData_SetNoCopies, 1, 1 },
    { LuaMethod,      "SetPrintData", wxPrintDialogData_SetPrintData, 1, 1 },
    { LuaGetProp,     "PrintData", wxPrintDialogData_GetPrintData, 0, 0 },
    { LuaSetProp,     "PrintData", wxPrintDialogData_SetPrintData, 1, 1 },
    { LuaMethod,      "SetPrintToFile", wxPrintDialogData_SetPrintToFile, 1, 1 },
    { LuaGetProp,     "PrintToFile", wxPrintDialogData_GetPrintToFile, 0, 0 },
    { LuaSetProp,     "PrintToFile", wxPrintDialogData_SetPrintToFile, 1, 1 },
    { LuaMethod,      "SetSelection", wxPrintDialogData_SetSelection, 1, 1 },
    { LuaMethod,      "SetSetupDialog", wxPrintDialogData_SetSetupDialog, 1, 1 },
    { LuaMethod,      "SetToPage", wxPrintDialogData_SetToPage, 1, 1 },
    { LuaGetProp,     "ToPage", wxPrintDialogData_GetToPage, 0, 0 },
    { LuaSetProp,     "ToPage", wxPrintDialogData_SetToPage, 1, 1 },
};

static WXLUAMETHOD wxPreviewCanvas_methods[] = {
    { LuaDelete,      "wxPreviewCanvas", wxPreviewCanvas_destructor, 0, 0 },
    { LuaConstructor, "wxPreviewCanvas", wxPreviewCanvas_constructor, 2, 6 },
};

static WXLUAMETHOD wxPrintPreview_methods[] = {
    { LuaDelete,      "wxPrintPreview", wxPrintPreview_destructor, 0, 0 },
    { LuaConstructor, "wxPrintPreview", wxPrintPreview_constructor, 2, 3 },
    { LuaMethod,      "DrawBlankPage", wxPrintPreview_DrawBlankPage, 2, 2 },
    { LuaMethod,      "GetCanvas", wxPrintPreview_GetCanvas, 0, 0 },
    { LuaMethod,      "GetCurrentPage", wxPrintPreview_GetCurrentPage, 0, 0 },
    { LuaMethod,      "GetFrame", wxPrintPreview_GetFrame, 0, 0 },
    { LuaMethod,      "GetMaxPage", wxPrintPreview_GetMaxPage, 0, 0 },
    { LuaMethod,      "GetMinPage", wxPrintPreview_GetMinPage, 0, 0 },
    { LuaMethod,      "GetPrintout", wxPrintPreview_GetPrintout, 0, 0 },
    { LuaMethod,      "GetPrintoutForPrinting", wxPrintPreview_GetPrintoutForPrinting, 0, 0 },
    { LuaMethod,      "Ok", wxPrintPreview_Ok, 0, 0 },
    { LuaMethod,      "PaintPage", wxPrintPreview_PaintPage, 2, 2 },
    { LuaMethod,      "Print", wxPrintPreview_Print, 1, 1 },
    { LuaMethod,      "RenderPage", wxPrintPreview_RenderPage, 1, 1 },
    { LuaMethod,      "SetCanvas", wxPrintPreview_SetCanvas, 1, 1 },
    { LuaGetProp,     "Canvas", wxPrintPreview_GetCanvas, 0, 0 },
    { LuaSetProp,     "Canvas", wxPrintPreview_SetCanvas, 1, 1 },
    { LuaMethod,      "SetCurrentPage", wxPrintPreview_SetCurrentPage, 1, 1 },
    { LuaMethod,      "SetFrame", wxPrintPreview_SetFrame, 1, 1 },
    { LuaGetProp,     "Frame", wxPrintPreview_GetFrame, 0, 0 },
    { LuaSetProp,     "Frame", wxPrintPreview_SetFrame, 1, 1 },
    { LuaMethod,      "SetPrintout", wxPrintPreview_SetPrintout, 1, 1 },
    { LuaGetProp,     "Printout", wxPrintPreview_GetPrintout, 0, 0 },
    { LuaSetProp,     "Printout", wxPrintPreview_SetPrintout, 1, 1 },
    { LuaMethod,      "SetZoom", wxPrintPreview_SetZoom, 1, 1 },
};

static WXLUAMETHOD wxPreviewFrame_methods[] = {
    { LuaDelete,      "wxPreviewFrame", wxPreviewFrame_destructor, 0, 0 },
    { LuaConstructor, "wxPreviewFrame", wxPreviewFrame_constructor, 3, 7 },
    { LuaMethod,      "CreateControlBar", wxPreviewFrame_CreateControlBar, 0, 0 },
    { LuaMethod,      "CreateCanvas", wxPreviewFrame_CreateCanvas, 0, 0 },
    { LuaMethod,      "Initialize", wxPreviewFrame_Initialize, 0, 0 },
};

static WXLUAMETHOD wxPrinterDC_methods[] = {
    { LuaDelete,      "wxPrinterDC", wxPrinterDC_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPrinterDC_Delete, 0, 0 },
    { LuaConstructor, "wxPrinterDC", wxPrinterDC_constructor, 1, 1 },
};

static WXLUAMETHOD wxClipboard_methods[] = {
    { LuaDelete,      "wxClipboard", wxClipboard_destructor, 0, 0 },
    { LuaMethod,      "UsePrimarySelection", wxClipboard_UsePrimarySelection, 0, 1 },
    { LuaMethod,      "Flush", wxClipboard_Flush, 0, 0 },
    { LuaMethod,      "Clear", wxClipboard_Clear, 0, 0 },
    { LuaMethod,      "GetData", wxClipboard_GetData, 1, 1 },
    { LuaMethod,      "IsSupported", wxClipboard_IsSupported, 1, 1 },
    { LuaMethod,      "SetData", wxClipboard_SetData, 1, 1 },
    { LuaMethod,      "AddData", wxClipboard_AddData, 1, 1 },
    { LuaMethod,      "IsOpened", wxClipboard_IsOpened, 0, 0 },
    { LuaMethod,      "Close", wxClipboard_Close, 0, 0 },
    { LuaMethod,      "Open", wxClipboard_Open, 0, 0 },
};

static WXLUAMETHOD wxDataFormat_methods[] = {
    { LuaDelete,      "wxDataFormat", wxDataFormat_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxDataFormat_Delete, 0, 0 },
    { LuaConstructor, "wxDataFormat", wxDataFormat_constructor, 0, 1 },
    { LuaConstructor, "wxDataFormatUser", wxDataFormatUser_constructor, 1, 1 },
    { LuaMethod,      "GetId", wxDataFormat_GetId, 0, 0 },
    { LuaMethod,      "GetType", wxDataFormat_GetType, 0, 0 },
    { LuaMethod,      "SetId", wxDataFormat_SetId, 1, 1 },
    { LuaMethod,      "SetType", wxDataFormat_SetType, 1, 1 },
    { LuaGetProp,     "Id", wxDataFormat_GetId, 0, 0 },
    { LuaSetProp,     "Id", wxDataFormat_SetId, 1, 1 },
    { LuaGetProp,     "Type", wxDataFormat_GetType, 0, 0 },
    { LuaSetProp,     "Type", wxDataFormat_SetType, 1, 1 },
};

static WXLUAMETHOD wxDataObject_methods[] = {
    { LuaDelete,      "wxDataObject", wxDataObject_destructor, 0, 0 },
    { LuaMethod,      "GetAllFormats", wxDataObject_GetAllFormats, 1, 2 },
    { LuaMethod,      "GetDataHere", wxDataObject_GetDataHere, 2, 2 },
    { LuaMethod,      "GetDataSize", wxDataObject_GetDataSize, 1, 1 },
    { LuaMethod,      "GetFormatCount", wxDataObject_GetFormatCount, 0, 1 },
    { LuaMethod,      "GetPreferredFormat", wxDataObject_GetPreferredFormat, 0, 1 },
    { LuaMethod,      "SetData", wxDataObject_SetData, 3, 3 },
};

static WXLUAMETHOD wxDataObjectSimple_methods[] = {
    { LuaDelete,      "wxDataObjectSimple", wxDataObjectSimple_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxDataObjectSimple_Delete, 0, 0 },
    { LuaConstructor, "wxDataObjectSimple", wxDataObjectSimple_constructor, 0, 1 },
    { LuaMethod,      "GetFormat", wxDataObjectSimple_GetFormat, 0, 0 },
    { LuaMethod,      "SetFormat", wxDataObjectSimple_SetFormat, 1, 1 },
    { LuaGetProp,     "Format", wxDataObjectSimple_GetFormat, 0, 0 },
    { LuaSetProp,     "Format", wxDataObjectSimple_SetFormat, 1, 1 },
    { LuaMethod,      "GetDataSize", wxDataObjectSimple_GetDataSize, 0, 0 },
    { LuaGetProp,     "DataSize", wxDataObjectSimple_GetDataSize, 0, 0 },
    { LuaMethod,      "GetDataHere", wxDataObjectSimple_GetDataHere, 1, 1 },
    { LuaMethod,      "SetData", wxDataObjectSimple_SetData, 2, 2 },
};

static WXLUAMETHOD wxDataObjectComposite_methods[] = {
    { LuaDelete,      "wxDataObjectComposite", wxDataObjectComposite_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxDataObjectComposite_Delete, 0, 0 },
    { LuaConstructor, "wxDataObjectComposite", wxDataObjectComposite_constructor, 0, 0 },
    { LuaMethod,      "Add", wxDataObjectComposite_Add, 1, 2 },
};

static WXLUAMETHOD wxFileDataObject_methods[] = {
    { LuaDelete,      "wxFileDataObject", wxFileDataObject_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFileDataObject_Delete, 0, 0 },
    { LuaConstructor, "wxFileDataObject", wxFileDataObject_constructor, 0, 0 },
    { LuaMethod,      "GetFilenames", wxFileDataObject_GetFilenames, 0, 0 },
};

static WXLUAMETHOD wxTextDataObject_methods[] = {
    { LuaDelete,      "wxTextDataObject", wxTextDataObject_destructor, 0, 0 },
    { LuaConstructor, "wxTextDataObject", wxTextDataObject_constructor, 0, 1 },
    { LuaMethod,      "GetTextLength", wxTextDataObject_GetTextLength, 0, 0 },
    { LuaMethod,      "GetText", wxTextDataObject_GetText, 0, 0 },
    { LuaMethod,      "SetText", wxTextDataObject_SetText, 1, 1 },
};

static WXLUAMETHOD wxBitmapDataObject_methods[] = {
    { LuaDelete,      "wxBitmapDataObject", wxBitmapDataObject_destructor, 0, 0 },
    { LuaConstructor, "wxBitmapDataObject", wxBitmapDataObject_constructor, 0, 1 },
    { LuaMethod,      "GetBitmap", wxBitmapDataObject_GetBitmap, 0, 0 },
    { LuaMethod,      "SetBitmap", wxBitmapDataObject_SetBitmap, 1, 1 },
};

static WXLUAMETHOD wxCustomDataObject_methods[] = {
    { LuaDelete,      "wxCustomDataObject", wxCustomDataObject_destructor, 0, 0 },
    { LuaConstructor, "wxCustomDataObject", wxCustomDataObject_constructor, 0, 1 },
    { LuaMethod,      "TakeData", wxCustomDataObject_TakeData, 2, 2 },
    { LuaMethod,      "Alloc", wxCustomDataObject_Alloc, 1, 1 },
    { LuaMethod,      "Free", wxCustomDataObject_Free, 0, 0 },
    { LuaMethod,      "GetSize", wxCustomDataObject_GetSize, 0, 0 },
    { LuaMethod,      "GetData", wxCustomDataObject_GetData, 0, 0 },
    { LuaGlobal,      "wxIsDragResultOk", builtin_wxIsDragResultOk, 1, 1 },
};

static WXLUAMETHOD wxDropTarget_methods[] = {
    { LuaDelete,      "wxDropTarget", wxDropTarget_destructor, 0, 0 },
    { LuaMethod,      "GetData", wxDropTarget_GetData, 0, 0 },
    { LuaMethod,      "OnData", wxDropTarget_OnData, 3, 3 },
    { LuaMethod,      "OnDrop", wxDropTarget_OnDrop, 2, 2 },
    { LuaMethod,      "OnEnter", wxDropTarget_OnEnter, 3, 3 },
    { LuaMethod,      "OnDragOver", wxDropTarget_OnDragOver, 3, 3 },
    { LuaMethod,      "OnLeave", wxDropTarget_OnLeave, 0, 0 },
    { LuaMethod,      "SetDataObject", wxDropTarget_SetDataObject, 1, 1 },
};

static WXLUAMETHOD wxDropSource_methods[] = {
    { LuaDelete,      "wxDropSource", wxDropSource_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxDropSource_Delete, 0, 0 },
    { LuaConstructor, "wxDropSource", wxDropSource_constructor, 0, 4 },
    { LuaConstructor, "wxDropSourceData", wxDropSourceData_constructor, 1, 5 },
    { LuaMethod,      "SetData", wxDropSource_SetData, 1, 1 },
    { LuaMethod,      "DoDragDrop", wxDropSource_DoDragDrop, 0, 1 },
    { LuaMethod,      "GiveFeedback", wxDropSource_GiveFeedback, 1, 1 },
};

static WXLUAMETHOD wxDropFilesEvent_methods[] = {
    { LuaDelete,      "wxDropFilesEvent", wxDropFilesEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxDropFilesEvent_Delete, 0, 0 },
    { LuaMethod,      "GetFiles", wxDropFilesEvent_GetFiles, 0, 0 },
    { LuaMethod,      "GetNumberOfFiles", wxDropFilesEvent_GetNumberOfFiles, 0, 0 },
    { LuaMethod,      "GetPosition", wxDropFilesEvent_GetPosition, 0, 0 },
};

static WXLUAMETHOD wxMetafile_methods[] = {
    { LuaDelete,      "wxMetafile", wxMetafile_destructor, 0, 0 },
    { LuaConstructor, "wxMetafile", wxMetafile_constructor, 0, 1 },
    { LuaMethod,      "Ok", wxMetafile_Ok, 0, 0 },
    { LuaMethod,      "Play", wxMetafile_Play, 1, 1 },
    { LuaMethod,      "SetClipboard", wxMetafile_SetClipboard, 0, 2 },
};

static WXLUAMETHOD wxMetafileDC_methods[] = {
    { LuaDelete,      "wxMetafileDC", wxMetafileDC_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxMetafileDC_Delete, 0, 0 },
    { LuaConstructor, "wxMetafileDC", wxMetafileDC_constructor, 0, 1 },
    { LuaMethod,      "Close", wxMetafileDC_Close, 0, 0 },
};

static WXLUAMETHOD wxConfigBase_methods[] = {
    { LuaDelete,      "wxConfigBase", wxConfigBase_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxConfigBase_Delete, 0, 0 },
    { LuaConstructor, "wxConfigGet", wxConfigGet_constructor, 0, 1 },
    { LuaConstructor, "wxConfigCreate", wxConfigCreate_constructor, 0, 0 },
    { LuaMethod,      "Set", wxConfigBase_Set, 0, 1 },
    { LuaMethod,      "DontCreateOnDemand", wxConfigBase_DontCreateOnDemand, 0, 0 },
    { LuaMethod,      "Destroy", wxConfigBase_Destroy, 0, 0 },
    { LuaMethod,      "DeleteAll", wxConfigBase_DeleteAll, 0, 0 },
    { LuaMethod,      "DeleteEntry", wxConfigBase_DeleteEntry, 1, 2 },
    { LuaMethod,      "DeleteGroup", wxConfigBase_DeleteGroup, 1, 1 },
    { LuaMethod,      "Exists", wxConfigBase_Exists, 1, 1 },
    { LuaMethod,      "Flush", wxConfigBase_Flush, 0, 1 },
    { LuaMethod,      "GetAppName", wxConfigBase_GetAppName, 0, 0 },
    { LuaGetProp,     "AppName", wxConfigBase_GetAppName, 0, 0 },
    { LuaMethod,      "GetEntryType", wxConfigBase_GetEntryType, 1, 1 },
    { LuaMethod,      "GetFirstGroup", wxConfigBase_GetFirstGroup, 2, 2 },
    { LuaMethod,      "GetFirstEntry", wxConfigBase_GetFirstEntry, 2, 2 },
    { LuaMethod,      "GetNextGroup", wxConfigBase_GetNextGroup, 2, 2 },
    { LuaMethod,      "GetNextEntry", wxConfigBase_GetNextEntry, 2, 2 },
    { LuaMethod,      "GetNumberOfEntries", wxConfigBase_GetNumberOfEntries, 0, 1 },
    { LuaMethod,      "GetNumberOfGroups", wxConfigBase_GetNumberOfGroups, 0, 1 },
    { LuaMethod,      "GetPath", wxConfigBase_GetPath, 0, 0 },
    { LuaMethod,      "GetVendorName", wxConfigBase_GetVendorName, 0, 0 },
    { LuaGetProp,     "VendorName", wxConfigBase_GetVendorName, 0, 0 },
    { LuaMethod,      "HasEntry", wxConfigBase_HasEntry, 1, 1 },
    { LuaMethod,      "HasGroup", wxConfigBase_HasGroup, 1, 1 },
    { LuaMethod,      "IsExpandingEnvVars", wxConfigBase_IsExpandingEnvVars, 0, 0 },
    { LuaMethod,      "IsRecordingDefaults", wxConfigBase_IsRecordingDefaults, 0, 0 },
    { LuaMethod,      "Read", wxConfigBase_Read, 1, 2 },
    { LuaMethod,      "ReadInt", wxConfigBase_ReadInt, 1, 2 },
    { LuaMethod,      "ReadFloat", wxConfigBase_ReadFloat, 1, 2 },
    { LuaMethod,      "RenameEntry", wxConfigBase_RenameEntry, 2, 2 },
    { LuaMethod,      "RenameGroup", wxConfigBase_RenameGroup, 2, 2 },
    { LuaMethod,      "SetExpandEnvVars", wxConfigBase_SetExpandEnvVars, 0, 1 },
    { LuaMethod,      "SetPath", wxConfigBase_SetPath, 1, 1 },
    { LuaGetProp,     "Path", wxConfigBase_GetPath, 0, 0 },
    { LuaSetProp,     "Path", wxConfigBase_SetPath, 1, 1 },
    { LuaMethod,      "SetRecordDefaults", wxConfigBase_SetRecordDefaults, 0, 1 },
    { LuaMethod,      "Write", wxConfigBase_Write, 2, 2 },
    { LuaMethod,      "WriteInt", wxConfigBase_WriteInt, 2, 2 },
    { LuaMethod,      "WriteFloat", wxConfigBase_WriteFloat, 2, 2 },
};

static WXLUAMETHOD wxConfig_methods[] = {
    { LuaDelete,      "wxConfig", wxConfig_destructor, 0, 0 },
    { LuaConstructor, "wxConfig", wxConfig_constructor, 0, 5 },
};

static WXLUAMETHOD wxButton_methods[] = {
    { LuaDelete,      "wxButton", wxButton_destructor, 0, 0 },
    { LuaConstructor, "wxButton", wxButton_constructor, 3, 8 },
    { LuaMethod,      "Create", wxButton_Create, 3, 8 },
    { LuaMethod,      "GetLabel", wxButton_GetLabel, 0, 0 },
    { LuaMethod,      "GetDefaultSize", wxButton_GetDefaultSize, 0, 0 },
    { LuaGetProp,     "DefaultSize", wxButton_GetDefaultSize, 0, 0 },
    { LuaMethod,      "SetDefault", wxButton_SetDefault, 0, 0 },
    { LuaMethod,      "SetLabel", wxButton_SetLabel, 1, 1 },
    { LuaGetProp,     "Label", wxButton_GetLabel, 0, 0 },
    { LuaSetProp,     "Label", wxButton_SetLabel, 1, 1 },
};

static WXLUAMETHOD wxBitmapButton_methods[] = {
    { LuaDelete,      "wxBitmapButton", wxBitmapButton_destructor, 0, 0 },
    { LuaConstructor, "wxBitmapButton", wxBitmapButton_constructor, 3, 8 },
    { LuaMethod,      "Create", wxBitmapButton_Create, 4, 8 },
    { LuaMethod,      "GetBitmapDisabled", wxBitmapButton_GetBitmapDisabled, 0, 0 },
    { LuaMethod,      "GetBitmapFocus", wxBitmapButton_GetBitmapFocus, 0, 0 },
    { LuaMethod,      "GetBitmapLabel", wxBitmapButton_GetBitmapLabel, 0, 0 },
    { LuaMethod,      "GetBitmapSelected", wxBitmapButton_GetBitmapSelected, 0, 0 },
    { LuaMethod,      "SetBitmapDisabled", wxBitmapButton_SetBitmapDisabled, 1, 1 },
    { LuaMethod,      "SetBitmapFocus", wxBitmapButton_SetBitmapFocus, 1, 1 },
    { LuaMethod,      "SetBitmapLabel", wxBitmapButton_SetBitmapLabel, 1, 1 },
    { LuaMethod,      "SetBitmapSelected", wxBitmapButton_SetBitmapSelected, 1, 1 },
    { LuaGetProp,     "BitmapDisabled", wxBitmapButton_GetBitmapDisabled, 0, 0 },
    { LuaSetProp,     "BitmapDisabled", wxBitmapButton_SetBitmapDisabled, 1, 1 },
    { LuaGetProp,     "BitmapFocus", wxBitmapButton_GetBitmapFocus, 0, 0 },
    { LuaSetProp,     "BitmapFocus", wxBitmapButton_SetBitmapFocus, 1, 1 },
    { LuaGetProp,     "BitmapLabel", wxBitmapButton_GetBitmapLabel, 0, 0 },
    { LuaSetProp,     "BitmapLabel", wxBitmapButton_SetBitmapLabel, 1, 1 },
    { LuaGetProp,     "BitmapSelected", wxBitmapButton_GetBitmapSelected, 0, 0 },
    { LuaSetProp,     "BitmapSelected", wxBitmapButton_SetBitmapSelected, 1, 1 },
};

static WXLUAMETHOD wxCheckBox_methods[] = {
    { LuaDelete,      "wxCheckBox", wxCheckBox_destructor, 0, 0 },
    { LuaConstructor, "wxCheckBox", wxCheckBox_constructor, 3, 8 },
    { LuaMethod,      "Create", wxCheckBox_Create, 3, 8 },
    { LuaMethod,      "GetValue", wxCheckBox_GetValue, 0, 0 },
    { LuaMethod,      "SetValue", wxCheckBox_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxCheckBox_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxCheckBox_SetValue, 1, 1 },
    { LuaMethod,      "IsChecked", wxCheckBox_IsChecked, 0, 0 },
};

static WXLUAMETHOD wxChoice_methods[] = {
    { LuaDelete,      "wxChoice", wxChoice_destructor, 0, 0 },
    { LuaConstructor, "wxChoice", wxChoice_constructor, 2, 9 },
    { LuaMethod,      "Append", wxChoice_Append, 1, 1 },
    { LuaMethod,      "Clear", wxChoice_Clear, 0, 0 },
    { LuaMethod,      "Create", wxChoice_Create, 2, 9 },
    { LuaMethod,      "FindString", wxChoice_FindString, 1, 1 },
    { LuaMethod,      "GetClientData", wxChoice_GetClientData, 1, 1 },
    { LuaMethod,      "GetSelection", wxChoice_GetSelection, 0, 0 },
    { LuaMethod,      "GetString", wxChoice_GetString, 1, 1 },
    { LuaMethod,      "GetStringSelection", wxChoice_GetStringSelection, 0, 0 },
    { LuaMethod,      "GetCount", wxChoice_GetCount, 0, 0 },
    { LuaGetProp,     "Count", wxChoice_GetCount, 0, 0 },
    { LuaMethod,      "SetClientData", wxChoice_SetClientData, 2, 2 },
    { LuaMethod,      "SetSelection", wxChoice_SetSelection, 1, 1 },
    { LuaGetProp,     "Selection", wxChoice_GetSelection, 0, 0 },
    { LuaSetProp,     "Selection", wxChoice_SetSelection, 1, 1 },
    { LuaMethod,      "SetStringSelection", wxChoice_SetStringSelection, 1, 1 },
    { LuaGetProp,     "StringSelection", wxChoice_GetStringSelection, 0, 0 },
    { LuaSetProp,     "StringSelection", wxChoice_SetStringSelection, 1, 1 },
};

static WXLUAMETHOD wxComboBox_methods[] = {
    { LuaDelete,      "wxComboBox", wxComboBox_destructor, 0, 0 },
    { LuaConstructor, "wxComboBox", wxComboBox_constructor, 2, 10 },
    { LuaMethod,      "Append", wxComboBox_Append, 1, 1 },
    { LuaMethod,      "Clear", wxComboBox_Clear, 0, 0 },
    { LuaMethod,      "Create", wxComboBox_Create, 2, 10 },
    { LuaMethod,      "Copy", wxComboBox_Copy, 0, 0 },
    { LuaMethod,      "Cut", wxComboBox_Cut, 0, 0 },
    { LuaMethod,      "Delete", wxComboBox_Delete, 1, 1 },
    { LuaMethod,      "FindString", wxComboBox_FindString, 1, 1 },
    { LuaMethod,      "GetClientData", wxComboBox_GetClientData, 1, 1 },
    { LuaMethod,      "GetInsertionPoint", wxComboBox_GetInsertionPoint, 0, 0 },
    { LuaMethod,      "GetLastPosition", wxComboBox_GetLastPosition, 0, 0 },
    { LuaMethod,      "GetSelection", wxComboBox_GetSelection, 0, 0 },
    { LuaMethod,      "GetString", wxComboBox_GetString, 1, 1 },
    { LuaMethod,      "GetStringSelection", wxComboBox_GetStringSelection, 0, 0 },
    { LuaGetProp,     "StringSelection", wxComboBox_GetStringSelection, 0, 0 },
    { LuaMethod,      "GetValue", wxComboBox_GetValue, 0, 0 },
    { LuaMethod,      "GetCount", wxComboBox_GetCount, 0, 0 },
    { LuaGetProp,     "Count", wxComboBox_GetCount, 0, 0 },
    { LuaMethod,      "Paste", wxComboBox_Paste, 0, 0 },
    { LuaMethod,      "Replace", wxComboBox_Replace, 3, 3 },
    { LuaMethod,      "Remove", wxComboBox_Remove, 2, 2 },
    { LuaMethod,      "SetClientData", wxComboBox_SetClientData, 2, 2 },
    { LuaMethod,      "SetInsertionPoint", wxComboBox_SetInsertionPoint, 1, 1 },
    { LuaGetProp,     "InsertionPoint", wxComboBox_GetInsertionPoint, 0, 0 },
    { LuaSetProp,     "InsertionPoint", wxComboBox_SetInsertionPoint, 1, 1 },
    { LuaMethod,      "SetInsertionPointEnd", wxComboBox_SetInsertionPointEnd, 0, 0 },
    { LuaMethod,      "SetSelection", wxComboBox_SetSelection, 1, 1 },
    { LuaGetProp,     "Selection", wxComboBox_GetSelection, 0, 0 },
    { LuaSetProp,     "Selection", wxComboBox_SetSelection, 1, 1 },
    { LuaMethod,      "SetMark", wxComboBox_SetMark, 2, 2 },
    { LuaMethod,      "SetValue", wxComboBox_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxComboBox_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxComboBox_SetValue, 1, 1 },
};

static WXLUAMETHOD wxGauge_methods[] = {
    { LuaDelete,      "wxGauge", wxGauge_destructor, 0, 0 },
    { LuaConstructor, "wxGauge", wxGauge_constructor, 3, 8 },
    { LuaMethod,      "Create", wxGauge_Create, 3, 8 },
    { LuaMethod,      "GetBezelFace", wxGauge_GetBezelFace, 0, 0 },
    { LuaMethod,      "GetRange", wxGauge_GetRange, 0, 0 },
    { LuaMethod,      "GetShadowWidth", wxGauge_GetShadowWidth, 0, 0 },
    { LuaMethod,      "GetValue", wxGauge_GetValue, 0, 0 },
    { LuaMethod,      "SetBezelFace", wxGauge_SetBezelFace, 1, 1 },
    { LuaGetProp,     "BezelFace", wxGauge_GetBezelFace, 0, 0 },
    { LuaSetProp,     "BezelFace", wxGauge_SetBezelFace, 1, 1 },
    { LuaMethod,      "SetRange", wxGauge_SetRange, 1, 1 },
    { LuaGetProp,     "Range", wxGauge_GetRange, 0, 0 },
    { LuaSetProp,     "Range", wxGauge_SetRange, 1, 1 },
    { LuaMethod,      "SetShadowWidth", wxGauge_SetShadowWidth, 1, 1 },
    { LuaGetProp,     "ShadowWidth", wxGauge_GetShadowWidth, 0, 0 },
    { LuaSetProp,     "ShadowWidth", wxGauge_SetShadowWidth, 1, 1 },
    { LuaMethod,      "SetValue", wxGauge_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxGauge_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxGauge_SetValue, 1, 1 },
};

static WXLUAMETHOD wxListBox_methods[] = {
    { LuaDelete,      "wxListBox", wxListBox_destructor, 0, 0 },
    { LuaConstructor, "wxListBox", wxListBox_constructor, 2, 9 },
    { LuaMethod,      "Append", wxListBox_Append, 1, 1 },
    { LuaMethod,      "Clear", wxListBox_Clear, 0, 0 },
    { LuaMethod,      "Create", wxListBox_Create, 2, 9 },
    { LuaMethod,      "Delete", wxListBox_Delete, 1, 1 },
    { LuaMethod,      "Deselect", wxListBox_Deselect, 1, 1 },
    { LuaMethod,      "FindString", wxListBox_FindString, 1, 1 },
    { LuaMethod,      "GetClientData", wxListBox_GetClientData, 1, 1 },
    { LuaMethod,      "GetSelection", wxListBox_GetSelection, 0, 0 },
    { LuaGetProp,     "Selection", wxListBox_GetSelection, 0, 0 },
    { LuaMethod,      "GetSelections", wxListBox_GetSelections, 1, 1 },
    { LuaMethod,      "GetString", wxListBox_GetString, 1, 1 },
    { LuaMethod,      "GetStringSelection", wxListBox_GetStringSelection, 0, 0 },
    { LuaGetProp,     "StringSelection", wxListBox_GetStringSelection, 0, 0 },
    { LuaMethod,      "GetCount", wxListBox_GetCount, 0, 0 },
    { LuaGetProp,     "Count", wxListBox_GetCount, 0, 0 },
    { LuaMethod,      "Selected", wxListBox_Selected, 1, 1 },
    { LuaMethod,      "SetClientData", wxListBox_SetClientData, 2, 2 },
    { LuaMethod,      "SetFirstItem", wxListBox_SetFirstItem, 1, 1 },
    { LuaMethod,      "SetSelection", wxListBox_SetSelection, 1, 2 },
    { LuaMethod,      "SetString", wxListBox_SetString, 2, 2 },
    { LuaMethod,      "SetStringSelection", wxListBox_SetStringSelection, 1, 2 },
};

static WXLUAMETHOD wxCheckListBox_methods[] = {
    { LuaDelete,      "wxCheckListBox", wxCheckListBox_destructor, 0, 0 },
    { LuaConstructor, "wxCheckListBox", wxCheckListBox_constructor, 2, 9 },
    { LuaMethod,      "Check", wxCheckListBox_Check, 1, 2 },
    { LuaMethod,      "IsChecked", wxCheckListBox_IsChecked, 1, 1 },
};

static WXLUAMETHOD wxListCtrl_methods[] = {
    { LuaDelete,      "wxListCtrl", wxListCtrl_destructor, 0, 0 },
    { LuaConstructor, "wxListCtrl", wxListCtrl_constructor, 2, 7 },
    { LuaMethod,      "Arrange", wxListCtrl_Arrange, 0, 1 },
    { LuaMethod,      "AssignImageList", wxListCtrl_AssignImageList, 2, 2 },
    { LuaMethod,      "ClearAll", wxListCtrl_ClearAll, 0, 0 },
    { LuaMethod,      "Create", wxListCtrl_Create, 2, 7 },
    { LuaMethod,      "DeleteAllItems", wxListCtrl_DeleteAllItems, 0, 0 },
    { LuaMethod,      "DeleteColumn", wxListCtrl_DeleteColumn, 1, 1 },
    { LuaMethod,      "DeleteItem", wxListCtrl_DeleteItem, 1, 1 },
    { LuaMethod,      "EditLabel", wxListCtrl_EditLabel, 1, 1 },
    { LuaMethod,      "EnsureVisible", wxListCtrl_EnsureVisible, 1, 1 },
    { LuaMethod,      "FindItem", wxListCtrl_FindItem, 2, 3 },
    { LuaMethod,      "FindItemData", wxListCtrl_FindItemData, 2, 2 },
    { LuaMethod,      "FindItemAtPos", wxListCtrl_FindItemAtPos, 3, 3 },
    { LuaMethod,      "GetColumn", wxListCtrl_GetColumn, 2, 2 },
    { LuaMethod,      "GetColumnWidth", wxListCtrl_GetColumnWidth, 1, 1 },
    { LuaMethod,      "GetCountPerPage", wxListCtrl_GetCountPerPage, 0, 0 },
    { LuaGetProp,     "CountPerPage", wxListCtrl_GetCountPerPage, 0, 0 },
    { LuaMethod,      "GetImageList", wxListCtrl_GetImageList, 1, 1 },
    { LuaMethod,      "GetItem", wxListCtrl_GetItem, 1, 1 },
    { LuaMethod,      "GetItemData", wxListCtrl_GetItemData, 1, 1 },
    { LuaMethod,      "GetItemPosition", wxListCtrl_GetItemPosition, 2, 2 },
    { LuaMethod,      "GetItemRect", wxListCtrl_GetItemRect, 2, 3 },
    { LuaMethod,      "GetItemState", wxListCtrl_GetItemState, 2, 2 },
    { LuaMethod,      "GetItemCount", wxListCtrl_GetItemCount, 0, 0 },
    { LuaGetProp,     "ItemCount", wxListCtrl_GetItemCount, 0, 0 },
    { LuaMethod,      "GetItemSpacing", wxListCtrl_GetItemSpacing, 1, 1 },
    { LuaMethod,      "GetItemText", wxListCtrl_GetItemText, 1, 1 },
    { LuaMethod,      "GetNextItem", wxListCtrl_GetNextItem, 1, 3 },
    { LuaMethod,      "GetSelectedItemCount", wxListCtrl_GetSelectedItemCount, 0, 0 },
    { LuaGetProp,     "SelectedItemCount", wxListCtrl_GetSelectedItemCount, 0, 0 },
    { LuaMethod,      "GetTextColour", wxListCtrl_GetTextColour, 0, 0 },
    { LuaMethod,      "GetTopItem", wxListCtrl_GetTopItem, 0, 0 },
    { LuaGetProp,     "TopItem", wxListCtrl_GetTopItem, 0, 0 },
    { LuaMethod,      "HitTest", wxListCtrl_HitTest, 2, 2 },
    { LuaMethod,      "InsertColumn", wxListCtrl_InsertColumn, 2, 2 },
    { LuaMethod,      "InsertColumnInfo", wxListCtrl_InsertColumnInfo, 2, 4 },
    { LuaMethod,      "InsertItem", wxListCtrl_InsertItem, 1, 1 },
    { LuaMethod,      "InsertStringItem", wxListCtrl_InsertStringItem, 2, 2 },
    { LuaMethod,      "InsertImageItem", wxListCtrl_InsertImageItem, 2, 2 },
    { LuaMethod,      "InsertImageStringItem", wxListCtrl_InsertImageStringItem, 3, 3 },
    { LuaMethod,      "ScrollList", wxListCtrl_ScrollList, 2, 2 },
    { LuaMethod,      "SetBackgroundColour", wxListCtrl_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "SetColumn", wxListCtrl_SetColumn, 2, 2 },
    { LuaMethod,      "SetColumnWidth", wxListCtrl_SetColumnWidth, 2, 2 },
    { LuaMethod,      "SetImageList", wxListCtrl_SetImageList, 2, 2 },
    { LuaMethod,      "SetItem", wxListCtrl_SetItem, 1, 1 },
    { LuaMethod,      "SetStringItem", wxListCtrl_SetStringItem, 3, 4 },
    { LuaMethod,      "SetItemData", wxListCtrl_SetItemData, 2, 2 },
    { LuaMethod,      "SetItemImage", wxListCtrl_SetItemImage, 3, 3 },
    { LuaMethod,      "SetItemPosition", wxListCtrl_SetItemPosition, 2, 2 },
    { LuaMethod,      "SetItemState", wxListCtrl_SetItemState, 3, 3 },
    { LuaMethod,      "SetItemText", wxListCtrl_SetItemText, 2, 2 },
    { LuaMethod,      "SetSingleStyle", wxListCtrl_SetSingleStyle, 1, 2 },
    { LuaMethod,      "SetTextColour", wxListCtrl_SetTextColour, 1, 1 },
    { LuaGetProp,     "TextColour", wxListCtrl_GetTextColour, 0, 0 },
    { LuaSetProp,     "TextColour", wxListCtrl_SetTextColour, 1, 1 },
    { LuaMethod,      "SetWindowStyleFlag", wxListCtrl_SetWindowStyleFlag, 1, 1 },
};

static WXLUAMETHOD wxListItemAttr_methods[] = {
    { LuaDelete,      "wxListItemAttr", wxListItemAttr_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxListItemAttr_Delete, 0, 0 },
    { LuaConstructor, "wxListItemAttr", wxListItemAttr_constructor, 0, 3 },
    { LuaMethod,      "SetTextColour", wxListItemAttr_SetTextColour, 1, 1 },
    { LuaMethod,      "SetBackgroundColour", wxListItemAttr_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "SetFont", wxListItemAttr_SetFont, 1, 1 },
    { LuaMethod,      "HasTextColour", wxListItemAttr_HasTextColour, 0, 0 },
    { LuaMethod,      "HasBackgroundColour", wxListItemAttr_HasBackgroundColour, 0, 0 },
    { LuaMethod,      "HasFont", wxListItemAttr_HasFont, 0, 0 },
    { LuaMethod,      "GetTextColour", wxListItemAttr_GetTextColour, 0, 0 },
    { LuaGetProp,     "TextColour", wxListItemAttr_GetTextColour, 0, 0 },
    { LuaSetProp,     "TextColour", wxListItemAttr_SetTextColour, 1, 1 },
    { LuaMethod,      "GetBackgroundColour", wxListItemAttr_GetBackgroundColour, 0, 0 },
    { LuaGetProp,     "BackgroundColour", wxListItemAttr_GetBackgroundColour, 0, 0 },
    { LuaSetProp,     "BackgroundColour", wxListItemAttr_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "GetFont", wxListItemAttr_GetFont, 0, 0 },
    { LuaGetProp,     "Font", wxListItemAttr_GetFont, 0, 0 },
    { LuaSetProp,     "Font", wxListItemAttr_SetFont, 1, 1 },
};

static WXLUAMETHOD wxListItem_methods[] = {
    { LuaDelete,      "wxListItem", wxListItem_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxListItem_Delete, 0, 0 },
    { LuaConstructor, "wxListItem", wxListItem_constructor, 0, 0 },
    { LuaMethod,      "Clear", wxListItem_Clear, 0, 0 },
    { LuaMethod,      "ClearAttributes", wxListItem_ClearAttributes, 0, 0 },
    { LuaMethod,      "SetMask", wxListItem_SetMask, 1, 1 },
    { LuaMethod,      "SetId", wxListItem_SetId, 1, 1 },
    { LuaMethod,      "SetColumn", wxListItem_SetColumn, 1, 1 },
    { LuaMethod,      "SetState", wxListItem_SetState, 1, 1 },
    { LuaMethod,      "SetStateMask", wxListItem_SetStateMask, 1, 1 },
    { LuaMethod,      "SetText", wxListItem_SetText, 1, 1 },
    { LuaMethod,      "SetImage", wxListItem_SetImage, 1, 1 },
    { LuaMethod,      "SetData", wxListItem_SetData, 1, 1 },
    { LuaMethod,      "SetWidth", wxListItem_SetWidth, 1, 1 },
    { LuaMethod,      "SetAlign", wxListItem_SetAlign, 1, 1 },
    { LuaMethod,      "SetTextColour", wxListItem_SetTextColour, 1, 1 },
    { LuaMethod,      "SetBackgroundColour", wxListItem_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "SetFont", wxListItem_SetFont, 1, 1 },
    { LuaMethod,      "GetMask", wxListItem_GetMask, 0, 0 },
    { LuaGetProp,     "Mask", wxListItem_GetMask, 0, 0 },
    { LuaSetProp,     "Mask", wxListItem_SetMask, 1, 1 },
    { LuaMethod,      "GetId", wxListItem_GetId, 0, 0 },
    { LuaGetProp,     "Id", wxListItem_GetId, 0, 0 },
    { LuaSetProp,     "Id", wxListItem_SetId, 1, 1 },
    { LuaMethod,      "GetColumn", wxListItem_GetColumn, 0, 0 },
    { LuaGetProp,     "Column", wxListItem_GetColumn, 0, 0 },
    { LuaSetProp,     "Column", wxListItem_SetColumn, 1, 1 },
    { LuaMethod,      "GetState", wxListItem_GetState, 0, 0 },
    { LuaGetProp,     "State", wxListItem_GetState, 0, 0 },
    { LuaSetProp,     "State", wxListItem_SetState, 1, 1 },
    { LuaMethod,      "GetText", wxListItem_GetText, 0, 0 },
    { LuaGetProp,     "Text", wxListItem_GetText, 0, 0 },
    { LuaSetProp,     "Text", wxListItem_SetText, 1, 1 },
    { LuaMethod,      "GetImage", wxListItem_GetImage, 0, 0 },
    { LuaGetProp,     "Image", wxListItem_GetImage, 0, 0 },
    { LuaSetProp,     "Image", wxListItem_SetImage, 1, 1 },
    { LuaMethod,      "GetData", wxListItem_GetData, 0, 0 },
    { LuaGetProp,     "Data", wxListItem_GetData, 0, 0 },
    { LuaSetProp,     "Data", wxListItem_SetData, 1, 1 },
    { LuaMethod,      "GetWidth", wxListItem_GetWidth, 0, 0 },
    { LuaGetProp,     "Width", wxListItem_GetWidth, 0, 0 },
    { LuaSetProp,     "Width", wxListItem_SetWidth, 1, 1 },
    { LuaMethod,      "GetAlign", wxListItem_GetAlign, 0, 0 },
    { LuaGetProp,     "Align", wxListItem_GetAlign, 0, 0 },
    { LuaSetProp,     "Align", wxListItem_SetAlign, 1, 1 },
    { LuaMethod,      "GetAttributes", wxListItem_GetAttributes, 0, 0 },
    { LuaMethod,      "HasAttributes", wxListItem_HasAttributes, 0, 0 },
    { LuaMethod,      "GetTextColour", wxListItem_GetTextColour, 0, 0 },
    { LuaGetProp,     "TextColour", wxListItem_GetTextColour, 0, 0 },
    { LuaSetProp,     "TextColour", wxListItem_SetTextColour, 1, 1 },
    { LuaMethod,      "GetBackgroundColour", wxListItem_GetBackgroundColour, 0, 0 },
    { LuaGetProp,     "BackgroundColour", wxListItem_GetBackgroundColour, 0, 0 },
    { LuaSetProp,     "BackgroundColour", wxListItem_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "GetFont", wxListItem_GetFont, 0, 0 },
    { LuaGetProp,     "Font", wxListItem_GetFont, 0, 0 },
    { LuaSetProp,     "Font", wxListItem_SetFont, 1, 1 },
};

static WXLUAMETHOD wxListEvent_methods[] = {
    { LuaDelete,      "wxListEvent", wxListEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxListEvent_Delete, 0, 0 },
    { LuaConstructor, "wxListEvent", wxListEvent_constructor, 0, 2 },
    { LuaMethod,      "GetKeyCode", wxListEvent_GetKeyCode, 0, 0 },
    { LuaGetProp,     "KeyCode", wxListEvent_GetKeyCode, 0, 0 },
    { LuaMethod,      "GetIndex", wxListEvent_GetIndex, 0, 0 },
    { LuaGetProp,     "Index", wxListEvent_GetIndex, 0, 0 },
    { LuaMethod,      "GetColumn", wxListEvent_GetColumn, 0, 0 },
    { LuaGetProp,     "Column", wxListEvent_GetColumn, 0, 0 },
    { LuaMethod,      "GetPoint", wxListEvent_GetPoint, 0, 0 },
    { LuaGetProp,     "Point", wxListEvent_GetPoint, 0, 0 },
    { LuaMethod,      "GetLabel", wxListEvent_GetLabel, 0, 0 },
    { LuaGetProp,     "Label", wxListEvent_GetLabel, 0, 0 },
    { LuaMethod,      "GetText", wxListEvent_GetText, 0, 0 },
    { LuaGetProp,     "Text", wxListEvent_GetText, 0, 0 },
    { LuaMethod,      "GetImage", wxListEvent_GetImage, 0, 0 },
    { LuaGetProp,     "Image", wxListEvent_GetImage, 0, 0 },
    { LuaMethod,      "GetData", wxListEvent_GetData, 0, 0 },
    { LuaGetProp,     "Data", wxListEvent_GetData, 0, 0 },
    { LuaMethod,      "GetMask", wxListEvent_GetMask, 0, 0 },
    { LuaGetProp,     "Mask", wxListEvent_GetMask, 0, 0 },
    { LuaMethod,      "GetItem", wxListEvent_GetItem, 0, 0 },
    { LuaGetProp,     "Item", wxListEvent_GetItem, 0, 0 },
};

static WXLUAMETHOD wxRadioBox_methods[] = {
    { LuaDelete,      "wxRadioBox", wxRadioBox_destructor, 0, 0 },
    { LuaConstructor, "wxRadioBox", wxRadioBox_constructor, 3, 11 },
    { LuaMethod,      "Create", wxRadioBox_Create, 3, 11 },
    { LuaMethod,      "Enable", wxRadioBox_Enable, 1, 1 },
    { LuaMethod,      "EnableItem", wxRadioBox_EnableItem, 2, 2 },
    { LuaMethod,      "FindString", wxRadioBox_FindString, 1, 1 },
    { LuaMethod,      "GetItemString", wxRadioBox_GetItemString, 1, 1 },
    { LuaMethod,      "GetSelection", wxRadioBox_GetSelection, 0, 0 },
    { LuaMethod,      "GetStringSelection", wxRadioBox_GetStringSelection, 0, 0 },
    { LuaMethod,      "GetCount", wxRadioBox_GetCount, 0, 0 },
    { LuaGetProp,     "Count", wxRadioBox_GetCount, 0, 0 },
    { LuaMethod,      "SetItemString", wxRadioBox_SetItemString, 2, 2 },
    { LuaMethod,      "SetSelection", wxRadioBox_SetSelection, 1, 1 },
    { LuaGetProp,     "Selection", wxRadioBox_GetSelection, 0, 0 },
    { LuaSetProp,     "Selection", wxRadioBox_SetSelection, 1, 1 },
    { LuaMethod,      "SetStringSelection", wxRadioBox_SetStringSelection, 1, 1 },
    { LuaGetProp,     "StringSelection", wxRadioBox_GetStringSelection, 0, 0 },
    { LuaSetProp,     "StringSelection", wxRadioBox_SetStringSelection, 1, 1 },
    { LuaMethod,      "Show", wxRadioBox_Show, 1, 1 },
    { LuaMethod,      "ShowItem", wxRadioBox_ShowItem, 2, 2 },
    { LuaMethod,      "GetString", wxRadioBox_GetString, 1, 1 },
};

static WXLUAMETHOD wxRadioButton_methods[] = {
    { LuaDelete,      "wxRadioButton", wxRadioButton_destructor, 0, 0 },
    { LuaConstructor, "wxRadioButton", wxRadioButton_constructor, 3, 8 },
    { LuaMethod,      "Create", wxRadioButton_Create, 3, 8 },
    { LuaMethod,      "GetValue", wxRadioButton_GetValue, 0, 0 },
    { LuaMethod,      "SetValue", wxRadioButton_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxRadioButton_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxRadioButton_SetValue, 1, 1 },
};

static WXLUAMETHOD wxScrollBar_methods[] = {
    { LuaDelete,      "wxScrollBar", wxScrollBar_destructor, 0, 0 },
    { LuaConstructor, "wxScrollBar", wxScrollBar_constructor, 2, 7 },
    { LuaMethod,      "Create", wxScrollBar_Create, 2, 7 },
    { LuaMethod,      "GetRange", wxScrollBar_GetRange, 0, 0 },
    { LuaGetProp,     "Range", wxScrollBar_GetRange, 0, 0 },
    { LuaMethod,      "GetPageSize", wxScrollBar_GetPageSize, 0, 0 },
    { LuaGetProp,     "PageSize", wxScrollBar_GetPageSize, 0, 0 },
    { LuaMethod,      "GetThumbPosition", wxScrollBar_GetThumbPosition, 0, 0 },
    { LuaMethod,      "SetThumbPosition", wxScrollBar_SetThumbPosition, 1, 1 },
    { LuaGetProp,     "ThumbPosition", wxScrollBar_GetThumbPosition, 0, 0 },
    { LuaSetProp,     "ThumbPosition", wxScrollBar_SetThumbPosition, 1, 1 },
    { LuaMethod,      "SetScrollbar", wxScrollBar_SetScrollbar, 4, 5 },
};

static WXLUAMETHOD wxSlider_methods[] = {
    { LuaDelete,      "wxSlider", wxSlider_destructor, 0, 0 },
    { LuaConstructor, "wxSlider", wxSlider_constructor, 5, 10 },
    { LuaMethod,      "ClearSel", wxSlider_ClearSel, 0, 0 },
    { LuaMethod,      "ClearTicks", wxSlider_ClearTicks, 0, 0 },
    { LuaMethod,      "Create", wxSlider_Create, 5, 10 },
    { LuaMethod,      "GetLineSize", wxSlider_GetLineSize, 0, 0 },
    { LuaMethod,      "GetMax", wxSlider_GetMax, 0, 0 },
    { LuaGetProp,     "Max", wxSlider_GetMax, 0, 0 },
    { LuaMethod,      "GetMin", wxSlider_GetMin, 0, 0 },
    { LuaGetProp,     "Min", wxSlider_GetMin, 0, 0 },
    { LuaMethod,      "GetPageSize", wxSlider_GetPageSize, 0, 0 },
    { LuaMethod,      "GetSelEnd", wxSlider_GetSelEnd, 0, 0 },
    { LuaGetProp,     "SelEnd", wxSlider_GetSelEnd, 0, 0 },
    { LuaMethod,      "GetSelStart", wxSlider_GetSelStart, 0, 0 },
    { LuaGetProp,     "SelStart", wxSlider_GetSelStart, 0, 0 },
    { LuaMethod,      "GetThumbLength", wxSlider_GetThumbLength, 0, 0 },
    { LuaMethod,      "GetTickFreq", wxSlider_GetTickFreq, 0, 0 },
    { LuaMethod,      "GetValue", wxSlider_GetValue, 0, 0 },
    { LuaMethod,      "SetRange", wxSlider_SetRange, 2, 2 },
    { LuaMethod,      "SetTickFreq", wxSlider_SetTickFreq, 2, 2 },
    { LuaMethod,      "SetLineSize", wxSlider_SetLineSize, 1, 1 },
    { LuaGetProp,     "LineSize", wxSlider_GetLineSize, 0, 0 },
    { LuaSetProp,     "LineSize", wxSlider_SetLineSize, 1, 1 },
    { LuaMethod,      "SetPageSize", wxSlider_SetPageSize, 1, 1 },
    { LuaGetProp,     "PageSize", wxSlider_GetPageSize, 0, 0 },
    { LuaSetProp,     "PageSize", wxSlider_SetPageSize, 1, 1 },
    { LuaMethod,      "SetSelection", wxSlider_SetSelection, 2, 2 },
    { LuaMethod,      "SetThumbLength", wxSlider_SetThumbLength, 1, 1 },
    { LuaGetProp,     "ThumbLength", wxSlider_GetThumbLength, 0, 0 },
    { LuaSetProp,     "ThumbLength", wxSlider_SetThumbLength, 1, 1 },
    { LuaMethod,      "SetTick", wxSlider_SetTick, 1, 1 },
    { LuaMethod,      "SetValue", wxSlider_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxSlider_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxSlider_SetValue, 1, 1 },
};

static WXLUAMETHOD wxSpinButton_methods[] = {
    { LuaDelete,      "wxSpinButton", wxSpinButton_destructor, 0, 0 },
    { LuaConstructor, "wxSpinButton", wxSpinButton_constructor, 1, 6 },
    { LuaMethod,      "Create", wxSpinButton_Create, 1, 6 },
    { LuaMethod,      "GetMax", wxSpinButton_GetMax, 0, 0 },
    { LuaGetProp,     "Max", wxSpinButton_GetMax, 0, 0 },
    { LuaMethod,      "GetMin", wxSpinButton_GetMin, 0, 0 },
    { LuaGetProp,     "Min", wxSpinButton_GetMin, 0, 0 },
    { LuaMethod,      "GetValue", wxSpinButton_GetValue, 0, 0 },
    { LuaMethod,      "SetRange", wxSpinButton_SetRange, 2, 2 },
    { LuaMethod,      "SetValue", wxSpinButton_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxSpinButton_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxSpinButton_SetValue, 1, 1 },
};

static WXLUAMETHOD wxSpinEvent_methods[] = {
    { LuaDelete,      "wxSpinEvent", wxSpinEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxSpinEvent_Delete, 0, 0 },
    { LuaConstructor, "wxSpinEvent", wxSpinEvent_constructor, 0, 2 },
    { LuaMethod,      "GetPosition", wxSpinEvent_GetPosition, 0, 0 },
    { LuaMethod,      "SetPosition", wxSpinEvent_SetPosition, 1, 1 },
    { LuaGetProp,     "Position", wxSpinEvent_GetPosition, 0, 0 },
    { LuaSetProp,     "Position", wxSpinEvent_SetPosition, 1, 1 },
};

static WXLUAMETHOD wxSpinCtrl_methods[] = {
    { LuaDelete,      "wxSpinCtrl", wxSpinCtrl_destructor, 0, 0 },
    { LuaConstructor, "wxSpinCtrl", wxSpinCtrl_constructor, 1, 10 },
    { LuaMethod,      "Create", wxSpinCtrl_Create, 1, 10 },
    { LuaMethod,      "SetValue", wxSpinCtrl_SetValue, 1, 1 },
    { LuaMethod,      "SetValueInt", wxSpinCtrl_SetValueInt, 1, 1 },
    { LuaMethod,      "GetValue", wxSpinCtrl_GetValue, 0, 0 },
    { LuaGetProp,     "Value", wxSpinCtrl_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxSpinCtrl_SetValue, 1, 1 },
    { LuaMethod,      "SetRange", wxSpinCtrl_SetRange, 2, 2 },
    { LuaMethod,      "GetMin", wxSpinCtrl_GetMin, 0, 0 },
    { LuaGetProp,     "Min", wxSpinCtrl_GetMin, 0, 0 },
    { LuaMethod,      "GetMax", wxSpinCtrl_GetMax, 0, 0 },
    { LuaGetProp,     "Max", wxSpinCtrl_GetMax, 0, 0 },
};

static WXLUAMETHOD wxTextCtrl_methods[] = {
    { LuaDelete,      "wxTextCtrl", wxTextCtrl_destructor, 0, 0 },
    { LuaConstructor, "wxTextCtrl", wxTextCtrl_constructor, 2, 8 },
    { LuaMethod,      "AppendText", wxTextCtrl_AppendText, 1, 1 },
    { LuaMethod,      "CanCopy", wxTextCtrl_CanCopy, 0, 0 },
    { LuaMethod,      "CanCut", wxTextCtrl_CanCut, 0, 0 },
    { LuaMethod,      "CanPaste", wxTextCtrl_CanPaste, 0, 0 },
    { LuaMethod,      "CanRedo", wxTextCtrl_CanRedo, 0, 0 },
    { LuaMethod,      "CanUndo", wxTextCtrl_CanUndo, 0, 0 },
    { LuaMethod,      "Clear", wxTextCtrl_Clear, 0, 0 },
    { LuaMethod,      "Copy", wxTextCtrl_Copy, 0, 0 },
    { LuaMethod,      "Create", wxTextCtrl_Create, 2, 8 },
    { LuaMethod,      "Cut", wxTextCtrl_Cut, 0, 0 },
    { LuaMethod,      "DiscardEdits", wxTextCtrl_DiscardEdits, 0, 0 },
    { LuaMethod,      "GetInsertionPoint", wxTextCtrl_GetInsertionPoint, 0, 0 },
    { LuaMethod,      "GetLastPosition", wxTextCtrl_GetLastPosition, 0, 0 },
    { LuaMethod,      "GetLineLength", wxTextCtrl_GetLineLength, 1, 1 },
    { LuaMethod,      "GetLineText", wxTextCtrl_GetLineText, 1, 1 },
    { LuaMethod,      "GetNumberOfLines", wxTextCtrl_GetNumberOfLines, 0, 0 },
    { LuaGetProp,     "NumberOfLines", wxTextCtrl_GetNumberOfLines, 0, 0 },
    { LuaMethod,      "GetSelection", wxTextCtrl_GetSelection, 2, 2 },
    { LuaMethod,      "GetValue", wxTextCtrl_GetValue, 0, 0 },
    { LuaMethod,      "IsModified", wxTextCtrl_IsModified, 0, 0 },
    { LuaMethod,      "LoadFile", wxTextCtrl_LoadFile, 1, 1 },
    { LuaMethod,      "Paste", wxTextCtrl_Paste, 0, 0 },
    { LuaMethod,      "PositionToXY", wxTextCtrl_PositionToXY, 3, 3 },
    { LuaMethod,      "Redo", wxTextCtrl_Redo, 0, 0 },
    { LuaMethod,      "Remove", wxTextCtrl_Remove, 2, 2 },
    { LuaMethod,      "Replace", wxTextCtrl_Replace, 3, 3 },
    { LuaMethod,      "SaveFile", wxTextCtrl_SaveFile, 1, 1 },
    { LuaMethod,      "SetEditable", wxTextCtrl_SetEditable, 1, 1 },
    { LuaMethod,      "SetInsertionPoint", wxTextCtrl_SetInsertionPoint, 1, 1 },
    { LuaGetProp,     "InsertionPoint", wxTextCtrl_GetInsertionPoint, 0, 0 },
    { LuaSetProp,     "InsertionPoint", wxTextCtrl_SetInsertionPoint, 1, 1 },
    { LuaMethod,      "SetInsertionPointEnd", wxTextCtrl_SetInsertionPointEnd, 0, 0 },
    { LuaMethod,      "SetSelection", wxTextCtrl_SetSelection, 2, 2 },
    { LuaMethod,      "SetValue", wxTextCtrl_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxTextCtrl_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxTextCtrl_SetValue, 1, 1 },
    { LuaMethod,      "ShowPosition", wxTextCtrl_ShowPosition, 1, 1 },
    { LuaMethod,      "Undo", wxTextCtrl_Undo, 0, 0 },
    { LuaMethod,      "WriteText", wxTextCtrl_WriteText, 1, 1 },
    { LuaMethod,      "XYToPosition", wxTextCtrl_XYToPosition, 2, 2 },
};

static WXLUAMETHOD wxTreeCtrl_methods[] = {
    { LuaDelete,      "wxTreeCtrl", wxTreeCtrl_destructor, 0, 0 },
    { LuaConstructor, "wxTreeCtrl", wxTreeCtrl_constructor, 2, 7 },
    { LuaMethod,      "AddRoot", wxTreeCtrl_AddRoot, 1, 4 },
    { LuaMethod,      "AppendItem", wxTreeCtrl_AppendItem, 2, 5 },
    { LuaMethod,      "Collapse", wxTreeCtrl_Collapse, 1, 1 },
    { LuaMethod,      "CollapseAndReset", wxTreeCtrl_CollapseAndReset, 1, 1 },
    { LuaMethod,      "Create", wxTreeCtrl_Create, 2, 7 },
    { LuaMethod,      "Delete", wxTreeCtrl_Delete, 1, 1 },
    { LuaMethod,      "DeleteAllItems", wxTreeCtrl_DeleteAllItems, 0, 0 },
    { LuaMethod,      "EditLabel", wxTreeCtrl_EditLabel, 1, 1 },
    { LuaMethod,      "EndEditLabel", wxTreeCtrl_EndEditLabel, 1, 2 },
    { LuaMethod,      "EnsureVisible", wxTreeCtrl_EnsureVisible, 1, 1 },
    { LuaMethod,      "Expand", wxTreeCtrl_Expand, 1, 1 },
    { LuaMethod,      "GetBoundingRect", wxTreeCtrl_GetBoundingRect, 2, 3 },
    { LuaMethod,      "GetChildrenCount", wxTreeCtrl_GetChildrenCount, 1, 2 },
    { LuaMethod,      "GetCount", wxTreeCtrl_GetCount, 0, 0 },
    { LuaGetProp,     "Count", wxTreeCtrl_GetCount, 0, 0 },
    { LuaMethod,      "GetFirstChild", wxTreeCtrl_GetFirstChild, 2, 2 },
    { LuaMethod,      "GetFirstVisibleItem", wxTreeCtrl_GetFirstVisibleItem, 0, 0 },
    { LuaGetProp,     "FirstVisibleItem", wxTreeCtrl_GetFirstVisibleItem, 0, 0 },
    { LuaMethod,      "GetImageList", wxTreeCtrl_GetImageList, 0, 0 },
    { LuaMethod,      "GetIndent", wxTreeCtrl_GetIndent, 0, 0 },
    { LuaMethod,      "GetItemData", wxTreeCtrl_GetItemData, 1, 1 },
    { LuaMethod,      "GetItemImage", wxTreeCtrl_GetItemImage, 1, 2 },
    { LuaMethod,      "GetItemText", wxTreeCtrl_GetItemText, 1, 1 },
    { LuaMethod,      "GetLastChild", wxTreeCtrl_GetLastChild, 1, 1 },
    { LuaMethod,      "GetNextChild", wxTreeCtrl_GetNextChild, 2, 2 },
    { LuaMethod,      "GetNextSibling", wxTreeCtrl_GetNextSibling, 1, 1 },
    { LuaMethod,      "GetNextVisible", wxTreeCtrl_GetNextVisible, 1, 1 },
    { LuaMethod,      "GetItemParent", wxTreeCtrl_GetItemParent, 1, 1 },
    { LuaMethod,      "GetPrevSibling", wxTreeCtrl_GetPrevSibling, 1, 1 },
    { LuaMethod,      "GetPrevVisible", wxTreeCtrl_GetPrevVisible, 1, 1 },
    { LuaMethod,      "GetRootItem", wxTreeCtrl_GetRootItem, 0, 0 },
    { LuaGetProp,     "RootItem", wxTreeCtrl_GetRootItem, 0, 0 },
    { LuaMethod,      "GetSelection", wxTreeCtrl_GetSelection, 0, 0 },
    { LuaGetProp,     "Selection", wxTreeCtrl_GetSelection, 0, 0 },
    { LuaMethod,      "GetSelections", wxTreeCtrl_GetSelections, 1, 1 },
    { LuaMethod,      "GetStateImageList", wxTreeCtrl_GetStateImageList, 0, 0 },
    { LuaMethod,      "HitTest", wxTreeCtrl_HitTest, 2, 2 },
    { LuaMethod,      "InsertItem", wxTreeCtrl_InsertItem, 3, 6 },
    { LuaMethod,      "InsertItemBefore", wxTreeCtrl_InsertItemBefore, 3, 6 },
    { LuaMethod,      "IsBold", wxTreeCtrl_IsBold, 1, 1 },
    { LuaMethod,      "IsExpanded", wxTreeCtrl_IsExpanded, 1, 1 },
    { LuaMethod,      "IsSelected", wxTreeCtrl_IsSelected, 1, 1 },
    { LuaMethod,      "IsVisible", wxTreeCtrl_IsVisible, 1, 1 },
    { LuaMethod,      "ItemHasChildren", wxTreeCtrl_ItemHasChildren, 1, 1 },
    { LuaMethod,      "PrependItem", wxTreeCtrl_PrependItem, 2, 5 },
    { LuaMethod,      "ScrollTo", wxTreeCtrl_ScrollTo, 1, 1 },
    { LuaMethod,      "SetIndent", wxTreeCtrl_SetIndent, 1, 1 },
    { LuaGetProp,     "Indent", wxTreeCtrl_GetIndent, 0, 0 },
    { LuaSetProp,     "Indent", wxTreeCtrl_SetIndent, 1, 1 },
    { LuaMethod,      "SetImageList", wxTreeCtrl_SetImageList, 1, 1 },
    { LuaGetProp,     "ImageList", wxTreeCtrl_GetImageList, 0, 0 },
    { LuaSetProp,     "ImageList", wxTreeCtrl_SetImageList, 1, 1 },
    { LuaMethod,      "SetItemBackgroundColour", wxTreeCtrl_SetItemBackgroundColour, 2, 2 },
    { LuaMethod,      "SetItemBold", wxTreeCtrl_SetItemBold, 1, 2 },
    { LuaMethod,      "SetItemData", wxTreeCtrl_SetItemData, 2, 2 },
    { LuaMethod,      "SetItemFont", wxTreeCtrl_SetItemFont, 2, 2 },
    { LuaMethod,      "SetItemHasChildren", wxTreeCtrl_SetItemHasChildren, 1, 2 },
    { LuaMethod,      "SetItemImage", wxTreeCtrl_SetItemImage, 2, 3 },
    { LuaMethod,      "SetItemText", wxTreeCtrl_SetItemText, 2, 2 },
    { LuaMethod,      "SetItemTextColour", wxTreeCtrl_SetItemTextColour, 2, 2 },
    { LuaMethod,      "SetStateImageList", wxTreeCtrl_SetStateImageList, 1, 1 },
    { LuaGetProp,     "StateImageList", wxTreeCtrl_GetStateImageList, 0, 0 },
    { LuaSetProp,     "StateImageList", wxTreeCtrl_SetStateImageList, 1, 1 },
    { LuaMethod,      "SortChildren", wxTreeCtrl_SortChildren, 1, 1 },
    { LuaMethod,      "Toggle", wxTreeCtrl_Toggle, 1, 1 },
    { LuaMethod,      "Unselect", wxTreeCtrl_Unselect, 0, 0 },
    { LuaMethod,      "UnselectAll", wxTreeCtrl_UnselectAll, 0, 0 },
};

static WXLUAMETHOD wxTreeItemAttr_methods[] = {
    { LuaDelete,      "wxTreeItemAttr", wxTreeItemAttr_destructor, 0, 0 },
    { LuaConstructor, "wxTreeItemAttr", wxTreeItemAttr_constructor, 0, 3 },
    { LuaMethod,      "SetTextColour", wxTreeItemAttr_SetTextColour, 1, 1 },
    { LuaMethod,      "SetBackgroundColour", wxTreeItemAttr_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "SetFont", wxTreeItemAttr_SetFont, 1, 1 },
    { LuaMethod,      "HasTextColour", wxTreeItemAttr_HasTextColour, 0, 0 },
    { LuaMethod,      "HasBackgroundColour", wxTreeItemAttr_HasBackgroundColour, 0, 0 },
    { LuaMethod,      "HasFont", wxTreeItemAttr_HasFont, 0, 0 },
    { LuaMethod,      "GetTextColour", wxTreeItemAttr_GetTextColour, 0, 0 },
    { LuaGetProp,     "TextColour", wxTreeItemAttr_GetTextColour, 0, 0 },
    { LuaSetProp,     "TextColour", wxTreeItemAttr_SetTextColour, 1, 1 },
    { LuaMethod,      "GetBackgroundColour", wxTreeItemAttr_GetBackgroundColour, 0, 0 },
    { LuaGetProp,     "BackgroundColour", wxTreeItemAttr_GetBackgroundColour, 0, 0 },
    { LuaSetProp,     "BackgroundColour", wxTreeItemAttr_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "GetFont", wxTreeItemAttr_GetFont, 0, 0 },
    { LuaGetProp,     "Font", wxTreeItemAttr_GetFont, 0, 0 },
    { LuaSetProp,     "Font", wxTreeItemAttr_SetFont, 1, 1 },
};

static WXLUAMETHOD wxTreeItemIdValue_methods[] = {
    { LuaDelete,      "wxTreeItemIdValue", wxTreeItemIdValue_destructor, 0, 0 },
};

static WXLUAMETHOD wxTreeItemId_methods[] = {
    { LuaDelete,      "wxTreeItemId", wxTreeItemId_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxTreeItemId_Delete, 0, 0 },
    { LuaConstructor, "wxTreeItemId", wxTreeItemId_constructor, 0, 0 },
    { LuaMethod,      "IsOk", wxTreeItemId_IsOk, 0, 0 },
    { LuaMethod,      "GetValue", wxTreeItemId_GetValue, 0, 0 },
    { LuaMethod,      "SetValue", wxTreeItemId_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxTreeItemId_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxTreeItemId_SetValue, 1, 1 },
};

static WXLUAMETHOD wxArrayTreeItemIds_methods[] = {
    { LuaDelete,      "wxArrayTreeItemIds", wxArrayTreeItemIds_destructor, 0, 0 },
    { LuaMethod,      "Clear", wxArrayTreeItemIds_Clear, 0, 0 },
    { LuaMethod,      "GetCount", wxArrayTreeItemIds_GetCount, 0, 0 },
    { LuaMethod,      "Empty", wxArrayTreeItemIds_Empty, 0, 0 },
    { LuaMethod,      "IsEmpty", wxArrayTreeItemIds_IsEmpty, 0, 0 },
    { LuaMethod,      "Shrink", wxArrayTreeItemIds_Shrink, 0, 0 },
    { LuaMethod,      "RemoveAt", wxArrayTreeItemIds_RemoveAt, 1, 1 },
};

static WXLUAMETHOD wxTreeItemData_methods[] = {
    { LuaDelete,      "wxTreeItemData", wxTreeItemData_destructor, 0, 0 },
    { LuaConstructor, "wxTreeItemData", wxTreeItemData_constructor, 0, 0 },
    { LuaMethod,      "GetId", wxTreeItemData_GetId, 0, 0 },
    { LuaMethod,      "SetId", wxTreeItemData_SetId, 1, 1 },
    { LuaGetProp,     "Id", wxTreeItemData_GetId, 0, 0 },
    { LuaSetProp,     "Id", wxTreeItemData_SetId, 1, 1 },
};

static WXLUAMETHOD wxLuaTreeItemData_methods[] = {
    { LuaDelete,      "wxLuaTreeItemData", wxLuaTreeItemData_destructor, 0, 0 },
    { LuaConstructor, "wxLuaTreeItemData", wxLuaTreeItemData_constructor, 0, 1 },
    { LuaMethod,      "GetValue", wxLuaTreeItemData_GetValue, 0, 0 },
    { LuaMethod,      "SetValue", wxLuaTreeItemData_SetValue, 1, 1 },
    { LuaGetProp,     "Value", wxLuaTreeItemData_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxLuaTreeItemData_SetValue, 1, 1 },
};

static WXLUAMETHOD wxTreeEvent_methods[] = {
    { LuaDelete,      "wxTreeEvent", wxTreeEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxTreeEvent_Delete, 0, 0 },
    { LuaConstructor, "wxTreeEvent", wxTreeEvent_constructor, 0, 2 },
    { LuaMethod,      "GetItem", wxTreeEvent_GetItem, 0, 0 },
    { LuaGetProp,     "Item", wxTreeEvent_GetItem, 0, 0 },
    { LuaMethod,      "GetOldItem", wxTreeEvent_GetOldItem, 0, 0 },
    { LuaGetProp,     "OldItem", wxTreeEvent_GetOldItem, 0, 0 },
    { LuaMethod,      "GetPoint", wxTreeEvent_GetPoint, 0, 0 },
    { LuaGetProp,     "Point", wxTreeEvent_GetPoint, 0, 0 },
    { LuaMethod,      "GetKeyCode", wxTreeEvent_GetKeyCode, 0, 0 },
    { LuaGetProp,     "KeyCode", wxTreeEvent_GetKeyCode, 0, 0 },
    { LuaMethod,      "GetLabel", wxTreeEvent_GetLabel, 0, 0 },
    { LuaGetProp,     "Label", wxTreeEvent_GetLabel, 0, 0 },
    { LuaGlobal,      "wxNow", builtin_wxNow, 0, 0 },
    { LuaGlobal,      "wxGetLocalTime", builtin_wxGetLocalTime, 0, 0 },
    { LuaGlobal,      "wxGetUTCTime", builtin_wxGetUTCTime, 0, 0 },
    { LuaGlobal,      "wxStartTimer", builtin_wxStartTimer, 0, 0 },
    { LuaGlobal,      "wxGetElapsedTime", builtin_wxGetElapsedTime, 0, 1 },
    { LuaGlobal,      "wxSleep", builtin_wxSleep, 1, 1 },
    { LuaGlobal,      "wxUsleep", builtin_wxUsleep, 1, 1 },
};

static WXLUAMETHOD wxDateTime_methods[] = {
    { LuaDelete,      "wxDateTime", wxDateTime_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxDateTime_Delete, 0, 0 },
    { LuaConstructor, "wxDateTime", wxDateTime_constructor, 0, 0 },
    { LuaConstructor, "wxDateTimeFromTime", wxDateTimeFromTime_constructor, 1, 1 },
    { LuaConstructor, "wxDateTimeFromJDN", wxDateTimeFromJDN_constructor, 1, 1 },
    { LuaConstructor, "wxDateTimeFromHMS", wxDateTimeFromHMS_constructor, 4, 4 },
    { LuaConstructor, "wxDateTimeFromDMY", wxDateTimeFromDMY_constructor, 1, 7 },
    { LuaMethod,      "SetToCurrent", wxDateTime_SetToCurrent, 0, 0 },
    { LuaMethod,      "SetToTime", wxDateTime_SetToTime, 1, 1 },
    { LuaMethod,      "SetToJDN", wxDateTime_SetToJDN, 1, 1 },
    { LuaMethod,      "SetToHMS", wxDateTime_SetToHMS, 4, 4 },
    { LuaMethod,      "SetToDMY", wxDateTime_SetToDMY, 1, 7 },
    { LuaMethod,      "ResetTime", wxDateTime_ResetTime, 0, 0 },
    { LuaMethod,      "SetDay", wxDateTime_SetDay, 1, 1 },
    { LuaMethod,      "SetMonth", wxDateTime_SetMonth, 1, 1 },
    { LuaMethod,      "SetYear", wxDateTime_SetYear, 1, 1 },
    { LuaMethod,      "SetHour", wxDateTime_SetHour, 1, 1 },
    { LuaMethod,      "SetMinute", wxDateTime_SetMinute, 1, 1 },
    { LuaMethod,      "SetSecond", wxDateTime_SetSecond, 1, 1 },
    { LuaMethod,      "SetMillisecond", wxDateTime_SetMillisecond, 1, 1 },
    { LuaMethod,      "IsWorkDay", wxDateTime_IsWorkDay, 0, 1 },
    { LuaMethod,      "IsEqualTo", wxDateTime_IsEqualTo, 1, 1 },
    { LuaMethod,      "IsEarlierThan", wxDateTime_IsEarlierThan, 1, 1 },
    { LuaMethod,      "IsLaterThan", wxDateTime_IsLaterThan, 1, 1 },
    { LuaMethod,      "IsStrictlyBetween", wxDateTime_IsStrictlyBetween, 2, 2 },
    { LuaMethod,      "IsBetween", wxDateTime_IsBetween, 2, 2 },
    { LuaMethod,      "IsSameDate", wxDateTime_IsSameDate, 1, 1 },
    { LuaMethod,      "IsSameTime", wxDateTime_IsSameTime, 1, 1 },
    { LuaMethod,      "IsEqualUpTo", wxDateTime_IsEqualUpTo, 2, 2 },
    { LuaMethod,      "IsValid", wxDateTime_IsValid, 0, 0 },
    { LuaMethod,      "GetTicks", wxDateTime_GetTicks, 0, 0 },
    { LuaMethod,      "SetToWeekDayInSameWeek", wxDateTime_SetToWeekDayInSameWeek, 1, 1 },
    { LuaMethod,      "GetWeekDayInSameWeek", wxDateTime_GetWeekDayInSameWeek, 1, 1 },
    { LuaMethod,      "SetToNextWeekDay", wxDateTime_SetToNextWeekDay, 1, 1 },
    { LuaMethod,      "GetNextWeekDay", wxDateTime_GetNextWeekDay, 1, 1 },
    { LuaMethod,      "SetToPrevWeekDay", wxDateTime_SetToPrevWeekDay, 1, 1 },
    { LuaMethod,      "GetPrevWeekDay", wxDateTime_GetPrevWeekDay, 1, 1 },
    { LuaMethod,      "SetToWeekDay", wxDateTime_SetToWeekDay, 1, 4 },
    { LuaMethod,      "GetWeekDay", wxDateTime_GetWeekDay, 1, 4 },
    { LuaMethod,      "SetToLastWeekDay", wxDateTime_SetToLastWeekDay, 1, 3 },
    { LuaMethod,      "GetLastWeekDay", wxDateTime_GetLastWeekDay, 1, 3 },
    { LuaMethod,      "SetToTheWeek", wxDateTime_SetToTheWeek, 1, 2 },
    { LuaMethod,      "GetWeek", wxDateTime_GetWeek, 1, 2 },
    { LuaMethod,      "SetToLastMonthDay", wxDateTime_SetToLastMonthDay, 0, 2 },
    { LuaMethod,      "GetLastMonthDay", wxDateTime_GetLastMonthDay, 0, 2 },
    { LuaMethod,      "SetToYearDay", wxDateTime_SetToYearDay, 1, 1 },
    { LuaMethod,      "GetYearDay", wxDateTime_GetYearDay, 1, 1 },
    { LuaMethod,      "GetJulianDayNumber", wxDateTime_GetJulianDayNumber, 0, 0 },
    { LuaMethod,      "GetJDN", wxDateTime_GetJDN, 0, 0 },
    { LuaMethod,      "GetModifiedJulianDayNumber", wxDateTime_GetModifiedJulianDayNumber, 0, 0 },
    { LuaMethod,      "GetMJD", wxDateTime_GetMJD, 0, 0 },
    { LuaMethod,      "GetRataDie", wxDateTime_GetRataDie, 0, 0 },
    { LuaMethod,      "ToGMT", wxDateTime_ToGMT, 0, 1 },
    { LuaMethod,      "MakeGMT", wxDateTime_MakeGMT, 0, 1 },
    { LuaMethod,      "IsDST", wxDateTime_IsDST, 0, 1 },
    { LuaMethod,      "Add", wxDateTime_Add, 1, 1 },
    { LuaMethod,      "Subtract", wxDateTime_Subtract, 1, 1 },
    { LuaMethod,      "AddDateSpan", wxDateTime_AddDateSpan, 1, 1 },
    { LuaMethod,      "SubtractDateSpan", wxDateTime_SubtractDateSpan, 1, 1 },
    { LuaMethod,      "ParseRfc822Date", wxDateTime_ParseRfc822Date, 1, 1 },
    { LuaMethod,      "ParseFormat", wxDateTime_ParseFormat, 1, 3 },
    { LuaMethod,      "ParseDateTime", wxDateTime_ParseDateTime, 1, 1 },
    { LuaMethod,      "ParseDate", wxDateTime_ParseDate, 1, 1 },
    { LuaMethod,      "ParseTime", wxDateTime_ParseTime, 1, 1 },
    { LuaMethod,      "FormatDate", wxDateTime_FormatDate, 0, 0 },
    { LuaMethod,      "FormatTime", wxDateTime_FormatTime, 0, 0 },
    { LuaMethod,      "FormatISODate", wxDateTime_FormatISODate, 0, 0 },
    { LuaMethod,      "FormatISOTime", wxDateTime_FormatISOTime, 0, 0 },
    { LuaMethod,      "Format", wxDateTime_Format, 0, 2 },
};

static WXLUAMETHOD wxTimeSpan_methods[] = {
    { LuaDelete,      "wxTimeSpan", wxTimeSpan_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxTimeSpan_Delete, 0, 0 },
    { LuaConstructor, "wxTimeSpan", wxTimeSpan_constructor, 0, 0 },
    { LuaGlobal,      "Seconds", builtin_wxTimeSpan_Seconds, 1, 1 },
    { LuaGlobal,      "Second", builtin_wxTimeSpan_Second, 0, 0 },
    { LuaGlobal,      "Minutes", builtin_wxTimeSpan_Minutes, 1, 1 },
    { LuaGlobal,      "Minute", builtin_wxTimeSpan_Minute, 0, 0 },
    { LuaGlobal,      "Hours", builtin_wxTimeSpan_Hours, 1, 1 },
    { LuaGlobal,      "Hour", builtin_wxTimeSpan_Hour, 0, 0 },
    { LuaGlobal,      "Days", builtin_wxTimeSpan_Days, 1, 1 },
    { LuaGlobal,      "Day", builtin_wxTimeSpan_Day, 0, 0 },
    { LuaGlobal,      "Weeks", builtin_wxTimeSpan_Weeks, 1, 1 },
    { LuaGlobal,      "Week", builtin_wxTimeSpan_Week, 0, 0 },
    { LuaConstructor, "wxTimeSpanHMS", wxTimeSpanHMS_constructor, 1, 4 },
    { LuaMethod,      "Add", wxTimeSpan_Add, 1, 1 },
    { LuaMethod,      "Subtract", wxTimeSpan_Subtract, 1, 1 },
    { LuaMethod,      "Multiply", wxTimeSpan_Multiply, 1, 1 },
    { LuaMethod,      "Negate", wxTimeSpan_Negate, 0, 0 },
    { LuaMethod,      "Neg", wxTimeSpan_Neg, 0, 0 },
    { LuaMethod,      "Abs", wxTimeSpan_Abs, 0, 0 },
    { LuaMethod,      "IsNull", wxTimeSpan_IsNull, 0, 0 },
    { LuaMethod,      "IsPositive", wxTimeSpan_IsPositive, 0, 0 },
    { LuaMethod,      "IsNegative", wxTimeSpan_IsNegative, 0, 0 },
    { LuaMethod,      "IsEqualTo", wxTimeSpan_IsEqualTo, 1, 1 },
    { LuaMethod,      "IsLongerThan", wxTimeSpan_IsLongerThan, 1, 1 },
    { LuaMethod,      "IsShorterThan", wxTimeSpan_IsShorterThan, 1, 1 },
    { LuaMethod,      "GetWeeks", wxTimeSpan_GetWeeks, 0, 0 },
    { LuaGetProp,     "Weeks", wxTimeSpan_GetWeeks, 0, 0 },
    { LuaMethod,      "GetDays", wxTimeSpan_GetDays, 0, 0 },
    { LuaGetProp,     "Days", wxTimeSpan_GetDays, 0, 0 },
    { LuaMethod,      "GetHours", wxTimeSpan_GetHours, 0, 0 },
    { LuaGetProp,     "Hours", wxTimeSpan_GetHours, 0, 0 },
    { LuaMethod,      "GetMinutes", wxTimeSpan_GetMinutes, 0, 0 },
    { LuaGetProp,     "Minutes", wxTimeSpan_GetMinutes, 0, 0 },
    { LuaMethod,      "Format", wxTimeSpan_Format, 0, 1 },
};

static WXLUAMETHOD wxDateSpan_methods[] = {
    { LuaDelete,      "wxDateSpan", wxDateSpan_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxDateSpan_Delete, 0, 0 },
    { LuaConstructor, "wxDateSpan", wxDateSpan_constructor, 0, 4 },
    { LuaGlobal,      "Days", builtin_wxDateSpan_Days, 1, 1 },
    { LuaGlobal,      "Day", builtin_wxDateSpan_Day, 0, 0 },
    { LuaGlobal,      "Weeks", builtin_wxDateSpan_Weeks, 1, 1 },
    { LuaGlobal,      "Week", builtin_wxDateSpan_Week, 0, 0 },
    { LuaGlobal,      "Months", builtin_wxDateSpan_Months, 1, 1 },
    { LuaGlobal,      "Month", builtin_wxDateSpan_Month, 0, 0 },
    { LuaGlobal,      "Years", builtin_wxDateSpan_Years, 1, 1 },
    { LuaGlobal,      "Year", builtin_wxDateSpan_Year, 0, 0 },
    { LuaMethod,      "SetDays", wxDateSpan_SetDays, 1, 1 },
    { LuaGetProp,     "Days", wxDateSpan_GetDays, 0, 0 },
    { LuaSetProp,     "Days", wxDateSpan_SetDays, 1, 1 },
    { LuaMethod,      "SetWeeks", wxDateSpan_SetWeeks, 1, 1 },
    { LuaGetProp,     "Weeks", wxDateSpan_GetWeeks, 0, 0 },
    { LuaSetProp,     "Weeks", wxDateSpan_SetWeeks, 1, 1 },
    { LuaMethod,      "SetMonths", wxDateSpan_SetMonths, 1, 1 },
    { LuaGetProp,     "Months", wxDateSpan_GetMonths, 0, 0 },
    { LuaSetProp,     "Months", wxDateSpan_SetMonths, 1, 1 },
    { LuaMethod,      "SetYears", wxDateSpan_SetYears, 1, 1 },
    { LuaGetProp,     "Years", wxDateSpan_GetYears, 0, 0 },
    { LuaSetProp,     "Years", wxDateSpan_SetYears, 1, 1 },
    { LuaMethod,      "GetDays", wxDateSpan_GetDays, 0, 0 },
    { LuaMethod,      "GetWeeks", wxDateSpan_GetWeeks, 0, 0 },
    { LuaMethod,      "GetMonths", wxDateSpan_GetMonths, 0, 0 },
    { LuaMethod,      "GetYears", wxDateSpan_GetYears, 0, 0 },
    { LuaMethod,      "GetTotalDays", wxDateSpan_GetTotalDays, 0, 0 },
    { LuaGetProp,     "TotalDays", wxDateSpan_GetTotalDays, 0, 0 },
    { LuaMethod,      "Add", wxDateSpan_Add, 1, 1 },
    { LuaMethod,      "Subtract", wxDateSpan_Subtract, 1, 1 },
    { LuaMethod,      "Negate", wxDateSpan_Negate, 0, 0 },
    { LuaMethod,      "Neg", wxDateSpan_Neg, 0, 0 },
    { LuaMethod,      "Multiply", wxDateSpan_Multiply, 1, 1 },
};

static WXLUAMETHOD wxTimer_methods[] = {
    { LuaDelete,      "wxTimer", wxTimer_destructor, 0, 0 },
    { LuaConstructor, "wxTimer", wxTimer_constructor, 1, 2 },
    { LuaMethod,      "IsOneShot", wxTimer_IsOneShot, 0, 0 },
    { LuaMethod,      "IsRunning", wxTimer_IsRunning, 0, 0 },
    { LuaMethod,      "Notify", wxTimer_Notify, 0, 0 },
    { LuaMethod,      "SetOwner", wxTimer_SetOwner, 1, 2 },
    { LuaMethod,      "Start", wxTimer_Start, 0, 2 },
    { LuaMethod,      "Stop", wxTimer_Stop, 0, 0 },
};

static WXLUAMETHOD wxCalendarCtrl_methods[] = {
    { LuaDelete,      "wxCalendarCtrl", wxCalendarCtrl_destructor, 0, 0 },
    { LuaConstructor, "wxCalendarCtrl", wxCalendarCtrl_constructor, 2, 7 },
    { LuaMethod,      "Create", wxCalendarCtrl_Create, 2, 7 },
    { LuaMethod,      "SetDate", wxCalendarCtrl_SetDate, 1, 1 },
    { LuaMethod,      "EnableYearChange", wxCalendarCtrl_EnableYearChange, 0, 1 },
    { LuaMethod,      "EnableMonthChange", wxCalendarCtrl_EnableMonthChange, 0, 1 },
    { LuaMethod,      "EnableHolidayDisplay", wxCalendarCtrl_EnableHolidayDisplay, 0, 1 },
    { LuaMethod,      "SetHeaderColours", wxCalendarCtrl_SetHeaderColours, 2, 2 },
    { LuaMethod,      "GetHeaderColourFg", wxCalendarCtrl_GetHeaderColourFg, 0, 0 },
    { LuaGetProp,     "HeaderColourFg", wxCalendarCtrl_GetHeaderColourFg, 0, 0 },
    { LuaMethod,      "GetHeaderColourBg", wxCalendarCtrl_GetHeaderColourBg, 0, 0 },
    { LuaGetProp,     "HeaderColourBg", wxCalendarCtrl_GetHeaderColourBg, 0, 0 },
    { LuaMethod,      "SetHighlightColours", wxCalendarCtrl_SetHighlightColours, 2, 2 },
    { LuaMethod,      "GetHighlightColourFg", wxCalendarCtrl_GetHighlightColourFg, 0, 0 },
    { LuaGetProp,     "HighlightColourFg", wxCalendarCtrl_GetHighlightColourFg, 0, 0 },
    { LuaMethod,      "GetHighlightColourBg", wxCalendarCtrl_GetHighlightColourBg, 0, 0 },
    { LuaGetProp,     "HighlightColourBg", wxCalendarCtrl_GetHighlightColourBg, 0, 0 },
    { LuaMethod,      "SetHolidayColours", wxCalendarCtrl_SetHolidayColours, 2, 2 },
    { LuaMethod,      "GetHolidayColourFg", wxCalendarCtrl_GetHolidayColourFg, 0, 0 },
    { LuaGetProp,     "HolidayColourFg", wxCalendarCtrl_GetHolidayColourFg, 0, 0 },
    { LuaMethod,      "GetHolidayColourBg", wxCalendarCtrl_GetHolidayColourBg, 0, 0 },
    { LuaGetProp,     "HolidayColourBg", wxCalendarCtrl_GetHolidayColourBg, 0, 0 },
    { LuaMethod,      "GetAttr", wxCalendarCtrl_GetAttr, 1, 1 },
    { LuaMethod,      "SetAttr", wxCalendarCtrl_SetAttr, 2, 2 },
    { LuaMethod,      "SetHoliday", wxCalendarCtrl_SetHoliday, 1, 1 },
    { LuaMethod,      "ResetAttr", wxCalendarCtrl_ResetAttr, 1, 1 },
};

static WXLUAMETHOD wxCalendarDateAttr_methods[] = {
    { LuaDelete,      "wxCalendarDateAttr", wxCalendarDateAttr_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxCalendarDateAttr_Delete, 0, 0 },
    { LuaConstructor, "wxCalendarDateAttr", wxCalendarDateAttr_constructor, 0, 0 },
    { LuaConstructor, "wxCalendarDateAttrColour", wxCalendarDateAttrColour_constructor, 1, 5 },
    { LuaConstructor, "wxCalendarDateAttrBorder", wxCalendarDateAttrBorder_constructor, 1, 2 },
    { LuaMethod,      "SetTextColour", wxCalendarDateAttr_SetTextColour, 1, 1 },
    { LuaMethod,      "SetBackgroundColour", wxCalendarDateAttr_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "SetBorderColour", wxCalendarDateAttr_SetBorderColour, 1, 1 },
    { LuaMethod,      "SetFont", wxCalendarDateAttr_SetFont, 1, 1 },
    { LuaMethod,      "SetBorder", wxCalendarDateAttr_SetBorder, 1, 1 },
    { LuaMethod,      "SetHoliday", wxCalendarDateAttr_SetHoliday, 1, 1 },
    { LuaMethod,      "HasTextColour", wxCalendarDateAttr_HasTextColour, 0, 0 },
    { LuaMethod,      "HasBackgroundColour", wxCalendarDateAttr_HasBackgroundColour, 0, 0 },
    { LuaMethod,      "HasBorderColour", wxCalendarDateAttr_HasBorderColour, 0, 0 },
    { LuaMethod,      "HasFont", wxCalendarDateAttr_HasFont, 0, 0 },
    { LuaMethod,      "HasBorder", wxCalendarDateAttr_HasBorder, 0, 0 },
    { LuaMethod,      "IsHoliday", wxCalendarDateAttr_IsHoliday, 0, 0 },
    { LuaMethod,      "GetTextColour", wxCalendarDateAttr_GetTextColour, 0, 0 },
    { LuaGetProp,     "TextColour", wxCalendarDateAttr_GetTextColour, 0, 0 },
    { LuaSetProp,     "TextColour", wxCalendarDateAttr_SetTextColour, 1, 1 },
    { LuaMethod,      "GetBackgroundColour", wxCalendarDateAttr_GetBackgroundColour, 0, 0 },
    { LuaGetProp,     "BackgroundColour", wxCalendarDateAttr_GetBackgroundColour, 0, 0 },
    { LuaSetProp,     "BackgroundColour", wxCalendarDateAttr_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "GetBorderColour", wxCalendarDateAttr_GetBorderColour, 0, 0 },
    { LuaGetProp,     "BorderColour", wxCalendarDateAttr_GetBorderColour, 0, 0 },
    { LuaSetProp,     "BorderColour", wxCalendarDateAttr_SetBorderColour, 1, 1 },
    { LuaMethod,      "GetFont", wxCalendarDateAttr_GetFont, 0, 0 },
    { LuaGetProp,     "Font", wxCalendarDateAttr_GetFont, 0, 0 },
    { LuaSetProp,     "Font", wxCalendarDateAttr_SetFont, 1, 1 },
    { LuaMethod,      "GetBorder", wxCalendarDateAttr_GetBorder, 0, 0 },
    { LuaGetProp,     "Border", wxCalendarDateAttr_GetBorder, 0, 0 },
    { LuaSetProp,     "Border", wxCalendarDateAttr_SetBorder, 1, 1 },
};

static WXLUAMETHOD wxCalendarEvent_methods[] = {
    { LuaDelete,      "wxCalendarEvent", wxCalendarEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxCalendarEvent_Delete, 0, 0 },
    { LuaConstructor, "wxCalendarEvent", wxCalendarEvent_constructor, 2, 2 },
    { LuaMethod,      "GetDate", wxCalendarEvent_GetDate, 0, 0 },
    { LuaGetProp,     "Date", wxCalendarEvent_GetDate, 0, 0 },
    { LuaMethod,      "GetWeekDay", wxCalendarEvent_GetWeekDay, 0, 0 },
    { LuaGetProp,     "WeekDay", wxCalendarEvent_GetWeekDay, 0, 0 },
    { LuaGlobal,      "wxHandleFatalExceptions", builtin_wxHandleFatalExceptions, 0, 1 },
    { LuaGlobal,      "wxInitAllImageHandlers", builtin_wxInitAllImageHandlers, 0, 0 },
    { LuaGlobal,      "wxSafeYield", builtin_wxSafeYield, 0, 1 },
    { LuaGlobal,      "wxYield", builtin_wxYield, 0, 0 },
    { LuaGlobal,      "wxWakeUpIdle", builtin_wxWakeUpIdle, 0, 0 },
    { LuaGlobal,      "wxExecute", builtin_wxExecute, 1, 3 },
    { LuaGlobal,      "wxExit", builtin_wxExit, 0, 0 },
    { LuaGlobal,      "wxGetProcessId", builtin_wxGetProcessId, 0, 0 },
    { LuaGlobal,      "wxShell", builtin_wxShell, 0, 1 },
    { LuaGlobal,      "wxGetFreeMemory", builtin_wxGetFreeMemory, 0, 0 },
    { LuaGlobal,      "wxGetFullHostName", builtin_wxGetFullHostName, 0, 0 },
    { LuaGlobal,      "wxGetHomeDir", builtin_wxGetHomeDir, 0, 0 },
    { LuaGlobal,      "wxGetHostName", builtin_wxGetHostName, 0, 0 },
    { LuaGlobal,      "wxGetUserId", builtin_wxGetUserId, 0, 0 },
    { LuaGlobal,      "wxGetOsDescription", builtin_wxGetOsDescription, 0, 0 },
    { LuaGlobal,      "wxGetOsVersion", builtin_wxGetOsVersion, 0, 2 },
    { LuaGlobal,      "wxGetUserHome", builtin_wxGetUserHome, 0, 1 },
    { LuaGlobal,      "wxGetUserName", builtin_wxGetUserName, 0, 0 },
    { LuaGlobal,      "wxBell", builtin_wxBell, 0, 0 },
    { LuaGlobal,      "wxBeginBusyCursor", builtin_wxBeginBusyCursor, 0, 1 },
    { LuaGlobal,      "wxEndBusyCursor", builtin_wxEndBusyCursor, 0, 0 },
    { LuaGlobal,      "wxIsBusy", builtin_wxIsBusy, 0, 0 },
    { LuaGlobal,      "wxClientDisplayRect", builtin_wxClientDisplayRect, 4, 4 },
    { LuaGlobal,      "wxColourDisplay", builtin_wxColourDisplay, 0, 0 },
    { LuaGlobal,      "wxDisplayDepth", builtin_wxDisplayDepth, 0, 0 },
    { LuaGlobal,      "wxDisplaySize", builtin_wxDisplaySize, 2, 2 },
    { LuaGlobal,      "wxDisplaySizeMM", builtin_wxDisplaySizeMM, 2, 2 },
    { LuaGlobal,      "wxSetCursor", builtin_wxSetCursor, 1, 1 },
    { LuaGlobal,      "wxNewId", builtin_wxNewId, 0, 0 },
    { LuaGlobal,      "wxRegisterId", builtin_wxRegisterId, 1, 1 },
    { LuaGlobal,      "wxEnableTopLevelWindows", builtin_wxEnableTopLevelWindows, 0, 1 },
    { LuaGlobal,      "wxFindMenuItemId", builtin_wxFindMenuItemId, 3, 3 },
    { LuaGlobal,      "wxFindWindowByLabel", builtin_wxFindWindowByLabel, 1, 2 },
    { LuaGlobal,      "wxFindWindowByName", builtin_wxFindWindowByName, 1, 2 },
    { LuaGlobal,      "wxFindWindowAtPoint", builtin_wxFindWindowAtPoint, 1, 1 },
    { LuaGlobal,      "wxFindWindowAtPointer", builtin_wxFindWindowAtPointer, 1, 1 },
    { LuaGlobal,      "wxGetActiveWindow", builtin_wxGetActiveWindow, 0, 0 },
    { LuaGlobal,      "wxGetMousePosition", builtin_wxGetMousePosition, 0, 0 },
    { LuaGlobal,      "wxGetTopLevelParent", builtin_wxGetTopLevelParent, 1, 1 },
    { LuaGlobal,      "wxPostEvent", builtin_wxPostEvent, 2, 2 },
    { LuaGlobal,      "wxDirExists", builtin_wxDirExists, 1, 1 },
    { LuaGlobal,      "wxFileExists", builtin_wxFileExists, 1, 1 },
    { LuaGlobal,      "wxDos2UnixFilename", builtin_wxDos2UnixFilename, 1, 1 },
    { LuaGlobal,      "wxUnix2DosFilename", builtin_wxUnix2DosFilename, 1, 1 },
    { LuaGlobal,      "wxFindFirstFile", builtin_wxFindFirstFile, 1, 2 },
    { LuaGlobal,      "wxFindNextFile", builtin_wxFindNextFile, 0, 0 },
    { LuaGlobal,      "wxGetOSDirectory", builtin_wxGetOSDirectory, 0, 0 },
    { LuaGlobal,      "wxIsAbsolutePath", builtin_wxIsAbsolutePath, 1, 1 },
    { LuaGlobal,      "wxPathOnly", builtin_wxPathOnly, 1, 1 },
    { LuaGlobal,      "wxConcatFiles", builtin_wxConcatFiles, 3, 3 },
    { LuaGlobal,      "wxCopyFile", builtin_wxCopyFile, 2, 3 },
    { LuaGlobal,      "wxGetCwd", builtin_wxGetCwd, 0, 0 },
    { LuaGlobal,      "wxIsWild", builtin_wxIsWild, 1, 1 },
    { LuaGlobal,      "wxMatchWild", builtin_wxMatchWild, 3, 3 },
    { LuaGlobal,      "wxMkdir", builtin_wxMkdir, 1, 2 },
    { LuaGlobal,      "wxRemoveFile", builtin_wxRemoveFile, 1, 1 },
    { LuaGlobal,      "wxRenameFile", builtin_wxRenameFile, 2, 2 },
    { LuaGlobal,      "wxRmdir", builtin_wxRmdir, 1, 2 },
    { LuaGlobal,      "wxSetWorkingDirectory", builtin_wxSetWorkingDirectory, 1, 1 },
    { LuaGlobal,      "wxFileSeparator", builtin_wxFileSeparator, 0, 0 },
    { LuaGlobal,      "wxFileSize", builtin_wxFileSize, 1, 1 },
};

static WXLUAMETHOD wxFileName_methods[] = {
    { LuaDelete,      "wxFileName", wxFileName_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFileName_Delete, 0, 0 },
    { LuaConstructor, "wxFileNameDefault", wxFileNameDefault_constructor, 0, 0 },
    { LuaConstructor, "wxFileNameCopy", wxFileNameCopy_constructor, 1, 1 },
    { LuaConstructor, "wxFileName", wxFileName_constructor, 1, 2 },
    { LuaConstructor, "wxFileNamePath", wxFileNamePath_constructor, 2, 3 },
    { LuaConstructor, "wxFileNameVolume", wxFileNameVolume_constructor, 4, 5 },
    { LuaMethod,      "AppendDir", wxFileName_AppendDir, 1, 1 },
    { LuaMethod,      "Assign", wxFileName_Assign, 1, 1 },
    { LuaMethod,      "AssignFullName", wxFileName_AssignFullName, 1, 2 },
    { LuaMethod,      "AssignVolume", wxFileName_AssignVolume, 4, 5 },
    { LuaMethod,      "AssignPath", wxFileName_AssignPath, 2, 3 },
    { LuaMethod,      "AssignPathNameExt", wxFileName_AssignPathNameExt, 3, 4 },
    { LuaMethod,      "AssignCwd", wxFileName_AssignCwd, 0, 1 },
    { LuaMethod,      "AssignDir", wxFileName_AssignDir, 1, 2 },
    { LuaMethod,      "AssignHomeDir", wxFileName_AssignHomeDir, 0, 0 },
    { LuaMethod,      "AssignTempFileName", wxFileName_AssignTempFileName, 1, 2 },
    { LuaMethod,      "Clear", wxFileName_Clear, 0, 0 },
    { LuaMethod,      "CreateTempFileName", wxFileName_CreateTempFileName, 1, 2 },
    { LuaMethod,      "DirExists", wxFileName_DirExists, 0, 0 },
    { LuaMethod,      "DirExistsName", wxFileName_DirExistsName, 1, 1 },
    { LuaMethod,      "DirName", wxFileName_DirName, 1, 1 },
    { LuaMethod,      "FileExists", wxFileName_FileExists, 0, 0 },
    { LuaMethod,      "FileExistsFile", wxFileName_FileExistsFile, 1, 1 },
    { LuaMethod,      "FileName", wxFileName_FileName, 1, 1 },
    { LuaMethod,      "GetCwd", wxFileName_GetCwd, 0, 1 },
    { LuaMethod,      "GetDirCount", wxFileName_GetDirCount, 0, 0 },
    { LuaMethod,      "GetDirs", wxFileName_GetDirs, 0, 0 },
    { LuaMethod,      "GetExt", wxFileName_GetExt, 0, 0 },
    { LuaMethod,      "GetFormat", wxFileName_GetFormat, 0, 1 },
    { LuaMethod,      "GetFullName", wxFileName_GetFullName, 0, 0 },
    { LuaMethod,      "GetFullPath", wxFileName_GetFullPath, 0, 1 },
    { LuaMethod,      "GetHomeDir", wxFileName_GetHomeDir, 0, 0 },
    { LuaMethod,      "GetLongPath", wxFileName_GetLongPath, 0, 0 },
    { LuaMethod,      "GetModificationTime", wxFileName_GetModificationTime, 0, 0 },
    { LuaMethod,      "GetName", wxFileName_GetName, 0, 0 },
    { LuaMethod,      "GetPath", wxFileName_GetPath, 0, 2 },
    { LuaMethod,      "GetPathSeparator", wxFileName_GetPathSeparator, 0, 1 },
    { LuaMethod,      "GetPathSeparators", wxFileName_GetPathSeparators, 0, 1 },
    { LuaMethod,      "GetShortPath", wxFileName_GetShortPath, 0, 0 },
    { LuaMethod,      "GetTimes", wxFileName_GetTimes, 3, 3 },
    { LuaMethod,      "GetVolume", wxFileName_GetVolume, 0, 0 },
    { LuaMethod,      "GetVolumeSeparator", wxFileName_GetVolumeSeparator, 0, 1 },
    { LuaMethod,      "HasExt", wxFileName_HasExt, 0, 0 },
    { LuaMethod,      "HasName", wxFileName_HasName, 0, 0 },
    { LuaMethod,      "HasVolume", wxFileName_HasVolume, 0, 0 },
    { LuaMethod,      "InsertDir", wxFileName_InsertDir, 2, 2 },
    { LuaMethod,      "IsAbsolute", wxFileName_IsAbsolute, 0, 1 },
    { LuaMethod,      "IsCaseSensitive", wxFileName_IsCaseSensitive, 0, 1 },
    { LuaMethod,      "IsOk", wxFileName_IsOk, 0, 0 },
    { LuaMethod,      "IsPathSeparator", wxFileName_IsPathSeparator, 1, 2 },
    { LuaMethod,      "IsRelative", wxFileName_IsRelative, 0, 1 },
    { LuaMethod,      "IsDir", wxFileName_IsDir, 0, 0 },
    { LuaMethod,      "MakeRelativeTo", wxFileName_MakeRelativeTo, 0, 2 },
    { LuaMethod,      "Mkdir", wxFileName_Mkdir, 0, 2 },
    { LuaMethod,      "MkdirName", wxFileName_MkdirName, 1, 3 },
    { LuaMethod,      "Normalize", wxFileName_Normalize, 0, 3 },
    { LuaMethod,      "PrependDir", wxFileName_PrependDir, 1, 1 },
    { LuaMethod,      "RemoveDir", wxFileName_RemoveDir, 1, 1 },
    { LuaMethod,      "Rmdir", wxFileName_Rmdir, 0, 0 },
    { LuaMethod,      "RmdirName", wxFileName_RmdirName, 1, 1 },
    { LuaMethod,      "SameAs", wxFileName_SameAs, 1, 2 },
    { LuaMethod,      "SetCwd", wxFileName_SetCwd, 0, 0 },
    { LuaMethod,      "SetCwdName", wxFileName_SetCwdName, 1, 1 },
    { LuaMethod,      "SetExt", wxFileName_SetExt, 1, 1 },
    { LuaMethod,      "SetFullName", wxFileName_SetFullName, 1, 1 },
    { LuaMethod,      "SetName", wxFileName_SetName, 1, 1 },
    { LuaMethod,      "SetTimes", wxFileName_SetTimes, 3, 3 },
    { LuaMethod,      "SetVolume", wxFileName_SetVolume, 1, 1 },
    { LuaMethod,      "SplitVolumePath", wxFileName_SplitVolumePath, 5, 6 },
    { LuaMethod,      "SplitPath", wxFileName_SplitPath, 4, 5 },
    { LuaMethod,      "Touch", wxFileName_Touch, 0, 0 },
};

static WXLUAMETHOD wxFile_methods[] = {
    { LuaDelete,      "wxFile", wxFile_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFile_Delete, 0, 0 },
    { LuaConstructor, "wxFile", wxFile_constructor, 0, 0 },
    { LuaConstructor, "wxFileOpen", wxFileOpen_constructor, 1, 2 },
    { LuaMethod,      "Access", wxFile_Access, 2, 2 },
    { LuaMethod,      "Exists", wxFile_Exists, 1, 1 },
    { LuaMethod,      "Flush", wxFile_Flush, 0, 0 },
    { LuaMethod,      "IsOpened", wxFile_IsOpened, 0, 0 },
    { LuaMethod,      "Length", wxFile_Length, 0, 0 },
    { LuaMethod,      "Open", wxFile_Open, 1, 2 },
    { LuaMethod,      "Read", wxFile_Read, 2, 2 },
    { LuaMethod,      "Seek", wxFile_Seek, 1, 2 },
    { LuaMethod,      "SeekEnd", wxFile_SeekEnd, 0, 1 },
    { LuaMethod,      "Tell", wxFile_Tell, 0, 0 },
    { LuaMethod,      "Write", wxFile_Write, 2, 2 },
    { LuaMethod,      "WriteString", wxFile_WriteString, 1, 1 },
};

static WXLUAMETHOD wxDir_methods[] = {
    { LuaDelete,      "wxDir", wxDir_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxDir_Delete, 0, 0 },
    { LuaConstructor, "wxDir", wxDir_constructor, 0, 0 },
    { LuaConstructor, "wxDirOpen", wxDirOpen_constructor, 1, 1 },
    { LuaMethod,      "Exists", wxDir_Exists, 1, 1 },
    { LuaMethod,      "Open", wxDir_Open, 1, 1 },
    { LuaMethod,      "IsOpened", wxDir_IsOpened, 0, 0 },
    { LuaMethod,      "GetFirst", wxDir_GetFirst, 1, 3 },
    { LuaMethod,      "GetNext", wxDir_GetNext, 1, 1 },
    { LuaMethod,      "GetAllFiles", wxDir_GetAllFiles, 2, 4 },
};

static WXLUAMETHOD wxGridCellRenderer_methods[] = {
    { LuaDelete,      "wxGridCellRenderer", wxGridCellRenderer_destructor, 0, 0 },
};

static WXLUAMETHOD wxGridCellStringRenderer_methods[] = {
    { LuaDelete,      "wxGridCellStringRenderer", wxGridCellStringRenderer_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellStringRenderer", wxGridCellStringRenderer_constructor, 0, 0 },
};

static WXLUAMETHOD wxGridCellNumberRenderer_methods[] = {
    { LuaDelete,      "wxGridCellNumberRenderer", wxGridCellNumberRenderer_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellNumberRenderer", wxGridCellNumberRenderer_constructor, 0, 0 },
};

static WXLUAMETHOD wxGridCellFloatRenderer_methods[] = {
    { LuaDelete,      "wxGridCellFloatRenderer", wxGridCellFloatRenderer_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellFloatRenderer", wxGridCellFloatRenderer_constructor, 0, 2 },
    { LuaMethod,      "GetWidth", wxGridCellFloatRenderer_GetWidth, 0, 0 },
    { LuaMethod,      "SetWidth", wxGridCellFloatRenderer_SetWidth, 1, 1 },
    { LuaGetProp,     "Width", wxGridCellFloatRenderer_GetWidth, 0, 0 },
    { LuaSetProp,     "Width", wxGridCellFloatRenderer_SetWidth, 1, 1 },
    { LuaMethod,      "GetPrecision", wxGridCellFloatRenderer_GetPrecision, 0, 0 },
    { LuaMethod,      "SetPrecision", wxGridCellFloatRenderer_SetPrecision, 1, 1 },
    { LuaGetProp,     "Precision", wxGridCellFloatRenderer_GetPrecision, 0, 0 },
    { LuaSetProp,     "Precision", wxGridCellFloatRenderer_SetPrecision, 1, 1 },
};

static WXLUAMETHOD wxGridCellBoolRenderer_methods[] = {
    { LuaDelete,      "wxGridCellBoolRenderer", wxGridCellBoolRenderer_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellBoolRenderer", wxGridCellBoolRenderer_constructor, 0, 0 },
};

static WXLUAMETHOD wxGridCellAttr_methods[] = {
    { LuaDelete,      "wxGridCellAttr", wxGridCellAttr_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellAttr", wxGridCellAttr_constructor, 0, 0 },
    { LuaMethod,      "IncRef", wxGridCellAttr_IncRef, 0, 0 },
    { LuaMethod,      "DecRef", wxGridCellAttr_DecRef, 0, 0 },
    { LuaMethod,      "SetTextColour", wxGridCellAttr_SetTextColour, 1, 1 },
    { LuaMethod,      "SetBackgroundColour", wxGridCellAttr_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "SetFont", wxGridCellAttr_SetFont, 1, 1 },
    { LuaMethod,      "SetAlignment", wxGridCellAttr_SetAlignment, 2, 2 },
    { LuaMethod,      "SetReadOnly", wxGridCellAttr_SetReadOnly, 0, 1 },
    { LuaMethod,      "SetRenderer", wxGridCellAttr_SetRenderer, 1, 1 },
    { LuaMethod,      "SetEditor", wxGridCellAttr_SetEditor, 1, 1 },
    { LuaMethod,      "HasTextColour", wxGridCellAttr_HasTextColour, 0, 0 },
    { LuaMethod,      "HasBackgroundColour", wxGridCellAttr_HasBackgroundColour, 0, 0 },
    { LuaMethod,      "HasFont", wxGridCellAttr_HasFont, 0, 0 },
    { LuaMethod,      "HasAlignment", wxGridCellAttr_HasAlignment, 0, 0 },
    { LuaMethod,      "HasRenderer", wxGridCellAttr_HasRenderer, 0, 0 },
    { LuaMethod,      "HasEditor", wxGridCellAttr_HasEditor, 0, 0 },
    { LuaMethod,      "GetTextColour", wxGridCellAttr_GetTextColour, 0, 0 },
    { LuaGetProp,     "TextColour", wxGridCellAttr_GetTextColour, 0, 0 },
    { LuaSetProp,     "TextColour", wxGridCellAttr_SetTextColour, 1, 1 },
    { LuaMethod,      "GetBackgroundColour", wxGridCellAttr_GetBackgroundColour, 0, 0 },
    { LuaGetProp,     "BackgroundColour", wxGridCellAttr_GetBackgroundColour, 0, 0 },
    { LuaSetProp,     "BackgroundColour", wxGridCellAttr_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "GetFont", wxGridCellAttr_GetFont, 0, 0 },
    { LuaGetProp,     "Font", wxGridCellAttr_GetFont, 0, 0 },
    { LuaSetProp,     "Font", wxGridCellAttr_SetFont, 1, 1 },
    { LuaMethod,      "GetAlignment", wxGridCellAttr_GetAlignment, 2, 2 },
    { LuaMethod,      "GetRenderer", wxGridCellAttr_GetRenderer, 3, 3 },
    { LuaMethod,      "GetEditor", wxGridCellAttr_GetEditor, 3, 3 },
    { LuaMethod,      "IsReadOnly", wxGridCellAttr_IsReadOnly, 0, 0 },
    { LuaMethod,      "SetDefAttr", wxGridCellAttr_SetDefAttr, 1, 1 },
    { LuaMethod,      "SetKind", wxGridCellAttr_SetKind, 1, 1 },
    { LuaMethod,      "HasReadWriteMode", wxGridCellAttr_HasReadWriteMode, 0, 0 },
    { LuaMethod,      "MergeWith", wxGridCellAttr_MergeWith, 1, 1 },
};

static WXLUAMETHOD wxGridCellAttrProvider_methods[] = {
    { LuaDelete,      "wxGridCellAttrProvider", wxGridCellAttrProvider_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellAttrProvider", wxGridCellAttrProvider_constructor, 0, 0 },
    { LuaMethod,      "GetAttr", wxGridCellAttrProvider_GetAttr, 3, 3 },
    { LuaMethod,      "SetAttr", wxGridCellAttrProvider_SetAttr, 3, 3 },
    { LuaMethod,      "SetRowAttr", wxGridCellAttrProvider_SetRowAttr, 2, 2 },
    { LuaMethod,      "SetColAttr", wxGridCellAttrProvider_SetColAttr, 2, 2 },
    { LuaMethod,      "UpdateAttrRows", wxGridCellAttrProvider_UpdateAttrRows, 2, 2 },
    { LuaMethod,      "UpdateAttrCols", wxGridCellAttrProvider_UpdateAttrCols, 2, 2 },
};

static WXLUAMETHOD wxGridTableBase_methods[] = {
    { LuaDelete,      "wxGridTableBase", wxGridTableBase_destructor, 0, 0 },
    { LuaMethod,      "SetAttrProvider", wxGridTableBase_SetAttrProvider, 1, 1 },
    { LuaMethod,      "GetNumberRows", wxGridTableBase_GetNumberRows, 0, 0 },
    { LuaGetProp,     "NumberRows", wxGridTableBase_GetNumberRows, 0, 0 },
    { LuaMethod,      "GetNumberCols", wxGridTableBase_GetNumberCols, 0, 0 },
    { LuaGetProp,     "NumberCols", wxGridTableBase_GetNumberCols, 0, 0 },
    { LuaMethod,      "IsEmptyCell", wxGridTableBase_IsEmptyCell, 2, 2 },
    { LuaMethod,      "GetValue", wxGridTableBase_GetValue, 2, 2 },
    { LuaMethod,      "SetValue", wxGridTableBase_SetValue, 3, 3 },
    { LuaMethod,      "GetTypeName", wxGridTableBase_GetTypeName, 2, 2 },
    { LuaMethod,      "GetAttrProvider", wxGridTableBase_GetAttrProvider, 0, 0 },
    { LuaMethod,      "CanGetValueAs", wxGridTableBase_CanGetValueAs, 3, 3 },
    { LuaMethod,      "CanSetValueAs", wxGridTableBase_CanSetValueAs, 3, 3 },
    { LuaMethod,      "GetValueAsBool", wxGridTableBase_GetValueAsBool, 2, 2 },
    { LuaMethod,      "GetValueAsLong", wxGridTableBase_GetValueAsLong, 2, 2 },
    { LuaMethod,      "GetValueAsDouble", wxGridTableBase_GetValueAsDouble, 2, 2 },
    { LuaMethod,      "SetValueAsBool", wxGridTableBase_SetValueAsBool, 3, 3 },
    { LuaMethod,      "SetValueAsLong", wxGridTableBase_SetValueAsLong, 3, 3 },
    { LuaMethod,      "SetValueAsDouble", wxGridTableBase_SetValueAsDouble, 3, 3 },
    { LuaMethod,      "SetView", wxGridTableBase_SetView, 1, 1 },
    { LuaMethod,      "GetView", wxGridTableBase_GetView, 0, 0 },
    { LuaGetProp,     "View", wxGridTableBase_GetView, 0, 0 },
    { LuaSetProp,     "View", wxGridTableBase_SetView, 1, 1 },
    { LuaMethod,      "Clear", wxGridTableBase_Clear, 0, 0 },
    { LuaMethod,      "InsertRows", wxGridTableBase_InsertRows, 0, 2 },
    { LuaMethod,      "AppendRows", wxGridTableBase_AppendRows, 0, 1 },
    { LuaMethod,      "DeleteRows", wxGridTableBase_DeleteRows, 0, 2 },
    { LuaMethod,      "InsertCols", wxGridTableBase_InsertCols, 0, 2 },
    { LuaMethod,      "AppendCols", wxGridTableBase_AppendCols, 0, 1 },
    { LuaMethod,      "DeleteCols", wxGridTableBase_DeleteCols, 0, 2 },
    { LuaMethod,      "GetRowLabelValue", wxGridTableBase_GetRowLabelValue, 1, 1 },
    { LuaMethod,      "GetColLabelValue", wxGridTableBase_GetColLabelValue, 1, 1 },
    { LuaMethod,      "SetRowLabelValue", wxGridTableBase_SetRowLabelValue, 2, 2 },
    { LuaMethod,      "SetColLabelValue", wxGridTableBase_SetColLabelValue, 2, 2 },
    { LuaMethod,      "GetAttr", wxGridTableBase_GetAttr, 3, 3 },
    { LuaMethod,      "SetAttr", wxGridTableBase_SetAttr, 3, 3 },
    { LuaMethod,      "SetRowAttr", wxGridTableBase_SetRowAttr, 2, 2 },
    { LuaMethod,      "SetColAttr", wxGridTableBase_SetColAttr, 2, 2 },
    { LuaMethod,      "CanHaveAttributes", wxGridTableBase_CanHaveAttributes, 0, 0 },
};

static WXLUAMETHOD wxGridStringTable_methods[] = {
    { LuaDelete,      "wxGridStringTable", wxGridStringTable_destructor, 0, 0 },
    { LuaConstructor, "wxGridStringTable", wxGridStringTable_constructor, 0, 2 },
};

static WXLUAMETHOD wxGridTableMessage_methods[] = {
    { LuaDelete,      "wxGridTableMessage", wxGridTableMessage_destructor, 0, 0 },
    { LuaConstructor, "wxGridTableMessage", wxGridTableMessage_constructor, 2, 4 },
    { LuaMethod,      "SetTableObject", wxGridTableMessage_SetTableObject, 1, 1 },
    { LuaMethod,      "GetTableObject", wxGridTableMessage_GetTableObject, 0, 0 },
    { LuaGetProp,     "TableObject", wxGridTableMessage_GetTableObject, 0, 0 },
    { LuaSetProp,     "TableObject", wxGridTableMessage_SetTableObject, 1, 1 },
    { LuaMethod,      "SetId", wxGridTableMessage_SetId, 1, 1 },
    { LuaMethod,      "GetId", wxGridTableMessage_GetId, 0, 0 },
    { LuaGetProp,     "Id", wxGridTableMessage_GetId, 0, 0 },
    { LuaSetProp,     "Id", wxGridTableMessage_SetId, 1, 1 },
    { LuaMethod,      "SetCommandInt", wxGridTableMessage_SetCommandInt, 1, 1 },
    { LuaMethod,      "GetCommandInt", wxGridTableMessage_GetCommandInt, 0, 0 },
    { LuaGetProp,     "CommandInt", wxGridTableMessage_GetCommandInt, 0, 0 },
    { LuaSetProp,     "CommandInt", wxGridTableMessage_SetCommandInt, 1, 1 },
    { LuaMethod,      "SetCommandInt2", wxGridTableMessage_SetCommandInt2, 1, 1 },
    { LuaMethod,      "GetCommandInt2", wxGridTableMessage_GetCommandInt2, 0, 0 },
    { LuaGetProp,     "CommandInt2", wxGridTableMessage_GetCommandInt2, 0, 0 },
    { LuaSetProp,     "CommandInt2", wxGridTableMessage_SetCommandInt2, 1, 1 },
};

static WXLUAMETHOD wxGridCellCoords_methods[] = {
    { LuaDelete,      "wxGridCellCoords", wxGridCellCoords_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellCoords", wxGridCellCoords_constructor, 0, 2 },
    { LuaMethod,      "GetRow", wxGridCellCoords_GetRow, 0, 0 },
    { LuaMethod,      "SetRow", wxGridCellCoords_SetRow, 1, 1 },
    { LuaGetProp,     "Row", wxGridCellCoords_GetRow, 0, 0 },
    { LuaSetProp,     "Row", wxGridCellCoords_SetRow, 1, 1 },
    { LuaMethod,      "GetCol", wxGridCellCoords_GetCol, 0, 0 },
    { LuaMethod,      "SetCol", wxGridCellCoords_SetCol, 1, 1 },
    { LuaGetProp,     "Col", wxGridCellCoords_GetCol, 0, 0 },
    { LuaSetProp,     "Col", wxGridCellCoords_SetCol, 1, 1 },
    { LuaMethod,      "Set", wxGridCellCoords_Set, 2, 2 },
};

static WXLUAMETHOD wxGrid_methods[] = {
    { LuaDelete,      "wxGrid", wxGrid_destructor, 0, 0 },
    { LuaConstructor, "wxGrid", wxGrid_constructor, 2, 6 },
    { LuaMethod,      "CreateGrid", wxGrid_CreateGrid, 2, 3 },
    { LuaMethod,      "InsertRows", wxGrid_InsertRows, 0, 3 },
    { LuaMethod,      "AppendRows", wxGrid_AppendRows, 0, 2 },
    { LuaMethod,      "DeleteRows", wxGrid_DeleteRows, 0, 3 },
    { LuaMethod,      "InsertCols", wxGrid_InsertCols, 0, 3 },
    { LuaMethod,      "AppendCols", wxGrid_AppendCols, 0, 2 },
    { LuaMethod,      "DeleteCols", wxGrid_DeleteCols, 0, 3 },
    { LuaMethod,      "SetSelectionMode", wxGrid_SetSelectionMode, 1, 1 },
    { LuaMethod,      "AutoSize", wxGrid_AutoSize, 0, 0 },
    { LuaMethod,      "AutoSizeRow", wxGrid_AutoSizeRow, 1, 2 },
    { LuaMethod,      "AutoSizeColumn", wxGrid_AutoSizeColumn, 1, 2 },
    { LuaMethod,      "AutoSizeRows", wxGrid_AutoSizeRows, 0, 1 },
    { LuaMethod,      "AutoSizeColumns", wxGrid_AutoSizeColumns, 0, 1 },
    { LuaMethod,      "BeginBatch", wxGrid_BeginBatch, 0, 0 },
    { LuaMethod,      "EndBatch", wxGrid_EndBatch, 0, 0 },
    { LuaMethod,      "CanDragRowSize", wxGrid_CanDragRowSize, 0, 0 },
    { LuaMethod,      "EnableDragRowSize", wxGrid_EnableDragRowSize, 0, 1 },
    { LuaMethod,      "DisableDragRowSize", wxGrid_DisableDragRowSize, 0, 0 },
    { LuaMethod,      "CanDragColSize", wxGrid_CanDragColSize, 0, 0 },
    { LuaMethod,      "EnableDragColSize", wxGrid_EnableDragColSize, 0, 1 },
    { LuaMethod,      "DisableDragColSize", wxGrid_DisableDragColSize, 0, 0 },
    { LuaMethod,      "CanDragGridSize", wxGrid_CanDragGridSize, 0, 0 },
    { LuaMethod,      "EnableDragGridSize", wxGrid_EnableDragGridSize, 0, 1 },
    { LuaMethod,      "DisableDragGridSize", wxGrid_DisableDragGridSize, 0, 0 },
    { LuaMethod,      "GetNumberRows", wxGrid_GetNumberRows, 0, 0 },
    { LuaGetProp,     "NumberRows", wxGrid_GetNumberRows, 0, 0 },
    { LuaMethod,      "GetNumberCols", wxGrid_GetNumberCols, 0, 0 },
    { LuaGetProp,     "NumberCols", wxGrid_GetNumberCols, 0, 0 },
    { LuaMethod,      "ProcessTableMessage", wxGrid_ProcessTableMessage, 1, 1 },
    { LuaMethod,      "GetTable", wxGrid_GetTable, 0, 0 },
    { LuaMethod,      "SetTable", wxGrid_SetTable, 1, 3 },
    { LuaMethod,      "ClearGrid", wxGrid_ClearGrid, 0, 0 },
    { LuaMethod,      "DrawCellHighlight", wxGrid_DrawCellHighlight, 2, 2 },
    { LuaMethod,      "DrawTextRectangle", wxGrid_DrawTextRectangle, 3, 5 },
    { LuaMethod,      "StringToLines", wxGrid_StringToLines, 2, 2 },
    { LuaMethod,      "GetTextBoxSize", wxGrid_GetTextBoxSize, 4, 4 },
    { LuaMethod,      "GetBatchCount", wxGrid_GetBatchCount, 0, 0 },
    { LuaMethod,      "ForceRefresh", wxGrid_ForceRefresh, 0, 0 },
    { LuaMethod,      "IsEditable", wxGrid_IsEditable, 0, 0 },
    { LuaMethod,      "EnableEditing", wxGrid_EnableEditing, 1, 1 },
    { LuaMethod,      "EnableCellEditControl", wxGrid_EnableCellEditControl, 0, 1 },
    { LuaMethod,      "DisableCellEditControl", wxGrid_DisableCellEditControl, 0, 0 },
    { LuaMethod,      "CanEnableCellControl", wxGrid_CanEnableCellControl, 0, 0 },
    { LuaMethod,      "IsCellEditControlEnabled", wxGrid_IsCellEditControlEnabled, 0, 0 },
    { LuaMethod,      "IsCellEditControlShown", wxGrid_IsCellEditControlShown, 0, 0 },
    { LuaMethod,      "IsCurrentCellReadOnly", wxGrid_IsCurrentCellReadOnly, 0, 0 },
    { LuaMethod,      "ShowCellEditControl", wxGrid_ShowCellEditControl, 0, 0 },
    { LuaMethod,      "HideCellEditControl", wxGrid_HideCellEditControl, 0, 0 },
    { LuaMethod,      "SaveEditControlValue", wxGrid_SaveEditControlValue, 0, 0 },
    { LuaMethod,      "XYToCell", wxGrid_XYToCell, 3, 3 },
    { LuaMethod,      "XToCol", wxGrid_XToCol, 1, 1 },
    { LuaMethod,      "YToRow", wxGrid_YToRow, 1, 1 },
    { LuaMethod,      "XToEdgeOfCol", wxGrid_XToEdgeOfCol, 1, 1 },
    { LuaMethod,      "YToEdgeOfRow", wxGrid_YToEdgeOfRow, 1, 1 },
    { LuaMethod,      "CellToRect", wxGrid_CellToRect, 2, 2 },
    { LuaMethod,      "GetGridCursorRow", wxGrid_GetGridCursorRow, 0, 0 },
    { LuaGetProp,     "GridCursorRow", wxGrid_GetGridCursorRow, 0, 0 },
    { LuaMethod,      "GetGridCursorCol", wxGrid_GetGridCursorCol, 0, 0 },
    { LuaGetProp,     "GridCursorCol", wxGrid_GetGridCursorCol, 0, 0 },
    { LuaMethod,      "IsVisible", wxGrid_IsVisible, 2, 3 },
    { LuaMethod,      "MakeCellVisible", wxGrid_MakeCellVisible, 2, 2 },
    { LuaMethod,      "SetGridCursor", wxGrid_SetGridCursor, 2, 2 },
    { LuaMethod,      "GetDefaultRowLabelSize", wxGrid_GetDefaultRowLabelSize, 0, 0 },
    { LuaGetProp,     "DefaultRowLabelSize", wxGrid_GetDefaultRowLabelSize, 0, 0 },
    { LuaMethod,      "GetRowLabelSize", wxGrid_GetRowLabelSize, 0, 0 },
    { LuaMethod,      "GetDefaultColLabelSize", wxGrid_GetDefaultColLabelSize, 0, 0 },
    { LuaGetProp,     "DefaultColLabelSize", wxGrid_GetDefaultColLabelSize, 0, 0 },
    { LuaMethod,      "GetColLabelSize", wxGrid_GetColLabelSize, 0, 0 },
    { LuaMethod,      "GetLabelBackgroundColour", wxGrid_GetLabelBackgroundColour, 0, 0 },
    { LuaMethod,      "GetLabelTextColour", wxGrid_GetLabelTextColour, 0, 0 },
    { LuaMethod,      "GetLabelFont", wxGrid_GetLabelFont, 0, 0 },
    { LuaMethod,      "GetRowLabelAlignment", wxGrid_GetRowLabelAlignment, 2, 2 },
    { LuaMethod,      "GetColLabelAlignment", wxGrid_GetColLabelAlignment, 2, 2 },
    { LuaMethod,      "GetRowLabelValue", wxGrid_GetRowLabelValue, 1, 1 },
    { LuaMethod,      "GetColLabelValue", wxGrid_GetColLabelValue, 1, 1 },
    { LuaMethod,      "GetGridLineColour", wxGrid_GetGridLineColour, 0, 0 },
    { LuaMethod,      "GetCellHighlightColour", wxGrid_GetCellHighlightColour, 0, 0 },
    { LuaMethod,      "GetCellHighlightPenWidth", wxGrid_GetCellHighlightPenWidth, 0, 0 },
    { LuaMethod,      "GetCellHighlightROPenWidth", wxGrid_GetCellHighlightROPenWidth, 0, 0 },
    { LuaMethod,      "SetRowLabelSize", wxGrid_SetRowLabelSize, 1, 1 },
    { LuaGetProp,     "RowLabelSize", wxGrid_GetRowLabelSize, 0, 0 },
    { LuaSetProp,     "RowLabelSize", wxGrid_SetRowLabelSize, 1, 1 },
    { LuaMethod,      "SetColLabelSize", wxGrid_SetColLabelSize, 1, 1 },
    { LuaGetProp,     "ColLabelSize", wxGrid_GetColLabelSize, 0, 0 },
    { LuaSetProp,     "ColLabelSize", wxGrid_SetColLabelSize, 1, 1 },
    { LuaMethod,      "SetLabelBackgroundColour", wxGrid_SetLabelBackgroundColour, 1, 1 },
    { LuaGetProp,     "LabelBackgroundColour", wxGrid_GetLabelBackgroundColour, 0, 0 },
    { LuaSetProp,     "LabelBackgroundColour", wxGrid_SetLabelBackgroundColour, 1, 1 },
    { LuaMethod,      "SetLabelTextColour", wxGrid_SetLabelTextColour, 1, 1 },
    { LuaGetProp,     "LabelTextColour", wxGrid_GetLabelTextColour, 0, 0 },
    { LuaSetProp,     "LabelTextColour", wxGrid_SetLabelTextColour, 1, 1 },
    { LuaMethod,      "SetLabelFont", wxGrid_SetLabelFont, 1, 1 },
    { LuaGetProp,     "LabelFont", wxGrid_GetLabelFont, 0, 0 },
    { LuaSetProp,     "LabelFont", wxGrid_SetLabelFont, 1, 1 },
    { LuaMethod,      "SetRowLabelAlignment", wxGrid_SetRowLabelAlignment, 2, 2 },
    { LuaMethod,      "SetColLabelAlignment", wxGrid_SetColLabelAlignment, 2, 2 },
    { LuaMethod,      "SetRowLabelValue", wxGrid_SetRowLabelValue, 2, 2 },
    { LuaMethod,      "SetColLabelValue", wxGrid_SetColLabelValue, 2, 2 },
    { LuaMethod,      "SetGridLineColour", wxGrid_SetGridLineColour, 1, 1 },
    { LuaMethod,      "SetCellHighlightColour", wxGrid_SetCellHighlightColour, 1, 1 },
    { LuaGetProp,     "CellHighlightColour", wxGrid_GetCellHighlightColour, 0, 0 },
    { LuaSetProp,     "CellHighlightColour", wxGrid_SetCellHighlightColour, 1, 1 },
    { LuaMethod,      "SetCellHighlightPenWidth", wxGrid_SetCellHighlightPenWidth, 1, 1 },
    { LuaGetProp,     "CellHighlightPenWidth", wxGrid_GetCellHighlightPenWidth, 0, 0 },
    { LuaSetProp,     "CellHighlightPenWidth", wxGrid_SetCellHighlightPenWidth, 1, 1 },
    { LuaMethod,      "SetCellHighlightROPenWidth", wxGrid_SetCellHighlightROPenWidth, 1, 1 },
    { LuaGetProp,     "CellHighlightROPenWidth", wxGrid_GetCellHighlightROPenWidth, 0, 0 },
    { LuaSetProp,     "CellHighlightROPenWidth", wxGrid_SetCellHighlightROPenWidth, 1, 1 },
    { LuaMethod,      "SetRowAttr", wxGrid_SetRowAttr, 2, 2 },
    { LuaMethod,      "SetColAttr", wxGrid_SetColAttr, 2, 2 },
    { LuaMethod,      "SetColFormatBool", wxGrid_SetColFormatBool, 1, 1 },
    { LuaMethod,      "SetColFormatNumber", wxGrid_SetColFormatNumber, 1, 1 },
    { LuaMethod,      "SetColFormatFloat", wxGrid_SetColFormatFloat, 1, 3 },
    { LuaMethod,      "SetColFormatCustom", wxGrid_SetColFormatCustom, 2, 2 },
    { LuaMethod,      "EnableGridLines", wxGrid_EnableGridLines, 0, 1 },
    { LuaMethod,      "GridLinesEnabled", wxGrid_GridLinesEnabled, 0, 0 },
    { LuaMethod,      "GetDefaultRowSize", wxGrid_GetDefaultRowSize, 0, 0 },
    { LuaMethod,      "GetRowSize", wxGrid_GetRowSize, 1, 1 },
    { LuaMethod,      "GetDefaultColSize", wxGrid_GetDefaultColSize, 0, 0 },
    { LuaMethod,      "GetColSize", wxGrid_GetColSize, 1, 1 },
    { LuaMethod,      "GetSelectionBackground", wxGrid_GetSelectionBackground, 0, 0 },
    { LuaMethod,      "GetSelectionForeground", wxGrid_GetSelectionForeground, 0, 0 },
    { LuaMethod,      "SetSelectionBackground", wxGrid_SetSelectionBackground, 1, 1 },
    { LuaGetProp,     "SelectionBackground", wxGrid_GetSelectionBackground, 0, 0 },
    { LuaSetProp,     "SelectionBackground", wxGrid_SetSelectionBackground, 1, 1 },
    { LuaMethod,      "SetSelectionForeground", wxGrid_SetSelectionForeground, 1, 1 },
    { LuaGetProp,     "SelectionForeground", wxGrid_GetSelectionForeground, 0, 0 },
    { LuaSetProp,     "SelectionForeground", wxGrid_SetSelectionForeground, 1, 1 },
    { LuaMethod,      "GetDefaultCellBackgroundColour", wxGrid_GetDefaultCellBackgroundColour, 0, 0 },
    { LuaMethod,      "GetCellBackgroundColour", wxGrid_GetCellBackgroundColour, 2, 2 },
    { LuaMethod,      "GetDefaultCellTextColour", wxGrid_GetDefaultCellTextColour, 0, 0 },
    { LuaMethod,      "GetCellTextColour", wxGrid_GetCellTextColour, 2, 2 },
    { LuaMethod,      "GetDefaultCellFont", wxGrid_GetDefaultCellFont, 0, 0 },
    { LuaMethod,      "SetDefaultCellFont", wxGrid_SetDefaultCellFont, 1, 1 },
    { LuaMethod,      "GetCellFont", wxGrid_GetCellFont, 2, 2 },
    { LuaMethod,      "SetCellFont", wxGrid_SetCellFont, 3, 3 },
    { LuaMethod,      "GetDefaultCellAlignment", wxGrid_GetDefaultCellAlignment, 2, 2 },
    { LuaMethod,      "SetDefaultCellAlignment", wxGrid_SetDefaultCellAlignment, 2, 2 },
    { LuaMethod,      "GetCellAlignment", wxGrid_GetCellAlignment, 4, 4 },
    { LuaMethod,      "SetCellAlignment", wxGrid_SetCellAlignment, 4, 4 },
    { LuaMethod,      "SetDefaultColSize", wxGrid_SetDefaultColSize, 1, 2 },
    { LuaMethod,      "SetColSize", wxGrid_SetColSize, 2, 2 },
    { LuaMethod,      "SetColMinimalWidth", wxGrid_SetColMinimalWidth, 2, 2 },
    { LuaMethod,      "SetDefaultRowSize", wxGrid_SetDefaultRowSize, 1, 2 },
    { LuaMethod,      "SetRowSize", wxGrid_SetRowSize, 2, 2 },
    { LuaMethod,      "SetRowMinimalHeight", wxGrid_SetRowMinimalHeight, 2, 2 },
    { LuaMethod,      "SetDefaultCellBackgroundColour", wxGrid_SetDefaultCellBackgroundColour, 1, 1 },
    { LuaMethod,      "SetCellBackgroundColour", wxGrid_SetCellBackgroundColour, 3, 3 },
    { LuaMethod,      "SetDefaultCellTextColour", wxGrid_SetDefaultCellTextColour, 1, 1 },
    { LuaMethod,      "SetCellTextColour", wxGrid_SetCellTextColour, 3, 3 },
    { LuaMethod,      "SetDefaultRenderer", wxGrid_SetDefaultRenderer, 1, 1 },
    { LuaMethod,      "SetCellRenderer", wxGrid_SetCellRenderer, 3, 3 },
    { LuaMethod,      "GetDefaultRenderer", wxGrid_GetDefaultRenderer, 0, 0 },
    { LuaMethod,      "GetCellRenderer", wxGrid_GetCellRenderer, 2, 2 },
    { LuaMethod,      "SetDefaultEditor", wxGrid_SetDefaultEditor, 1, 1 },
    { LuaMethod,      "SetCellEditor", wxGrid_SetCellEditor, 3, 3 },
    { LuaMethod,      "GetDefaultEditor", wxGrid_GetDefaultEditor, 0, 0 },
    { LuaGetProp,     "DefaultEditor", wxGrid_GetDefaultEditor, 0, 0 },
    { LuaSetProp,     "DefaultEditor", wxGrid_SetDefaultEditor, 1, 1 },
    { LuaMethod,      "GetCellEditor", wxGrid_GetCellEditor, 2, 2 },
    { LuaMethod,      "GetCellValue", wxGrid_GetCellValue, 2, 2 },
    { LuaMethod,      "SetCellValue", wxGrid_SetCellValue, 3, 3 },
    { LuaMethod,      "IsReadOnly", wxGrid_IsReadOnly, 2, 2 },
    { LuaMethod,      "SetReadOnly", wxGrid_SetReadOnly, 2, 3 },
    { LuaMethod,      "SelectRow", wxGrid_SelectRow, 1, 2 },
    { LuaMethod,      "SelectCol", wxGrid_SelectCol, 1, 2 },
    { LuaMethod,      "SelectBlock", wxGrid_SelectBlock, 4, 5 },
    { LuaMethod,      "SelectAll", wxGrid_SelectAll, 0, 0 },
    { LuaMethod,      "IsSelection", wxGrid_IsSelection, 0, 0 },
    { LuaMethod,      "ClearSelection", wxGrid_ClearSelection, 0, 0 },
    { LuaMethod,      "IsInSelection", wxGrid_IsInSelection, 2, 2 },
    { LuaMethod,      "BlockToDeviceRect", wxGrid_BlockToDeviceRect, 2, 2 },
    { LuaMethod,      "RegisterDataType", wxGrid_RegisterDataType, 3, 3 },
    { LuaMethod,      "GetDefaultEditorForCell", wxGrid_GetDefaultEditorForCell, 2, 2 },
    { LuaMethod,      "GetDefaultRendererForCell", wxGrid_GetDefaultRendererForCell, 2, 2 },
    { LuaMethod,      "GetDefaultEditorForType", wxGrid_GetDefaultEditorForType, 1, 1 },
    { LuaMethod,      "GetDefaultRendererForType", wxGrid_GetDefaultRendererForType, 1, 1 },
    { LuaMethod,      "SetMargins", wxGrid_SetMargins, 2, 2 },
    { LuaMethod,      "GetGridWindow", wxGrid_GetGridWindow, 0, 0 },
    { LuaGetProp,     "GridWindow", wxGrid_GetGridWindow, 0, 0 },
    { LuaMethod,      "GetGridRowLabelWindow", wxGrid_GetGridRowLabelWindow, 0, 0 },
    { LuaGetProp,     "GridRowLabelWindow", wxGrid_GetGridRowLabelWindow, 0, 0 },
    { LuaMethod,      "GetGridColLabelWindow", wxGrid_GetGridColLabelWindow, 0, 0 },
    { LuaGetProp,     "GridColLabelWindow", wxGrid_GetGridColLabelWindow, 0, 0 },
    { LuaMethod,      "GetGridCornerLabelWindow", wxGrid_GetGridCornerLabelWindow, 0, 0 },
    { LuaGetProp,     "GridCornerLabelWindow", wxGrid_GetGridCornerLabelWindow, 0, 0 },
    { LuaMethod,      "MoveCursorUp", wxGrid_MoveCursorUp, 1, 1 },
    { LuaMethod,      "MoveCursorDown", wxGrid_MoveCursorDown, 1, 1 },
    { LuaMethod,      "MoveCursorLeft", wxGrid_MoveCursorLeft, 1, 1 },
    { LuaMethod,      "MoveCursorRight", wxGrid_MoveCursorRight, 1, 1 },
    { LuaMethod,      "MovePageDown", wxGrid_MovePageDown, 0, 0 },
    { LuaMethod,      "MovePageUp", wxGrid_MovePageUp, 0, 0 },
    { LuaMethod,      "MoveCursorUpBlock", wxGrid_MoveCursorUpBlock, 1, 1 },
    { LuaMethod,      "MoveCursorDownBlock", wxGrid_MoveCursorDownBlock, 1, 1 },
    { LuaMethod,      "MoveCursorLeftBlock", wxGrid_MoveCursorLeftBlock, 1, 1 },
    { LuaMethod,      "MoveCursorRightBlock", wxGrid_MoveCursorRightBlock, 1, 1 },
};

static WXLUAMETHOD wxGridCellEditor_methods[] = {
    { LuaDelete,      "wxGridCellEditor", wxGridCellEditor_destructor, 0, 0 },
    { LuaMethod,      "IsCreated", wxGridCellEditor_IsCreated, 0, 0 },
    { LuaMethod,      "GetControl", wxGridCellEditor_GetControl, 0, 0 },
    { LuaMethod,      "SetControl", wxGridCellEditor_SetControl, 1, 1 },
    { LuaMethod,      "SetParameters", wxGridCellEditor_SetParameters, 1, 1 },
    { LuaMethod,      "IncRef", wxGridCellEditor_IncRef, 0, 0 },
    { LuaMethod,      "DecRef", wxGridCellEditor_DecRef, 0, 0 },
    { LuaMethod,      "Create", wxGridCellEditor_Create, 3, 3 },
    { LuaMethod,      "BeginEdit", wxGridCellEditor_BeginEdit, 3, 3 },
    { LuaMethod,      "EndEdit", wxGridCellEditor_EndEdit, 3, 3 },
    { LuaMethod,      "Reset", wxGridCellEditor_Reset, 0, 0 },
    { LuaMethod,      "SetSize", wxGridCellEditor_SetSize, 1, 1 },
    { LuaMethod,      "Show", wxGridCellEditor_Show, 1, 2 },
    { LuaMethod,      "PaintBackground", wxGridCellEditor_PaintBackground, 2, 2 },
    { LuaMethod,      "IsAcceptedKey", wxGridCellEditor_IsAcceptedKey, 1, 1 },
    { LuaMethod,      "StartingKey", wxGridCellEditor_StartingKey, 1, 1 },
    { LuaMethod,      "StartingClick", wxGridCellEditor_StartingClick, 0, 0 },
    { LuaMethod,      "HandleReturn", wxGridCellEditor_HandleReturn, 1, 1 },
    { LuaMethod,      "Destroy", wxGridCellEditor_Destroy, 0, 0 },
};

static WXLUAMETHOD wxGridCellTextEditor_methods[] = {
    { LuaDelete,      "wxGridCellTextEditor", wxGridCellTextEditor_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellTextEditor", wxGridCellTextEditor_constructor, 0, 0 },
};

static WXLUAMETHOD wxGridCellNumberEditor_methods[] = {
    { LuaDelete,      "wxGridCellNumberEditor", wxGridCellNumberEditor_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellNumberEditor", wxGridCellNumberEditor_constructor, 0, 2 },
};

static WXLUAMETHOD wxGridCellFloatEditor_methods[] = {
    { LuaDelete,      "wxGridCellFloatEditor", wxGridCellFloatEditor_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellFloatEditor", wxGridCellFloatEditor_constructor, 0, 0 },
};

static WXLUAMETHOD wxGridCellBoolEditor_methods[] = {
    { LuaDelete,      "wxGridCellBoolEditor", wxGridCellBoolEditor_destructor, 0, 0 },
    { LuaConstructor, "wxGridCellBoolEditor", wxGridCellBoolEditor_constructor, 0, 0 },
};

static WXLUAMETHOD wxGridEvent_methods[] = {
    { LuaDelete,      "wxGridEvent", wxGridEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxGridEvent_Delete, 0, 0 },
    { LuaConstructor, "wxGridEvent", wxGridEvent_constructor, 3, 12 },
    { LuaMethod,      "GetRow", wxGridEvent_GetRow, 0, 0 },
    { LuaGetProp,     "Row", wxGridEvent_GetRow, 0, 0 },
    { LuaMethod,      "GetCol", wxGridEvent_GetCol, 0, 0 },
    { LuaGetProp,     "Col", wxGridEvent_GetCol, 0, 0 },
    { LuaMethod,      "GetPosition", wxGridEvent_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxGridEvent_GetPosition, 0, 0 },
    { LuaMethod,      "Selecting", wxGridEvent_Selecting, 0, 0 },
    { LuaMethod,      "ControlDown", wxGridEvent_ControlDown, 0, 0 },
    { LuaMethod,      "MetaDown", wxGridEvent_MetaDown, 0, 0 },
    { LuaMethod,      "ShiftDown", wxGridEvent_ShiftDown, 0, 0 },
    { LuaMethod,      "AltDown", wxGridEvent_AltDown, 0, 0 },
};

static WXLUAMETHOD wxGridSizeEvent_methods[] = {
    { LuaDelete,      "wxGridSizeEvent", wxGridSizeEvent_destructor, 0, 0 },
    { LuaConstructor, "wxGridSizeEvent", wxGridSizeEvent_constructor, 3, 10 },
    { LuaMethod,      "GetRowOrCol", wxGridSizeEvent_GetRowOrCol, 0, 0 },
    { LuaGetProp,     "RowOrCol", wxGridSizeEvent_GetRowOrCol, 0, 0 },
    { LuaMethod,      "GetPosition", wxGridSizeEvent_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxGridSizeEvent_GetPosition, 0, 0 },
    { LuaMethod,      "ShiftDown", wxGridSizeEvent_ShiftDown, 0, 0 },
    { LuaMethod,      "ControlDown", wxGridSizeEvent_ControlDown, 0, 0 },
    { LuaMethod,      "AltDown", wxGridSizeEvent_AltDown, 0, 0 },
    { LuaMethod,      "MetaDown", wxGridSizeEvent_MetaDown, 0, 0 },
};

static WXLUAMETHOD wxGridRangeSelectEvent_methods[] = {
    { LuaDelete,      "wxGridRangeSelectEvent", wxGridRangeSelectEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxGridRangeSelectEvent_Delete, 0, 0 },
    { LuaConstructor, "wxGridRangeSelectEvent", wxGridRangeSelectEvent_constructor, 5, 10 },
    { LuaMethod,      "GetLeftCol", wxGridRangeSelectEvent_GetLeftCol, 0, 0 },
    { LuaGetProp,     "LeftCol", wxGridRangeSelectEvent_GetLeftCol, 0, 0 },
    { LuaMethod,      "GetTopRow", wxGridRangeSelectEvent_GetTopRow, 0, 0 },
    { LuaGetProp,     "TopRow", wxGridRangeSelectEvent_GetTopRow, 0, 0 },
    { LuaMethod,      "GetBottomRow", wxGridRangeSelectEvent_GetBottomRow, 0, 0 },
    { LuaGetProp,     "BottomRow", wxGridRangeSelectEvent_GetBottomRow, 0, 0 },
    { LuaMethod,      "GetRightCol", wxGridRangeSelectEvent_GetRightCol, 0, 0 },
    { LuaGetProp,     "RightCol", wxGridRangeSelectEvent_GetRightCol, 0, 0 },
    { LuaMethod,      "Selecting", wxGridRangeSelectEvent_Selecting, 0, 0 },
    { LuaMethod,      "ShiftDown", wxGridRangeSelectEvent_ShiftDown, 0, 0 },
    { LuaMethod,      "ControlDown", wxGridRangeSelectEvent_ControlDown, 0, 0 },
    { LuaMethod,      "AltDown", wxGridRangeSelectEvent_AltDown, 0, 0 },
    { LuaMethod,      "MetaDown", wxGridRangeSelectEvent_MetaDown, 0, 0 },
};

static WXLUAMETHOD wxGridEditorCreatedEvent_methods[] = {
    { LuaDelete,      "wxGridEditorCreatedEvent", wxGridEditorCreatedEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxGridEditorCreatedEvent_Delete, 0, 0 },
    { LuaConstructor, "wxGridEditorCreatedEvent", wxGridEditorCreatedEvent_constructor, 6, 6 },
    { LuaMethod,      "GetRow", wxGridEditorCreatedEvent_GetRow, 0, 0 },
    { LuaMethod,      "GetCol", wxGridEditorCreatedEvent_GetCol, 0, 0 },
    { LuaMethod,      "GetControl", wxGridEditorCreatedEvent_GetControl, 0, 0 },
    { LuaMethod,      "SetRow", wxGridEditorCreatedEvent_SetRow, 1, 1 },
    { LuaGetProp,     "Row", wxGridEditorCreatedEvent_GetRow, 0, 0 },
    { LuaSetProp,     "Row", wxGridEditorCreatedEvent_SetRow, 1, 1 },
    { LuaMethod,      "SetCol", wxGridEditorCreatedEvent_SetCol, 1, 1 },
    { LuaGetProp,     "Col", wxGridEditorCreatedEvent_GetCol, 0, 0 },
    { LuaSetProp,     "Col", wxGridEditorCreatedEvent_SetCol, 1, 1 },
    { LuaMethod,      "SetControl", wxGridEditorCreatedEvent_SetControl, 1, 1 },
    { LuaGetProp,     "Control", wxGridEditorCreatedEvent_GetControl, 0, 0 },
    { LuaSetProp,     "Control", wxGridEditorCreatedEvent_SetControl, 1, 1 },
};

static WXLUAMETHOD wxHelpController_methods[] = {
    { LuaDelete,      "wxHelpController", wxHelpController_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxHelpController_Delete, 0, 0 },
    { LuaConstructor, "wxHelpController", wxHelpController_constructor, 0, 0 },
    { LuaMethod,      "Initialize", wxHelpController_Initialize, 1, 1 },
    { LuaMethod,      "DisplayBlock", wxHelpController_DisplayBlock, 1, 1 },
    { LuaMethod,      "DisplayContents", wxHelpController_DisplayContents, 0, 0 },
    { LuaMethod,      "DisplayContextPopup", wxHelpController_DisplayContextPopup, 1, 1 },
    { LuaMethod,      "DisplaySection", wxHelpController_DisplaySection, 1, 1 },
    { LuaMethod,      "DisplayTextPopup", wxHelpController_DisplayTextPopup, 2, 2 },
    { LuaMethod,      "GetFrameParameters", wxHelpController_GetFrameParameters, 0, 3 },
    { LuaMethod,      "KeywordSearch", wxHelpController_KeywordSearch, 1, 1 },
    { LuaMethod,      "LoadFile", wxHelpController_LoadFile, 0, 1 },
    { LuaMethod,      "SetFrameParameters", wxHelpController_SetFrameParameters, 2, 4 },
    { LuaMethod,      "SetViewer", wxHelpController_SetViewer, 2, 2 },
    { LuaMethod,      "Quit", wxHelpController_Quit, 0, 0 },
};

static WXLUAMETHOD wxWinHelpController_methods[] = {
    { LuaDelete,      "wxWinHelpController", wxWinHelpController_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxWinHelpController_Delete, 0, 0 },
    { LuaConstructor, "wxWinHelpController", wxWinHelpController_constructor, 0, 0 },
};

static WXLUAMETHOD wxBestHelpController_methods[] = {
    { LuaDelete,      "wxBestHelpController", wxBestHelpController_destructor, 0, 0 },
};

static WXLUAMETHOD wxHtmlContentsItem_methods[] = {
    { LuaDelete,      "wxHtmlContentsItem", wxHtmlContentsItem_destructor, 0, 0 },
};

static WXLUAMETHOD wxHtmlHelpData_methods[] = {
    { LuaDelete,      "wxHtmlHelpData", wxHtmlHelpData_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxHtmlHelpData_Delete, 0, 0 },
    { LuaConstructor, "wxHtmlHelpData", wxHtmlHelpData_constructor, 0, 0 },
    { LuaMethod,      "AddBook", wxHtmlHelpData_AddBook, 1, 1 },
    { LuaMethod,      "FindPageById", wxHtmlHelpData_FindPageById, 1, 1 },
    { LuaMethod,      "FindPageByName", wxHtmlHelpData_FindPageByName, 1, 1 },
    { LuaMethod,      "GetContents", wxHtmlHelpData_GetContents, 0, 0 },
    { LuaGetProp,     "Contents", wxHtmlHelpData_GetContents, 0, 0 },
    { LuaMethod,      "GetContentsCnt", wxHtmlHelpData_GetContentsCnt, 0, 0 },
    { LuaGetProp,     "ContentsCnt", wxHtmlHelpData_GetContentsCnt, 0, 0 },
    { LuaMethod,      "GetIndex", wxHtmlHelpData_GetIndex, 0, 0 },
    { LuaGetProp,     "Index", wxHtmlHelpData_GetIndex, 0, 0 },
    { LuaMethod,      "GetIndexCnt", wxHtmlHelpData_GetIndexCnt, 0, 0 },
    { LuaGetProp,     "IndexCnt", wxHtmlHelpData_GetIndexCnt, 0, 0 },
    { LuaMethod,      "SetTempDir", wxHtmlHelpData_SetTempDir, 1, 1 },
};

static WXLUAMETHOD wxHtmlHelpController_methods[] = {
    { LuaDelete,      "wxHtmlHelpController", wxHtmlHelpController_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxHtmlHelpController_Delete, 0, 0 },
    { LuaConstructor, "wxHtmlHelpController", wxHtmlHelpController_constructor, 0, 1 },
    { LuaMethod,      "AddBook", wxHtmlHelpController_AddBook, 2, 2 },
    { LuaMethod,      "Display", wxHtmlHelpController_Display, 1, 1 },
    { LuaMethod,      "DisplayId", wxHtmlHelpController_DisplayId, 1, 1 },
    { LuaMethod,      "DisplayContents", wxHtmlHelpController_DisplayContents, 0, 0 },
    { LuaMethod,      "DisplayIndex", wxHtmlHelpController_DisplayIndex, 0, 0 },
    { LuaMethod,      "KeywordSearch", wxHtmlHelpController_KeywordSearch, 1, 1 },
    { LuaMethod,      "ReadCustomization", wxHtmlHelpController_ReadCustomization, 1, 2 },
    { LuaMethod,      "SetTempDir", wxHtmlHelpController_SetTempDir, 1, 1 },
    { LuaMethod,      "SetTitleFormat", wxHtmlHelpController_SetTitleFormat, 1, 1 },
    { LuaMethod,      "UseConfig", wxHtmlHelpController_UseConfig, 1, 2 },
    { LuaMethod,      "WriteCustomization", wxHtmlHelpController_WriteCustomization, 1, 2 },
    { LuaMethod,      "DisplaySectionString", wxHtmlHelpController_DisplaySectionString, 1, 1 },
};

static WXLUAMETHOD wxHtmlCell_methods[] = {
    { LuaDelete,      "wxHtmlCell", wxHtmlCell_destructor, 0, 0 },
    { LuaConstructor, "wxHtmlCell", wxHtmlCell_constructor, 0, 0 },
    { LuaMethod,      "AdjustPagebreak", wxHtmlCell_AdjustPagebreak, 1, 1 },
    { LuaMethod,      "Find", wxHtmlCell_Find, 1, 2 },
    { LuaMethod,      "GetDescent", wxHtmlCell_GetDescent, 0, 0 },
    { LuaGetProp,     "Descent", wxHtmlCell_GetDescent, 0, 0 },
    { LuaMethod,      "GetHeight", wxHtmlCell_GetHeight, 0, 0 },
    { LuaGetProp,     "Height", wxHtmlCell_GetHeight, 0, 0 },
    { LuaMethod,      "GetId", wxHtmlCell_GetId, 0, 0 },
    { LuaMethod,      "GetLink", wxHtmlCell_GetLink, 0, 2 },
    { LuaMethod,      "GetNext", wxHtmlCell_GetNext, 0, 0 },
    { LuaMethod,      "GetParent", wxHtmlCell_GetParent, 0, 0 },
    { LuaMethod,      "GetPosX", wxHtmlCell_GetPosX, 0, 0 },
    { LuaGetProp,     "PosX", wxHtmlCell_GetPosX, 0, 0 },
    { LuaMethod,      "GetPosY", wxHtmlCell_GetPosY, 0, 0 },
    { LuaGetProp,     "PosY", wxHtmlCell_GetPosY, 0, 0 },
    { LuaMethod,      "GetWidth", wxHtmlCell_GetWidth, 0, 0 },
    { LuaGetProp,     "Width", wxHtmlCell_GetWidth, 0, 0 },
    { LuaMethod,      "Layout", wxHtmlCell_Layout, 1, 1 },
    { LuaMethod,      "SetId", wxHtmlCell_SetId, 1, 1 },
    { LuaGetProp,     "Id", wxHtmlCell_GetId, 0, 0 },
    { LuaSetProp,     "Id", wxHtmlCell_SetId, 1, 1 },
    { LuaMethod,      "SetLink", wxHtmlCell_SetLink, 1, 1 },
    { LuaMethod,      "SetNext", wxHtmlCell_SetNext, 1, 1 },
    { LuaGetProp,     "Next", wxHtmlCell_GetNext, 0, 0 },
    { LuaSetProp,     "Next", wxHtmlCell_SetNext, 1, 1 },
    { LuaMethod,      "SetParent", wxHtmlCell_SetParent, 1, 1 },
    { LuaGetProp,     "Parent", wxHtmlCell_GetParent, 0, 0 },
    { LuaSetProp,     "Parent", wxHtmlCell_SetParent, 1, 1 },
    { LuaMethod,      "SetPos", wxHtmlCell_SetPos, 2, 2 },
};

static WXLUAMETHOD wxHtmlWidgetCell_methods[] = {
    { LuaDelete,      "wxHtmlWidgetCell", wxHtmlWidgetCell_destructor, 0, 0 },
    { LuaConstructor, "wxHtmlWidgetCell", wxHtmlWidgetCell_constructor, 1, 2 },
};

static WXLUAMETHOD wxHtmlLinkInfo_methods[] = {
    { LuaDelete,      "wxHtmlLinkInfo", wxHtmlLinkInfo_destructor, 0, 0 },
    { LuaConstructor, "wxHtmlLinkInfo", wxHtmlLinkInfo_constructor, 1, 2 },
    { LuaMethod,      "GetEvent", wxHtmlLinkInfo_GetEvent, 0, 0 },
    { LuaGetProp,     "Event", wxHtmlLinkInfo_GetEvent, 0, 0 },
    { LuaMethod,      "GetHtmlCell", wxHtmlLinkInfo_GetHtmlCell, 0, 0 },
    { LuaGetProp,     "HtmlCell", wxHtmlLinkInfo_GetHtmlCell, 0, 0 },
    { LuaMethod,      "GetHref", wxHtmlLinkInfo_GetHref, 0, 0 },
    { LuaGetProp,     "Href", wxHtmlLinkInfo_GetHref, 0, 0 },
    { LuaMethod,      "GetTarget", wxHtmlLinkInfo_GetTarget, 0, 0 },
    { LuaGetProp,     "Target", wxHtmlLinkInfo_GetTarget, 0, 0 },
};

static WXLUAMETHOD wxHtmlTag_methods[] = {
    { LuaDelete,      "wxHtmlTag", wxHtmlTag_destructor, 0, 0 },
    { LuaMethod,      "GetAllParams", wxHtmlTag_GetAllParams, 0, 0 },
    { LuaMethod,      "GetBeginPos", wxHtmlTag_GetBeginPos, 0, 0 },
    { LuaGetProp,     "BeginPos", wxHtmlTag_GetBeginPos, 0, 0 },
    { LuaMethod,      "GetEndPos1", wxHtmlTag_GetEndPos1, 0, 0 },
    { LuaGetProp,     "EndPos1", wxHtmlTag_GetEndPos1, 0, 0 },
    { LuaMethod,      "GetEndPos2", wxHtmlTag_GetEndPos2, 0, 0 },
    { LuaGetProp,     "EndPos2", wxHtmlTag_GetEndPos2, 0, 0 },
    { LuaMethod,      "GetName", wxHtmlTag_GetName, 0, 0 },
    { LuaGetProp,     "Name", wxHtmlTag_GetName, 0, 0 },
    { LuaMethod,      "GetParam", wxHtmlTag_GetParam, 1, 2 },
    { LuaMethod,      "HasEnding", wxHtmlTag_HasEnding, 0, 0 },
    { LuaMethod,      "HasParam", wxHtmlTag_HasParam, 1, 1 },
    { LuaMethod,      "GetParamAsColour", wxHtmlTag_GetParamAsColour, 2, 2 },
    { LuaMethod,      "GetParamAsInt", wxHtmlTag_GetParamAsInt, 2, 2 },
};

static WXLUAMETHOD wxHtmlContainerCell_methods[] = {
    { LuaDelete,      "wxHtmlContainerCell", wxHtmlContainerCell_destructor, 0, 0 },
    { LuaConstructor, "wxHtmlContainerCell", wxHtmlContainerCell_constructor, 1, 1 },
    { LuaMethod,      "GetAlignHor", wxHtmlContainerCell_GetAlignHor, 0, 0 },
    { LuaMethod,      "GetAlignVer", wxHtmlContainerCell_GetAlignVer, 0, 0 },
    { LuaMethod,      "GetFirstChild", wxHtmlContainerCell_GetFirstChild, 0, 0 },
    { LuaMethod,      "GetIndent", wxHtmlContainerCell_GetIndent, 1, 1 },
    { LuaMethod,      "GetIndentUnits", wxHtmlContainerCell_GetIndentUnits, 1, 1 },
    { LuaMethod,      "InsertCell", wxHtmlContainerCell_InsertCell, 1, 1 },
    { LuaMethod,      "SetAlign", wxHtmlContainerCell_SetAlign, 1, 1 },
    { LuaMethod,      "SetAlignHor", wxHtmlContainerCell_SetAlignHor, 1, 1 },
    { LuaGetProp,     "AlignHor", wxHtmlContainerCell_GetAlignHor, 0, 0 },
    { LuaSetProp,     "AlignHor", wxHtmlContainerCell_SetAlignHor, 1, 1 },
    { LuaMethod,      "SetAlignVer", wxHtmlContainerCell_SetAlignVer, 1, 1 },
    { LuaGetProp,     "AlignVer", wxHtmlContainerCell_GetAlignVer, 0, 0 },
    { LuaSetProp,     "AlignVer", wxHtmlContainerCell_SetAlignVer, 1, 1 },
    { LuaMethod,      "SetBackgroundColour", wxHtmlContainerCell_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "SetBorder", wxHtmlContainerCell_SetBorder, 2, 2 },
    { LuaMethod,      "SetIndent", wxHtmlContainerCell_SetIndent, 2, 3 },
    { LuaMethod,      "SetMinHeight", wxHtmlContainerCell_SetMinHeight, 1, 2 },
    { LuaMethod,      "SetWidthFloat", wxHtmlContainerCell_SetWidthFloat, 2, 2 },
    { LuaMethod,      "SetWidthFloatFromTag", wxHtmlContainerCell_SetWidthFloatFromTag, 1, 2 },
};

static WXLUAMETHOD wxHtmlWindow_methods[] = {
    { LuaDelete,      "wxHtmlWindow", wxHtmlWindow_destructor, 0, 0 },
    { LuaConstructor, "wxHtmlWindow", wxHtmlWindow_constructor, 1, 6 },
    { LuaMethod,      "AppendToPage", wxHtmlWindow_AppendToPage, 1, 1 },
    { LuaMethod,      "GetInternalRepresentation", wxHtmlWindow_GetInternalRepresentation, 0, 0 },
    { LuaGetProp,     "InternalRepresentation", wxHtmlWindow_GetInternalRepresentation, 0, 0 },
    { LuaMethod,      "GetOpenedAnchor", wxHtmlWindow_GetOpenedAnchor, 0, 0 },
    { LuaGetProp,     "OpenedAnchor", wxHtmlWindow_GetOpenedAnchor, 0, 0 },
    { LuaMethod,      "GetOpenedPage", wxHtmlWindow_GetOpenedPage, 0, 0 },
    { LuaGetProp,     "OpenedPage", wxHtmlWindow_GetOpenedPage, 0, 0 },
    { LuaMethod,      "GetOpenedPageTitle", wxHtmlWindow_GetOpenedPageTitle, 0, 0 },
    { LuaGetProp,     "OpenedPageTitle", wxHtmlWindow_GetOpenedPageTitle, 0, 0 },
    { LuaMethod,      "GetRelatedFrame", wxHtmlWindow_GetRelatedFrame, 0, 0 },
    { LuaGetProp,     "RelatedFrame", wxHtmlWindow_GetRelatedFrame, 0, 0 },
    { LuaMethod,      "HistoryBack", wxHtmlWindow_HistoryBack, 0, 0 },
    { LuaMethod,      "HistoryCanBack", wxHtmlWindow_HistoryCanBack, 0, 0 },
    { LuaMethod,      "HistoryCanForward", wxHtmlWindow_HistoryCanForward, 0, 0 },
    { LuaMethod,      "HistoryClear", wxHtmlWindow_HistoryClear, 0, 0 },
    { LuaMethod,      "HistoryForward", wxHtmlWindow_HistoryForward, 0, 0 },
    { LuaMethod,      "LoadPage", wxHtmlWindow_LoadPage, 1, 1 },
    { LuaMethod,      "ReadCustomization", wxHtmlWindow_ReadCustomization, 1, 2 },
    { LuaMethod,      "SetBorders", wxHtmlWindow_SetBorders, 1, 1 },
    { LuaMethod,      "SetFonts", wxHtmlWindow_SetFonts, 3, 3 },
    { LuaMethod,      "SetPage", wxHtmlWindow_SetPage, 1, 1 },
    { LuaMethod,      "SetRelatedFrame", wxHtmlWindow_SetRelatedFrame, 2, 2 },
    { LuaMethod,      "SetRelatedStatusBar", wxHtmlWindow_SetRelatedStatusBar, 1, 1 },
    { LuaMethod,      "WriteCustomization", wxHtmlWindow_WriteCustomization, 1, 2 },
};

static WXLUAMETHOD wxHtmlParser_methods[] = {
    { LuaDelete,      "wxHtmlParser", wxHtmlParser_destructor, 0, 0 },
    { LuaMethod,      "DoParsing", wxHtmlParser_DoParsing, 2, 2 },
    { LuaMethod,      "DoParsingWhole", wxHtmlParser_DoParsingWhole, 0, 0 },
    { LuaMethod,      "DoneParser", wxHtmlParser_DoneParser, 0, 0 },
    { LuaMethod,      "InitParser", wxHtmlParser_InitParser, 1, 1 },
};

static WXLUAMETHOD wxHtmlWinParser_methods[] = {
    { LuaDelete,      "wxHtmlWinParser", wxHtmlWinParser_destructor, 0, 0 },
    { LuaConstructor, "wxHtmlWinParser", wxHtmlWinParser_constructor, 1, 1 },
    { LuaMethod,      "CloseContainer", wxHtmlWinParser_CloseContainer, 0, 0 },
    { LuaMethod,      "CreateCurrentFont", wxHtmlWinParser_CreateCurrentFont, 0, 0 },
    { LuaMethod,      "GetActualColor", wxHtmlWinParser_GetActualColor, 0, 0 },
    { LuaMethod,      "GetAlign", wxHtmlWinParser_GetAlign, 0, 0 },
    { LuaMethod,      "GetCharHeight", wxHtmlWinParser_GetCharHeight, 0, 0 },
    { LuaMethod,      "GetCharWidth", wxHtmlWinParser_GetCharWidth, 0, 0 },
    { LuaMethod,      "GetContainer", wxHtmlWinParser_GetContainer, 0, 0 },
    { LuaMethod,      "GetDC", wxHtmlWinParser_GetDC, 0, 0 },
    { LuaMethod,      "GetFontBold", wxHtmlWinParser_GetFontBold, 0, 0 },
    { LuaMethod,      "GetFontFace", wxHtmlWinParser_GetFontFace, 0, 0 },
    { LuaMethod,      "GetFontFixed", wxHtmlWinParser_GetFontFixed, 0, 0 },
    { LuaMethod,      "GetFontItalic", wxHtmlWinParser_GetFontItalic, 0, 0 },
    { LuaMethod,      "GetFontSize", wxHtmlWinParser_GetFontSize, 0, 0 },
    { LuaMethod,      "GetFontUnderlined", wxHtmlWinParser_GetFontUnderlined, 0, 0 },
    { LuaMethod,      "GetLink", wxHtmlWinParser_GetLink, 0, 0 },
    { LuaMethod,      "GetLinkColor", wxHtmlWinParser_GetLinkColor, 0, 0 },
    { LuaMethod,      "GetWindow", wxHtmlWinParser_GetWindow, 0, 0 },
    { LuaGetProp,     "Window", wxHtmlWinParser_GetWindow, 0, 0 },
    { LuaMethod,      "OpenContainer", wxHtmlWinParser_OpenContainer, 0, 0 },
    { LuaMethod,      "SetActualColor", wxHtmlWinParser_SetActualColor, 1, 1 },
    { LuaGetProp,     "ActualColor", wxHtmlWinParser_GetActualColor, 0, 0 },
    { LuaSetProp,     "ActualColor", wxHtmlWinParser_SetActualColor, 1, 1 },
    { LuaMethod,      "SetAlign", wxHtmlWinParser_SetAlign, 1, 1 },
    { LuaGetProp,     "Align", wxHtmlWinParser_GetAlign, 0, 0 },
    { LuaSetProp,     "Align", wxHtmlWinParser_SetAlign, 1, 1 },
    { LuaMethod,      "SetContainer", wxHtmlWinParser_SetContainer, 1, 1 },
    { LuaGetProp,     "Container", wxHtmlWinParser_GetContainer, 0, 0 },
    { LuaSetProp,     "Container", wxHtmlWinParser_SetContainer, 1, 1 },
    { LuaMethod,      "SetDC", wxHtmlWinParser_SetDC, 1, 2 },
    { LuaGetProp,     "DC", wxHtmlWinParser_GetDC, 0, 0 },
    { LuaSetProp,     "DC", wxHtmlWinParser_SetDC, 1, 1 },
    { LuaMethod,      "SetFontBold", wxHtmlWinParser_SetFontBold, 1, 1 },
    { LuaGetProp,     "FontBold", wxHtmlWinParser_GetFontBold, 0, 0 },
    { LuaSetProp,     "FontBold", wxHtmlWinParser_SetFontBold, 1, 1 },
    { LuaMethod,      "SetFontFace", wxHtmlWinParser_SetFontFace, 1, 1 },
    { LuaGetProp,     "FontFace", wxHtmlWinParser_GetFontFace, 0, 0 },
    { LuaSetProp,     "FontFace", wxHtmlWinParser_SetFontFace, 1, 1 },
    { LuaMethod,      "SetFontFixed", wxHtmlWinParser_SetFontFixed, 1, 1 },
    { LuaGetProp,     "FontFixed", wxHtmlWinParser_GetFontFixed, 0, 0 },
    { LuaSetProp,     "FontFixed", wxHtmlWinParser_SetFontFixed, 1, 1 },
    { LuaMethod,      "SetFontItalic", wxHtmlWinParser_SetFontItalic, 1, 1 },
    { LuaGetProp,     "FontItalic", wxHtmlWinParser_GetFontItalic, 0, 0 },
    { LuaSetProp,     "FontItalic", wxHtmlWinParser_SetFontItalic, 1, 1 },
    { LuaMethod,      "SetFontSize", wxHtmlWinParser_SetFontSize, 1, 1 },
    { LuaGetProp,     "FontSize", wxHtmlWinParser_GetFontSize, 0, 0 },
    { LuaSetProp,     "FontSize", wxHtmlWinParser_SetFontSize, 1, 1 },
    { LuaMethod,      "SetFontUnderlined", wxHtmlWinParser_SetFontUnderlined, 1, 1 },
    { LuaGetProp,     "FontUnderlined", wxHtmlWinParser_GetFontUnderlined, 0, 0 },
    { LuaSetProp,     "FontUnderlined", wxHtmlWinParser_SetFontUnderlined, 1, 1 },
    { LuaMethod,      "SetFonts", wxHtmlWinParser_SetFonts, 3, 3 },
    { LuaMethod,      "SetLink", wxHtmlWinParser_SetLink, 1, 1 },
    { LuaGetProp,     "Link", wxHtmlWinParser_GetLink, 0, 0 },
    { LuaSetProp,     "Link", wxHtmlWinParser_SetLink, 1, 1 },
    { LuaMethod,      "SetLinkColor", wxHtmlWinParser_SetLinkColor, 1, 1 },
    { LuaGetProp,     "LinkColor", wxHtmlWinParser_GetLinkColor, 0, 0 },
    { LuaSetProp,     "LinkColor", wxHtmlWinParser_SetLinkColor, 1, 1 },
};

static WXLUAMETHOD wxHtmlDCRenderer_methods[] = {
    { LuaDelete,      "wxHtmlDCRenderer", wxHtmlDCRenderer_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxHtmlDCRenderer_Delete, 0, 0 },
    { LuaConstructor, "wxHtmlDCRenderer", wxHtmlDCRenderer_constructor, 0, 0 },
    { LuaMethod,      "SetDC", wxHtmlDCRenderer_SetDC, 1, 2 },
    { LuaMethod,      "SetSize", wxHtmlDCRenderer_SetSize, 2, 2 },
    { LuaMethod,      "SetHtmlText", wxHtmlDCRenderer_SetHtmlText, 1, 3 },
    { LuaMethod,      "Render", wxHtmlDCRenderer_Render, 2, 4 },
    { LuaMethod,      "GetTotalHeight", wxHtmlDCRenderer_GetTotalHeight, 0, 0 },
    { LuaGetProp,     "TotalHeight", wxHtmlDCRenderer_GetTotalHeight, 0, 0 },
};

static WXLUAMETHOD wxHtmlEasyPrinting_methods[] = {
    { LuaDelete,      "wxHtmlEasyPrinting", wxHtmlEasyPrinting_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxHtmlEasyPrinting_Delete, 0, 0 },
    { LuaConstructor, "wxHtmlEasyPrinting", wxHtmlEasyPrinting_constructor, 0, 2 },
    { LuaMethod,      "PreviewFile", wxHtmlEasyPrinting_PreviewFile, 1, 1 },
    { LuaMethod,      "PreviewText", wxHtmlEasyPrinting_PreviewText, 1, 2 },
    { LuaMethod,      "PrintFile", wxHtmlEasyPrinting_PrintFile, 1, 1 },
    { LuaMethod,      "PrintText", wxHtmlEasyPrinting_PrintText, 1, 2 },
    { LuaMethod,      "PageSetup", wxHtmlEasyPrinting_PageSetup, 0, 0 },
    { LuaMethod,      "SetHeader", wxHtmlEasyPrinting_SetHeader, 1, 2 },
    { LuaMethod,      "SetFooter", wxHtmlEasyPrinting_SetFooter, 1, 2 },
    { LuaMethod,      "SetFonts", wxHtmlEasyPrinting_SetFonts, 2, 3 },
    { LuaMethod,      "SetStandardFonts", wxHtmlEasyPrinting_SetStandardFonts, 0, 3 },
    { LuaMethod,      "GetPrintData", wxHtmlEasyPrinting_GetPrintData, 0, 0 },
    { LuaGetProp,     "PrintData", wxHtmlEasyPrinting_GetPrintData, 0, 0 },
    { LuaMethod,      "GetPageSetupData", wxHtmlEasyPrinting_GetPageSetupData, 0, 0 },
    { LuaGetProp,     "PageSetupData", wxHtmlEasyPrinting_GetPageSetupData, 0, 0 },
};

static WXLUAMETHOD wxHtmlPrintout_methods[] = {
    { LuaDelete,      "wxHtmlPrintout", wxHtmlPrintout_destructor, 0, 0 },
    { LuaConstructor, "wxHtmlPrintout", wxHtmlPrintout_constructor, 0, 1 },
    { LuaMethod,      "SetFooter", wxHtmlPrintout_SetFooter, 1, 2 },
    { LuaMethod,      "SetHeader", wxHtmlPrintout_SetHeader, 1, 2 },
    { LuaMethod,      "SetHtmlFile", wxHtmlPrintout_SetHtmlFile, 1, 1 },
    { LuaMethod,      "SetHtmlText", wxHtmlPrintout_SetHtmlText, 1, 3 },
    { LuaMethod,      "SetMargins", wxHtmlPrintout_SetMargins, 0, 5 },
};

static WXLUAMETHOD wxImage_methods[] = {
    { LuaDelete,      "wxImage", wxImage_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxImage_Delete, 0, 0 },
    { LuaConstructor, "wxImage", wxImage_constructor, 1, 1 },
    { LuaConstructor, "wxDefaultImage", wxDefaultImage_constructor, 0, 0 },
    { LuaConstructor, "wxImageFromBitmap", wxImageFromBitmap_constructor, 1, 1 },
    { LuaConstructor, "wxEmptyImage", wxEmptyImage_constructor, 2, 2 },
    { LuaConstructor, "wxImageFromData", wxImageFromData_constructor, 3, 4 },
    { LuaConstructor, "wxImageFromFile", wxImageFromFile_constructor, 1, 2 },
    { LuaMethod,      "AddHandler", wxImage_AddHandler, 1, 1 },
    { LuaMethod,      "CleanUpHandlers", wxImage_CleanUpHandlers, 0, 0 },
    { LuaMethod,      "Copy", wxImage_Copy, 0, 0 },
    { LuaMethod,      "Create", wxImage_Create, 2, 2 },
    { LuaMethod,      "Destroy", wxImage_Destroy, 0, 0 },
    { LuaMethod,      "GetBlue", wxImage_GetBlue, 2, 2 },
    { LuaMethod,      "GetGreen", wxImage_GetGreen, 2, 2 },
    { LuaMethod,      "GetRed", wxImage_GetRed, 2, 2 },
    { LuaMethod,      "GetHandlers", wxImage_GetHandlers, 0, 0 },
    { LuaMethod,      "GetHeight", wxImage_GetHeight, 0, 0 },
    { LuaMethod,      "GetMaskBlue", wxImage_GetMaskBlue, 0, 0 },
    { LuaMethod,      "GetMaskGreen", wxImage_GetMaskGreen, 0, 0 },
    { LuaMethod,      "GetMaskRed", wxImage_GetMaskRed, 0, 0 },
    { LuaMethod,      "GetSubImage", wxImage_GetSubImage, 1, 1 },
    { LuaMethod,      "GetWidth", wxImage_GetWidth, 0, 0 },
    { LuaMethod,      "GetOption", wxImage_GetOption, 1, 1 },
    { LuaMethod,      "GetOptionInt", wxImage_GetOptionInt, 1, 1 },
    { LuaMethod,      "HasOption", wxImage_HasOption, 1, 1 },
    { LuaMethod,      "HasMask", wxImage_HasMask, 0, 0 },
    { LuaMethod,      "InitStandardHandlers", wxImage_InitStandardHandlers, 0, 0 },
    { LuaMethod,      "InsertHandler", wxImage_InsertHandler, 1, 1 },
    { LuaMethod,      "LoadFile", wxImage_LoadFile, 1, 2 },
    { LuaMethod,      "LoadMimeFile", wxImage_LoadMimeFile, 2, 2 },
    { LuaMethod,      "Ok", wxImage_Ok, 0, 0 },
    { LuaMethod,      "RemoveHandler", wxImage_RemoveHandler, 1, 1 },
    { LuaMethod,      "SaveFile", wxImage_SaveFile, 2, 2 },
    { LuaMethod,      "SaveMimeFile", wxImage_SaveMimeFile, 2, 2 },
    { LuaMethod,      "Mirror", wxImage_Mirror, 0, 1 },
    { LuaMethod,      "Replace", wxImage_Replace, 6, 6 },
    { LuaMethod,      "Rotate", wxImage_Rotate, 2, 4 },
    { LuaMethod,      "Rotate90", wxImage_Rotate90, 0, 1 },
    { LuaMethod,      "Scale", wxImage_Scale, 2, 2 },
    { LuaMethod,      "SetData", wxImage_SetData, 1, 1 },
    { LuaMethod,      "SetMask", wxImage_SetMask, 0, 1 },
    { LuaMethod,      "SetMaskColour", wxImage_SetMaskColour, 3, 3 },
    { LuaMethod,      "SetOption", wxImage_SetOption, 2, 2 },
    { LuaMethod,      "SetOptionInt", wxImage_SetOptionInt, 2, 2 },
    { LuaMethod,      "SetRGB", wxImage_SetRGB, 5, 5 },
};

static WXLUAMETHOD wxImageHandler_methods[] = {
    { LuaDelete,      "wxImageHandler", wxImageHandler_destructor, 0, 0 },
    { LuaMethod,      "GetName", wxImageHandler_GetName, 0, 0 },
    { LuaMethod,      "GetExtension", wxImageHandler_GetExtension, 0, 0 },
    { LuaMethod,      "GetType", wxImageHandler_GetType, 0, 0 },
    { LuaMethod,      "GetMimeType", wxImageHandler_GetMimeType, 0, 0 },
    { LuaMethod,      "SetName", wxImageHandler_SetName, 1, 1 },
    { LuaMethod,      "SetExtension", wxImageHandler_SetExtension, 1, 1 },
    { LuaMethod,      "SetMimeType", wxImageHandler_SetMimeType, 1, 1 },
    { LuaMethod,      "SetType", wxImageHandler_SetType, 1, 1 },
    { LuaGetProp,     "Name", wxImageHandler_GetName, 0, 0 },
    { LuaSetProp,     "Name", wxImageHandler_SetName, 1, 1 },
    { LuaGetProp,     "Extension", wxImageHandler_GetExtension, 0, 0 },
    { LuaSetProp,     "Extension", wxImageHandler_SetExtension, 1, 1 },
    { LuaGetProp,     "MimeType", wxImageHandler_GetMimeType, 0, 0 },
    { LuaSetProp,     "MimeType", wxImageHandler_SetMimeType, 1, 1 },
    { LuaGetProp,     "Type", wxImageHandler_GetType, 0, 0 },
    { LuaSetProp,     "Type", wxImageHandler_SetType, 1, 1 },
};

static WXLUAMETHOD wxBMPHandler_methods[] = {
    { LuaDelete,      "wxBMPHandler", wxBMPHandler_destructor, 0, 0 },
    { LuaConstructor, "wxBMPHandler", wxBMPHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxPNGHandler_methods[] = {
    { LuaDelete,      "wxPNGHandler", wxPNGHandler_destructor, 0, 0 },
    { LuaConstructor, "wxPNGHandler", wxPNGHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxJPEGHandler_methods[] = {
    { LuaDelete,      "wxJPEGHandler", wxJPEGHandler_destructor, 0, 0 },
    { LuaConstructor, "wxJPEGHandler", wxJPEGHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxGIFHandler_methods[] = {
    { LuaDelete,      "wxGIFHandler", wxGIFHandler_destructor, 0, 0 },
    { LuaConstructor, "wxGIFHandler", wxGIFHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxPNMHandler_methods[] = {
    { LuaDelete,      "wxPNMHandler", wxPNMHandler_destructor, 0, 0 },
    { LuaConstructor, "wxPNMHandler", wxPNMHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxPCXHandler_methods[] = {
    { LuaDelete,      "wxPCXHandler", wxPCXHandler_destructor, 0, 0 },
    { LuaConstructor, "wxPCXHandler", wxPCXHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxTIFFHandler_methods[] = {
    { LuaDelete,      "wxTIFFHandler", wxTIFFHandler_destructor, 0, 0 },
    { LuaConstructor, "wxTIFFHandler", wxTIFFHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxXPMHandler_methods[] = {
    { LuaDelete,      "wxXPMHandler", wxXPMHandler_destructor, 0, 0 },
    { LuaConstructor, "wxXPMHandler", wxXPMHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxICOHandler_methods[] = {
    { LuaDelete,      "wxICOHandler", wxICOHandler_destructor, 0, 0 },
    { LuaConstructor, "wxICOHandler", wxICOHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxMDIClientWindow_methods[] = {
    { LuaDelete,      "wxMDIClientWindow", wxMDIClientWindow_destructor, 0, 0 },
};

static WXLUAMETHOD wxMDIParentFrame_methods[] = {
    { LuaDelete,      "wxMDIParentFrame", wxMDIParentFrame_destructor, 0, 0 },
    { LuaConstructor, "wxMDIParentFrameDefault", wxMDIParentFrameDefault_constructor, 0, 0 },
    { LuaConstructor, "wxMDIParentFrame", wxMDIParentFrame_constructor, 3, 7 },
    { LuaMethod,      "ActivateNext", wxMDIParentFrame_ActivateNext, 0, 0 },
    { LuaMethod,      "ActivatePrevious", wxMDIParentFrame_ActivatePrevious, 0, 0 },
    { LuaMethod,      "ArrangeIcons", wxMDIParentFrame_ArrangeIcons, 0, 0 },
    { LuaMethod,      "Cascade", wxMDIParentFrame_Cascade, 0, 0 },
    { LuaMethod,      "Create", wxMDIParentFrame_Create, 3, 7 },
    { LuaMethod,      "GetClientSize", wxMDIParentFrame_GetClientSize, 2, 2 },
    { LuaMethod,      "GetActiveChild", wxMDIParentFrame_GetActiveChild, 0, 0 },
    { LuaGetProp,     "ActiveChild", wxMDIParentFrame_GetActiveChild, 0, 0 },
    { LuaMethod,      "GetClientWindow", wxMDIParentFrame_GetClientWindow, 0, 0 },
    { LuaGetProp,     "ClientWindow", wxMDIParentFrame_GetClientWindow, 0, 0 },
    { LuaMethod,      "GetToolBar", wxMDIParentFrame_GetToolBar, 0, 0 },
    { LuaMethod,      "GetWindowMenu", wxMDIParentFrame_GetWindowMenu, 0, 0 },
    { LuaMethod,      "SetToolBar", wxMDIParentFrame_SetToolBar, 1, 1 },
    { LuaGetProp,     "ToolBar", wxMDIParentFrame_GetToolBar, 0, 0 },
    { LuaSetProp,     "ToolBar", wxMDIParentFrame_SetToolBar, 1, 1 },
    { LuaMethod,      "SetWindowMenu", wxMDIParentFrame_SetWindowMenu, 1, 1 },
    { LuaGetProp,     "WindowMenu", wxMDIParentFrame_GetWindowMenu, 0, 0 },
    { LuaSetProp,     "WindowMenu", wxMDIParentFrame_SetWindowMenu, 1, 1 },
    { LuaMethod,      "Tile", wxMDIParentFrame_Tile, 0, 0 },
};

static WXLUAMETHOD wxMDIChildFrame_methods[] = {
    { LuaDelete,      "wxMDIChildFrame", wxMDIChildFrame_destructor, 0, 0 },
    { LuaConstructor, "wxMDIChildFrameDefault", wxMDIChildFrameDefault_constructor, 0, 0 },
    { LuaConstructor, "wxMDIChildFrame", wxMDIChildFrame_constructor, 3, 7 },
    { LuaMethod,      "Activate", wxMDIChildFrame_Activate, 0, 0 },
    { LuaMethod,      "Create", wxMDIChildFrame_Create, 3, 7 },
    { LuaMethod,      "Maximize", wxMDIChildFrame_Maximize, 0, 0 },
    { LuaMethod,      "Restore", wxMDIChildFrame_Restore, 0, 0 },
};

static WXLUAMETHOD wxDocChildFrame_methods[] = {
    { LuaDelete,      "wxDocChildFrame", wxDocChildFrame_destructor, 0, 0 },
    { LuaConstructor, "wxDocChildFrame", wxDocChildFrame_constructor, 5, 9 },
    { LuaMethod,      "GetDocument", wxDocChildFrame_GetDocument, 0, 0 },
    { LuaMethod,      "GetView", wxDocChildFrame_GetView, 0, 0 },
    { LuaMethod,      "SetDocument", wxDocChildFrame_SetDocument, 1, 1 },
    { LuaMethod,      "SetView", wxDocChildFrame_SetView, 1, 1 },
    { LuaGetProp,     "View", wxDocChildFrame_GetView, 0, 0 },
    { LuaSetProp,     "View", wxDocChildFrame_SetView, 1, 1 },
};

static WXLUAMETHOD wxDocManager_methods[] = {
    { LuaDelete,      "wxDocManager", wxDocManager_destructor, 0, 0 },
    { LuaConstructor, "wxDocManager", wxDocManager_constructor, 0, 2 },
    { LuaMethod,      "ActivateView", wxDocManager_ActivateView, 2, 2 },
    { LuaMethod,      "AddDocument", wxDocManager_AddDocument, 1, 1 },
    { LuaMethod,      "AddFileToHistory", wxDocManager_AddFileToHistory, 1, 1 },
    { LuaMethod,      "AssociateTemplate", wxDocManager_AssociateTemplate, 1, 1 },
    { LuaMethod,      "CreateDocument", wxDocManager_CreateDocument, 2, 2 },
    { LuaMethod,      "CreateView", wxDocManager_CreateView, 2, 2 },
    { LuaMethod,      "DisassociateTemplate", wxDocManager_DisassociateTemplate, 1, 1 },
    { LuaMethod,      "FileHistoryAddFilesToMenu", wxDocManager_FileHistoryAddFilesToMenu, 0, 0 },
    { LuaMethod,      "FileHistoryAddFilesToGivenMenu", wxDocManager_FileHistoryAddFilesToGivenMenu, 1, 1 },
    { LuaMethod,      "FileHistoryLoad", wxDocManager_FileHistoryLoad, 1, 1 },
    { LuaMethod,      "FileHistoryRemoveMenu", wxDocManager_FileHistoryRemoveMenu, 1, 1 },
    { LuaMethod,      "FileHistorySave", wxDocManager_FileHistorySave, 1, 1 },
    { LuaMethod,      "FileHistoryUseMenu", wxDocManager_FileHistoryUseMenu, 1, 1 },
    { LuaMethod,      "FindTemplateForPath", wxDocManager_FindTemplateForPath, 1, 1 },
    { LuaMethod,      "GetCurrentDocument", wxDocManager_GetCurrentDocument, 0, 0 },
    { LuaMethod,      "GetCurrentView", wxDocManager_GetCurrentView, 0, 0 },
    { LuaMethod,      "GetDocuments", wxDocManager_GetDocuments, 0, 0 },
    { LuaMethod,      "GetFileHistory", wxDocManager_GetFileHistory, 0, 0 },
    { LuaMethod,      "GetLastDirectory", wxDocManager_GetLastDirectory, 0, 0 },
    { LuaMethod,      "GetMaxDocsOpen", wxDocManager_GetMaxDocsOpen, 0, 0 },
    { LuaMethod,      "GetNoHistoryFiles", wxDocManager_GetNoHistoryFiles, 0, 0 },
    { LuaMethod,      "Initialize", wxDocManager_Initialize, 0, 0 },
    { LuaMethod,      "MakeDefaultName", wxDocManager_MakeDefaultName, 1, 1 },
    { LuaMethod,      "OnCreateFileHistory", wxDocManager_OnCreateFileHistory, 0, 0 },
    { LuaMethod,      "OnFileClose", wxDocManager_OnFileClose, 1, 1 },
    { LuaMethod,      "OnFileNew", wxDocManager_OnFileNew, 1, 1 },
    { LuaMethod,      "OnFileOpen", wxDocManager_OnFileOpen, 1, 1 },
    { LuaMethod,      "OnFileSave", wxDocManager_OnFileSave, 1, 1 },
    { LuaMethod,      "OnFileSaveAs", wxDocManager_OnFileSaveAs, 1, 1 },
    { LuaMethod,      "RemoveDocument", wxDocManager_RemoveDocument, 1, 1 },
    { LuaMethod,      "SetLastDirectory", wxDocManager_SetLastDirectory, 1, 1 },
    { LuaGetProp,     "LastDirectory", wxDocManager_GetLastDirectory, 0, 0 },
    { LuaSetProp,     "LastDirectory", wxDocManager_SetLastDirectory, 1, 1 },
    { LuaMethod,      "SetMaxDocsOpen", wxDocManager_SetMaxDocsOpen, 1, 1 },
    { LuaGetProp,     "MaxDocsOpen", wxDocManager_GetMaxDocsOpen, 0, 0 },
    { LuaSetProp,     "MaxDocsOpen", wxDocManager_SetMaxDocsOpen, 1, 1 },
};

static WXLUAMETHOD wxDocParentFrame_methods[] = {
    { LuaDelete,      "wxDocParentFrame", wxDocParentFrame_destructor, 0, 0 },
    { LuaConstructor, "wxDocParentFrame", wxDocParentFrame_constructor, 4, 8 },
};

static WXLUAMETHOD wxDocTemplate_methods[] = {
    { LuaDelete,      "wxDocTemplate", wxDocTemplate_destructor, 0, 0 },
    { LuaConstructor, "wxDocTemplate", wxDocTemplate_constructor, 7, 10 },
    { LuaMethod,      "CreateDocument", wxDocTemplate_CreateDocument, 1, 2 },
    { LuaMethod,      "CreateView", wxDocTemplate_CreateView, 1, 2 },
    { LuaMethod,      "GetDefaultExtension", wxDocTemplate_GetDefaultExtension, 0, 0 },
    { LuaMethod,      "GetDescription", wxDocTemplate_GetDescription, 0, 0 },
    { LuaMethod,      "GetDirectory", wxDocTemplate_GetDirectory, 0, 0 },
    { LuaMethod,      "GetDocumentManager", wxDocTemplate_GetDocumentManager, 0, 0 },
    { LuaMethod,      "GetDocumentName", wxDocTemplate_GetDocumentName, 0, 0 },
    { LuaMethod,      "GetFileFilter", wxDocTemplate_GetFileFilter, 0, 0 },
    { LuaMethod,      "GetFlags", wxDocTemplate_GetFlags, 0, 0 },
    { LuaMethod,      "GetViewName", wxDocTemplate_GetViewName, 0, 0 },
    { LuaMethod,      "IsVisible", wxDocTemplate_IsVisible, 0, 0 },
    { LuaMethod,      "SetDefaultExtension", wxDocTemplate_SetDefaultExtension, 1, 1 },
    { LuaGetProp,     "DefaultExtension", wxDocTemplate_GetDefaultExtension, 0, 0 },
    { LuaSetProp,     "DefaultExtension", wxDocTemplate_SetDefaultExtension, 1, 1 },
    { LuaMethod,      "SetDescription", wxDocTemplate_SetDescription, 1, 1 },
    { LuaGetProp,     "Description", wxDocTemplate_GetDescription, 0, 0 },
    { LuaSetProp,     "Description", wxDocTemplate_SetDescription, 1, 1 },
    { LuaMethod,      "SetDirectory", wxDocTemplate_SetDirectory, 1, 1 },
    { LuaGetProp,     "Directory", wxDocTemplate_GetDirectory, 0, 0 },
    { LuaSetProp,     "Directory", wxDocTemplate_SetDirectory, 1, 1 },
    { LuaMethod,      "SetDocumentManager", wxDocTemplate_SetDocumentManager, 1, 1 },
    { LuaGetProp,     "DocumentManager", wxDocTemplate_GetDocumentManager, 0, 0 },
    { LuaSetProp,     "DocumentManager", wxDocTemplate_SetDocumentManager, 1, 1 },
    { LuaMethod,      "SetFileFilter", wxDocTemplate_SetFileFilter, 1, 1 },
    { LuaGetProp,     "FileFilter", wxDocTemplate_GetFileFilter, 0, 0 },
    { LuaSetProp,     "FileFilter", wxDocTemplate_SetFileFilter, 1, 1 },
    { LuaMethod,      "SetFlags", wxDocTemplate_SetFlags, 1, 1 },
    { LuaGetProp,     "Flags", wxDocTemplate_GetFlags, 0, 0 },
    { LuaSetProp,     "Flags", wxDocTemplate_SetFlags, 1, 1 },
};

static WXLUAMETHOD wxDocument_methods[] = {
    { LuaDelete,      "wxDocument", wxDocument_destructor, 0, 0 },
    { LuaConstructor, "wxDocument", wxDocument_constructor, 0, 0 },
    { LuaMethod,      "AddView", wxDocument_AddView, 1, 1 },
    { LuaMethod,      "Close", wxDocument_Close, 0, 0 },
    { LuaMethod,      "DeleteAllViews", wxDocument_DeleteAllViews, 0, 0 },
    { LuaMethod,      "GetCommandProcessor", wxDocument_GetCommandProcessor, 0, 0 },
    { LuaMethod,      "GetDocumentTemplate", wxDocument_GetDocumentTemplate, 0, 0 },
    { LuaMethod,      "GetDocumentManager", wxDocument_GetDocumentManager, 0, 0 },
    { LuaMethod,      "GetDocumentName", wxDocument_GetDocumentName, 0, 0 },
    { LuaMethod,      "GetDocumentWindow", wxDocument_GetDocumentWindow, 0, 0 },
    { LuaMethod,      "GetFilename", wxDocument_GetFilename, 0, 0 },
    { LuaMethod,      "GetFirstView", wxDocument_GetFirstView, 0, 0 },
    { LuaMethod,      "GetPrintableName", wxDocument_GetPrintableName, 1, 1 },
    { LuaMethod,      "GetTitle", wxDocument_GetTitle, 0, 0 },
    { LuaMethod,      "GetViews", wxDocument_GetViews, 0, 0 },
    { LuaMethod,      "IsModified", wxDocument_IsModified, 0, 0 },
    { LuaMethod,      "Modify", wxDocument_Modify, 1, 1 },
    { LuaMethod,      "OnChangedViewList", wxDocument_OnChangedViewList, 0, 0 },
    { LuaMethod,      "OnCloseDocument", wxDocument_OnCloseDocument, 0, 0 },
    { LuaMethod,      "OnCreate", wxDocument_OnCreate, 2, 2 },
    { LuaMethod,      "OnCreateCommandProcessor", wxDocument_OnCreateCommandProcessor, 0, 0 },
    { LuaMethod,      "OnNewDocument", wxDocument_OnNewDocument, 0, 0 },
    { LuaMethod,      "OnOpenDocument", wxDocument_OnOpenDocument, 1, 1 },
    { LuaMethod,      "OnSaveDocument", wxDocument_OnSaveDocument, 1, 1 },
    { LuaMethod,      "OnSaveModified", wxDocument_OnSaveModified, 0, 0 },
    { LuaMethod,      "RemoveView", wxDocument_RemoveView, 1, 1 },
    { LuaMethod,      "Save", wxDocument_Save, 0, 0 },
    { LuaMethod,      "SaveAs", wxDocument_SaveAs, 0, 0 },
    { LuaMethod,      "SetCommandProcessor", wxDocument_SetCommandProcessor, 1, 1 },
    { LuaMethod,      "SetDocumentName", wxDocument_SetDocumentName, 1, 1 },
    { LuaGetProp,     "DocumentName", wxDocument_GetDocumentName, 0, 0 },
    { LuaSetProp,     "DocumentName", wxDocument_SetDocumentName, 1, 1 },
    { LuaMethod,      "SetDocumentTemplate", wxDocument_SetDocumentTemplate, 1, 1 },
    { LuaGetProp,     "DocumentTemplate", wxDocument_GetDocumentTemplate, 0, 0 },
    { LuaSetProp,     "DocumentTemplate", wxDocument_SetDocumentTemplate, 1, 1 },
    { LuaMethod,      "SetFilename", wxDocument_SetFilename, 1, 2 },
    { LuaGetProp,     "Filename", wxDocument_GetFilename, 0, 0 },
    { LuaSetProp,     "Filename", wxDocument_SetFilename, 1, 1 },
    { LuaMethod,      "SetTitle", wxDocument_SetTitle, 1, 1 },
    { LuaGetProp,     "Title", wxDocument_GetTitle, 0, 0 },
    { LuaSetProp,     "Title", wxDocument_SetTitle, 1, 1 },
    { LuaMethod,      "UpdateAllViews", wxDocument_UpdateAllViews, 0, 2 },
};

static WXLUAMETHOD wxView_methods[] = {
    { LuaDelete,      "wxView", wxView_destructor, 0, 0 },
    { LuaMethod,      "Activate", wxView_Activate, 1, 1 },
    { LuaMethod,      "Close", wxView_Close, 0, 1 },
    { LuaMethod,      "GetDocument", wxView_GetDocument, 0, 0 },
    { LuaMethod,      "GetDocumentManager", wxView_GetDocumentManager, 0, 0 },
    { LuaMethod,      "GetFrame", wxView_GetFrame, 0, 0 },
    { LuaMethod,      "GetViewName", wxView_GetViewName, 0, 0 },
    { LuaMethod,      "OnActivateView", wxView_OnActivateView, 3, 3 },
    { LuaMethod,      "OnChangeFilename", wxView_OnChangeFilename, 0, 0 },
    { LuaMethod,      "OnClose", wxView_OnClose, 1, 1 },
    { LuaMethod,      "OnCreate", wxView_OnCreate, 2, 2 },
    { LuaMethod,      "OnCreatePrintout", wxView_OnCreatePrintout, 0, 0 },
    { LuaMethod,      "OnUpdate", wxView_OnUpdate, 2, 2 },
    { LuaMethod,      "SetDocument", wxView_SetDocument, 1, 1 },
    { LuaGetProp,     "Document", wxView_GetDocument, 0, 0 },
    { LuaSetProp,     "Document", wxView_SetDocument, 1, 1 },
    { LuaMethod,      "SetFrame", wxView_SetFrame, 1, 1 },
    { LuaGetProp,     "Frame", wxView_GetFrame, 0, 0 },
    { LuaSetProp,     "Frame", wxView_SetFrame, 1, 1 },
    { LuaMethod,      "SetViewName", wxView_SetViewName, 1, 1 },
    { LuaGetProp,     "ViewName", wxView_GetViewName, 0, 0 },
    { LuaSetProp,     "ViewName", wxView_SetViewName, 1, 1 },
};

static WXLUAMETHOD wxCommandProcessor_methods[] = {
    { LuaDelete,      "wxCommandProcessor", wxCommandProcessor_destructor, 0, 0 },
    { LuaConstructor, "wxCommandProcessor", wxCommandProcessor_constructor, 0, 1 },
    { LuaMethod,      "Submit", wxCommandProcessor_Submit, 1, 2 },
    { LuaMethod,      "Store", wxCommandProcessor_Store, 1, 1 },
    { LuaMethod,      "Undo", wxCommandProcessor_Undo, 0, 0 },
    { LuaMethod,      "Redo", wxCommandProcessor_Redo, 0, 0 },
    { LuaMethod,      "CanUndo", wxCommandProcessor_CanUndo, 0, 0 },
    { LuaMethod,      "CanRedo", wxCommandProcessor_CanRedo, 0, 0 },
    { LuaMethod,      "Initialize", wxCommandProcessor_Initialize, 0, 0 },
    { LuaMethod,      "SetMenuStrings", wxCommandProcessor_SetMenuStrings, 0, 0 },
    { LuaMethod,      "SetEditMenu", wxCommandProcessor_SetEditMenu, 1, 1 },
    { LuaMethod,      "GetEditMenu", wxCommandProcessor_GetEditMenu, 0, 0 },
    { LuaMethod,      "GetCommands", wxCommandProcessor_GetCommands, 0, 0 },
    { LuaMethod,      "GetCurrentCommand", wxCommandProcessor_GetCurrentCommand, 0, 0 },
    { LuaMethod,      "GetMaxCommands", wxCommandProcessor_GetMaxCommands, 0, 0 },
    { LuaMethod,      "ClearCommands", wxCommandProcessor_ClearCommands, 0, 0 },
};

static WXLUAMETHOD wxCommand_methods[] = {
    { LuaDelete,      "wxCommand", wxCommand_destructor, 0, 0 },
    { LuaMethod,      "CanUndo", wxCommand_CanUndo, 0, 0 },
    { LuaMethod,      "Do", wxCommand_Do, 0, 0 },
    { LuaMethod,      "GetName", wxCommand_GetName, 0, 0 },
    { LuaMethod,      "Undo", wxCommand_Undo, 0, 0 },
};

static WXLUAMETHOD wxFileHistory_methods[] = {
    { LuaDelete,      "wxFileHistory", wxFileHistory_destructor, 0, 0 },
    { LuaConstructor, "wxFileHistory", wxFileHistory_constructor, 0, 1 },
    { LuaMethod,      "AddFileToHistory", wxFileHistory_AddFileToHistory, 1, 1 },
    { LuaMethod,      "AddFilesToMenu", wxFileHistory_AddFilesToMenu, 0, 0 },
    { LuaMethod,      "AddFilesToGivenMenu", wxFileHistory_AddFilesToGivenMenu, 1, 1 },
    { LuaMethod,      "GetHistoryFile", wxFileHistory_GetHistoryFile, 1, 1 },
    { LuaMethod,      "GetMaxFiles", wxFileHistory_GetMaxFiles, 0, 0 },
    { LuaMethod,      "Load", wxFileHistory_Load, 1, 1 },
    { LuaMethod,      "RemoveMenu", wxFileHistory_RemoveMenu, 1, 1 },
    { LuaMethod,      "Save", wxFileHistory_Save, 1, 1 },
    { LuaMethod,      "UseMenu", wxFileHistory_UseMenu, 1, 1 },
};

static WXLUAMETHOD wxMenu_methods[] = {
    { LuaDelete,      "wxMenu", wxMenu_destructor, 0, 0 },
    { LuaConstructor, "wxMenu", wxMenu_constructor, 0, 2 },
    { LuaConstructor, "wxCreateMenu", wxCreateMenu_constructor, 1, 3 },
    { LuaMethod,      "Append", wxMenu_Append, 2, 4 },
    { LuaMethod,      "AppendMenu", wxMenu_AppendMenu, 3, 4 },
    { LuaMethod,      "AppendItem", wxMenu_AppendItem, 1, 1 },
    { LuaMethod,      "AppendSeparator", wxMenu_AppendSeparator, 0, 0 },
    { LuaMethod,      "Break", wxMenu_Break, 0, 0 },
    { LuaMethod,      "Check", wxMenu_Check, 2, 2 },
    { LuaMethod,      "Delete", wxMenu_Delete, 1, 1 },
    { LuaMethod,      "DeleteItem", wxMenu_DeleteItem, 1, 1 },
    { LuaMethod,      "Destroy", wxMenu_Destroy, 1, 1 },
    { LuaMethod,      "DestroyMenuItem", wxMenu_DestroyMenuItem, 1, 1 },
    { LuaMethod,      "Enable", wxMenu_Enable, 2, 2 },
    { LuaMethod,      "FindItem", wxMenu_FindItem, 1, 1 },
    { LuaMethod,      "GetHelpString", wxMenu_GetHelpString, 1, 1 },
    { LuaMethod,      "GetLabel", wxMenu_GetLabel, 1, 1 },
    { LuaMethod,      "GetMenuItemCount", wxMenu_GetMenuItemCount, 0, 0 },
    { LuaMethod,      "GetMenuItems", wxMenu_GetMenuItems, 0, 0 },
    { LuaMethod,      "GetTitle", wxMenu_GetTitle, 0, 0 },
    { LuaMethod,      "IsChecked", wxMenu_IsChecked, 1, 1 },
    { LuaMethod,      "IsEnabled", wxMenu_IsEnabled, 1, 1 },
    { LuaMethod,      "RemoveById", wxMenu_RemoveById, 1, 1 },
    { LuaMethod,      "Remove", wxMenu_Remove, 1, 1 },
    { LuaMethod,      "SetHelpString", wxMenu_SetHelpString, 2, 2 },
    { LuaMethod,      "SetLabel", wxMenu_SetLabel, 2, 2 },
    { LuaMethod,      "SetTitle", wxMenu_SetTitle, 1, 1 },
    { LuaGetProp,     "Title", wxMenu_GetTitle, 0, 0 },
    { LuaSetProp,     "Title", wxMenu_SetTitle, 1, 1 },
    { LuaMethod,      "UpdateUI", wxMenu_UpdateUI, 0, 1 },
};

static WXLUAMETHOD wxMenuBar_methods[] = {
    { LuaDelete,      "wxMenuBar", wxMenuBar_destructor, 0, 0 },
    { LuaConstructor, "wxMenuBar", wxMenuBar_constructor, 0, 1 },
    { LuaMethod,      "Append", wxMenuBar_Append, 2, 2 },
    { LuaMethod,      "Check", wxMenuBar_Check, 2, 2 },
    { LuaMethod,      "Enable", wxMenuBar_Enable, 2, 2 },
    { LuaMethod,      "EnableTop", wxMenuBar_EnableTop, 2, 2 },
    { LuaMethod,      "FindMenu", wxMenuBar_FindMenu, 1, 1 },
    { LuaMethod,      "FindMenuItem", wxMenuBar_FindMenuItem, 2, 2 },
    { LuaMethod,      "GetHelpString", wxMenuBar_GetHelpString, 1, 1 },
    { LuaMethod,      "GetLabel", wxMenuBar_GetLabel, 1, 1 },
    { LuaMethod,      "GetLabelTop", wxMenuBar_GetLabelTop, 1, 1 },
    { LuaMethod,      "GetMenu", wxMenuBar_GetMenu, 1, 1 },
    { LuaMethod,      "GetMenuCount", wxMenuBar_GetMenuCount, 0, 0 },
    { LuaGetProp,     "MenuCount", wxMenuBar_GetMenuCount, 0, 0 },
    { LuaMethod,      "Insert", wxMenuBar_Insert, 3, 3 },
    { LuaMethod,      "IsChecked", wxMenuBar_IsChecked, 1, 1 },
    { LuaMethod,      "IsEnabled", wxMenuBar_IsEnabled, 1, 1 },
    { LuaMethod,      "Refresh", wxMenuBar_Refresh, 0, 0 },
    { LuaMethod,      "Remove", wxMenuBar_Remove, 1, 1 },
    { LuaMethod,      "Replace", wxMenuBar_Replace, 3, 3 },
    { LuaMethod,      "SetHelpString", wxMenuBar_SetHelpString, 2, 2 },
    { LuaMethod,      "SetLabel", wxMenuBar_SetLabel, 2, 2 },
    { LuaMethod,      "SetLabelTop", wxMenuBar_SetLabelTop, 2, 2 },
};

static WXLUAMETHOD wxMenuItem_methods[] = {
    { LuaDelete,      "wxMenuItem", wxMenuItem_destructor, 0, 0 },
    { LuaConstructor, "wxMenuItem", wxMenuItem_constructor, 0, 6 },
    { LuaMethod,      "Check", wxMenuItem_Check, 1, 1 },
    { LuaMethod,      "Enable", wxMenuItem_Enable, 1, 1 },
    { LuaMethod,      "GetBackgroundColour", wxMenuItem_GetBackgroundColour, 0, 0 },
    { LuaMethod,      "GetFont", wxMenuItem_GetFont, 0, 0 },
    { LuaMethod,      "GetHelp", wxMenuItem_GetHelp, 0, 0 },
    { LuaMethod,      "GetId", wxMenuItem_GetId, 0, 0 },
    { LuaMethod,      "GetLabel", wxMenuItem_GetLabel, 0, 0 },
    { LuaMethod,      "GetLabelFromText", wxMenuItem_GetLabelFromText, 1, 1 },
    { LuaMethod,      "GetMarginWidth", wxMenuItem_GetMarginWidth, 0, 0 },
    { LuaMethod,      "GetText", wxMenuItem_GetText, 0, 0 },
    { LuaMethod,      "GetSubMenu", wxMenuItem_GetSubMenu, 0, 0 },
    { LuaMethod,      "GetTextColour", wxMenuItem_GetTextColour, 0, 0 },
    { LuaMethod,      "IsCheckable", wxMenuItem_IsCheckable, 0, 0 },
    { LuaMethod,      "IsChecked", wxMenuItem_IsChecked, 0, 0 },
    { LuaMethod,      "IsEnabled", wxMenuItem_IsEnabled, 0, 0 },
    { LuaMethod,      "IsSeparator", wxMenuItem_IsSeparator, 0, 0 },
    { LuaMethod,      "SetBackgroundColour", wxMenuItem_SetBackgroundColour, 1, 1 },
    { LuaGetProp,     "BackgroundColour", wxMenuItem_GetBackgroundColour, 0, 0 },
    { LuaSetProp,     "BackgroundColour", wxMenuItem_SetBackgroundColour, 1, 1 },
    { LuaMethod,      "SetBitmaps", wxMenuItem_SetBitmaps, 1, 2 },
    { LuaMethod,      "SetFont", wxMenuItem_SetFont, 1, 1 },
    { LuaGetProp,     "Font", wxMenuItem_GetFont, 0, 0 },
    { LuaSetProp,     "Font", wxMenuItem_SetFont, 1, 1 },
    { LuaMethod,      "SetHelp", wxMenuItem_SetHelp, 1, 1 },
    { LuaGetProp,     "Help", wxMenuItem_GetHelp, 0, 0 },
    { LuaSetProp,     "Help", wxMenuItem_SetHelp, 1, 1 },
    { LuaMethod,      "SetMarginWidth", wxMenuItem_SetMarginWidth, 1, 1 },
    { LuaGetProp,     "MarginWidth", wxMenuItem_GetMarginWidth, 0, 0 },
    { LuaSetProp,     "MarginWidth", wxMenuItem_SetMarginWidth, 1, 1 },
    { LuaMethod,      "SetTextColour", wxMenuItem_SetTextColour, 1, 1 },
    { LuaGetProp,     "TextColour", wxMenuItem_GetTextColour, 0, 0 },
    { LuaSetProp,     "TextColour", wxMenuItem_SetTextColour, 1, 1 },
};

static WXLUAMETHOD wxMenuItemList_methods[] = {
    { LuaDelete,      "wxMenuItemList", wxMenuItemList_destructor, 0, 0 },
    { LuaMethod,      "Clear", wxMenuItemList_Clear, 0, 0 },
    { LuaMethod,      "DeleteContents", wxMenuItemList_DeleteContents, 1, 1 },
    { LuaMethod,      "DeleteObject", wxMenuItemList_DeleteObject, 1, 1 },
    { LuaMethod,      "GetCount", wxMenuItemList_GetCount, 0, 0 },
    { LuaGetProp,     "Count", wxMenuItemList_GetCount, 0, 0 },
};

static WXLUAMETHOD wxMenuEvent_methods[] = {
    { LuaDelete,      "wxMenuEvent", wxMenuEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxMenuEvent_Delete, 0, 0 },
    { LuaConstructor, "wxMenuEvent", wxMenuEvent_constructor, 0, 2 },
    { LuaMethod,      "GetMenuId", wxMenuEvent_GetMenuId, 0, 0 },
};

static WXLUAMETHOD wxToolBarBase_methods[] = {
    { LuaDelete,      "wxToolBarBase", wxToolBarBase_destructor, 0, 0 },
    { LuaMethod,      "AddControl", wxToolBarBase_AddControl, 1, 1 },
    { LuaMethod,      "AddSeparator", wxToolBarBase_AddSeparator, 0, 0 },
    { LuaMethod,      "AddTool", wxToolBarBase_AddTool, 2, 6 },
    { LuaMethod,      "InsertTool", wxToolBarBase_InsertTool, 3, 8 },
    { LuaMethod,      "InsertControl", wxToolBarBase_InsertControl, 2, 2 },
    { LuaMethod,      "InsertSeparator", wxToolBarBase_InsertSeparator, 1, 1 },
    { LuaMethod,      "RemoveTool", wxToolBarBase_RemoveTool, 1, 1 },
    { LuaMethod,      "GetMargins", wxToolBarBase_GetMargins, 0, 0 },
    { LuaMethod,      "DeleteTool", wxToolBarBase_DeleteTool, 1, 1 },
    { LuaMethod,      "DeleteToolByPos", wxToolBarBase_DeleteToolByPos, 1, 1 },
    { LuaMethod,      "EnableTool", wxToolBarBase_EnableTool, 2, 2 },
    { LuaMethod,      "ToggleTool", wxToolBarBase_ToggleTool, 2, 2 },
    { LuaMethod,      "ClearTools", wxToolBarBase_ClearTools, 0, 0 },
    { LuaMethod,      "GetToolEnabled", wxToolBarBase_GetToolEnabled, 1, 1 },
    { LuaGetProp,     "ToolEnabled", wxToolBarBase_GetToolEnabled, 0, 0 },
    { LuaMethod,      "GetToolPacking", wxToolBarBase_GetToolPacking, 0, 0 },
    { LuaMethod,      "GetToolBitmapSize", wxToolBarBase_GetToolBitmapSize, 0, 0 },
    { LuaMethod,      "GetToolSize", wxToolBarBase_GetToolSize, 0, 0 },
    { LuaGetProp,     "ToolSize", wxToolBarBase_GetToolSize, 0, 0 },
    { LuaMethod,      "GetMaxRows", wxToolBarBase_GetMaxRows, 0, 0 },
    { LuaGetProp,     "MaxRows", wxToolBarBase_GetMaxRows, 0, 0 },
    { LuaMethod,      "GetMaxCols", wxToolBarBase_GetMaxCols, 0, 0 },
    { LuaGetProp,     "MaxCols", wxToolBarBase_GetMaxCols, 0, 0 },
    { LuaMethod,      "GetToolMargins", wxToolBarBase_GetToolMargins, 0, 0 },
    { LuaGetProp,     "ToolMargins", wxToolBarBase_GetToolMargins, 0, 0 },
    { LuaMethod,      "GetToolSeparation", wxToolBarBase_GetToolSeparation, 0, 0 },
    { LuaMethod,      "GetToolState", wxToolBarBase_GetToolState, 1, 1 },
    { LuaMethod,      "GetToolShortHelp", wxToolBarBase_GetToolShortHelp, 1, 1 },
    { LuaMethod,      "GetToolLongHelp", wxToolBarBase_GetToolLongHelp, 1, 1 },
    { LuaMethod,      "GetToolClientData", wxToolBarBase_GetToolClientData, 1, 1 },
    { LuaMethod,      "Realize", wxToolBarBase_Realize, 0, 0 },
    { LuaMethod,      "SetMarginsXY", wxToolBarBase_SetMarginsXY, 2, 2 },
    { LuaMethod,      "SetMargins", wxToolBarBase_SetMargins, 1, 1 },
    { LuaGetProp,     "Margins", wxToolBarBase_GetMargins, 0, 0 },
    { LuaSetProp,     "Margins", wxToolBarBase_SetMargins, 1, 1 },
    { LuaMethod,      "SetToggle", wxToolBarBase_SetToggle, 2, 2 },
    { LuaMethod,      "SetToolClientData", wxToolBarBase_SetToolClientData, 2, 2 },
    { LuaMethod,      "SetToolShortHelp", wxToolBarBase_SetToolShortHelp, 2, 2 },
    { LuaMethod,      "SetToolLongHelp", wxToolBarBase_SetToolLongHelp, 2, 2 },
    { LuaMethod,      "SetToolPacking", wxToolBarBase_SetToolPacking, 1, 1 },
    { LuaGetProp,     "ToolPacking", wxToolBarBase_GetToolPacking, 0, 0 },
    { LuaSetProp,     "ToolPacking", wxToolBarBase_SetToolPacking, 1, 1 },
    { LuaMethod,      "SetToolSeparation", wxToolBarBase_SetToolSeparation, 1, 1 },
    { LuaGetProp,     "ToolSeparation", wxToolBarBase_GetToolSeparation, 0, 0 },
    { LuaSetProp,     "ToolSeparation", wxToolBarBase_SetToolSeparation, 1, 1 },
    { LuaMethod,      "SetRows", wxToolBarBase_SetRows, 1, 1 },
    { LuaMethod,      "SetMaxRowsCols", wxToolBarBase_SetMaxRowsCols, 2, 2 },
    { LuaMethod,      "SetToolBitmapSize", wxToolBarBase_SetToolBitmapSize, 1, 1 },
    { LuaGetProp,     "ToolBitmapSize", wxToolBarBase_GetToolBitmapSize, 0, 0 },
    { LuaSetProp,     "ToolBitmapSize", wxToolBarBase_SetToolBitmapSize, 1, 1 },
};

static WXLUAMETHOD wxToolBar_methods[] = {
    { LuaDelete,      "wxToolBar", wxToolBar_destructor, 0, 0 },
    { LuaConstructor, "wxToolBar", wxToolBar_constructor, 2, 6 },
    { LuaConstructor, "wxPreToolBar", wxPreToolBar_constructor, 0, 0 },
    { LuaMethod,      "Create", wxToolBar_Create, 2, 6 },
    { LuaMethod,      "FindToolForPosition", wxToolBar_FindToolForPosition, 2, 2 },
};

static WXLUAMETHOD wxToolBarToolBase_methods[] = {
    { LuaDelete,      "wxToolBarToolBase", wxToolBarToolBase_destructor, 0, 0 },
    { LuaMethod,      "GetId", wxToolBarToolBase_GetId, 0, 0 },
    { LuaMethod,      "GetControl", wxToolBarToolBase_GetControl, 0, 0 },
    { LuaMethod,      "GetToolBar", wxToolBarToolBase_GetToolBar, 0, 0 },
    { LuaMethod,      "IsButton", wxToolBarToolBase_IsButton, 0, 0 },
    { LuaMethod,      "IsControl", wxToolBarToolBase_IsControl, 0, 0 },
    { LuaMethod,      "IsSeparator", wxToolBarToolBase_IsSeparator, 0, 0 },
    { LuaMethod,      "GetStyle", wxToolBarToolBase_GetStyle, 0, 0 },
    { LuaMethod,      "IsEnabled", wxToolBarToolBase_IsEnabled, 0, 0 },
    { LuaMethod,      "IsToggled", wxToolBarToolBase_IsToggled, 0, 0 },
    { LuaMethod,      "CanBeToggled", wxToolBarToolBase_CanBeToggled, 0, 0 },
    { LuaMethod,      "GetNormalBitmap", wxToolBarToolBase_GetNormalBitmap, 0, 0 },
    { LuaMethod,      "GetDisabledBitmap", wxToolBarToolBase_GetDisabledBitmap, 0, 0 },
    { LuaMethod,      "GetBitmap", wxToolBarToolBase_GetBitmap, 0, 0 },
    { LuaGetProp,     "Bitmap", wxToolBarToolBase_GetBitmap, 0, 0 },
    { LuaMethod,      "GetShortHelp", wxToolBarToolBase_GetShortHelp, 0, 0 },
    { LuaMethod,      "GetLongHelp", wxToolBarToolBase_GetLongHelp, 0, 0 },
    { LuaMethod,      "Enable", wxToolBarToolBase_Enable, 1, 1 },
    { LuaMethod,      "Toggle", wxToolBarToolBase_Toggle, 1, 1 },
    { LuaMethod,      "SetToggle", wxToolBarToolBase_SetToggle, 1, 1 },
    { LuaMethod,      "SetShortHelp", wxToolBarToolBase_SetShortHelp, 1, 1 },
    { LuaGetProp,     "ShortHelp", wxToolBarToolBase_GetShortHelp, 0, 0 },
    { LuaSetProp,     "ShortHelp", wxToolBarToolBase_SetShortHelp, 1, 1 },
    { LuaMethod,      "SetLongHelp", wxToolBarToolBase_SetLongHelp, 1, 1 },
    { LuaGetProp,     "LongHelp", wxToolBarToolBase_GetLongHelp, 0, 0 },
    { LuaSetProp,     "LongHelp", wxToolBarToolBase_SetLongHelp, 1, 1 },
    { LuaMethod,      "SetNormalBitmap", wxToolBarToolBase_SetNormalBitmap, 1, 1 },
    { LuaGetProp,     "NormalBitmap", wxToolBarToolBase_GetNormalBitmap, 0, 0 },
    { LuaSetProp,     "NormalBitmap", wxToolBarToolBase_SetNormalBitmap, 1, 1 },
    { LuaMethod,      "SetDisabledBitmap", wxToolBarToolBase_SetDisabledBitmap, 1, 1 },
    { LuaGetProp,     "DisabledBitmap", wxToolBarToolBase_GetDisabledBitmap, 0, 0 },
    { LuaSetProp,     "DisabledBitmap", wxToolBarToolBase_SetDisabledBitmap, 1, 1 },
    { LuaMethod,      "Detach", wxToolBarToolBase_Detach, 0, 0 },
    { LuaMethod,      "Attach", wxToolBarToolBase_Attach, 1, 1 },
    { LuaMethod,      "GetClientData", wxToolBarToolBase_GetClientData, 0, 0 },
    { LuaMethod,      "SetClientData", wxToolBarToolBase_SetClientData, 1, 1 },
    { LuaGetProp,     "ClientData", wxToolBarToolBase_GetClientData, 0, 0 },
    { LuaSetProp,     "ClientData", wxToolBarToolBase_SetClientData, 1, 1 },
};

static WXLUAMETHOD wxToolBarTool_methods[] = {
    { LuaDelete,      "wxToolBarTool", wxToolBarTool_destructor, 0, 0 },
};

static WXLUAMETHOD wxSizer_methods[] = {
    { LuaDelete,      "wxSizer", wxSizer_destructor, 0, 0 },
    { LuaMethod,      "AddWindow", wxSizer_AddWindow, 1, 5 },
    { LuaMethod,      "AddSizer", wxSizer_AddSizer, 1, 5 },
    { LuaMethod,      "Add", wxSizer_Add, 2, 6 },
    { LuaMethod,      "CalcMin", wxSizer_CalcMin, 0, 0 },
    { LuaMethod,      "Fit", wxSizer_Fit, 1, 1 },
    { LuaMethod,      "GetSize", wxSizer_GetSize, 0, 0 },
    { LuaGetProp,     "Size", wxSizer_GetSize, 0, 0 },
    { LuaMethod,      "GetPosition", wxSizer_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxSizer_GetPosition, 0, 0 },
    { LuaMethod,      "GetMinSize", wxSizer_GetMinSize, 0, 0 },
    { LuaGetProp,     "MinSize", wxSizer_GetMinSize, 0, 0 },
    { LuaMethod,      "Layout", wxSizer_Layout, 0, 0 },
    { LuaMethod,      "PrependWindow", wxSizer_PrependWindow, 1, 5 },
    { LuaMethod,      "PrependSizer", wxSizer_PrependSizer, 1, 5 },
    { LuaMethod,      "Prepend", wxSizer_Prepend, 2, 6 },
    { LuaMethod,      "RecalcSizes", wxSizer_RecalcSizes, 0, 0 },
    { LuaMethod,      "RemoveSizer", wxSizer_RemoveSizer, 1, 1 },
    { LuaMethod,      "Remove", wxSizer_Remove, 1, 1 },
    { LuaMethod,      "SetDimension", wxSizer_SetDimension, 4, 4 },
    { LuaMethod,      "SetMinSize", wxSizer_SetMinSize, 2, 2 },
    { LuaMethod,      "SetWindowMinSize", wxSizer_SetWindowMinSize, 3, 3 },
    { LuaMethod,      "SetSizerMinSize", wxSizer_SetSizerMinSize, 3, 3 },
    { LuaMethod,      "SetItemMinSize", wxSizer_SetItemMinSize, 3, 3 },
    { LuaMethod,      "SetSizeHints", wxSizer_SetSizeHints, 1, 1 },
};

static WXLUAMETHOD wxBoxSizer_methods[] = {
    { LuaDelete,      "wxBoxSizer", wxBoxSizer_destructor, 0, 0 },
    { LuaConstructor, "wxBoxSizer", wxBoxSizer_constructor, 1, 1 },
    { LuaMethod,      "RecalcSizes", wxBoxSizer_RecalcSizes, 0, 0 },
    { LuaMethod,      "CalcMin", wxBoxSizer_CalcMin, 0, 0 },
    { LuaMethod,      "GetOrientation", wxBoxSizer_GetOrientation, 0, 0 },
    { LuaGetProp,     "Orientation", wxBoxSizer_GetOrientation, 0, 0 },
};

static WXLUAMETHOD wxGridSizer_methods[] = {
    { LuaDelete,      "wxGridSizer", wxGridSizer_destructor, 0, 0 },
    { LuaConstructor, "wxGridSizer", wxGridSizer_constructor, 4, 4 },
};

static WXLUAMETHOD wxFlexGridSizer_methods[] = {
    { LuaDelete,      "wxFlexGridSizer", wxFlexGridSizer_destructor, 0, 0 },
    { LuaConstructor, "wxFlexGridSizer", wxFlexGridSizer_constructor, 4, 4 },
};

static WXLUAMETHOD wxNotebookSizer_methods[] = {
    { LuaDelete,      "wxNotebookSizer", wxNotebookSizer_destructor, 0, 0 },
    { LuaConstructor, "wxNotebookSizer", wxNotebookSizer_constructor, 1, 1 },
    { LuaMethod,      "GetNotebook", wxNotebookSizer_GetNotebook, 0, 0 },
    { LuaGetProp,     "Notebook", wxNotebookSizer_GetNotebook, 0, 0 },
};

static WXLUAMETHOD wxStaticBoxSizer_methods[] = {
    { LuaDelete,      "wxStaticBoxSizer", wxStaticBoxSizer_destructor, 0, 0 },
    { LuaConstructor, "wxStaticBoxSizer", wxStaticBoxSizer_constructor, 2, 2 },
    { LuaMethod,      "GetStaticBox", wxStaticBoxSizer_GetStaticBox, 0, 0 },
    { LuaGetProp,     "StaticBox", wxStaticBoxSizer_GetStaticBox, 0, 0 },
};

static WXLUAMETHOD wxLayoutConstraints_methods[] = {
    { LuaDelete,      "wxLayoutConstraints", wxLayoutConstraints_destructor, 0, 0 },
    { LuaConstructor, "wxLayoutConstraints", wxLayoutConstraints_constructor, 0, 0 },
};

static WXLUAMETHOD wxIndividualLayoutConstraint_methods[] = {
    { LuaDelete,      "wxIndividualLayoutConstraint", wxIndividualLayoutConstraint_destructor, 0, 0 },
    { LuaConstructor, "wxIndividualLayoutConstraint", wxIndividualLayoutConstraint_constructor, 0, 0 },
    { LuaMethod,      "Above", wxIndividualLayoutConstraint_Above, 1, 2 },
    { LuaMethod,      "Absolute", wxIndividualLayoutConstraint_Absolute, 1, 1 },
    { LuaMethod,      "AsIs", wxIndividualLayoutConstraint_AsIs, 0, 0 },
    { LuaMethod,      "Below", wxIndividualLayoutConstraint_Below, 1, 2 },
    { LuaMethod,      "Unconstrained", wxIndividualLayoutConstraint_Unconstrained, 0, 0 },
    { LuaMethod,      "LeftOf", wxIndividualLayoutConstraint_LeftOf, 1, 2 },
    { LuaMethod,      "PercentOf", wxIndividualLayoutConstraint_PercentOf, 3, 3 },
    { LuaMethod,      "RightOf", wxIndividualLayoutConstraint_RightOf, 1, 2 },
    { LuaMethod,      "SameAs", wxIndividualLayoutConstraint_SameAs, 2, 3 },
    { LuaMethod,      "Set", wxIndividualLayoutConstraint_Set, 3, 5 },
};

static WXLUAMETHOD wxSocketBase_methods[] = {
    { LuaDelete,      "wxSocketBase", wxSocketBase_destructor, 0, 0 },
    { LuaConstructor, "wxSocketBase", wxSocketBase_constructor, 0, 0 },
    { LuaMethod,      "Close", wxSocketBase_Close, 0, 0 },
    { LuaMethod,      "Destroy", wxSocketBase_Destroy, 0, 0 },
    { LuaMethod,      "Discard", wxSocketBase_Discard, 0, 0 },
    { LuaMethod,      "Error", wxSocketBase_Error, 0, 0 },
    { LuaMethod,      "GetClientData", wxSocketBase_GetClientData, 0, 0 },
    { LuaMethod,      "GetLocal", wxSocketBase_GetLocal, 1, 1 },
    { LuaMethod,      "GetFlags", wxSocketBase_GetFlags, 0, 0 },
    { LuaMethod,      "GetPeer", wxSocketBase_GetPeer, 1, 1 },
    { LuaMethod,      "InterruptWait", wxSocketBase_InterruptWait, 0, 0 },
    { LuaMethod,      "IsConnected", wxSocketBase_IsConnected, 0, 0 },
    { LuaMethod,      "IsData", wxSocketBase_IsData, 0, 0 },
    { LuaMethod,      "IsDisconnected", wxSocketBase_IsDisconnected, 0, 0 },
    { LuaMethod,      "LastCount", wxSocketBase_LastCount, 0, 0 },
    { LuaMethod,      "Notify", wxSocketBase_Notify, 1, 1 },
    { LuaMethod,      "Ok", wxSocketBase_Ok, 0, 0 },
    { LuaMethod,      "RestoreState", wxSocketBase_RestoreState, 0, 0 },
    { LuaMethod,      "SaveState", wxSocketBase_SaveState, 0, 0 },
    { LuaMethod,      "SetClientData", wxSocketBase_SetClientData, 1, 1 },
    { LuaGetProp,     "ClientData", wxSocketBase_GetClientData, 0, 0 },
    { LuaSetProp,     "ClientData", wxSocketBase_SetClientData, 1, 1 },
    { LuaMethod,      "SetFlags", wxSocketBase_SetFlags, 1, 1 },
    { LuaGetProp,     "Flags", wxSocketBase_GetFlags, 0, 0 },
    { LuaSetProp,     "Flags", wxSocketBase_SetFlags, 1, 1 },
    { LuaMethod,      "SetNotify", wxSocketBase_SetNotify, 1, 1 },
    { LuaMethod,      "SetTimeout", wxSocketBase_SetTimeout, 1, 1 },
    { LuaMethod,      "Peek", wxSocketBase_Peek, 2, 2 },
    { LuaMethod,      "Read", wxSocketBase_Read, 2, 2 },
    { LuaMethod,      "ReadMsg", wxSocketBase_ReadMsg, 2, 2 },
    { LuaMethod,      "Unread", wxSocketBase_Unread, 2, 2 },
    { LuaMethod,      "Wait", wxSocketBase_Wait, 0, 2 },
    { LuaMethod,      "WaitForLost", wxSocketBase_WaitForLost, 0, 2 },
    { LuaMethod,      "WaitForRead", wxSocketBase_WaitForRead, 0, 2 },
    { LuaMethod,      "WaitForWrite", wxSocketBase_WaitForWrite, 0, 2 },
    { LuaMethod,      "Write", wxSocketBase_Write, 2, 2 },
    { LuaMethod,      "WriteMsg", wxSocketBase_WriteMsg, 2, 2 },
};

static WXLUAMETHOD wxSocketClient_methods[] = {
    { LuaDelete,      "wxSocketClient", wxSocketClient_destructor, 0, 0 },
    { LuaConstructor, "wxSocketClient", wxSocketClient_constructor, 0, 1 },
    { LuaMethod,      "Connect", wxSocketClient_Connect, 1, 2 },
    { LuaMethod,      "WaitOnConnect", wxSocketClient_WaitOnConnect, 0, 2 },
};

static WXLUAMETHOD wxSocketServer_methods[] = {
    { LuaDelete,      "wxSocketServer", wxSocketServer_destructor, 0, 0 },
    { LuaConstructor, "wxSocketServer", wxSocketServer_constructor, 1, 2 },
    { LuaMethod,      "Accept", wxSocketServer_Accept, 0, 1 },
    { LuaMethod,      "AcceptWith", wxSocketServer_AcceptWith, 1, 2 },
    { LuaMethod,      "WaitForAccept", wxSocketServer_WaitForAccept, 0, 2 },
};

static WXLUAMETHOD wxSocketEvent_methods[] = {
    { LuaDelete,      "wxSocketEvent", wxSocketEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxSocketEvent_Delete, 0, 0 },
    { LuaConstructor, "wxSocketEvent", wxSocketEvent_constructor, 0, 1 },
    { LuaMethod,      "GetClientData", wxSocketEvent_GetClientData, 0, 0 },
    { LuaGetProp,     "ClientData", wxSocketEvent_GetClientData, 0, 0 },
    { LuaMethod,      "GetSocket", wxSocketEvent_GetSocket, 0, 0 },
    { LuaGetProp,     "Socket", wxSocketEvent_GetSocket, 0, 0 },
    { LuaMethod,      "GetSocketEvent", wxSocketEvent_GetSocketEvent, 0, 0 },
    { LuaGetProp,     "SocketEvent", wxSocketEvent_GetSocketEvent, 0, 0 },
};

static WXLUAMETHOD wxSockAddress_methods[] = {
    { LuaDelete,      "wxSockAddress", wxSockAddress_destructor, 0, 0 },
    { LuaMethod,      "Clear", wxSockAddress_Clear, 0, 0 },
};

static WXLUAMETHOD wxIPV4address_methods[] = {
    { LuaDelete,      "wxIPV4address", wxIPV4address_destructor, 0, 0 },
    { LuaConstructor, "wxIPV4address", wxIPV4address_constructor, 0, 0 },
    { LuaMethod,      "SetHostname", wxIPV4address_SetHostname, 1, 1 },
    { LuaMethod,      "SetHostnameAddr", wxIPV4address_SetHostnameAddr, 1, 1 },
    { LuaMethod,      "Hostname", wxIPV4address_Hostname, 0, 0 },
    { LuaMethod,      "SetService", wxIPV4address_SetService, 1, 1 },
    { LuaMethod,      "SetServicePort", wxIPV4address_SetServicePort, 1, 1 },
    { LuaMethod,      "Service", wxIPV4address_Service, 0, 0 },
    { LuaMethod,      "AnyAddress", wxIPV4address_AnyAddress, 0, 0 },
    { LuaMethod,      "LocalHost", wxIPV4address_LocalHost, 0, 0 },
};

static WXLUAMETHOD wxRect2DDouble_methods[] = {
    { LuaDelete,      "wxRect2DDouble", wxRect2DDouble_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxRect2DDouble_Delete, 0, 0 },
    { LuaConstructor, "wxRect2DDouble", wxRect2DDouble_constructor, 0, 4 },
    { LuaMethod,      "GetPosition", wxRect2DDouble_GetPosition, 0, 0 },
    { LuaMethod,      "GetSize", wxRect2DDouble_GetSize, 0, 0 },
    { LuaMethod,      "GetLeft", wxRect2DDouble_GetLeft, 0, 0 },
    { LuaMethod,      "SetLeft", wxRect2DDouble_SetLeft, 1, 1 },
    { LuaMethod,      "MoveLeftTo", wxRect2DDouble_MoveLeftTo, 1, 1 },
    { LuaMethod,      "GetTop", wxRect2DDouble_GetTop, 0, 0 },
    { LuaMethod,      "SetTop", wxRect2DDouble_SetTop, 1, 1 },
    { LuaMethod,      "MoveTopTo", wxRect2DDouble_MoveTopTo, 1, 1 },
    { LuaMethod,      "GetBottom", wxRect2DDouble_GetBottom, 0, 0 },
    { LuaMethod,      "SetBottom", wxRect2DDouble_SetBottom, 1, 1 },
    { LuaMethod,      "MoveBottomTo", wxRect2DDouble_MoveBottomTo, 1, 1 },
    { LuaMethod,      "GetRight", wxRect2DDouble_GetRight, 0, 0 },
    { LuaMethod,      "SetRight", wxRect2DDouble_SetRight, 1, 1 },
    { LuaMethod,      "MoveRightTo", wxRect2DDouble_MoveRightTo, 1, 1 },
    { LuaMethod,      "GetLeftTop", wxRect2DDouble_GetLeftTop, 0, 0 },
    { LuaMethod,      "SetLeftTop", wxRect2DDouble_SetLeftTop, 1, 1 },
    { LuaMethod,      "MoveLeftTopTo", wxRect2DDouble_MoveLeftTopTo, 1, 1 },
    { LuaMethod,      "GetLeftBottom", wxRect2DDouble_GetLeftBottom, 0, 0 },
    { LuaMethod,      "SetLeftBottom", wxRect2DDouble_SetLeftBottom, 1, 1 },
    { LuaMethod,      "MoveLeftBottomTo", wxRect2DDouble_MoveLeftBottomTo, 1, 1 },
    { LuaMethod,      "GetRightTop", wxRect2DDouble_GetRightTop, 0, 0 },
    { LuaMethod,      "SetRightTop", wxRect2DDouble_SetRightTop, 1, 1 },
    { LuaMethod,      "MoveRightTopTo", wxRect2DDouble_MoveRightTopTo, 1, 1 },
    { LuaMethod,      "GetRightBottom", wxRect2DDouble_GetRightBottom, 0, 0 },
    { LuaMethod,      "SetRightBottom", wxRect2DDouble_SetRightBottom, 1, 1 },
    { LuaMethod,      "MoveRightBottomTo", wxRect2DDouble_MoveRightBottomTo, 1, 1 },
    { LuaMethod,      "GetCentre", wxRect2DDouble_GetCentre, 0, 0 },
    { LuaMethod,      "SetCentre", wxRect2DDouble_SetCentre, 1, 1 },
    { LuaMethod,      "MoveCentreTo", wxRect2DDouble_MoveCentreTo, 1, 1 },
    { LuaMethod,      "GetOutCode", wxRect2DDouble_GetOutCode, 1, 1 },
    { LuaMethod,      "ContainsPoint", wxRect2DDouble_ContainsPoint, 1, 1 },
    { LuaMethod,      "ContainsRect", wxRect2DDouble_ContainsRect, 1, 1 },
    { LuaMethod,      "IsEmpty", wxRect2DDouble_IsEmpty, 0, 0 },
    { LuaMethod,      "HaveEqualSize", wxRect2DDouble_HaveEqualSize, 1, 1 },
    { LuaMethod,      "Inset", wxRect2DDouble_Inset, 4, 4 },
    { LuaMethod,      "Offset", wxRect2DDouble_Offset, 1, 1 },
    { LuaMethod,      "ConstrainTo", wxRect2DDouble_ConstrainTo, 1, 1 },
    { LuaMethod,      "Interpolate", wxRect2DDouble_Interpolate, 2, 2 },
    { LuaMethod,      "Intersect", wxRect2DDouble_Intersect, 1, 1 },
    { LuaMethod,      "CreateIntersection", wxRect2DDouble_CreateIntersection, 1, 1 },
    { LuaMethod,      "Intersects", wxRect2DDouble_Intersects, 1, 1 },
    { LuaMethod,      "Union", wxRect2DDouble_Union, 1, 1 },
    { LuaMethod,      "CreateUnion", wxRect2DDouble_CreateUnion, 1, 1 },
    { LuaMethod,      "Scale", wxRect2DDouble_Scale, 1, 1 },
    { LuaMethod,      "GetX", wxRect2DDouble_GetX, 0, 0 },
    { LuaMethod,      "SetX", wxRect2DDouble_SetX, 1, 1 },
    { LuaGetProp,     "m_x", wxRect2DDouble_GetX, 0, 0 },
    { LuaSetProp,     "m_x", wxRect2DDouble_SetX, 1, 1 },
    { LuaMethod,      "Get_m_y", wxRect2DDouble_Get_m_y, 0, 0 },
    { LuaMethod,      "Set_m_y", wxRect2DDouble_Set_m_y, 1, 1 },
    { LuaGetProp,     "m_y", wxRect2DDouble_Get_m_y, 0, 0 },
    { LuaSetProp,     "m_y", wxRect2DDouble_Set_m_y, 1, 1 },
    { LuaMethod,      "GetWidth", wxRect2DDouble_GetWidth, 0, 0 },
    { LuaMethod,      "SetWidth", wxRect2DDouble_SetWidth, 1, 1 },
    { LuaGetProp,     "m_width", wxRect2DDouble_GetWidth, 0, 0 },
    { LuaSetProp,     "m_width", wxRect2DDouble_SetWidth, 1, 1 },
    { LuaMethod,      "Get_m_height", wxRect2DDouble_Get_m_height, 0, 0 },
    { LuaMethod,      "Set_m_height", wxRect2DDouble_Set_m_height, 1, 1 },
    { LuaGetProp,     "m_height", wxRect2DDouble_Get_m_height, 0, 0 },
    { LuaSetProp,     "m_height", wxRect2DDouble_Set_m_height, 1, 1 },
};

static WXLUAMETHOD wxPoint2DDouble_methods[] = {
    { LuaDelete,      "wxPoint2DDouble", wxPoint2DDouble_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPoint2DDouble_Delete, 0, 0 },
    { LuaConstructor, "wxPoint2DDouble", wxPoint2DDouble_constructor, 0, 2 },
    { LuaMethod,      "GetVectorLength", wxPoint2DDouble_GetVectorLength, 0, 0 },
    { LuaMethod,      "GetVectorAngle", wxPoint2DDouble_GetVectorAngle, 0, 0 },
    { LuaMethod,      "SetVectorLength", wxPoint2DDouble_SetVectorLength, 1, 1 },
    { LuaMethod,      "SetVectorAngle", wxPoint2DDouble_SetVectorAngle, 1, 1 },
    { LuaMethod,      "GetDistance", wxPoint2DDouble_GetDistance, 1, 1 },
    { LuaMethod,      "GetDistanceSquare", wxPoint2DDouble_GetDistanceSquare, 1, 1 },
    { LuaMethod,      "GetDotProduct", wxPoint2DDouble_GetDotProduct, 1, 1 },
    { LuaMethod,      "GetCrossProduct", wxPoint2DDouble_GetCrossProduct, 1, 1 },
};

static WXLUAMETHOD wxRect2DInt_methods[] = {
    { LuaDelete,      "wxRect2DInt", wxRect2DInt_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxRect2DInt_Delete, 0, 0 },
    { LuaConstructor, "wxRect2DInt", wxRect2DInt_constructor, 0, 4 },
    { LuaConstructor, "wxRect2DIntFromwxRect", wxRect2DIntFromwxRect_constructor, 1, 1 },
    { LuaConstructor, "wxRect2DIntFromPoints", wxRect2DIntFromPoints_constructor, 2, 2 },
    { LuaConstructor, "wxRect2DIntFromwxRect2DInt", wxRect2DIntFromwxRect2DInt_constructor, 1, 1 },
    { LuaMethod,      "GetPosition", wxRect2DInt_GetPosition, 0, 0 },
    { LuaMethod,      "GetSize", wxRect2DInt_GetSize, 0, 0 },
    { LuaMethod,      "GetLeft", wxRect2DInt_GetLeft, 0, 0 },
    { LuaMethod,      "SetLeft", wxRect2DInt_SetLeft, 1, 1 },
    { LuaMethod,      "MoveLeftTo", wxRect2DInt_MoveLeftTo, 1, 1 },
    { LuaMethod,      "GetTop", wxRect2DInt_GetTop, 0, 0 },
    { LuaMethod,      "SetTop", wxRect2DInt_SetTop, 1, 1 },
    { LuaMethod,      "MoveTopTo", wxRect2DInt_MoveTopTo, 1, 1 },
    { LuaMethod,      "GetBottom", wxRect2DInt_GetBottom, 0, 0 },
    { LuaMethod,      "SetBottom", wxRect2DInt_SetBottom, 1, 1 },
    { LuaMethod,      "MoveBottomTo", wxRect2DInt_MoveBottomTo, 1, 1 },
    { LuaMethod,      "GetRight", wxRect2DInt_GetRight, 0, 0 },
    { LuaMethod,      "SetRight", wxRect2DInt_SetRight, 1, 1 },
    { LuaMethod,      "MoveRightTo", wxRect2DInt_MoveRightTo, 1, 1 },
    { LuaMethod,      "GetLeftTop", wxRect2DInt_GetLeftTop, 0, 0 },
    { LuaMethod,      "SetLeftTop", wxRect2DInt_SetLeftTop, 1, 1 },
    { LuaMethod,      "MoveLeftTopTo", wxRect2DInt_MoveLeftTopTo, 1, 1 },
    { LuaMethod,      "GetLeftBottom", wxRect2DInt_GetLeftBottom, 0, 0 },
    { LuaMethod,      "SetLeftBottom", wxRect2DInt_SetLeftBottom, 1, 1 },
    { LuaMethod,      "MoveLeftBottomTo", wxRect2DInt_MoveLeftBottomTo, 1, 1 },
    { LuaMethod,      "GetRightTop", wxRect2DInt_GetRightTop, 0, 0 },
    { LuaMethod,      "SetRightTop", wxRect2DInt_SetRightTop, 1, 1 },
    { LuaMethod,      "MoveRightTopTo", wxRect2DInt_MoveRightTopTo, 1, 1 },
    { LuaMethod,      "GetRightBottom", wxRect2DInt_GetRightBottom, 0, 0 },
    { LuaMethod,      "SetRightBottom", wxRect2DInt_SetRightBottom, 1, 1 },
    { LuaMethod,      "MoveRightBottomTo", wxRect2DInt_MoveRightBottomTo, 1, 1 },
    { LuaMethod,      "GetCentre", wxRect2DInt_GetCentre, 0, 0 },
    { LuaMethod,      "SetCentre", wxRect2DInt_SetCentre, 1, 1 },
    { LuaMethod,      "MoveCentreTo", wxRect2DInt_MoveCentreTo, 1, 1 },
    { LuaMethod,      "GetOutCode", wxRect2DInt_GetOutCode, 1, 1 },
    { LuaMethod,      "GetOutcode", wxRect2DInt_GetOutcode, 1, 1 },
    { LuaMethod,      "ContainsPoint", wxRect2DInt_ContainsPoint, 1, 1 },
    { LuaMethod,      "ContainsRect", wxRect2DInt_ContainsRect, 1, 1 },
    { LuaMethod,      "IsEmpty", wxRect2DInt_IsEmpty, 0, 0 },
    { LuaMethod,      "HaveEqualSize", wxRect2DInt_HaveEqualSize, 1, 1 },
    { LuaMethod,      "Inset", wxRect2DInt_Inset, 4, 4 },
    { LuaMethod,      "Offset", wxRect2DInt_Offset, 1, 1 },
    { LuaMethod,      "ConstrainTo", wxRect2DInt_ConstrainTo, 1, 1 },
    { LuaMethod,      "Interpolate", wxRect2DInt_Interpolate, 2, 2 },
    { LuaMethod,      "Intersect", wxRect2DInt_Intersect, 1, 1 },
    { LuaMethod,      "CreateIntersection", wxRect2DInt_CreateIntersection, 1, 1 },
    { LuaMethod,      "Intersects", wxRect2DInt_Intersects, 1, 1 },
    { LuaMethod,      "Union", wxRect2DInt_Union, 1, 1 },
    { LuaMethod,      "CreateUnion", wxRect2DInt_CreateUnion, 1, 1 },
    { LuaMethod,      "Scale", wxRect2DInt_Scale, 1, 1 },
};

static WXLUAMETHOD wxPoint2DInt_methods[] = {
    { LuaDelete,      "wxPoint2DInt", wxPoint2DInt_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxPoint2DInt_Delete, 0, 0 },
    { LuaConstructor, "wxPoint2DInt", wxPoint2DInt_constructor, 0, 2 },
    { LuaMethod,      "GetVectorLength", wxPoint2DInt_GetVectorLength, 0, 0 },
    { LuaMethod,      "GetVectorAngle", wxPoint2DInt_GetVectorAngle, 0, 0 },
    { LuaMethod,      "SetVectorLength", wxPoint2DInt_SetVectorLength, 1, 1 },
    { LuaMethod,      "SetVectorAngle", wxPoint2DInt_SetVectorAngle, 1, 1 },
    { LuaMethod,      "GetDistance", wxPoint2DInt_GetDistance, 1, 1 },
    { LuaMethod,      "GetDistanceSquare", wxPoint2DInt_GetDistanceSquare, 1, 1 },
    { LuaMethod,      "GetDotProduct", wxPoint2DInt_GetDotProduct, 1, 1 },
    { LuaMethod,      "GetCrossProduct", wxPoint2DInt_GetCrossProduct, 1, 1 },
};

static WXLUAMETHOD wxWave_methods[] = {
    { LuaDelete,      "wxWave", wxWave_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxWave_Delete, 0, 0 },
    { LuaConstructor, "wxWave", wxWave_constructor, 1, 2 },
    { LuaConstructor, "wxWaveDefault", wxWaveDefault_constructor, 0, 0 },
    { LuaMethod,      "Create", wxWave_Create, 1, 2 },
    { LuaMethod,      "IsOk", wxWave_IsOk, 0, 0 },
};

static WXLUAMETHOD wxRegEx_methods[] = {
    { LuaDelete,      "wxRegEx", wxRegEx_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxRegEx_Delete, 0, 0 },
    { LuaConstructor, "wxRegExDefault", wxRegExDefault_constructor, 0, 0 },
    { LuaConstructor, "wxRegEx", wxRegEx_constructor, 1, 2 },
    { LuaMethod,      "Compile", wxRegEx_Compile, 1, 2 },
    { LuaMethod,      "IsValid", wxRegEx_IsValid, 0, 0 },
    { LuaMethod,      "GetMatch", wxRegEx_GetMatch, 1, 2 },
    { LuaMethod,      "Matches", wxRegEx_Matches, 1, 2 },
    { LuaMethod,      "GetMatchIndexes", wxRegEx_GetMatchIndexes, 2, 3 },
    { LuaMethod,      "Replace", wxRegEx_Replace, 2, 3 },
    { LuaMethod,      "ReplaceAll", wxRegEx_ReplaceAll, 2, 2 },
    { LuaMethod,      "ReplaceFirst", wxRegEx_ReplaceFirst, 2, 2 },
};

static WXLUAMETHOD wxLuaInterpreter_methods[] = {
    { LuaDelete,      "wxLuaInterpreter", wxLuaInterpreter_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxLuaInterpreter_Delete, 0, 0 },
};

static WXLUAMETHOD wxLuaObject_methods[] = {
    { LuaDelete,      "wxLuaObject", wxLuaObject_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxLuaObject_Delete, 0, 0 },
    { LuaConstructor, "wxLuaObject", wxLuaObject_constructor, 1, 1 },
    { LuaMethod,      "SetObject", wxLuaObject_SetObject, 1, 1 },
    { LuaMethod,      "GetObject", wxLuaObject_GetObject, 0, 0 },
    { LuaGetProp,     "Object", wxLuaObject_GetObject, 0, 0 },
    { LuaSetProp,     "Object", wxLuaObject_SetObject, 1, 1 },
    { LuaMethod,      "GetAllocationFlags", wxLuaObject_GetAllocationFlags, 0, 0 },
    { LuaGetProp,     "AllocationFlags", wxLuaObject_GetAllocationFlags, 0, 0 },
    { LuaMethod,      "ModifyAllocationFlags", wxLuaObject_ModifyAllocationFlags, 1, 1 },
};

static WXLUAMETHOD wxLuaDebugServer_methods[] = {
    { LuaDelete,      "wxLuaDebugServer", wxLuaDebugServer_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxLuaDebugServer_Delete, 0, 0 },
    { LuaConstructor, "wxLuaDebugServer", wxLuaDebugServer_constructor, 1, 1 },
    { LuaConstructor, "wxLuaDebugServerCompile", wxLuaDebugServerCompile_constructor, 2, 2 },
    { LuaMethod,      "StartClient", wxLuaDebugServer_StartClient, 0, 0 },
    { LuaMethod,      "StartServerThread", wxLuaDebugServer_StartServerThread, 0, 0 },
    { LuaMethod,      "AddBreakPoint", wxLuaDebugServer_AddBreakPoint, 2, 2 },
    { LuaMethod,      "RemoveBreakPoint", wxLuaDebugServer_RemoveBreakPoint, 2, 2 },
    { LuaMethod,      "ClearAllBreakPoints", wxLuaDebugServer_ClearAllBreakPoints, 0, 0 },
    { LuaMethod,      "Run", wxLuaDebugServer_Run, 2, 2 },
    { LuaMethod,      "Step", wxLuaDebugServer_Step, 0, 0 },
    { LuaMethod,      "StepOver", wxLuaDebugServer_StepOver, 0, 0 },
    { LuaMethod,      "StepOut", wxLuaDebugServer_StepOut, 0, 0 },
    { LuaMethod,      "Continue", wxLuaDebugServer_Continue, 0, 0 },
    { LuaMethod,      "Break", wxLuaDebugServer_Break, 0, 0 },
    { LuaMethod,      "Reset", wxLuaDebugServer_Reset, 0, 0 },
    { LuaMethod,      "DisplayStackDialog", wxLuaDebugServer_DisplayStackDialog, 1, 1 },
    { LuaMethod,      "EvaluateExpr", wxLuaDebugServer_EvaluateExpr, 2, 2 },
};

static WXLUAMETHOD wxLuaDebugData_methods[] = {
    { LuaDelete,      "wxLuaDebugData", wxLuaDebugData_destructor, 0, 0 },
};

static WXLUAMETHOD wxLuaDebugEvent_methods[] = {
    { LuaDelete,      "wxLuaDebugEvent", wxLuaDebugEvent_destructor, 0, 0 },
    { LuaMethod,      "GetLineNumber", wxLuaDebugEvent_GetLineNumber, 0, 0 },
    { LuaMethod,      "GetReference", wxLuaDebugEvent_GetReference, 0, 0 },
    { LuaMethod,      "GetFileName", wxLuaDebugEvent_GetFileName, 0, 0 },
    { LuaMethod,      "GetMessage", wxLuaDebugEvent_GetMessage, 0, 0 },
    { LuaMethod,      "GetDebugData", wxLuaDebugEvent_GetDebugData, 0, 0 },
};

static WXLUAMETHOD wxLuaPrintout_methods[] = {
    { LuaDelete,      "wxLuaPrintout", wxLuaPrintout_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxLuaPrintout_Delete, 0, 0 },
    { LuaConstructor, "wxLuaPrintout", wxLuaPrintout_constructor, 0, 2 },
    { LuaMethod,      "GetID", wxLuaPrintout_GetID, 0, 0 },
    { LuaMethod,      "SetPageInfo", wxLuaPrintout_SetPageInfo, 2, 4 },
};

static WXLUAMETHOD wxLuaHtmlWindow_methods[] = {
    { LuaDelete,      "wxLuaHtmlWindow", wxLuaHtmlWindow_destructor, 0, 0 },
    { LuaConstructor, "wxLuaHtmlWindow", wxLuaHtmlWindow_constructor, 1, 6 },
};

static WXLUAMETHOD wxLuaHtmlWinTagEvent_methods[] = {
    { LuaDelete,      "wxLuaHtmlWinTagEvent", wxLuaHtmlWinTagEvent_destructor, 0, 0 },
    { LuaMethod,      "GetHtmlTag", wxLuaHtmlWinTagEvent_GetHtmlTag, 0, 0 },
    { LuaGetProp,     "HtmlTag", wxLuaHtmlWinTagEvent_GetHtmlTag, 0, 0 },
    { LuaMethod,      "GetHtmlParser", wxLuaHtmlWinTagEvent_GetHtmlParser, 0, 0 },
    { LuaGetProp,     "HtmlParser", wxLuaHtmlWinTagEvent_GetHtmlParser, 0, 0 },
    { LuaMethod,      "SetParseInnerCalled", wxLuaHtmlWinTagEvent_SetParseInnerCalled, 0, 1 },
    { LuaMethod,      "GetParseInnerCalled", wxLuaHtmlWinTagEvent_GetParseInnerCalled, 0, 0 },
    { LuaGetProp,     "ParseInnerCalled", wxLuaHtmlWinTagEvent_GetParseInnerCalled, 0, 0 },
    { LuaSetProp,     "ParseInnerCalled", wxLuaHtmlWinTagEvent_SetParseInnerCalled, 1, 1 },
};

static WXLUAMETHOD wxFrameLayout_methods[] = {
    { LuaDelete,      "wxFrameLayout", wxFrameLayout_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxFrameLayout_Delete, 0, 0 },
    { LuaConstructor, "wxFrameLayoutDefault", wxFrameLayoutDefault_constructor, 0, 0 },
    { LuaConstructor, "wxFrameLayout", wxFrameLayout_constructor, 1, 3 },
    { LuaMethod,      "EnableFloating", wxFrameLayout_EnableFloating, 0, 1 },
    { LuaMethod,      "Activate", wxFrameLayout_Activate, 0, 0 },
    { LuaMethod,      "Deactivate", wxFrameLayout_Deactivate, 0, 0 },
    { LuaMethod,      "HideBarWindows", wxFrameLayout_HideBarWindows, 0, 0 },
    { LuaMethod,      "DestroyBarWindows", wxFrameLayout_DestroyBarWindows, 0, 0 },
    { LuaMethod,      "SetFrameClient", wxFrameLayout_SetFrameClient, 1, 1 },
    { LuaMethod,      "GetFrameClient", wxFrameLayout_GetFrameClient, 0, 0 },
    { LuaGetProp,     "FrameClient", wxFrameLayout_GetFrameClient, 0, 0 },
    { LuaSetProp,     "FrameClient", wxFrameLayout_SetFrameClient, 1, 1 },
    { LuaMethod,      "GetParentFrame", wxFrameLayout_GetParentFrame, 0, 0 },
    { LuaGetProp,     "ParentFrame", wxFrameLayout_GetParentFrame, 0, 0 },
    { LuaMethod,      "GetNthPane", wxFrameLayout_GetNthPane, 1, 1 },
    { LuaMethod,      "GetPane", wxFrameLayout_GetPane, 1, 1 },
    { LuaMethod,      "AddBar", wxFrameLayout_AddBar, 2, 8 },
    { LuaMethod,      "RedockBar", wxFrameLayout_RedockBar, 2, 4 },
    { LuaMethod,      "FindBarByName", wxFrameLayout_FindBarByName, 1, 1 },
    { LuaMethod,      "FindBarByWindow", wxFrameLayout_FindBarByWindow, 1, 1 },
    { LuaMethod,      "GetNumBars", wxFrameLayout_GetNumBars, 0, 0 },
    { LuaGetProp,     "NumBars", wxFrameLayout_GetNumBars, 0, 0 },
    { LuaMethod,      "GetNthBar", wxFrameLayout_GetNthBar, 1, 1 },
    { LuaMethod,      "SetBarState", wxFrameLayout_SetBarState, 3, 3 },
    { LuaMethod,      "InverseVisibility", wxFrameLayout_InverseVisibility, 1, 1 },
    { LuaMethod,      "ApplyBarProperties", wxFrameLayout_ApplyBarProperties, 1, 1 },
    { LuaMethod,      "RemoveBar", wxFrameLayout_RemoveBar, 1, 1 },
    { LuaMethod,      "RecalcLayout", wxFrameLayout_RecalcLayout, 0, 1 },
    { LuaMethod,      "GetClientHeight", wxFrameLayout_GetClientHeight, 0, 0 },
    { LuaGetProp,     "ClientHeight", wxFrameLayout_GetClientHeight, 0, 0 },
    { LuaMethod,      "GetClientWidth", wxFrameLayout_GetClientWidth, 0, 0 },
    { LuaGetProp,     "ClientWidth", wxFrameLayout_GetClientWidth, 0, 0 },
    { LuaMethod,      "GetClientRect", wxFrameLayout_GetClientRect, 0, 0 },
    { LuaGetProp,     "ClientRect", wxFrameLayout_GetClientRect, 0, 0 },
    { LuaMethod,      "GetUpdatesManager", wxFrameLayout_GetUpdatesManager, 0, 0 },
    { LuaMethod,      "SetUpdatesManager", wxFrameLayout_SetUpdatesManager, 1, 1 },
    { LuaMethod,      "GetPaneProperties", wxFrameLayout_GetPaneProperties, 1, 2 },
    { LuaMethod,      "SetPaneProperties", wxFrameLayout_SetPaneProperties, 1, 2 },
    { LuaMethod,      "SetMargins", wxFrameLayout_SetMargins, 4, 5 },
    { LuaMethod,      "SetPaneBackground", wxFrameLayout_SetPaneBackground, 1, 1 },
    { LuaMethod,      "RefreshNow", wxFrameLayout_RefreshNow, 0, 1 },
    { LuaMethod,      "FirePluginEvent", wxFrameLayout_FirePluginEvent, 1, 1 },
    { LuaMethod,      "CaptureEventsForPlugin", wxFrameLayout_CaptureEventsForPlugin, 1, 1 },
    { LuaMethod,      "ReleaseEventsFromPlugin", wxFrameLayout_ReleaseEventsFromPlugin, 1, 1 },
    { LuaMethod,      "CaptureEventsForPane", wxFrameLayout_CaptureEventsForPane, 1, 1 },
    { LuaMethod,      "ReleaseEventsFromPane", wxFrameLayout_ReleaseEventsFromPane, 1, 1 },
    { LuaMethod,      "GetTopPlugin", wxFrameLayout_GetTopPlugin, 0, 0 },
    { LuaMethod,      "SetTopPlugin", wxFrameLayout_SetTopPlugin, 1, 1 },
    { LuaGetProp,     "TopPlugin", wxFrameLayout_GetTopPlugin, 0, 0 },
    { LuaSetProp,     "TopPlugin", wxFrameLayout_SetTopPlugin, 1, 1 },
    { LuaMethod,      "PushPlugin", wxFrameLayout_PushPlugin, 1, 1 },
    { LuaMethod,      "PopPlugin", wxFrameLayout_PopPlugin, 0, 0 },
    { LuaMethod,      "PopAllPlugins", wxFrameLayout_PopAllPlugins, 0, 0 },
    { LuaMethod,      "PushDefaultPlugins", wxFrameLayout_PushDefaultPlugins, 0, 0 },
    { LuaMethod,      "AddPlugin", wxFrameLayout_AddPlugin, 1, 2 },
    { LuaMethod,      "AddPluginBefore", wxFrameLayout_AddPluginBefore, 2, 3 },
    { LuaMethod,      "RemovePlugin", wxFrameLayout_RemovePlugin, 1, 1 },
    { LuaMethod,      "FindPlugin", wxFrameLayout_FindPlugin, 1, 1 },
    { LuaMethod,      "HasTopPlugin", wxFrameLayout_HasTopPlugin, 0, 0 },
};

static WXLUAMETHOD cbBarSpy_methods[] = {
    { LuaDelete,      "cbBarSpy", cbBarSpy_destructor, 0, 0 },
    { LuaConstructor, "cbBarSpyDefault", cbBarSpyDefault_constructor, 0, 0 },
    { LuaConstructor, "cbBarSpy", cbBarSpy_constructor, 1, 1 },
    { LuaMethod,      "SetBarWindow", cbBarSpy_SetBarWindow, 1, 1 },
};

static WXLUAMETHOD cbUpdateMgrData_methods[] = {
    { LuaDelete,      "cbUpdateMgrData", cbUpdateMgrData_destructor, 0, 0 },
    { LuaConstructor, "cbUpdateMgrData", cbUpdateMgrData_constructor, 0, 0 },
    { LuaMethod,      "StoreItemState", cbUpdateMgrData_StoreItemState, 1, 1 },
    { LuaMethod,      "SetDirty", cbUpdateMgrData_SetDirty, 0, 1 },
    { LuaMethod,      "SetCustomData", cbUpdateMgrData_SetCustomData, 1, 1 },
    { LuaMethod,      "IsDirty", cbUpdateMgrData_IsDirty, 0, 0 },
};

static WXLUAMETHOD cbBarDimHandlerBase_methods[] = {
    { LuaDelete,      "cbBarDimHandlerBase", cbBarDimHandlerBase_destructor, 0, 0 },
    { LuaMethod,      "AddRef", cbBarDimHandlerBase_AddRef, 0, 0 },
    { LuaMethod,      "RemoveRef", cbBarDimHandlerBase_RemoveRef, 0, 0 },
};

static WXLUAMETHOD cbDimInfo_methods[] = {
    { LuaDelete,      "cbDimInfo", cbDimInfo_destructor, 0, 0 },
    { LuaMethod,      "Delete", cbDimInfo_Delete, 0, 0 },
    { LuaConstructor, "cbDimInfoDefault", cbDimInfoDefault_constructor, 0, 0 },
    { LuaConstructor, "cbDimInfoFixed", cbDimInfoFixed_constructor, 2, 2 },
    { LuaConstructor, "cbDimInfo", cbDimInfo_constructor, 6, 10 },
    { LuaConstructor, "cbDimInfoXY", cbDimInfoXY_constructor, 2, 5 },
    { LuaMethod,      "GetDimHandler", cbDimInfo_GetDimHandler, 0, 0 },
    { LuaGetProp,     "DimHandler", cbDimInfo_GetDimHandler, 0, 0 },
};

static WXLUAMETHOD cbRowInfo_methods[] = {
    { LuaDelete,      "cbRowInfo", cbRowInfo_destructor, 0, 0 },
    { LuaConstructor, "cbRowInfo", cbRowInfo_constructor, 0, 0 },
    { LuaMethod,      "GetFirstBar", cbRowInfo_GetFirstBar, 0, 0 },
    { LuaGetProp,     "FirstBar", cbRowInfo_GetFirstBar, 0, 0 },
};

static WXLUAMETHOD cbBarInfo_methods[] = {
    { LuaDelete,      "cbBarInfo", cbBarInfo_destructor, 0, 0 },
    { LuaConstructor, "cbBarInfo", cbBarInfo_constructor, 0, 0 },
    { LuaMethod,      "IsFixed", cbBarInfo_IsFixed, 0, 0 },
    { LuaMethod,      "IsExpanded", cbBarInfo_IsExpanded, 0, 0 },
};

static WXLUAMETHOD cbBarShapeData_methods[] = {
    { LuaDelete,      "cbBarShapeData", cbBarShapeData_destructor, 0, 0 },
};

static WXLUAMETHOD wxBarIterator_methods[] = {
    { LuaDelete,      "wxBarIterator", wxBarIterator_destructor, 0, 0 },
    { LuaMethod,      "Reset", wxBarIterator_Reset, 0, 0 },
    { LuaMethod,      "Next", wxBarIterator_Next, 0, 0 },
    { LuaMethod,      "BarInfo", wxBarIterator_BarInfo, 0, 0 },
    { LuaMethod,      "RowInfo", wxBarIterator_RowInfo, 0, 0 },
};

static WXLUAMETHOD cbCommonPaneProperties_methods[] = {
    { LuaDelete,      "cbCommonPaneProperties", cbCommonPaneProperties_destructor, 0, 0 },
    { LuaConstructor, "cbCommonPaneProperties", cbCommonPaneProperties_constructor, 0, 0 },
};

static WXLUAMETHOD cbLuaCommonPaneProperties_methods[] = {
    { LuaDelete,      "cbLuaCommonPaneProperties", cbLuaCommonPaneProperties_destructor, 0, 0 },
    { LuaMethod,      "Delete", cbLuaCommonPaneProperties_Delete, 0, 0 },
    { LuaConstructor, "cbLuaCommonPaneProperties", cbLuaCommonPaneProperties_constructor, 0, 0 },
    { LuaMethod,      "SetRealTimeUpdates", cbLuaCommonPaneProperties_SetRealTimeUpdates, 0, 1 },
    { LuaMethod,      "SetOutOfPaneDrag", cbLuaCommonPaneProperties_SetOutOfPaneDrag, 0, 1 },
    { LuaMethod,      "SetExactDockPrediction", cbLuaCommonPaneProperties_SetExactDockPrediction, 0, 1 },
    { LuaMethod,      "SetNonDestructFriction", cbLuaCommonPaneProperties_SetNonDestructFriction, 0, 1 },
    { LuaMethod,      "SetShow3DPaneBorder", cbLuaCommonPaneProperties_SetShow3DPaneBorder, 0, 1 },
};

static WXLUAMETHOD cbDockPane_methods[] = {
    { LuaDelete,      "cbDockPane", cbDockPane_destructor, 0, 0 },
    { LuaConstructor, "cbDockPaneDefault", cbDockPaneDefault_constructor, 0, 0 },
    { LuaConstructor, "cbDockPane", cbDockPane_constructor, 2, 2 },
    { LuaMethod,      "SetMargins", cbDockPane_SetMargins, 4, 4 },
    { LuaMethod,      "RemoveBar", cbDockPane_RemoveBar, 1, 1 },
    { LuaMethod,      "InsertBarRect", cbDockPane_InsertBarRect, 2, 2 },
    { LuaMethod,      "InsertBarInto", cbDockPane_InsertBarInto, 2, 2 },
    { LuaMethod,      "InsertBar", cbDockPane_InsertBar, 1, 1 },
    { LuaMethod,      "RemoveRow", cbDockPane_RemoveRow, 1, 1 },
    { LuaMethod,      "InsertRow", cbDockPane_InsertRow, 2, 2 },
    { LuaMethod,      "SetPaneWidth", cbDockPane_SetPaneWidth, 1, 1 },
    { LuaMethod,      "SetBoundsInParent", cbDockPane_SetBoundsInParent, 1, 1 },
    { LuaMethod,      "GetRealRect", cbDockPane_GetRealRect, 0, 0 },
    { LuaGetProp,     "RealRect", cbDockPane_GetRealRect, 0, 0 },
    { LuaMethod,      "GetRowList", cbDockPane_GetRowList, 0, 0 },
    { LuaGetProp,     "RowList", cbDockPane_GetRowList, 0, 0 },
    { LuaMethod,      "GetFirstRow", cbDockPane_GetFirstRow, 0, 0 },
    { LuaGetProp,     "FirstRow", cbDockPane_GetFirstRow, 0, 0 },
    { LuaMethod,      "BarPresent", cbDockPane_BarPresent, 1, 1 },
    { LuaMethod,      "GetPaneHeight", cbDockPane_GetPaneHeight, 0, 0 },
    { LuaGetProp,     "PaneHeight", cbDockPane_GetPaneHeight, 0, 0 },
    { LuaMethod,      "GetAlignment", cbDockPane_GetAlignment, 0, 0 },
    { LuaGetProp,     "Alignment", cbDockPane_GetAlignment, 0, 0 },
    { LuaMethod,      "MatchesMask", cbDockPane_MatchesMask, 1, 1 },
    { LuaMethod,      "IsHorizontal", cbDockPane_IsHorizontal, 0, 0 },
    { LuaMethod,      "RecalcLayout", cbDockPane_RecalcLayout, 0, 0 },
    { LuaMethod,      "GetDockingState", cbDockPane_GetDockingState, 0, 0 },
    { LuaGetProp,     "DockingState", cbDockPane_GetDockingState, 0, 0 },
    { LuaMethod,      "HitTestPaneItems", cbDockPane_HitTestPaneItems, 3, 3 },
    { LuaMethod,      "GetBarResizeRange", cbDockPane_GetBarResizeRange, 4, 4 },
    { LuaMethod,      "GetRowResizeRange", cbDockPane_GetRowResizeRange, 4, 4 },
    { LuaMethod,      "GetBarInfoByWindow", cbDockPane_GetBarInfoByWindow, 1, 1 },
};

static WXLUAMETHOD cbUpdatesManagerBase_methods[] = {
    { LuaDelete,      "cbUpdatesManagerBase", cbUpdatesManagerBase_destructor, 0, 0 },
    { LuaMethod,      "SetLayout", cbUpdatesManagerBase_SetLayout, 1, 1 },
};

static WXLUAMETHOD cbPluginEvent_methods[] = {
    { LuaDelete,      "cbPluginEvent", cbPluginEvent_destructor, 0, 0 },
    { LuaConstructor, "cbPluginEvent", cbPluginEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbPluginBase_methods[] = {
    { LuaDelete,      "cbPluginBase", cbPluginBase_destructor, 0, 0 },
    { LuaConstructor, "cbPluginBaseDefault", cbPluginBaseDefault_constructor, 0, 0 },
    { LuaConstructor, "cbPluginBase", cbPluginBase_constructor, 1, 2 },
    { LuaMethod,      "GetPaneMask", cbPluginBase_GetPaneMask, 0, 0 },
    { LuaGetProp,     "PaneMask", cbPluginBase_GetPaneMask, 0, 0 },
    { LuaMethod,      "OnInitPlugin", cbPluginBase_OnInitPlugin, 0, 0 },
    { LuaMethod,      "IsReady", cbPluginBase_IsReady, 0, 0 },
};

static WXLUAMETHOD cbLeftDownEvent_methods[] = {
    { LuaDelete,      "cbLeftDownEvent", cbLeftDownEvent_destructor, 0, 0 },
    { LuaConstructor, "cbLeftDownEvent", cbLeftDownEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbLeftUpEvent_methods[] = {
    { LuaDelete,      "cbLeftUpEvent", cbLeftUpEvent_destructor, 0, 0 },
    { LuaConstructor, "cbLeftUpEvent", cbLeftUpEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbRightDownEvent_methods[] = {
    { LuaDelete,      "cbRightDownEvent", cbRightDownEvent_destructor, 0, 0 },
    { LuaConstructor, "cbRightDownEvent", cbRightDownEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbRightUpEvent_methods[] = {
    { LuaDelete,      "cbRightUpEvent", cbRightUpEvent_destructor, 0, 0 },
    { LuaConstructor, "cbRightUpEvent", cbRightUpEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbMotionEvent_methods[] = {
    { LuaDelete,      "cbMotionEvent", cbMotionEvent_destructor, 0, 0 },
    { LuaConstructor, "cbMotionEvent", cbMotionEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbLeftDClickEvent_methods[] = {
    { LuaDelete,      "cbLeftDClickEvent", cbLeftDClickEvent_destructor, 0, 0 },
    { LuaConstructor, "cbLeftDClickEvent", cbLeftDClickEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbLayoutRowEvent_methods[] = {
    { LuaDelete,      "cbLayoutRowEvent", cbLayoutRowEvent_destructor, 0, 0 },
    { LuaConstructor, "cbLayoutRowEvent", cbLayoutRowEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbResizeRowEvent_methods[] = {
    { LuaDelete,      "cbResizeRowEvent", cbResizeRowEvent_destructor, 0, 0 },
    { LuaConstructor, "cbResizeRowEvent", cbResizeRowEvent_constructor, 4, 4 },
};

static WXLUAMETHOD cbLayoutRowsEvent_methods[] = {
    { LuaDelete,      "cbLayoutRowsEvent", cbLayoutRowsEvent_destructor, 0, 0 },
    { LuaConstructor, "cbLayoutRowsEvent", cbLayoutRowsEvent_constructor, 1, 1 },
};

static WXLUAMETHOD cbInsertBarEvent_methods[] = {
    { LuaDelete,      "cbInsertBarEvent", cbInsertBarEvent_destructor, 0, 0 },
    { LuaConstructor, "cbInsertBarEvent", cbInsertBarEvent_constructor, 3, 3 },
};

static WXLUAMETHOD cbResizeBarEvent_methods[] = {
    { LuaDelete,      "cbResizeBarEvent", cbResizeBarEvent_destructor, 0, 0 },
    { LuaConstructor, "cbResizeBarEvent", cbResizeBarEvent_constructor, 3, 3 },
};

static WXLUAMETHOD cbRemoveBarEvent_methods[] = {
    { LuaDelete,      "cbRemoveBarEvent", cbRemoveBarEvent_destructor, 0, 0 },
    { LuaConstructor, "cbRemoveBarEvent", cbRemoveBarEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbSizeBarWndEvent_methods[] = {
    { LuaDelete,      "cbSizeBarWndEvent", cbSizeBarWndEvent_destructor, 0, 0 },
    { LuaConstructor, "cbSizeBarWndEvent", cbSizeBarWndEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbDrawBarDecorEvent_methods[] = {
    { LuaDelete,      "cbDrawBarDecorEvent", cbDrawBarDecorEvent_destructor, 0, 0 },
    { LuaConstructor, "cbDrawBarDecorEvent", cbDrawBarDecorEvent_constructor, 3, 3 },
};

static WXLUAMETHOD cbDrawRowDecorEvent_methods[] = {
    { LuaDelete,      "cbDrawRowDecorEvent", cbDrawRowDecorEvent_destructor, 0, 0 },
    { LuaConstructor, "cbDrawRowDecorEvent", cbDrawRowDecorEvent_constructor, 3, 3 },
};

static WXLUAMETHOD cbDrawPaneDecorEvent_methods[] = {
    { LuaDelete,      "cbDrawPaneDecorEvent", cbDrawPaneDecorEvent_destructor, 0, 0 },
    { LuaConstructor, "cbDrawPaneDecorEvent", cbDrawPaneDecorEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbDrawBarHandlesEvent_methods[] = {
    { LuaDelete,      "cbDrawBarHandlesEvent", cbDrawBarHandlesEvent_destructor, 0, 0 },
    { LuaConstructor, "cbDrawBarHandlesEvent", cbDrawBarHandlesEvent_constructor, 3, 3 },
};

static WXLUAMETHOD cbDrawRowHandlesEvent_methods[] = {
    { LuaDelete,      "cbDrawRowHandlesEvent", cbDrawRowHandlesEvent_destructor, 0, 0 },
    { LuaConstructor, "cbDrawRowHandlesEvent", cbDrawRowHandlesEvent_constructor, 3, 3 },
};

static WXLUAMETHOD cbDrawRowBkGroundEvent_methods[] = {
    { LuaDelete,      "cbDrawRowBkGroundEvent", cbDrawRowBkGroundEvent_destructor, 0, 0 },
    { LuaConstructor, "cbDrawRowBkGroundEvent", cbDrawRowBkGroundEvent_constructor, 3, 3 },
};

static WXLUAMETHOD cbDrawPaneBkGroundEvent_methods[] = {
    { LuaDelete,      "cbDrawPaneBkGroundEvent", cbDrawPaneBkGroundEvent_destructor, 0, 0 },
    { LuaConstructor, "cbDrawPaneBkGroundEvent", cbDrawPaneBkGroundEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbStartBarDraggingEvent_methods[] = {
    { LuaDelete,      "cbStartBarDraggingEvent", cbStartBarDraggingEvent_destructor, 0, 0 },
    { LuaConstructor, "cbStartBarDraggingEvent", cbStartBarDraggingEvent_constructor, 3, 3 },
};

static WXLUAMETHOD cbDrawHintRectEvent_methods[] = {
    { LuaDelete,      "cbDrawHintRectEvent", cbDrawHintRectEvent_destructor, 0, 0 },
    { LuaConstructor, "cbDrawHintRectEvent", cbDrawHintRectEvent_constructor, 4, 4 },
};

static WXLUAMETHOD cbStartDrawInAreaEvent_methods[] = {
    { LuaDelete,      "cbStartDrawInAreaEvent", cbStartDrawInAreaEvent_destructor, 0, 0 },
};

static WXLUAMETHOD cbFinishDrawInAreaEvent_methods[] = {
    { LuaDelete,      "cbFinishDrawInAreaEvent", cbFinishDrawInAreaEvent_destructor, 0, 0 },
    { LuaConstructor, "cbFinishDrawInAreaEvent", cbFinishDrawInAreaEvent_constructor, 2, 2 },
};

static WXLUAMETHOD cbCustomizeBarEvent_methods[] = {
    { LuaDelete,      "cbCustomizeBarEvent", cbCustomizeBarEvent_destructor, 0, 0 },
    { LuaConstructor, "cbCustomizeBarEvent", cbCustomizeBarEvent_constructor, 3, 3 },
};

static WXLUAMETHOD cbCustomizeLayoutEvent_methods[] = {
    { LuaDelete,      "cbCustomizeLayoutEvent", cbCustomizeLayoutEvent_destructor, 0, 0 },
    { LuaConstructor, "cbCustomizeLayoutEvent", cbCustomizeLayoutEvent_constructor, 1, 1 },
};

static WXLUAMETHOD cbSimpleUpdatesMgr_methods[] = {
    { LuaDelete,      "cbSimpleUpdatesMgr", cbSimpleUpdatesMgr_destructor, 0, 0 },
    { LuaConstructor, "cbSimpleUpdatesMgrDefault", cbSimpleUpdatesMgrDefault_constructor, 0, 0 },
    { LuaConstructor, "cbSimpleUpdatesMgr", cbSimpleUpdatesMgr_constructor, 1, 1 },
    { LuaMethod,      "UpdateNow", cbSimpleUpdatesMgr_UpdateNow, 0, 0 },
};

static WXLUAMETHOD cbGCUpdatesMgr_methods[] = {
    { LuaDelete,      "cbGCUpdatesMgr", cbGCUpdatesMgr_destructor, 0, 0 },
    { LuaConstructor, "cbGCUpdatesMgrDefault", cbGCUpdatesMgrDefault_constructor, 0, 0 },
    { LuaConstructor, "cbGCUpdatesMgr", cbGCUpdatesMgr_constructor, 1, 1 },
};

static WXLUAMETHOD cbBarHintsPlugin_methods[] = {
    { LuaDelete,      "cbBarHintsPlugin", cbBarHintsPlugin_destructor, 0, 0 },
    { LuaConstructor, "cbBarHintsPluginDefault", cbBarHintsPluginDefault_constructor, 0, 0 },
    { LuaConstructor, "cbBarHintsPlugin", cbBarHintsPlugin_constructor, 1, 2 },
    { LuaMethod,      "SetGrooveCount", cbBarHintsPlugin_SetGrooveCount, 1, 1 },
};

static WXLUAMETHOD cbHintAnimationPlugin_methods[] = {
    { LuaDelete,      "cbHintAnimationPlugin", cbHintAnimationPlugin_destructor, 0, 0 },
    { LuaConstructor, "cbHintAnimationPluginDefault", cbHintAnimationPluginDefault_constructor, 0, 0 },
    { LuaConstructor, "cbHintAnimationPlugin", cbHintAnimationPlugin_constructor, 1, 2 },
};

static WXLUAMETHOD cbRowDragPlugin_methods[] = {
    { LuaDelete,      "cbRowDragPlugin", cbRowDragPlugin_destructor, 0, 0 },
    { LuaConstructor, "cbRowDragPluginDefault", cbRowDragPluginDefault_constructor, 0, 0 },
    { LuaConstructor, "cbRowDragPlugin", cbRowDragPlugin_constructor, 1, 2 },
    { LuaMethod,      "OnInitPlugin", cbRowDragPlugin_OnInitPlugin, 0, 0 },
    { LuaMethod,      "DrawCollapsedRowIcon", cbRowDragPlugin_DrawCollapsedRowIcon, 3, 3 },
    { LuaMethod,      "DrawCollapsedRowsBorder", cbRowDragPlugin_DrawCollapsedRowsBorder, 1, 1 },
    { LuaMethod,      "DrawRowsDragHintsBorder", cbRowDragPlugin_DrawRowsDragHintsBorder, 1, 1 },
    { LuaMethod,      "DrawRowDragHint", cbRowDragPlugin_DrawRowDragHint, 3, 3 },
    { LuaMethod,      "DrawEmptyRow", cbRowDragPlugin_DrawEmptyRow, 2, 2 },
    { LuaMethod,      "GetCollapsedRowIconHeight", cbRowDragPlugin_GetCollapsedRowIconHeight, 0, 0 },
    { LuaMethod,      "GetRowDragHintWidth", cbRowDragPlugin_GetRowDragHintWidth, 0, 0 },
    { LuaMethod,      "SetPaneMargins", cbRowDragPlugin_SetPaneMargins, 0, 0 },
    { LuaMethod,      "HitTestCollapsedRowIcon", cbRowDragPlugin_HitTestCollapsedRowIcon, 2, 2 },
    { LuaMethod,      "HitTestRowDragHint", cbRowDragPlugin_HitTestRowDragHint, 2, 2 },
};

static WXLUAMETHOD cbAntiflickerPlugin_methods[] = {
    { LuaDelete,      "cbAntiflickerPlugin", cbAntiflickerPlugin_destructor, 0, 0 },
    { LuaConstructor, "cbAntiflickerPluginDefault", cbAntiflickerPluginDefault_constructor, 0, 0 },
    { LuaConstructor, "cbAntiflickerPlugin", cbAntiflickerPlugin_constructor, 1, 2 },
};

static WXLUAMETHOD cbSimpleCustomizationPlugin_methods[] = {
    { LuaDelete,      "cbSimpleCustomizationPlugin", cbSimpleCustomizationPlugin_destructor, 0, 0 },
    { LuaConstructor, "cbSimpleCustomizationPluginDefault", cbSimpleCustomizationPluginDefault_constructor, 0, 0 },
    { LuaConstructor, "cbSimpleCustomizationPlugin", cbSimpleCustomizationPlugin_constructor, 1, 2 },
};

static WXLUAMETHOD cbDynToolBarDimHandler_methods[] = {
    { LuaDelete,      "cbDynToolBarDimHandler", cbDynToolBarDimHandler_destructor, 0, 0 },
    { LuaConstructor, "cbDynToolBarDimHandler", cbDynToolBarDimHandler_constructor, 0, 0 },
};

static WXLUAMETHOD wxToolLayoutItem_methods[] = {
    { LuaDelete,      "wxToolLayoutItem", wxToolLayoutItem_destructor, 0, 0 },
    { LuaConstructor, "wxToolLayoutItem", wxToolLayoutItem_constructor, 0, 0 },
};

static WXLUAMETHOD wxDynToolInfo_methods[] = {
    { LuaDelete,      "wxDynToolInfo", wxDynToolInfo_destructor, 0, 0 },
    { LuaConstructor, "wxDynToolInfo", wxDynToolInfo_constructor, 0, 0 },
};

static WXLUAMETHOD wxDynamicToolBar_methods[] = {
    { LuaDelete,      "wxDynamicToolBar", wxDynamicToolBar_destructor, 0, 0 },
    { LuaConstructor, "wxDynamicToolBarDefault", wxDynamicToolBarDefault_constructor, 0, 0 },
    { LuaConstructor, "wxDynamicToolBar", wxDynamicToolBar_constructor, 2, 8 },
    { LuaMethod,      "Create", wxDynamicToolBar_Create, 2, 8 },
    { LuaMethod,      "AddToolWindow", wxDynamicToolBar_AddToolWindow, 2, 3 },
    { LuaMethod,      "AddToolIndex", wxDynamicToolBar_AddToolIndex, 2, 6 },
    { LuaMethod,      "AddTool", wxDynamicToolBar_AddTool, 2, 5 },
    { LuaMethod,      "AddToolCompatible", wxDynamicToolBar_AddToolCompatible, 2, 9 },
    { LuaMethod,      "AddSeparator", wxDynamicToolBar_AddSeparator, 0, 1 },
    { LuaMethod,      "GetToolInfo", wxDynamicToolBar_GetToolInfo, 1, 1 },
    { LuaMethod,      "RemveTool", wxDynamicToolBar_RemveTool, 1, 1 },
    { LuaMethod,      "DrawSeparator", wxDynamicToolBar_DrawSeparator, 2, 2 },
    { LuaMethod,      "Layout", wxDynamicToolBar_Layout, 0, 0 },
    { LuaMethod,      "GetPreferredDim", wxDynamicToolBar_GetPreferredDim, 2, 2 },
    { LuaMethod,      "EnableTool", wxDynamicToolBar_EnableTool, 1, 2 },
    { LuaMethod,      "FindToolForPosition", wxDynamicToolBar_FindToolForPosition, 2, 2 },
    { LuaMethod,      "DoInsertTool", wxDynamicToolBar_DoInsertTool, 2, 2 },
    { LuaMethod,      "DoDeleteTool", wxDynamicToolBar_DoDeleteTool, 2, 2 },
    { LuaMethod,      "DoEnableTool", wxDynamicToolBar_DoEnableTool, 2, 2 },
    { LuaMethod,      "DoToggleTool", wxDynamicToolBar_DoToggleTool, 2, 2 },
    { LuaMethod,      "DoSetToggle", wxDynamicToolBar_DoSetToggle, 2, 2 },
    { LuaMethod,      "CreateTool", wxDynamicToolBar_CreateTool, 8, 8 },
    { LuaMethod,      "CreateToolWindow", wxDynamicToolBar_CreateToolWindow, 1, 1 },
};

static WXLUAMETHOD wxStyledTextCtrlDocument_methods[] = {
    { LuaDelete,      "wxStyledTextCtrlDocument", wxStyledTextCtrlDocument_destructor, 0, 0 },
};

static WXLUAMETHOD wxStyledTextCtrl_methods[] = {
    { LuaDelete,      "wxStyledTextCtrl", wxStyledTextCtrl_destructor, 0, 0 },
    { LuaConstructor, "wxStyledTextCtrl", wxStyledTextCtrl_constructor, 2, 6 },
    { LuaMethod,      "AddText", wxStyledTextCtrl_AddText, 1, 1 },
    { LuaMethod,      "InsertText", wxStyledTextCtrl_InsertText, 2, 2 },
    { LuaMethod,      "ClearAll", wxStyledTextCtrl_ClearAll, 0, 0 },
    { LuaMethod,      "ClearDocumentStyle", wxStyledTextCtrl_ClearDocumentStyle, 0, 0 },
    { LuaMethod,      "GetLength", wxStyledTextCtrl_GetLength, 0, 0 },
    { LuaGetProp,     "Length", wxStyledTextCtrl_GetLength, 0, 0 },
    { LuaMethod,      "GetCharAt", wxStyledTextCtrl_GetCharAt, 1, 1 },
    { LuaGetProp,     "CharAt", wxStyledTextCtrl_GetCharAt, 0, 0 },
    { LuaMethod,      "GetCurrentPos", wxStyledTextCtrl_GetCurrentPos, 0, 0 },
    { LuaMethod,      "GetAnchor", wxStyledTextCtrl_GetAnchor, 0, 0 },
    { LuaMethod,      "GetStyleAt", wxStyledTextCtrl_GetStyleAt, 1, 1 },
    { LuaMethod,      "Redo", wxStyledTextCtrl_Redo, 0, 0 },
    { LuaMethod,      "SetUndoCollection", wxStyledTextCtrl_SetUndoCollection, 1, 1 },
    { LuaMethod,      "SelectAll", wxStyledTextCtrl_SelectAll, 0, 0 },
    { LuaMethod,      "SetSavePoint", wxStyledTextCtrl_SetSavePoint, 0, 0 },
    { LuaMethod,      "CanRedo", wxStyledTextCtrl_CanRedo, 0, 0 },
    { LuaMethod,      "MarkerLineFromHandle", wxStyledTextCtrl_MarkerLineFromHandle, 1, 1 },
    { LuaMethod,      "MarkerDeleteHandle", wxStyledTextCtrl_MarkerDeleteHandle, 1, 1 },
    { LuaMethod,      "GetUndoCollection", wxStyledTextCtrl_GetUndoCollection, 0, 0 },
    { LuaMethod,      "GetViewWhiteSpace", wxStyledTextCtrl_GetViewWhiteSpace, 0, 0 },
    { LuaMethod,      "SetViewWhiteSpace", wxStyledTextCtrl_SetViewWhiteSpace, 1, 1 },
    { LuaGetProp,     "ViewWhiteSpace", wxStyledTextCtrl_GetViewWhiteSpace, 0, 0 },
    { LuaSetProp,     "ViewWhiteSpace", wxStyledTextCtrl_SetViewWhiteSpace, 1, 1 },
    { LuaMethod,      "PositionFromPoint", wxStyledTextCtrl_PositionFromPoint, 1, 1 },
    { LuaMethod,      "PositionFromPointClose", wxStyledTextCtrl_PositionFromPointClose, 2, 2 },
    { LuaMethod,      "GotoLine", wxStyledTextCtrl_GotoLine, 1, 1 },
    { LuaMethod,      "GotoPos", wxStyledTextCtrl_GotoPos, 1, 1 },
    { LuaMethod,      "SetAnchor", wxStyledTextCtrl_SetAnchor, 1, 1 },
    { LuaGetProp,     "Anchor", wxStyledTextCtrl_GetAnchor, 0, 0 },
    { LuaSetProp,     "Anchor", wxStyledTextCtrl_SetAnchor, 1, 1 },
    { LuaMethod,      "GetCurLine", wxStyledTextCtrl_GetCurLine, 0, 1 },
    { LuaMethod,      "GetEndStyled", wxStyledTextCtrl_GetEndStyled, 0, 0 },
    { LuaGetProp,     "EndStyled", wxStyledTextCtrl_GetEndStyled, 0, 0 },
    { LuaMethod,      "ConvertEOLs", wxStyledTextCtrl_ConvertEOLs, 1, 1 },
    { LuaMethod,      "GetEOLMode", wxStyledTextCtrl_GetEOLMode, 0, 0 },
    { LuaMethod,      "SetEOLMode", wxStyledTextCtrl_SetEOLMode, 1, 1 },
    { LuaGetProp,     "EOLMode", wxStyledTextCtrl_GetEOLMode, 0, 0 },
    { LuaSetProp,     "EOLMode", wxStyledTextCtrl_SetEOLMode, 1, 1 },
    { LuaMethod,      "StartStyling", wxStyledTextCtrl_StartStyling, 2, 2 },
    { LuaMethod,      "SetStyling", wxStyledTextCtrl_SetStyling, 2, 2 },
    { LuaMethod,      "GetBufferedDraw", wxStyledTextCtrl_GetBufferedDraw, 0, 0 },
    { LuaMethod,      "SetBufferedDraw", wxStyledTextCtrl_SetBufferedDraw, 1, 1 },
    { LuaGetProp,     "BufferedDraw", wxStyledTextCtrl_GetBufferedDraw, 0, 0 },
    { LuaSetProp,     "BufferedDraw", wxStyledTextCtrl_SetBufferedDraw, 1, 1 },
    { LuaMethod,      "SetTabWidth", wxStyledTextCtrl_SetTabWidth, 1, 1 },
    { LuaMethod,      "GetTabWidth", wxStyledTextCtrl_GetTabWidth, 0, 0 },
    { LuaGetProp,     "TabWidth", wxStyledTextCtrl_GetTabWidth, 0, 0 },
    { LuaSetProp,     "TabWidth", wxStyledTextCtrl_SetTabWidth, 1, 1 },
    { LuaMethod,      "SetCodePage", wxStyledTextCtrl_SetCodePage, 1, 1 },
    { LuaGetProp,     "CodePage", wxStyledTextCtrl_GetCodePage, 0, 0 },
    { LuaSetProp,     "CodePage", wxStyledTextCtrl_SetCodePage, 1, 1 },
    { LuaMethod,      "MarkerDefine", wxStyledTextCtrl_MarkerDefine, 2, 4 },
    { LuaMethod,      "MarkerSetForeground", wxStyledTextCtrl_MarkerSetForeground, 2, 2 },
    { LuaMethod,      "MarkerSetBackground", wxStyledTextCtrl_MarkerSetBackground, 2, 2 },
    { LuaMethod,      "MarkerAdd", wxStyledTextCtrl_MarkerAdd, 2, 2 },
    { LuaMethod,      "MarkerDelete", wxStyledTextCtrl_MarkerDelete, 2, 2 },
    { LuaMethod,      "MarkerDeleteAll", wxStyledTextCtrl_MarkerDeleteAll, 1, 1 },
    { LuaMethod,      "MarkerGet", wxStyledTextCtrl_MarkerGet, 1, 1 },
    { LuaMethod,      "MarkerNext", wxStyledTextCtrl_MarkerNext, 2, 2 },
    { LuaMethod,      "MarkerPrevious", wxStyledTextCtrl_MarkerPrevious, 2, 2 },
    { LuaMethod,      "SetMarginType", wxStyledTextCtrl_SetMarginType, 2, 2 },
    { LuaMethod,      "GetMarginType", wxStyledTextCtrl_GetMarginType, 1, 1 },
    { LuaMethod,      "SetMarginWidth", wxStyledTextCtrl_SetMarginWidth, 2, 2 },
    { LuaMethod,      "GetMarginWidth", wxStyledTextCtrl_GetMarginWidth, 1, 1 },
    { LuaMethod,      "SetMarginMask", wxStyledTextCtrl_SetMarginMask, 2, 2 },
    { LuaMethod,      "GetMarginMask", wxStyledTextCtrl_GetMarginMask, 1, 1 },
    { LuaMethod,      "SetMarginSensitive", wxStyledTextCtrl_SetMarginSensitive, 2, 2 },
    { LuaMethod,      "GetMarginSensitive", wxStyledTextCtrl_GetMarginSensitive, 1, 1 },
    { LuaMethod,      "StyleClearAll", wxStyledTextCtrl_StyleClearAll, 0, 0 },
    { LuaMethod,      "StyleSetForeground", wxStyledTextCtrl_StyleSetForeground, 2, 2 },
    { LuaMethod,      "StyleSetBackground", wxStyledTextCtrl_StyleSetBackground, 2, 2 },
    { LuaMethod,      "StyleSetBold", wxStyledTextCtrl_StyleSetBold, 2, 2 },
    { LuaMethod,      "StyleSetItalic", wxStyledTextCtrl_StyleSetItalic, 2, 2 },
    { LuaMethod,      "StyleSetSize", wxStyledTextCtrl_StyleSetSize, 2, 2 },
    { LuaMethod,      "StyleSetFaceName", wxStyledTextCtrl_StyleSetFaceName, 2, 2 },
    { LuaMethod,      "StyleSetEOLFilled", wxStyledTextCtrl_StyleSetEOLFilled, 2, 2 },
    { LuaMethod,      "StyleResetDefault", wxStyledTextCtrl_StyleResetDefault, 0, 0 },
    { LuaMethod,      "StyleSetUnderline", wxStyledTextCtrl_StyleSetUnderline, 2, 2 },
    { LuaMethod,      "StyleSetCase", wxStyledTextCtrl_StyleSetCase, 2, 2 },
    { LuaMethod,      "StyleSetCharacterSet", wxStyledTextCtrl_StyleSetCharacterSet, 2, 2 },
    { LuaMethod,      "SetSelForeground", wxStyledTextCtrl_SetSelForeground, 2, 2 },
    { LuaMethod,      "SetSelBackground", wxStyledTextCtrl_SetSelBackground, 2, 2 },
    { LuaMethod,      "SetCaretForeground", wxStyledTextCtrl_SetCaretForeground, 1, 1 },
    { LuaMethod,      "CmdKeyAssign", wxStyledTextCtrl_CmdKeyAssign, 3, 3 },
    { LuaMethod,      "CmdKeyClear", wxStyledTextCtrl_CmdKeyClear, 2, 2 },
    { LuaMethod,      "CmdKeyClearAll", wxStyledTextCtrl_CmdKeyClearAll, 0, 0 },
    { LuaMethod,      "SetStyleBytes", wxStyledTextCtrl_SetStyleBytes, 2, 2 },
    { LuaMethod,      "StyleSetVisible", wxStyledTextCtrl_StyleSetVisible, 2, 2 },
    { LuaMethod,      "GetCaretPeriod", wxStyledTextCtrl_GetCaretPeriod, 0, 0 },
    { LuaMethod,      "SetCaretPeriod", wxStyledTextCtrl_SetCaretPeriod, 1, 1 },
    { LuaGetProp,     "CaretPeriod", wxStyledTextCtrl_GetCaretPeriod, 0, 0 },
    { LuaSetProp,     "CaretPeriod", wxStyledTextCtrl_SetCaretPeriod, 1, 1 },
    { LuaMethod,      "SetWordChars", wxStyledTextCtrl_SetWordChars, 1, 1 },
    { LuaMethod,      "BeginUndoAction", wxStyledTextCtrl_BeginUndoAction, 0, 0 },
    { LuaMethod,      "EndUndoAction", wxStyledTextCtrl_EndUndoAction, 0, 0 },
    { LuaMethod,      "IndicatorSetStyle", wxStyledTextCtrl_IndicatorSetStyle, 2, 2 },
    { LuaMethod,      "IndicatorGetStyle", wxStyledTextCtrl_IndicatorGetStyle, 1, 1 },
    { LuaMethod,      "IndicatorSetForeground", wxStyledTextCtrl_IndicatorSetForeground, 2, 2 },
    { LuaMethod,      "IndicatorGetForeground", wxStyledTextCtrl_IndicatorGetForeground, 1, 1 },
    { LuaMethod,      "SetWhitespaceForeground", wxStyledTextCtrl_SetWhitespaceForeground, 2, 2 },
    { LuaMethod,      "SetWhitespaceBackground", wxStyledTextCtrl_SetWhitespaceBackground, 2, 2 },
    { LuaMethod,      "SetStyleBits", wxStyledTextCtrl_SetStyleBits, 1, 1 },
    { LuaMethod,      "GetStyleBits", wxStyledTextCtrl_GetStyleBits, 0, 0 },
    { LuaGetProp,     "StyleBits", wxStyledTextCtrl_GetStyleBits, 0, 0 },
    { LuaSetProp,     "StyleBits", wxStyledTextCtrl_SetStyleBits, 1, 1 },
    { LuaMethod,      "SetLineState", wxStyledTextCtrl_SetLineState, 2, 2 },
    { LuaMethod,      "GetLineState", wxStyledTextCtrl_GetLineState, 1, 1 },
    { LuaMethod,      "GetMaxLineState", wxStyledTextCtrl_GetMaxLineState, 0, 0 },
    { LuaGetProp,     "MaxLineState", wxStyledTextCtrl_GetMaxLineState, 0, 0 },
    { LuaMethod,      "GetCaretLineVisible", wxStyledTextCtrl_GetCaretLineVisible, 0, 0 },
    { LuaMethod,      "SetCaretLineVisible", wxStyledTextCtrl_SetCaretLineVisible, 1, 1 },
    { LuaGetProp,     "CaretLineVisible", wxStyledTextCtrl_GetCaretLineVisible, 0, 0 },
    { LuaSetProp,     "CaretLineVisible", wxStyledTextCtrl_SetCaretLineVisible, 1, 1 },
    { LuaMethod,      "GetCaretLineBack", wxStyledTextCtrl_GetCaretLineBack, 0, 0 },
    { LuaMethod,      "SetCaretLineBack", wxStyledTextCtrl_SetCaretLineBack, 1, 1 },
    { LuaGetProp,     "CaretLineBack", wxStyledTextCtrl_GetCaretLineBack, 0, 0 },
    { LuaSetProp,     "CaretLineBack", wxStyledTextCtrl_SetCaretLineBack, 1, 1 },
    { LuaMethod,      "StyleSetChangeable", wxStyledTextCtrl_StyleSetChangeable, 2, 2 },
    { LuaMethod,      "AutoCompShow", wxStyledTextCtrl_AutoCompShow, 2, 2 },
    { LuaMethod,      "AutoCompCancel", wxStyledTextCtrl_AutoCompCancel, 0, 0 },
    { LuaMethod,      "AutoCompActive", wxStyledTextCtrl_AutoCompActive, 0, 0 },
    { LuaMethod,      "AutoCompPosStart", wxStyledTextCtrl_AutoCompPosStart, 0, 0 },
    { LuaMethod,      "AutoCompComplete", wxStyledTextCtrl_AutoCompComplete, 0, 0 },
    { LuaMethod,      "AutoCompStops", wxStyledTextCtrl_AutoCompStops, 1, 1 },
    { LuaMethod,      "AutoCompSetSeparator", wxStyledTextCtrl_AutoCompSetSeparator, 1, 1 },
    { LuaMethod,      "AutoCompGetSeparator", wxStyledTextCtrl_AutoCompGetSeparator, 0, 0 },
    { LuaMethod,      "AutoCompSelect", wxStyledTextCtrl_AutoCompSelect, 1, 1 },
    { LuaMethod,      "AutoCompSetCancelAtStart", wxStyledTextCtrl_AutoCompSetCancelAtStart, 1, 1 },
    { LuaMethod,      "AutoCompGetCancelAtStart", wxStyledTextCtrl_AutoCompGetCancelAtStart, 0, 0 },
    { LuaMethod,      "AutoCompSetFillUps", wxStyledTextCtrl_AutoCompSetFillUps, 1, 1 },
    { LuaMethod,      "AutoCompSetChooseSingle", wxStyledTextCtrl_AutoCompSetChooseSingle, 1, 1 },
    { LuaMethod,      "AutoCompGetChooseSingle", wxStyledTextCtrl_AutoCompGetChooseSingle, 0, 0 },
    { LuaMethod,      "AutoCompSetIgnoreCase", wxStyledTextCtrl_AutoCompSetIgnoreCase, 1, 1 },
    { LuaMethod,      "AutoCompGetIgnoreCase", wxStyledTextCtrl_AutoCompGetIgnoreCase, 0, 0 },
    { LuaMethod,      "UserListShow", wxStyledTextCtrl_UserListShow, 2, 2 },
    { LuaMethod,      "AutoCompSetAutoHide", wxStyledTextCtrl_AutoCompSetAutoHide, 1, 1 },
    { LuaMethod,      "AutoCompGetAutoHide", wxStyledTextCtrl_AutoCompGetAutoHide, 0, 0 },
    { LuaMethod,      "AutoCompSetDropRestOfWord", wxStyledTextCtrl_AutoCompSetDropRestOfWord, 1, 1 },
    { LuaMethod,      "AutoCompGetDropRestOfWord", wxStyledTextCtrl_AutoCompGetDropRestOfWord, 0, 0 },
    { LuaMethod,      "SetIndent", wxStyledTextCtrl_SetIndent, 1, 1 },
    { LuaMethod,      "GetIndent", wxStyledTextCtrl_GetIndent, 0, 0 },
    { LuaGetProp,     "Indent", wxStyledTextCtrl_GetIndent, 0, 0 },
    { LuaSetProp,     "Indent", wxStyledTextCtrl_SetIndent, 1, 1 },
    { LuaMethod,      "SetUseTabs", wxStyledTextCtrl_SetUseTabs, 1, 1 },
    { LuaMethod,      "GetUseTabs", wxStyledTextCtrl_GetUseTabs, 0, 0 },
    { LuaGetProp,     "UseTabs", wxStyledTextCtrl_GetUseTabs, 0, 0 },
    { LuaSetProp,     "UseTabs", wxStyledTextCtrl_SetUseTabs, 1, 1 },
    { LuaMethod,      "SetLineIndentation", wxStyledTextCtrl_SetLineIndentation, 2, 2 },
    { LuaMethod,      "GetLineIndentation", wxStyledTextCtrl_GetLineIndentation, 1, 1 },
    { LuaMethod,      "GetLineIndentPosition", wxStyledTextCtrl_GetLineIndentPosition, 1, 1 },
    { LuaMethod,      "GetColumn", wxStyledTextCtrl_GetColumn, 1, 1 },
    { LuaMethod,      "SetUseHorizontalScrollBar", wxStyledTextCtrl_SetUseHorizontalScrollBar, 1, 1 },
    { LuaMethod,      "GetUseHorizontalScrollBar", wxStyledTextCtrl_GetUseHorizontalScrollBar, 0, 0 },
    { LuaGetProp,     "UseHorizontalScrollBar", wxStyledTextCtrl_GetUseHorizontalScrollBar, 0, 0 },
    { LuaSetProp,     "UseHorizontalScrollBar", wxStyledTextCtrl_SetUseHorizontalScrollBar, 1, 1 },
    { LuaMethod,      "SetIndentationGuides", wxStyledTextCtrl_SetIndentationGuides, 1, 1 },
    { LuaMethod,      "GetIndentationGuides", wxStyledTextCtrl_GetIndentationGuides, 0, 0 },
    { LuaGetProp,     "IndentationGuides", wxStyledTextCtrl_GetIndentationGuides, 0, 0 },
    { LuaSetProp,     "IndentationGuides", wxStyledTextCtrl_SetIndentationGuides, 1, 1 },
    { LuaMethod,      "SetHighlightGuide", wxStyledTextCtrl_SetHighlightGuide, 1, 1 },
    { LuaMethod,      "GetHighlightGuide", wxStyledTextCtrl_GetHighlightGuide, 0, 0 },
    { LuaGetProp,     "HighlightGuide", wxStyledTextCtrl_GetHighlightGuide, 0, 0 },
    { LuaSetProp,     "HighlightGuide", wxStyledTextCtrl_SetHighlightGuide, 1, 1 },
    { LuaMethod,      "GetLineEndPosition", wxStyledTextCtrl_GetLineEndPosition, 1, 1 },
    { LuaMethod,      "GetCodePage", wxStyledTextCtrl_GetCodePage, 0, 0 },
    { LuaMethod,      "GetCaretForeground", wxStyledTextCtrl_GetCaretForeground, 0, 0 },
    { LuaMethod,      "GetReadOnly", wxStyledTextCtrl_GetReadOnly, 0, 0 },
    { LuaMethod,      "SetCurrentPos", wxStyledTextCtrl_SetCurrentPos, 1, 1 },
    { LuaGetProp,     "CurrentPos", wxStyledTextCtrl_GetCurrentPos, 0, 0 },
    { LuaSetProp,     "CurrentPos", wxStyledTextCtrl_SetCurrentPos, 1, 1 },
    { LuaMethod,      "SetSelectionStart", wxStyledTextCtrl_SetSelectionStart, 1, 1 },
    { LuaMethod,      "GetSelectionStart", wxStyledTextCtrl_GetSelectionStart, 0, 0 },
    { LuaGetProp,     "SelectionStart", wxStyledTextCtrl_GetSelectionStart, 0, 0 },
    { LuaSetProp,     "SelectionStart", wxStyledTextCtrl_SetSelectionStart, 1, 1 },
    { LuaMethod,      "SetSelectionEnd", wxStyledTextCtrl_SetSelectionEnd, 1, 1 },
    { LuaMethod,      "GetSelectionEnd", wxStyledTextCtrl_GetSelectionEnd, 0, 0 },
    { LuaGetProp,     "SelectionEnd", wxStyledTextCtrl_GetSelectionEnd, 0, 0 },
    { LuaSetProp,     "SelectionEnd", wxStyledTextCtrl_SetSelectionEnd, 1, 1 },
    { LuaMethod,      "SetPrintMagnification", wxStyledTextCtrl_SetPrintMagnification, 1, 1 },
    { LuaMethod,      "GetPrintMagnification", wxStyledTextCtrl_GetPrintMagnification, 0, 0 },
    { LuaGetProp,     "PrintMagnification", wxStyledTextCtrl_GetPrintMagnification, 0, 0 },
    { LuaSetProp,     "PrintMagnification", wxStyledTextCtrl_SetPrintMagnification, 1, 1 },
    { LuaMethod,      "SetPrintColourMode", wxStyledTextCtrl_SetPrintColourMode, 1, 1 },
    { LuaMethod,      "GetPrintColourMode", wxStyledTextCtrl_GetPrintColourMode, 0, 0 },
    { LuaGetProp,     "PrintColourMode", wxStyledTextCtrl_GetPrintColourMode, 0, 0 },
    { LuaSetProp,     "PrintColourMode", wxStyledTextCtrl_SetPrintColourMode, 1, 1 },
    { LuaMethod,      "FindText", wxStyledTextCtrl_FindText, 3, 4 },
    { LuaMethod,      "FormatRange", wxStyledTextCtrl_FormatRange, 7, 7 },
    { LuaMethod,      "GetFirstVisibleLine", wxStyledTextCtrl_GetFirstVisibleLine, 0, 0 },
    { LuaGetProp,     "FirstVisibleLine", wxStyledTextCtrl_GetFirstVisibleLine, 0, 0 },
    { LuaMethod,      "GetLine", wxStyledTextCtrl_GetLine, 1, 1 },
    { LuaMethod,      "GetLineCount", wxStyledTextCtrl_GetLineCount, 0, 0 },
    { LuaGetProp,     "LineCount", wxStyledTextCtrl_GetLineCount, 0, 0 },
    { LuaMethod,      "SetMarginLeft", wxStyledTextCtrl_SetMarginLeft, 1, 1 },
    { LuaMethod,      "GetMarginLeft", wxStyledTextCtrl_GetMarginLeft, 0, 0 },
    { LuaGetProp,     "MarginLeft", wxStyledTextCtrl_GetMarginLeft, 0, 0 },
    { LuaSetProp,     "MarginLeft", wxStyledTextCtrl_SetMarginLeft, 1, 1 },
    { LuaMethod,      "SetMarginRight", wxStyledTextCtrl_SetMarginRight, 1, 1 },
    { LuaMethod,      "GetMarginRight", wxStyledTextCtrl_GetMarginRight, 0, 0 },
    { LuaGetProp,     "MarginRight", wxStyledTextCtrl_GetMarginRight, 0, 0 },
    { LuaSetProp,     "MarginRight", wxStyledTextCtrl_SetMarginRight, 1, 1 },
    { LuaMethod,      "GetModify", wxStyledTextCtrl_GetModify, 0, 0 },
    { LuaGetProp,     "Modify", wxStyledTextCtrl_GetModify, 0, 0 },
    { LuaMethod,      "SetSelection", wxStyledTextCtrl_SetSelection, 2, 2 },
    { LuaMethod,      "GetSelectedText", wxStyledTextCtrl_GetSelectedText, 0, 0 },
    { LuaGetProp,     "SelectedText", wxStyledTextCtrl_GetSelectedText, 0, 0 },
    { LuaMethod,      "GetTextRange", wxStyledTextCtrl_GetTextRange, 2, 2 },
    { LuaMethod,      "HideSelection", wxStyledTextCtrl_HideSelection, 1, 1 },
    { LuaMethod,      "LineFromPosition", wxStyledTextCtrl_LineFromPosition, 1, 1 },
    { LuaMethod,      "PositionFromLine", wxStyledTextCtrl_PositionFromLine, 1, 1 },
    { LuaMethod,      "LineScroll", wxStyledTextCtrl_LineScroll, 2, 2 },
    { LuaMethod,      "EnsureCaretVisible", wxStyledTextCtrl_EnsureCaretVisible, 0, 0 },
    { LuaMethod,      "ReplaceSelection", wxStyledTextCtrl_ReplaceSelection, 1, 1 },
    { LuaMethod,      "SetReadOnly", wxStyledTextCtrl_SetReadOnly, 1, 1 },
    { LuaGetProp,     "ReadOnly", wxStyledTextCtrl_GetReadOnly, 0, 0 },
    { LuaSetProp,     "ReadOnly", wxStyledTextCtrl_SetReadOnly, 1, 1 },
    { LuaMethod,      "CanPaste", wxStyledTextCtrl_CanPaste, 0, 0 },
    { LuaMethod,      "CanUndo", wxStyledTextCtrl_CanUndo, 0, 0 },
    { LuaMethod,      "EmptyUndoBuffer", wxStyledTextCtrl_EmptyUndoBuffer, 0, 0 },
    { LuaMethod,      "Undo", wxStyledTextCtrl_Undo, 0, 0 },
    { LuaMethod,      "Cut", wxStyledTextCtrl_Cut, 0, 0 },
    { LuaMethod,      "Copy", wxStyledTextCtrl_Copy, 0, 0 },
    { LuaMethod,      "Paste", wxStyledTextCtrl_Paste, 0, 0 },
    { LuaMethod,      "Clear", wxStyledTextCtrl_Clear, 0, 0 },
    { LuaMethod,      "SetText", wxStyledTextCtrl_SetText, 1, 1 },
    { LuaMethod,      "GetText", wxStyledTextCtrl_GetText, 0, 0 },
    { LuaGetProp,     "Text", wxStyledTextCtrl_GetText, 0, 0 },
    { LuaSetProp,     "Text", wxStyledTextCtrl_SetText, 1, 1 },
    { LuaMethod,      "GetTextLength", wxStyledTextCtrl_GetTextLength, 0, 0 },
    { LuaGetProp,     "TextLength", wxStyledTextCtrl_GetTextLength, 0, 0 },
    { LuaMethod,      "SetOvertype", wxStyledTextCtrl_SetOvertype, 1, 1 },
    { LuaMethod,      "GetOvertype", wxStyledTextCtrl_GetOvertype, 0, 0 },
    { LuaGetProp,     "Overtype", wxStyledTextCtrl_GetOvertype, 0, 0 },
    { LuaSetProp,     "Overtype", wxStyledTextCtrl_SetOvertype, 1, 1 },
    { LuaMethod,      "SetCaretWidth", wxStyledTextCtrl_SetCaretWidth, 1, 1 },
    { LuaMethod,      "GetCaretWidth", wxStyledTextCtrl_GetCaretWidth, 0, 0 },
    { LuaGetProp,     "CaretWidth", wxStyledTextCtrl_GetCaretWidth, 0, 0 },
    { LuaSetProp,     "CaretWidth", wxStyledTextCtrl_SetCaretWidth, 1, 1 },
    { LuaMethod,      "SetTargetStart", wxStyledTextCtrl_SetTargetStart, 1, 1 },
    { LuaMethod,      "GetTargetStart", wxStyledTextCtrl_GetTargetStart, 0, 0 },
    { LuaGetProp,     "TargetStart", wxStyledTextCtrl_GetTargetStart, 0, 0 },
    { LuaSetProp,     "TargetStart", wxStyledTextCtrl_SetTargetStart, 1, 1 },
    { LuaMethod,      "SetTargetEnd", wxStyledTextCtrl_SetTargetEnd, 1, 1 },
    { LuaMethod,      "GetTargetEnd", wxStyledTextCtrl_GetTargetEnd, 0, 0 },
    { LuaGetProp,     "TargetEnd", wxStyledTextCtrl_GetTargetEnd, 0, 0 },
    { LuaSetProp,     "TargetEnd", wxStyledTextCtrl_SetTargetEnd, 1, 1 },
    { LuaMethod,      "ReplaceTarget", wxStyledTextCtrl_ReplaceTarget, 1, 1 },
    { LuaMethod,      "ReplaceTargetRE", wxStyledTextCtrl_ReplaceTargetRE, 1, 1 },
    { LuaMethod,      "SearchInTarget", wxStyledTextCtrl_SearchInTarget, 1, 1 },
    { LuaMethod,      "SetSearchFlags", wxStyledTextCtrl_SetSearchFlags, 1, 1 },
    { LuaMethod,      "GetSearchFlags", wxStyledTextCtrl_GetSearchFlags, 0, 0 },
    { LuaGetProp,     "SearchFlags", wxStyledTextCtrl_GetSearchFlags, 0, 0 },
    { LuaSetProp,     "SearchFlags", wxStyledTextCtrl_SetSearchFlags, 1, 1 },
    { LuaMethod,      "CallTipShow", wxStyledTextCtrl_CallTipShow, 2, 2 },
    { LuaMethod,      "CallTipCancel", wxStyledTextCtrl_CallTipCancel, 0, 0 },
    { LuaMethod,      "CallTipActive", wxStyledTextCtrl_CallTipActive, 0, 0 },
    { LuaMethod,      "CallTipPosAtStart", wxStyledTextCtrl_CallTipPosAtStart, 0, 0 },
    { LuaMethod,      "CallTipSetHighlight", wxStyledTextCtrl_CallTipSetHighlight, 2, 2 },
    { LuaMethod,      "CallTipSetBackground", wxStyledTextCtrl_CallTipSetBackground, 1, 1 },
    { LuaMethod,      "VisibleFromDocLine", wxStyledTextCtrl_VisibleFromDocLine, 1, 1 },
    { LuaMethod,      "DocLineFromVisible", wxStyledTextCtrl_DocLineFromVisible, 1, 1 },
    { LuaMethod,      "SetFoldLevel", wxStyledTextCtrl_SetFoldLevel, 2, 2 },
    { LuaMethod,      "GetFoldLevel", wxStyledTextCtrl_GetFoldLevel, 1, 1 },
    { LuaMethod,      "GetLastChild", wxStyledTextCtrl_GetLastChild, 2, 2 },
    { LuaMethod,      "GetFoldParent", wxStyledTextCtrl_GetFoldParent, 1, 1 },
    { LuaMethod,      "ShowLines", wxStyledTextCtrl_ShowLines, 2, 2 },
    { LuaMethod,      "HideLines", wxStyledTextCtrl_HideLines, 2, 2 },
    { LuaMethod,      "GetLineVisible", wxStyledTextCtrl_GetLineVisible, 1, 1 },
    { LuaMethod,      "SetFoldExpanded", wxStyledTextCtrl_SetFoldExpanded, 2, 2 },
    { LuaMethod,      "GetFoldExpanded", wxStyledTextCtrl_GetFoldExpanded, 1, 1 },
    { LuaMethod,      "ToggleFold", wxStyledTextCtrl_ToggleFold, 1, 1 },
    { LuaMethod,      "EnsureVisible", wxStyledTextCtrl_EnsureVisible, 1, 1 },
    { LuaMethod,      "SetFoldFlags", wxStyledTextCtrl_SetFoldFlags, 1, 1 },
    { LuaMethod,      "EnsureVisibleEnforcePolicy", wxStyledTextCtrl_EnsureVisibleEnforcePolicy, 1, 1 },
    { LuaMethod,      "SetTabIndents", wxStyledTextCtrl_SetTabIndents, 1, 1 },
    { LuaMethod,      "GetTabIndents", wxStyledTextCtrl_GetTabIndents, 0, 0 },
    { LuaGetProp,     "TabIndents", wxStyledTextCtrl_GetTabIndents, 0, 0 },
    { LuaSetProp,     "TabIndents", wxStyledTextCtrl_SetTabIndents, 1, 1 },
    { LuaMethod,      "SetBackSpaceUnIndents", wxStyledTextCtrl_SetBackSpaceUnIndents, 1, 1 },
    { LuaMethod,      "GetBackSpaceUnIndents", wxStyledTextCtrl_GetBackSpaceUnIndents, 0, 0 },
    { LuaGetProp,     "BackSpaceUnIndents", wxStyledTextCtrl_GetBackSpaceUnIndents, 0, 0 },
    { LuaSetProp,     "BackSpaceUnIndents", wxStyledTextCtrl_SetBackSpaceUnIndents, 1, 1 },
    { LuaMethod,      "SetMouseDwellTime", wxStyledTextCtrl_SetMouseDwellTime, 1, 1 },
    { LuaMethod,      "GetMouseDwellTime", wxStyledTextCtrl_GetMouseDwellTime, 0, 0 },
    { LuaGetProp,     "MouseDwellTime", wxStyledTextCtrl_GetMouseDwellTime, 0, 0 },
    { LuaSetProp,     "MouseDwellTime", wxStyledTextCtrl_SetMouseDwellTime, 1, 1 },
    { LuaMethod,      "WordStartPosition", wxStyledTextCtrl_WordStartPosition, 2, 2 },
    { LuaMethod,      "WordEndPosition", wxStyledTextCtrl_WordEndPosition, 2, 2 },
    { LuaMethod,      "SetWrapMode", wxStyledTextCtrl_SetWrapMode, 1, 1 },
    { LuaMethod,      "GetWrapMode", wxStyledTextCtrl_GetWrapMode, 0, 0 },
    { LuaGetProp,     "WrapMode", wxStyledTextCtrl_GetWrapMode, 0, 0 },
    { LuaSetProp,     "WrapMode", wxStyledTextCtrl_SetWrapMode, 1, 1 },
    { LuaMethod,      "SetLayoutCache", wxStyledTextCtrl_SetLayoutCache, 1, 1 },
    { LuaMethod,      "GetLayoutCache", wxStyledTextCtrl_GetLayoutCache, 0, 0 },
    { LuaGetProp,     "LayoutCache", wxStyledTextCtrl_GetLayoutCache, 0, 0 },
    { LuaSetProp,     "LayoutCache", wxStyledTextCtrl_SetLayoutCache, 1, 1 },
    { LuaMethod,      "SetScrollWidth", wxStyledTextCtrl_SetScrollWidth, 1, 1 },
    { LuaMethod,      "GetScrollWidth", wxStyledTextCtrl_GetScrollWidth, 0, 0 },
    { LuaGetProp,     "ScrollWidth", wxStyledTextCtrl_GetScrollWidth, 0, 0 },
    { LuaSetProp,     "ScrollWidth", wxStyledTextCtrl_SetScrollWidth, 1, 1 },
    { LuaMethod,      "TextWidth", wxStyledTextCtrl_TextWidth, 2, 2 },
    { LuaMethod,      "SetEndAtLastLine", wxStyledTextCtrl_SetEndAtLastLine, 1, 1 },
    { LuaMethod,      "GetEndAtLastLine", wxStyledTextCtrl_GetEndAtLastLine, 0, 0 },
    { LuaGetProp,     "EndAtLastLine", wxStyledTextCtrl_GetEndAtLastLine, 0, 0 },
    { LuaSetProp,     "EndAtLastLine", wxStyledTextCtrl_SetEndAtLastLine, 1, 1 },
    { LuaMethod,      "TextHeight", wxStyledTextCtrl_TextHeight, 1, 1 },
    { LuaMethod,      "HomeDisplay", wxStyledTextCtrl_HomeDisplay, 0, 0 },
    { LuaMethod,      "HomeDisplayExtend", wxStyledTextCtrl_HomeDisplayExtend, 0, 0 },
    { LuaMethod,      "LineEndDisplay", wxStyledTextCtrl_LineEndDisplay, 0, 0 },
    { LuaMethod,      "LineEndDisplayExtend", wxStyledTextCtrl_LineEndDisplayExtend, 0, 0 },
    { LuaMethod,      "MoveCaretInsideView", wxStyledTextCtrl_MoveCaretInsideView, 0, 0 },
    { LuaMethod,      "LineLength", wxStyledTextCtrl_LineLength, 1, 1 },
    { LuaMethod,      "BraceHighlight", wxStyledTextCtrl_BraceHighlight, 2, 2 },
    { LuaMethod,      "BraceBadLight", wxStyledTextCtrl_BraceBadLight, 1, 1 },
    { LuaMethod,      "BraceMatch", wxStyledTextCtrl_BraceMatch, 1, 1 },
    { LuaMethod,      "GetViewEOL", wxStyledTextCtrl_GetViewEOL, 0, 0 },
    { LuaMethod,      "SetViewEOL", wxStyledTextCtrl_SetViewEOL, 1, 1 },
    { LuaGetProp,     "ViewEOL", wxStyledTextCtrl_GetViewEOL, 0, 0 },
    { LuaSetProp,     "ViewEOL", wxStyledTextCtrl_SetViewEOL, 1, 1 },
    { LuaMethod,      "GetDocPointer", wxStyledTextCtrl_GetDocPointer, 0, 0 },
    { LuaMethod,      "SetDocPointer", wxStyledTextCtrl_SetDocPointer, 1, 1 },
    { LuaGetProp,     "DocPointer", wxStyledTextCtrl_GetDocPointer, 0, 0 },
    { LuaSetProp,     "DocPointer", wxStyledTextCtrl_SetDocPointer, 1, 1 },
    { LuaMethod,      "SetModEventMask", wxStyledTextCtrl_SetModEventMask, 1, 1 },
    { LuaMethod,      "GetEdgeColumn", wxStyledTextCtrl_GetEdgeColumn, 0, 0 },
    { LuaMethod,      "SetEdgeColumn", wxStyledTextCtrl_SetEdgeColumn, 1, 1 },
    { LuaGetProp,     "EdgeColumn", wxStyledTextCtrl_GetEdgeColumn, 0, 0 },
    { LuaSetProp,     "EdgeColumn", wxStyledTextCtrl_SetEdgeColumn, 1, 1 },
    { LuaMethod,      "GetEdgeMode", wxStyledTextCtrl_GetEdgeMode, 0, 0 },
    { LuaMethod,      "SetEdgeMode", wxStyledTextCtrl_SetEdgeMode, 1, 1 },
    { LuaGetProp,     "EdgeMode", wxStyledTextCtrl_GetEdgeMode, 0, 0 },
    { LuaSetProp,     "EdgeMode", wxStyledTextCtrl_SetEdgeMode, 1, 1 },
    { LuaMethod,      "GetEdgeColour", wxStyledTextCtrl_GetEdgeColour, 0, 0 },
    { LuaMethod,      "SetEdgeColour", wxStyledTextCtrl_SetEdgeColour, 1, 1 },
    { LuaGetProp,     "EdgeColour", wxStyledTextCtrl_GetEdgeColour, 0, 0 },
    { LuaSetProp,     "EdgeColour", wxStyledTextCtrl_SetEdgeColour, 1, 1 },
    { LuaMethod,      "SearchAnchor", wxStyledTextCtrl_SearchAnchor, 0, 0 },
    { LuaMethod,      "SearchNext", wxStyledTextCtrl_SearchNext, 2, 2 },
    { LuaMethod,      "SearchPrev", wxStyledTextCtrl_SearchPrev, 2, 2 },
    { LuaMethod,      "LinesOnScreen", wxStyledTextCtrl_LinesOnScreen, 0, 0 },
    { LuaMethod,      "UsePopUp", wxStyledTextCtrl_UsePopUp, 1, 1 },
    { LuaMethod,      "SelectionIsRectangle", wxStyledTextCtrl_SelectionIsRectangle, 0, 0 },
    { LuaMethod,      "SetZoom", wxStyledTextCtrl_SetZoom, 1, 1 },
    { LuaMethod,      "GetZoom", wxStyledTextCtrl_GetZoom, 0, 0 },
    { LuaGetProp,     "Zoom", wxStyledTextCtrl_GetZoom, 0, 0 },
    { LuaSetProp,     "Zoom", wxStyledTextCtrl_SetZoom, 1, 1 },
    { LuaMethod,      "CreateDocument", wxStyledTextCtrl_CreateDocument, 0, 0 },
    { LuaMethod,      "AddRefDocument", wxStyledTextCtrl_AddRefDocument, 1, 1 },
    { LuaMethod,      "ReleaseDocument", wxStyledTextCtrl_ReleaseDocument, 1, 1 },
    { LuaMethod,      "GetModEventMask", wxStyledTextCtrl_GetModEventMask, 0, 0 },
    { LuaGetProp,     "ModEventMask", wxStyledTextCtrl_GetModEventMask, 0, 0 },
    { LuaSetProp,     "ModEventMask", wxStyledTextCtrl_SetModEventMask, 1, 1 },
    { LuaMethod,      "SetSTCFocus", wxStyledTextCtrl_SetSTCFocus, 1, 1 },
    { LuaMethod,      "GetSTCFocus", wxStyledTextCtrl_GetSTCFocus, 0, 0 },
    { LuaGetProp,     "STCFocus", wxStyledTextCtrl_GetSTCFocus, 0, 0 },
    { LuaSetProp,     "STCFocus", wxStyledTextCtrl_SetSTCFocus, 1, 1 },
    { LuaMethod,      "SetStatus", wxStyledTextCtrl_SetStatus, 1, 1 },
    { LuaMethod,      "GetStatus", wxStyledTextCtrl_GetStatus, 0, 0 },
    { LuaGetProp,     "Status", wxStyledTextCtrl_GetStatus, 0, 0 },
    { LuaSetProp,     "Status", wxStyledTextCtrl_SetStatus, 1, 1 },
    { LuaMethod,      "SetMouseDownCaptures", wxStyledTextCtrl_SetMouseDownCaptures, 1, 1 },
    { LuaMethod,      "GetMouseDownCaptures", wxStyledTextCtrl_GetMouseDownCaptures, 0, 0 },
    { LuaGetProp,     "MouseDownCaptures", wxStyledTextCtrl_GetMouseDownCaptures, 0, 0 },
    { LuaSetProp,     "MouseDownCaptures", wxStyledTextCtrl_SetMouseDownCaptures, 1, 1 },
    { LuaMethod,      "SetSTCCursor", wxStyledTextCtrl_SetSTCCursor, 1, 1 },
    { LuaMethod,      "GetSTCCursor", wxStyledTextCtrl_GetSTCCursor, 0, 0 },
    { LuaGetProp,     "STCCursor", wxStyledTextCtrl_GetSTCCursor, 0, 0 },
    { LuaSetProp,     "STCCursor", wxStyledTextCtrl_SetSTCCursor, 1, 1 },
    { LuaMethod,      "SetControlCharSymbol", wxStyledTextCtrl_SetControlCharSymbol, 1, 1 },
    { LuaMethod,      "GetControlCharSymbol", wxStyledTextCtrl_GetControlCharSymbol, 0, 0 },
    { LuaGetProp,     "ControlCharSymbol", wxStyledTextCtrl_GetControlCharSymbol, 0, 0 },
    { LuaSetProp,     "ControlCharSymbol", wxStyledTextCtrl_SetControlCharSymbol, 1, 1 },
    { LuaMethod,      "WordPartLeft", wxStyledTextCtrl_WordPartLeft, 0, 0 },
    { LuaMethod,      "WordPartLeftExtend", wxStyledTextCtrl_WordPartLeftExtend, 0, 0 },
    { LuaMethod,      "WordPartRight", wxStyledTextCtrl_WordPartRight, 0, 0 },
    { LuaMethod,      "WordPartRightExtend", wxStyledTextCtrl_WordPartRightExtend, 0, 0 },
    { LuaMethod,      "SetVisiblePolicy", wxStyledTextCtrl_SetVisiblePolicy, 2, 2 },
    { LuaMethod,      "DelLineLeft", wxStyledTextCtrl_DelLineLeft, 0, 0 },
    { LuaMethod,      "DelLineRight", wxStyledTextCtrl_DelLineRight, 0, 0 },
    { LuaMethod,      "SetXOffset", wxStyledTextCtrl_SetXOffset, 1, 1 },
    { LuaMethod,      "GetXOffset", wxStyledTextCtrl_GetXOffset, 0, 0 },
    { LuaGetProp,     "XOffset", wxStyledTextCtrl_GetXOffset, 0, 0 },
    { LuaSetProp,     "XOffset", wxStyledTextCtrl_SetXOffset, 1, 1 },
    { LuaMethod,      "SetXCaretPolicy", wxStyledTextCtrl_SetXCaretPolicy, 2, 2 },
    { LuaMethod,      "SetYCaretPolicy", wxStyledTextCtrl_SetYCaretPolicy, 2, 2 },
    { LuaMethod,      "StartRecord", wxStyledTextCtrl_StartRecord, 0, 0 },
    { LuaMethod,      "StopRecord", wxStyledTextCtrl_StopRecord, 0, 0 },
    { LuaMethod,      "SetLexer", wxStyledTextCtrl_SetLexer, 1, 1 },
    { LuaMethod,      "GetLexer", wxStyledTextCtrl_GetLexer, 0, 0 },
    { LuaGetProp,     "Lexer", wxStyledTextCtrl_GetLexer, 0, 0 },
    { LuaSetProp,     "Lexer", wxStyledTextCtrl_SetLexer, 1, 1 },
    { LuaMethod,      "Colourise", wxStyledTextCtrl_Colourise, 2, 2 },
    { LuaMethod,      "SetProperty", wxStyledTextCtrl_SetProperty, 2, 2 },
    { LuaMethod,      "SetKeyWords", wxStyledTextCtrl_SetKeyWords, 2, 2 },
    { LuaMethod,      "SetLexerLanguage", wxStyledTextCtrl_SetLexerLanguage, 1, 1 },
    { LuaMethod,      "GetCurrentLine", wxStyledTextCtrl_GetCurrentLine, 0, 0 },
    { LuaGetProp,     "CurrentLine", wxStyledTextCtrl_GetCurrentLine, 0, 0 },
    { LuaMethod,      "StyleSetSpec", wxStyledTextCtrl_StyleSetSpec, 2, 2 },
    { LuaMethod,      "StyleSetFont", wxStyledTextCtrl_StyleSetFont, 2, 2 },
    { LuaMethod,      "StyleSetFontAttr", wxStyledTextCtrl_StyleSetFontAttr, 6, 6 },
    { LuaMethod,      "CmdKeyExecute", wxStyledTextCtrl_CmdKeyExecute, 1, 1 },
    { LuaMethod,      "SetMargins", wxStyledTextCtrl_SetMargins, 2, 2 },
    { LuaMethod,      "GetSelection", wxStyledTextCtrl_GetSelection, 2, 2 },
    { LuaMethod,      "PointFromPosition", wxStyledTextCtrl_PointFromPosition, 1, 1 },
    { LuaMethod,      "ScrollToLine", wxStyledTextCtrl_ScrollToLine, 1, 1 },
    { LuaMethod,      "ScrollToColumn", wxStyledTextCtrl_ScrollToColumn, 1, 1 },
    { LuaMethod,      "SendMsg", wxStyledTextCtrl_SendMsg, 1, 3 },
    { LuaMethod,      "SetVScrollBar", wxStyledTextCtrl_SetVScrollBar, 1, 1 },
    { LuaMethod,      "SetHScrollBar", wxStyledTextCtrl_SetHScrollBar, 1, 1 },
    { LuaMethod,      "GetLastKeydownProcessed", wxStyledTextCtrl_GetLastKeydownProcessed, 0, 0 },
    { LuaMethod,      "SetLastKeydownProcessed", wxStyledTextCtrl_SetLastKeydownProcessed, 1, 1 },
    { LuaGetProp,     "LastKeydownProcessed", wxStyledTextCtrl_GetLastKeydownProcessed, 0, 0 },
    { LuaSetProp,     "LastKeydownProcessed", wxStyledTextCtrl_SetLastKeydownProcessed, 1, 1 },
};

static WXLUAMETHOD wxStyledTextEvent_methods[] = {
    { LuaDelete,      "wxStyledTextEvent", wxStyledTextEvent_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxStyledTextEvent_Delete, 0, 0 },
    { LuaConstructor, "wxStyledTextEvent", wxStyledTextEvent_constructor, 0, 2 },
    { LuaMethod,      "SetPosition", wxStyledTextEvent_SetPosition, 1, 1 },
    { LuaMethod,      "SetKey", wxStyledTextEvent_SetKey, 1, 1 },
    { LuaMethod,      "SetModifiers", wxStyledTextEvent_SetModifiers, 1, 1 },
    { LuaMethod,      "SetModificationType", wxStyledTextEvent_SetModificationType, 1, 1 },
    { LuaMethod,      "SetText", wxStyledTextEvent_SetText, 1, 1 },
    { LuaMethod,      "SetLength", wxStyledTextEvent_SetLength, 1, 1 },
    { LuaMethod,      "SetLinesAdded", wxStyledTextEvent_SetLinesAdded, 1, 1 },
    { LuaMethod,      "SetLine", wxStyledTextEvent_SetLine, 1, 1 },
    { LuaMethod,      "SetFoldLevelNow", wxStyledTextEvent_SetFoldLevelNow, 1, 1 },
    { LuaMethod,      "SetFoldLevelPrev", wxStyledTextEvent_SetFoldLevelPrev, 1, 1 },
    { LuaMethod,      "SetMargin", wxStyledTextEvent_SetMargin, 1, 1 },
    { LuaMethod,      "SetMessage", wxStyledTextEvent_SetMessage, 1, 1 },
    { LuaMethod,      "SetWParam", wxStyledTextEvent_SetWParam, 1, 1 },
    { LuaMethod,      "SetLParam", wxStyledTextEvent_SetLParam, 1, 1 },
    { LuaMethod,      "SetListType", wxStyledTextEvent_SetListType, 1, 1 },
    { LuaMethod,      "SetX", wxStyledTextEvent_SetX, 1, 1 },
    { LuaMethod,      "SetY", wxStyledTextEvent_SetY, 1, 1 },
    { LuaMethod,      "SetDragText", wxStyledTextEvent_SetDragText, 1, 1 },
    { LuaMethod,      "SetDragAllowMove", wxStyledTextEvent_SetDragAllowMove, 1, 1 },
    { LuaMethod,      "SetDragResult", wxStyledTextEvent_SetDragResult, 1, 1 },
    { LuaMethod,      "GetPosition", wxStyledTextEvent_GetPosition, 0, 0 },
    { LuaGetProp,     "Position", wxStyledTextEvent_GetPosition, 0, 0 },
    { LuaSetProp,     "Position", wxStyledTextEvent_SetPosition, 1, 1 },
    { LuaMethod,      "GetKey", wxStyledTextEvent_GetKey, 0, 0 },
    { LuaGetProp,     "Key", wxStyledTextEvent_GetKey, 0, 0 },
    { LuaSetProp,     "Key", wxStyledTextEvent_SetKey, 1, 1 },
    { LuaMethod,      "GetModifiers", wxStyledTextEvent_GetModifiers, 0, 0 },
    { LuaGetProp,     "Modifiers", wxStyledTextEvent_GetModifiers, 0, 0 },
    { LuaSetProp,     "Modifiers", wxStyledTextEvent_SetModifiers, 1, 1 },
    { LuaMethod,      "GetModificationType", wxStyledTextEvent_GetModificationType, 0, 0 },
    { LuaGetProp,     "ModificationType", wxStyledTextEvent_GetModificationType, 0, 0 },
    { LuaSetProp,     "ModificationType", wxStyledTextEvent_SetModificationType, 1, 1 },
    { LuaMethod,      "GetText", wxStyledTextEvent_GetText, 0, 0 },
    { LuaGetProp,     "Text", wxStyledTextEvent_GetText, 0, 0 },
    { LuaSetProp,     "Text", wxStyledTextEvent_SetText, 1, 1 },
    { LuaMethod,      "GetLength", wxStyledTextEvent_GetLength, 0, 0 },
    { LuaGetProp,     "Length", wxStyledTextEvent_GetLength, 0, 0 },
    { LuaSetProp,     "Length", wxStyledTextEvent_SetLength, 1, 1 },
    { LuaMethod,      "GetLinesAdded", wxStyledTextEvent_GetLinesAdded, 0, 0 },
    { LuaGetProp,     "LinesAdded", wxStyledTextEvent_GetLinesAdded, 0, 0 },
    { LuaSetProp,     "LinesAdded", wxStyledTextEvent_SetLinesAdded, 1, 1 },
    { LuaMethod,      "GetLine", wxStyledTextEvent_GetLine, 0, 0 },
    { LuaGetProp,     "Line", wxStyledTextEvent_GetLine, 0, 0 },
    { LuaSetProp,     "Line", wxStyledTextEvent_SetLine, 1, 1 },
    { LuaMethod,      "GetFoldLevelNow", wxStyledTextEvent_GetFoldLevelNow, 0, 0 },
    { LuaGetProp,     "FoldLevelNow", wxStyledTextEvent_GetFoldLevelNow, 0, 0 },
    { LuaSetProp,     "FoldLevelNow", wxStyledTextEvent_SetFoldLevelNow, 1, 1 },
    { LuaMethod,      "GetFoldLevelPrev", wxStyledTextEvent_GetFoldLevelPrev, 0, 0 },
    { LuaGetProp,     "FoldLevelPrev", wxStyledTextEvent_GetFoldLevelPrev, 0, 0 },
    { LuaSetProp,     "FoldLevelPrev", wxStyledTextEvent_SetFoldLevelPrev, 1, 1 },
    { LuaMethod,      "GetMargin", wxStyledTextEvent_GetMargin, 0, 0 },
    { LuaGetProp,     "Margin", wxStyledTextEvent_GetMargin, 0, 0 },
    { LuaSetProp,     "Margin", wxStyledTextEvent_SetMargin, 1, 1 },
    { LuaMethod,      "GetMessage", wxStyledTextEvent_GetMessage, 0, 0 },
    { LuaGetProp,     "Message", wxStyledTextEvent_GetMessage, 0, 0 },
    { LuaSetProp,     "Message", wxStyledTextEvent_SetMessage, 1, 1 },
    { LuaMethod,      "GetWParam", wxStyledTextEvent_GetWParam, 0, 0 },
    { LuaGetProp,     "WParam", wxStyledTextEvent_GetWParam, 0, 0 },
    { LuaSetProp,     "WParam", wxStyledTextEvent_SetWParam, 1, 1 },
    { LuaMethod,      "GetLParam", wxStyledTextEvent_GetLParam, 0, 0 },
    { LuaGetProp,     "LParam", wxStyledTextEvent_GetLParam, 0, 0 },
    { LuaSetProp,     "LParam", wxStyledTextEvent_SetLParam, 1, 1 },
    { LuaMethod,      "GetListType", wxStyledTextEvent_GetListType, 0, 0 },
    { LuaGetProp,     "ListType", wxStyledTextEvent_GetListType, 0, 0 },
    { LuaSetProp,     "ListType", wxStyledTextEvent_SetListType, 1, 1 },
    { LuaMethod,      "GetX", wxStyledTextEvent_GetX, 0, 0 },
    { LuaGetProp,     "X", wxStyledTextEvent_GetX, 0, 0 },
    { LuaSetProp,     "X", wxStyledTextEvent_SetX, 1, 1 },
    { LuaMethod,      "GetY", wxStyledTextEvent_GetY, 0, 0 },
    { LuaGetProp,     "Y", wxStyledTextEvent_GetY, 0, 0 },
    { LuaSetProp,     "Y", wxStyledTextEvent_SetY, 1, 1 },
    { LuaMethod,      "GetDragText", wxStyledTextEvent_GetDragText, 0, 0 },
    { LuaGetProp,     "DragText", wxStyledTextEvent_GetDragText, 0, 0 },
    { LuaSetProp,     "DragText", wxStyledTextEvent_SetDragText, 1, 1 },
    { LuaMethod,      "GetDragAllowMove", wxStyledTextEvent_GetDragAllowMove, 0, 0 },
    { LuaGetProp,     "DragAllowMove", wxStyledTextEvent_GetDragAllowMove, 0, 0 },
    { LuaSetProp,     "DragAllowMove", wxStyledTextEvent_SetDragAllowMove, 1, 1 },
    { LuaMethod,      "GetDragResult", wxStyledTextEvent_GetDragResult, 0, 0 },
    { LuaGetProp,     "DragResult", wxStyledTextEvent_GetDragResult, 0, 0 },
    { LuaSetProp,     "DragResult", wxStyledTextEvent_SetDragResult, 1, 1 },
    { LuaMethod,      "GetShift", wxStyledTextEvent_GetShift, 0, 0 },
    { LuaGetProp,     "Shift", wxStyledTextEvent_GetShift, 0, 0 },
    { LuaMethod,      "GetControl", wxStyledTextEvent_GetControl, 0, 0 },
    { LuaGetProp,     "Control", wxStyledTextEvent_GetControl, 0, 0 },
    { LuaMethod,      "GetAlt", wxStyledTextEvent_GetAlt, 0, 0 },
    { LuaGetProp,     "Alt", wxStyledTextEvent_GetAlt, 0, 0 },
};

static WXLUAMETHOD wxXmlNode_methods[] = {
    { LuaDelete,      "wxXmlNode", wxXmlNode_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxXmlNode_Delete, 0, 0 },
    { LuaConstructor, "wxXmlNode", wxXmlNode_constructor, 2, 3 },
    { LuaConstructor, "wxXmlDefaultNode", wxXmlDefaultNode_constructor, 0, 0 },
    { LuaConstructor, "wxXmlNodeEntry", wxXmlNodeEntry_constructor, 6, 6 },
    { LuaMethod,      "AddChild", wxXmlNode_AddChild, 1, 1 },
    { LuaMethod,      "InsertChild", wxXmlNode_InsertChild, 2, 2 },
    { LuaMethod,      "RemoveChild", wxXmlNode_RemoveChild, 1, 1 },
    { LuaMethod,      "AddProperty", wxXmlNode_AddProperty, 2, 2 },
    { LuaMethod,      "DeleteProperty", wxXmlNode_DeleteProperty, 1, 1 },
    { LuaMethod,      "GetType", wxXmlNode_GetType, 0, 0 },
    { LuaMethod,      "GetName", wxXmlNode_GetName, 0, 0 },
    { LuaMethod,      "GetContent", wxXmlNode_GetContent, 0, 0 },
    { LuaMethod,      "GetParent", wxXmlNode_GetParent, 0, 0 },
    { LuaMethod,      "GetNext", wxXmlNode_GetNext, 0, 0 },
    { LuaMethod,      "GetChildren", wxXmlNode_GetChildren, 0, 0 },
    { LuaMethod,      "GetProperties", wxXmlNode_GetProperties, 0, 0 },
    { LuaMethod,      "GetPropValPtr", wxXmlNode_GetPropValPtr, 2, 2 },
    { LuaMethod,      "GetPropVal", wxXmlNode_GetPropVal, 2, 2 },
    { LuaMethod,      "HasProp", wxXmlNode_HasProp, 1, 1 },
    { LuaMethod,      "SetType", wxXmlNode_SetType, 1, 1 },
    { LuaGetProp,     "Type", wxXmlNode_GetType, 0, 0 },
    { LuaSetProp,     "Type", wxXmlNode_SetType, 1, 1 },
    { LuaMethod,      "SetName", wxXmlNode_SetName, 1, 1 },
    { LuaGetProp,     "Name", wxXmlNode_GetName, 0, 0 },
    { LuaSetProp,     "Name", wxXmlNode_SetName, 1, 1 },
    { LuaMethod,      "SetContent", wxXmlNode_SetContent, 1, 1 },
    { LuaGetProp,     "Content", wxXmlNode_GetContent, 0, 0 },
    { LuaSetProp,     "Content", wxXmlNode_SetContent, 1, 1 },
    { LuaMethod,      "SetParent", wxXmlNode_SetParent, 1, 1 },
    { LuaGetProp,     "Parent", wxXmlNode_GetParent, 0, 0 },
    { LuaSetProp,     "Parent", wxXmlNode_SetParent, 1, 1 },
    { LuaMethod,      "SetNext", wxXmlNode_SetNext, 1, 1 },
    { LuaGetProp,     "Next", wxXmlNode_GetNext, 0, 0 },
    { LuaSetProp,     "Next", wxXmlNode_SetNext, 1, 1 },
    { LuaMethod,      "SetChildren", wxXmlNode_SetChildren, 1, 1 },
    { LuaGetProp,     "Children", wxXmlNode_GetChildren, 0, 0 },
    { LuaSetProp,     "Children", wxXmlNode_SetChildren, 1, 1 },
    { LuaMethod,      "SetProperties", wxXmlNode_SetProperties, 1, 1 },
    { LuaGetProp,     "Properties", wxXmlNode_GetProperties, 0, 0 },
    { LuaSetProp,     "Properties", wxXmlNode_SetProperties, 1, 1 },
    { LuaMethod,      "AddPropertyEntry", wxXmlNode_AddPropertyEntry, 1, 1 },
};

static WXLUAMETHOD wxXmlProperty_methods[] = {
    { LuaDelete,      "wxXmlProperty", wxXmlProperty_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxXmlProperty_Delete, 0, 0 },
    { LuaConstructor, "wxXmlProperty", wxXmlProperty_constructor, 3, 3 },
    { LuaConstructor, "wxXmlPropertyDefault", wxXmlPropertyDefault_constructor, 0, 0 },
    { LuaMethod,      "GetName", wxXmlProperty_GetName, 0, 0 },
    { LuaMethod,      "GetValue", wxXmlProperty_GetValue, 0, 0 },
    { LuaMethod,      "GetNext", wxXmlProperty_GetNext, 0, 0 },
    { LuaMethod,      "SetName", wxXmlProperty_SetName, 1, 1 },
    { LuaMethod,      "SetValue", wxXmlProperty_SetValue, 1, 1 },
    { LuaMethod,      "SetNext", wxXmlProperty_SetNext, 1, 1 },
    { LuaGetProp,     "Name", wxXmlProperty_GetName, 0, 0 },
    { LuaSetProp,     "Name", wxXmlProperty_SetName, 1, 1 },
    { LuaGetProp,     "Value", wxXmlProperty_GetValue, 0, 0 },
    { LuaSetProp,     "Value", wxXmlProperty_SetValue, 1, 1 },
    { LuaGetProp,     "Next", wxXmlProperty_GetNext, 0, 0 },
    { LuaSetProp,     "Next", wxXmlProperty_SetNext, 1, 1 },
};

static WXLUAMETHOD wxXmlDocument_methods[] = {
    { LuaDelete,      "wxXmlDocument", wxXmlDocument_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxXmlDocument_Delete, 0, 0 },
    { LuaConstructor, "wxXmlDocumentDefault", wxXmlDocumentDefault_constructor, 0, 0 },
    { LuaConstructor, "wxXmlDocument", wxXmlDocument_constructor, 1, 2 },
    { LuaMethod,      "Load", wxXmlDocument_Load, 1, 2 },
    { LuaMethod,      "Save", wxXmlDocument_Save, 1, 1 },
    { LuaMethod,      "IsOk", wxXmlDocument_IsOk, 0, 0 },
    { LuaMethod,      "GetRoot", wxXmlDocument_GetRoot, 0, 0 },
    { LuaGetProp,     "Root", wxXmlDocument_GetRoot, 0, 0 },
    { LuaSetProp,     "Root", wxXmlDocument_SetRoot, 1, 1 },
    { LuaMethod,      "GetVersion", wxXmlDocument_GetVersion, 0, 0 },
    { LuaGetProp,     "Version", wxXmlDocument_GetVersion, 0, 0 },
    { LuaSetProp,     "Version", wxXmlDocument_SetVersion, 1, 1 },
    { LuaMethod,      "GetFileEncoding", wxXmlDocument_GetFileEncoding, 0, 0 },
    { LuaGetProp,     "FileEncoding", wxXmlDocument_GetFileEncoding, 0, 0 },
    { LuaSetProp,     "FileEncoding", wxXmlDocument_SetFileEncoding, 1, 1 },
    { LuaMethod,      "SetRoot", wxXmlDocument_SetRoot, 1, 1 },
    { LuaMethod,      "SetVersion", wxXmlDocument_SetVersion, 1, 1 },
    { LuaMethod,      "SetFileEncoding", wxXmlDocument_SetFileEncoding, 1, 1 },
};

static WXLUAMETHOD wxXmlResourceHandler_methods[] = {
    { LuaDelete,      "wxXmlResourceHandler", wxXmlResourceHandler_destructor, 0, 0 },
};

static WXLUAMETHOD wxXmlResource_methods[] = {
    { LuaDelete,      "wxXmlResource", wxXmlResource_destructor, 0, 0 },
    { LuaMethod,      "Delete", wxXmlResource_Delete, 0, 0 },
    { LuaConstructor, "wxXmlResource", wxXmlResource_constructor, 1, 2 },
    { LuaConstructor, "wxXmlResourceGetDefault", wxXmlResourceGetDefault_constructor, 0, 0 },
    { LuaConstructor, "wxXmlResourceDefault", wxXmlResourceDefault_constructor, 0, 1 },
    { LuaMethod,      "AddHandler", wxXmlResource_AddHandler, 1, 1 },
    { LuaMethod,      "AttachUnknownControl", wxXmlResource_AttachUnknownControl, 2, 3 },
    { LuaMethod,      "ClearHandlers", wxXmlResource_ClearHandlers, 0, 0 },
    { LuaMethod,      "CompareVersion", wxXmlResource_CompareVersion, 4, 4 },
    { LuaMethod,      "Get", wxXmlResource_Get, 0, 0 },
    { LuaMethod,      "GetVersion", wxXmlResource_GetVersion, 0, 0 },
    { LuaGetProp,     "Version", wxXmlResource_GetVersion, 0, 0 },
    { LuaMethod,      "GetXRCID", wxXmlResource_GetXRCID, 1, 1 },
    { LuaMethod,      "InitAllHandlers", wxXmlResource_InitAllHandlers, 0, 0 },
    { LuaMethod,      "Load", wxXmlResource_Load, 1, 1 },
    { LuaMethod,      "LoadBitmap", wxXmlResource_LoadBitmap, 1, 1 },
    { LuaMethod,      "LoadDialog", wxXmlResource_LoadDialog, 2, 2 },
    { LuaMethod,      "LoadDialogCreate", wxXmlResource_LoadDialogCreate, 3, 3 },
    { LuaMethod,      "CreateDialog", wxXmlResource_CreateDialog, 2, 2 },
    { LuaMethod,      "LoadFrame", wxXmlResource_LoadFrame, 3, 3 },
    { LuaMethod,      "CreateFrame", wxXmlResource_CreateFrame, 2, 2 },
    { LuaMethod,      "LoadIcon", wxXmlResource_LoadIcon, 1, 1 },
    { LuaMethod,      "LoadMenu", wxXmlResource_LoadMenu, 1, 1 },
    { LuaMethod,      "LoadMenuBarWindow", wxXmlResource_LoadMenuBarWindow, 2, 2 },
    { LuaMethod,      "LoadMenuBar", wxXmlResource_LoadMenuBar, 1, 1 },
    { LuaMethod,      "LoadPanel", wxXmlResource_LoadPanel, 2, 2 },
    { LuaMethod,      "LoadPanelCreate", wxXmlResource_LoadPanelCreate, 3, 3 },
    { LuaMethod,      "LoadToolBar", wxXmlResource_LoadToolBar, 2, 2 },
    { LuaMethod,      "Set", wxXmlResource_Set, 1, 1 },
    { LuaMethod,      "GetFlags", wxXmlResource_GetFlags, 0, 0 },
    { LuaMethod,      "SetFlags", wxXmlResource_SetFlags, 1, 1 },
    { LuaGetProp,     "Flags", wxXmlResource_GetFlags, 0, 0 },
};

WXLUACLASS *GetClassList(size_t &count)
{
    static WXLUACLASS classList[] =
    {
        { "wxLog", wxLog_methods, sizeof(wxLog_methods)/sizeof(wxLog_methods[0]), -1, NULL, &s_wxLog /*0*/ }, 
        { "wxProcess", wxProcess_methods, sizeof(wxProcess_methods)/sizeof(wxProcess_methods[0]), -1, NULL, &s_wxProcess /*1*/ }, 
        { "wxObject", wxObject_methods, sizeof(wxObject_methods)/sizeof(wxObject_methods[0]), -1, CLASSINFO(wxObject), &s_wxObject /*2*/ }, 
        { "wxObjectRefData", wxObjectRefData_methods, sizeof(wxObjectRefData_methods)/sizeof(wxObjectRefData_methods[0]), -1, NULL, &s_wxObjectRefData /*3*/ }, 
        { "wxClassInfo", wxClassInfo_methods, sizeof(wxClassInfo_methods)/sizeof(wxClassInfo_methods[0]),  2 /* wxObject */, NULL, &s_wxClassInfo /*4*/ }, 
        { "wxValidator", wxValidator_methods, sizeof(wxValidator_methods)/sizeof(wxValidator_methods[0]),  2 /* wxObject */, CLASSINFO(wxValidator), &s_wxValidator /*5*/ }, 
        { "wxTextValidator", wxTextValidator_methods, sizeof(wxTextValidator_methods)/sizeof(wxTextValidator_methods[0]),  5 /* wxValidator */, CLASSINFO(wxTextValidator), &s_wxTextValidator /*6*/ }, 
        { "wxGenericValidator", wxGenericValidator_methods, sizeof(wxGenericValidator_methods)/sizeof(wxGenericValidator_methods[0]),  5 /* wxValidator */, NULL, &s_wxGenericValidator /*7*/ }, 
        { "wxList", wxList_methods, sizeof(wxList_methods)/sizeof(wxList_methods[0]),  2 /* wxObject */, NULL, &s_wxList /*8*/ }, 
        { "wxNode", wxNode_methods, sizeof(wxNode_methods)/sizeof(wxNode_methods[0]), -1, NULL, &s_wxNode /*9*/ }, 
        { "wxArrayInt", wxArrayInt_methods, sizeof(wxArrayInt_methods)/sizeof(wxArrayInt_methods[0]), -1, NULL, &s_wxArrayInt /*10*/ }, 
        { "wxArrayString", wxArrayString_methods, sizeof(wxArrayString_methods)/sizeof(wxArrayString_methods[0]), -1, NULL, &s_wxArrayString /*11*/ }, 
        { "wxStringList", wxStringList_methods, sizeof(wxStringList_methods)/sizeof(wxStringList_methods[0]),  8 /* wxList */, NULL, &s_wxStringList /*12*/ }, 
        { "wxHashTable", wxHashTable_methods, sizeof(wxHashTable_methods)/sizeof(wxHashTable_methods[0]),  2 /* wxObject */, NULL, &s_wxHashTable /*13*/ }, 
        { "wxStreamBase", wxStreamBase_methods, sizeof(wxStreamBase_methods)/sizeof(wxStreamBase_methods[0]), -1, NULL, &s_wxStreamBase /*14*/ }, 
        { "wxInputStream", wxInputStream_methods, sizeof(wxInputStream_methods)/sizeof(wxInputStream_methods[0]),  14 /* wxStreamBase */, NULL, &s_wxInputStream /*15*/ }, 
        { "wxOutputStream", wxOutputStream_methods, sizeof(wxOutputStream_methods)/sizeof(wxOutputStream_methods[0]),  14 /* wxStreamBase */, NULL, &s_wxOutputStream /*16*/ }, 
        { "wxProtocol", wxProtocol_methods, sizeof(wxProtocol_methods)/sizeof(wxProtocol_methods[0]), -1, NULL, &s_wxProtocol /*17*/ }, 
        { "wxHTTP", wxHTTP_methods, sizeof(wxHTTP_methods)/sizeof(wxHTTP_methods[0]),  17 /* wxProtocol */, CLASSINFO(wxHTTP), &s_wxHTTP /*18*/ }, 
        { "wxFTP", wxFTP_methods, sizeof(wxFTP_methods)/sizeof(wxFTP_methods[0]),  17 /* wxProtocol */, CLASSINFO(wxFTP), &s_wxFTP /*19*/ }, 
        { "wxEvtHandler", wxEvtHandler_methods, sizeof(wxEvtHandler_methods)/sizeof(wxEvtHandler_methods[0]),  2 /* wxObject */, CLASSINFO(wxEvtHandler), &s_wxEvtHandler /*20*/ }, 
        { "wxEvent", wxEvent_methods, sizeof(wxEvent_methods)/sizeof(wxEvent_methods[0]),  2 /* wxObject */, CLASSINFO(wxEvent), &s_wxEvent /*21*/ }, 
        { "wxCommandEvent", wxCommandEvent_methods, sizeof(wxCommandEvent_methods)/sizeof(wxCommandEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxCommandEvent), &s_wxCommandEvent /*22*/ }, 
        { "wxNotifyEvent", wxNotifyEvent_methods, sizeof(wxNotifyEvent_methods)/sizeof(wxNotifyEvent_methods[0]),  22 /* wxCommandEvent */, CLASSINFO(wxNotifyEvent), &s_wxNotifyEvent /*23*/ }, 
        { "wxActivateEvent", wxActivateEvent_methods, sizeof(wxActivateEvent_methods)/sizeof(wxActivateEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxActivateEvent), &s_wxActivateEvent /*24*/ }, 
        { "wxCloseEvent", wxCloseEvent_methods, sizeof(wxCloseEvent_methods)/sizeof(wxCloseEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxCloseEvent), &s_wxCloseEvent /*25*/ }, 
        { "wxDialUpEvent", wxDialUpEvent_methods, sizeof(wxDialUpEvent_methods)/sizeof(wxDialUpEvent_methods[0]),  22 /* wxCommandEvent */, NULL, &s_wxDialUpEvent /*26*/ }, 
        { "wxEraseEvent", wxEraseEvent_methods, sizeof(wxEraseEvent_methods)/sizeof(wxEraseEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxEraseEvent), &s_wxEraseEvent /*27*/ }, 
        { "wxFocusEvent", wxFocusEvent_methods, sizeof(wxFocusEvent_methods)/sizeof(wxFocusEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxFocusEvent), &s_wxFocusEvent /*28*/ }, 
        { "wxKeyEvent", wxKeyEvent_methods, sizeof(wxKeyEvent_methods)/sizeof(wxKeyEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxKeyEvent), &s_wxKeyEvent /*29*/ }, 
        { "wxIdleEvent", wxIdleEvent_methods, sizeof(wxIdleEvent_methods)/sizeof(wxIdleEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxIdleEvent), &s_wxIdleEvent /*30*/ }, 
        { "wxInitDialogEvent", wxInitDialogEvent_methods, sizeof(wxInitDialogEvent_methods)/sizeof(wxInitDialogEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxInitDialogEvent), &s_wxInitDialogEvent /*31*/ }, 
        { "wxJoystickEvent", wxJoystickEvent_methods, sizeof(wxJoystickEvent_methods)/sizeof(wxJoystickEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxJoystickEvent), &s_wxJoystickEvent /*32*/ }, 
        { "wxMouseEvent", wxMouseEvent_methods, sizeof(wxMouseEvent_methods)/sizeof(wxMouseEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxMouseEvent), &s_wxMouseEvent /*33*/ }, 
        { "wxMoveEvent", wxMoveEvent_methods, sizeof(wxMoveEvent_methods)/sizeof(wxMoveEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxMoveEvent), &s_wxMoveEvent /*34*/ }, 
        { "wxPaintEvent", wxPaintEvent_methods, sizeof(wxPaintEvent_methods)/sizeof(wxPaintEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxPaintEvent), &s_wxPaintEvent /*35*/ }, 
        { "wxProcessEvent", wxProcessEvent_methods, sizeof(wxProcessEvent_methods)/sizeof(wxProcessEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxProcessEvent), &s_wxProcessEvent /*36*/ }, 
        { "wxScrollEvent", wxScrollEvent_methods, sizeof(wxScrollEvent_methods)/sizeof(wxScrollEvent_methods[0]),  22 /* wxCommandEvent */, CLASSINFO(wxScrollEvent), &s_wxScrollEvent /*37*/ }, 
        { "wxScrollWinEvent", wxScrollWinEvent_methods, sizeof(wxScrollWinEvent_methods)/sizeof(wxScrollWinEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxScrollWinEvent), &s_wxScrollWinEvent /*38*/ }, 
        { "wxSizeEvent", wxSizeEvent_methods, sizeof(wxSizeEvent_methods)/sizeof(wxSizeEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxSizeEvent), &s_wxSizeEvent /*39*/ }, 
        { "wxSysColourChangedEvent", wxSysColourChangedEvent_methods, sizeof(wxSysColourChangedEvent_methods)/sizeof(wxSysColourChangedEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxSysColourChangedEvent), &s_wxSysColourChangedEvent /*40*/ }, 
        { "wxTimerEvent", wxTimerEvent_methods, sizeof(wxTimerEvent_methods)/sizeof(wxTimerEvent_methods[0]),  2 /* wxObject */, CLASSINFO(wxTimerEvent), &s_wxTimerEvent /*41*/ }, 
        { "wxUpdateUIEvent", wxUpdateUIEvent_methods, sizeof(wxUpdateUIEvent_methods)/sizeof(wxUpdateUIEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxUpdateUIEvent), &s_wxUpdateUIEvent /*42*/ }, 
        { "wxHelpEvent", wxHelpEvent_methods, sizeof(wxHelpEvent_methods)/sizeof(wxHelpEvent_methods[0]),  22 /* wxCommandEvent */, CLASSINFO(wxHelpEvent), &s_wxHelpEvent /*43*/ }, 
        { "wxWindow", wxWindow_methods, sizeof(wxWindow_methods)/sizeof(wxWindow_methods[0]),  20 /* wxEvtHandler */, CLASSINFO(wxWindow), &s_wxWindow /*44*/ }, 
        { "wxWindowList", wxWindowList_methods, sizeof(wxWindowList_methods)/sizeof(wxWindowList_methods[0]), -1, NULL, &s_wxWindowList /*45*/ }, 
        { "wxPanel", wxPanel_methods, sizeof(wxPanel_methods)/sizeof(wxPanel_methods[0]),  44 /* wxWindow */, CLASSINFO(wxPanel), &s_wxPanel /*46*/ }, 
        { "wxControl", wxControl_methods, sizeof(wxControl_methods)/sizeof(wxControl_methods[0]),  44 /* wxWindow */, CLASSINFO(wxControl), &s_wxControl /*47*/ }, 
        { "wxNotebook", wxNotebook_methods, sizeof(wxNotebook_methods)/sizeof(wxNotebook_methods[0]),  47 /* wxControl */, CLASSINFO(wxNotebook), &s_wxNotebook /*48*/ }, 
        { "wxNotebookEvent", wxNotebookEvent_methods, sizeof(wxNotebookEvent_methods)/sizeof(wxNotebookEvent_methods[0]),  23 /* wxNotifyEvent */, CLASSINFO(wxNotebookEvent), &s_wxNotebookEvent /*49*/ }, 
        { "wxTabCtrl", wxTabCtrl_methods, sizeof(wxTabCtrl_methods)/sizeof(wxTabCtrl_methods[0]),  47 /* wxControl */, CLASSINFO(wxTabCtrl), &s_wxTabCtrl /*50*/ }, 
        { "wxTabEvent", wxTabEvent_methods, sizeof(wxTabEvent_methods)/sizeof(wxTabEvent_methods[0]),  22 /* wxCommandEvent */, CLASSINFO(wxTabEvent), &s_wxTabEvent /*51*/ }, 
        { "wxSashWindow", wxSashWindow_methods, sizeof(wxSashWindow_methods)/sizeof(wxSashWindow_methods[0]),  44 /* wxWindow */, CLASSINFO(wxSashWindow), &s_wxSashWindow /*52*/ }, 
        { "wxSashLayoutWindow", wxSashLayoutWindow_methods, sizeof(wxSashLayoutWindow_methods)/sizeof(wxSashLayoutWindow_methods[0]),  52 /* wxSashWindow */, CLASSINFO(wxSashLayoutWindow), &s_wxSashLayoutWindow /*53*/ }, 
        { "wxLayoutAlgorithm", wxLayoutAlgorithm_methods, sizeof(wxLayoutAlgorithm_methods)/sizeof(wxLayoutAlgorithm_methods[0]),  2 /* wxObject */, NULL, &s_wxLayoutAlgorithm /*54*/ }, 
        { "wxQueryLayoutInfoEvent", wxQueryLayoutInfoEvent_methods, sizeof(wxQueryLayoutInfoEvent_methods)/sizeof(wxQueryLayoutInfoEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxQueryLayoutInfoEvent), &s_wxQueryLayoutInfoEvent /*55*/ }, 
        { "wxCalculateLayoutEvent", wxCalculateLayoutEvent_methods, sizeof(wxCalculateLayoutEvent_methods)/sizeof(wxCalculateLayoutEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxCalculateLayoutEvent), &s_wxCalculateLayoutEvent /*56*/ }, 
        { "wxSashEvent", wxSashEvent_methods, sizeof(wxSashEvent_methods)/sizeof(wxSashEvent_methods[0]),  22 /* wxCommandEvent */, CLASSINFO(wxSashEvent), &s_wxSashEvent /*57*/ }, 
        { "wxScrolledWindow", wxScrolledWindow_methods, sizeof(wxScrolledWindow_methods)/sizeof(wxScrolledWindow_methods[0]),  46 /* wxPanel */, CLASSINFO(wxScrolledWindow), &s_wxScrolledWindow /*58*/ }, 
        { "wxSplitterWindow", wxSplitterWindow_methods, sizeof(wxSplitterWindow_methods)/sizeof(wxSplitterWindow_methods[0]),  44 /* wxWindow */, CLASSINFO(wxSplitterWindow), &s_wxSplitterWindow /*59*/ }, 
        { "wxSplitterEvent", wxSplitterEvent_methods, sizeof(wxSplitterEvent_methods)/sizeof(wxSplitterEvent_methods[0]),  22 /* wxCommandEvent */, CLASSINFO(wxSplitterEvent), &s_wxSplitterEvent /*60*/ }, 
        { "wxStaticBox", wxStaticBox_methods, sizeof(wxStaticBox_methods)/sizeof(wxStaticBox_methods[0]),  47 /* wxControl */, CLASSINFO(wxStaticBox), &s_wxStaticBox /*61*/ }, 
        { "wxStaticBitmap", wxStaticBitmap_methods, sizeof(wxStaticBitmap_methods)/sizeof(wxStaticBitmap_methods[0]),  47 /* wxControl */, CLASSINFO(wxStaticBitmap), &s_wxStaticBitmap /*62*/ }, 
        { "wxStaticText", wxStaticText_methods, sizeof(wxStaticText_methods)/sizeof(wxStaticText_methods[0]),  47 /* wxControl */, CLASSINFO(wxStaticText), &s_wxStaticText /*63*/ }, 
        { "wxStaticLine", wxStaticLine_methods, sizeof(wxStaticLine_methods)/sizeof(wxStaticLine_methods[0]),  47 /* wxControl */, CLASSINFO(wxStaticLine), &s_wxStaticLine /*64*/ }, 
        { "wxPoint", wxPoint_methods, sizeof(wxPoint_methods)/sizeof(wxPoint_methods[0]), -1, NULL, &s_wxPoint /*65*/ }, 
        { "wxSize", wxSize_methods, sizeof(wxSize_methods)/sizeof(wxSize_methods[0]), -1, NULL, &s_wxSize /*66*/ }, 
        { "wxRect", wxRect_methods, sizeof(wxRect_methods)/sizeof(wxRect_methods[0]), -1, NULL, &s_wxRect /*67*/ }, 
        { "wxGDIObject", wxGDIObject_methods, sizeof(wxGDIObject_methods)/sizeof(wxGDIObject_methods[0]),  2 /* wxObject */, CLASSINFO(wxGDIObject), &s_wxGDIObject /*68*/ }, 
        { "wxRegion", wxRegion_methods, sizeof(wxRegion_methods)/sizeof(wxRegion_methods[0]),  68 /* wxGDIObject */, CLASSINFO(wxRegion), &s_wxRegion /*69*/ }, 
        { "wxRegionIterator", wxRegionIterator_methods, sizeof(wxRegionIterator_methods)/sizeof(wxRegionIterator_methods[0]),  2 /* wxObject */, CLASSINFO(wxRegionIterator), &s_wxRegionIterator /*70*/ }, 
        { "wxFont", wxFont_methods, sizeof(wxFont_methods)/sizeof(wxFont_methods[0]),  68 /* wxGDIObject */, CLASSINFO(wxFont), &s_wxFont /*71*/ }, 
        { "wxFontEnumerator", wxFontEnumerator_methods, sizeof(wxFontEnumerator_methods)/sizeof(wxFontEnumerator_methods[0]), -1, NULL, &s_wxFontEnumerator /*72*/ }, 
        { "wxFontList", wxFontList_methods, sizeof(wxFontList_methods)/sizeof(wxFontList_methods[0]),  8 /* wxList */, NULL, &s_wxFontList /*73*/ }, 
        { "wxFontMapper", wxFontMapper_methods, sizeof(wxFontMapper_methods)/sizeof(wxFontMapper_methods[0]), -1, NULL, &s_wxFontMapper /*74*/ }, 
        { "wxColour", wxColour_methods, sizeof(wxColour_methods)/sizeof(wxColour_methods[0]),  2 /* wxObject */, CLASSINFO(wxColour), &s_wxColour /*75*/ }, 
        { "wxPen", wxPen_methods, sizeof(wxPen_methods)/sizeof(wxPen_methods[0]),  68 /* wxGDIObject */, CLASSINFO(wxPen), &s_wxPen /*76*/ }, 
        { "wxPenList", wxPenList_methods, sizeof(wxPenList_methods)/sizeof(wxPenList_methods[0]),  8 /* wxList */, NULL, &s_wxPenList /*77*/ }, 
        { "wxBrush", wxBrush_methods, sizeof(wxBrush_methods)/sizeof(wxBrush_methods[0]),  68 /* wxGDIObject */, CLASSINFO(wxBrush), &s_wxBrush /*78*/ }, 
        { "wxBrushList", wxBrushList_methods, sizeof(wxBrushList_methods)/sizeof(wxBrushList_methods[0]),  8 /* wxList */, NULL, &s_wxBrushList /*79*/ }, 
        { "wxPalette", wxPalette_methods, sizeof(wxPalette_methods)/sizeof(wxPalette_methods[0]),  68 /* wxGDIObject */, CLASSINFO(wxPalette), &s_wxPalette /*80*/ }, 
        { "wxIcon", wxIcon_methods, sizeof(wxIcon_methods)/sizeof(wxIcon_methods[0]),  68 /* wxGDIObject */, CLASSINFO(wxIcon), &s_wxIcon /*81*/ }, 
        { "wxBitmapHandler", wxBitmapHandler_methods, sizeof(wxBitmapHandler_methods)/sizeof(wxBitmapHandler_methods[0]), -1, NULL, &s_wxBitmapHandler /*82*/ }, 
        { "wxGDIImageHandler", wxGDIImageHandler_methods, sizeof(wxGDIImageHandler_methods)/sizeof(wxGDIImageHandler_methods[0]), -1, NULL, &s_wxGDIImageHandler /*83*/ }, 
        { "wxGDIImageHandlerList", wxGDIImageHandlerList_methods, sizeof(wxGDIImageHandlerList_methods)/sizeof(wxGDIImageHandlerList_methods[0]),  8 /* wxList */, NULL, &s_wxGDIImageHandlerList /*84*/ }, 
        { "wxBitmap", wxBitmap_methods, sizeof(wxBitmap_methods)/sizeof(wxBitmap_methods[0]),  68 /* wxGDIObject */, CLASSINFO(wxBitmap), &s_wxBitmap /*85*/ }, 
        { "wxCursor", wxCursor_methods, sizeof(wxCursor_methods)/sizeof(wxCursor_methods[0]),  85 /* wxBitmap */, CLASSINFO(wxCursor), &s_wxCursor /*86*/ }, 
        { "wxMask", wxMask_methods, sizeof(wxMask_methods)/sizeof(wxMask_methods[0]),  2 /* wxObject */, CLASSINFO(wxMask), &s_wxMask /*87*/ }, 
        { "wxImageList", wxImageList_methods, sizeof(wxImageList_methods)/sizeof(wxImageList_methods[0]),  2 /* wxObject */, CLASSINFO(wxImageList), &s_wxImageList /*88*/ }, 
        { "wxDC", wxDC_methods, sizeof(wxDC_methods)/sizeof(wxDC_methods[0]),  2 /* wxObject */, CLASSINFO(wxDC), &s_wxDC /*89*/ }, 
        { "wxMemoryDC", wxMemoryDC_methods, sizeof(wxMemoryDC_methods)/sizeof(wxMemoryDC_methods[0]),  89 /* wxDC */, CLASSINFO(wxMemoryDC), &s_wxMemoryDC /*90*/ }, 
        { "wxWindowDC", wxWindowDC_methods, sizeof(wxWindowDC_methods)/sizeof(wxWindowDC_methods[0]),  89 /* wxDC */, CLASSINFO(wxWindowDC), &s_wxWindowDC /*91*/ }, 
        { "wxClientDC", wxClientDC_methods, sizeof(wxClientDC_methods)/sizeof(wxClientDC_methods[0]),  91 /* wxWindowDC */, CLASSINFO(wxClientDC), &s_wxClientDC /*92*/ }, 
        { "wxPaintDC", wxPaintDC_methods, sizeof(wxPaintDC_methods)/sizeof(wxPaintDC_methods[0]),  91 /* wxWindowDC */, CLASSINFO(wxPaintDC), &s_wxPaintDC /*93*/ }, 
        { "wxScreenDC", wxScreenDC_methods, sizeof(wxScreenDC_methods)/sizeof(wxScreenDC_methods[0]),  89 /* wxDC */, CLASSINFO(wxScreenDC), &s_wxScreenDC /*94*/ }, 
        { "wxCaret", wxCaret_methods, sizeof(wxCaret_methods)/sizeof(wxCaret_methods[0]), -1, NULL, &s_wxCaret /*95*/ }, 
        { "wxApp", wxApp_methods, sizeof(wxApp_methods)/sizeof(wxApp_methods[0]),  20 /* wxEvtHandler */, CLASSINFO(wxApp), &s_wxApp /*96*/ }, 
        { "wxFrame", wxFrame_methods, sizeof(wxFrame_methods)/sizeof(wxFrame_methods[0]),  44 /* wxWindow */, CLASSINFO(wxFrame), &s_wxFrame /*97*/ }, 
        { "wxMiniFrame", wxMiniFrame_methods, sizeof(wxMiniFrame_methods)/sizeof(wxMiniFrame_methods[0]),  97 /* wxFrame */, CLASSINFO(wxMiniFrame), &s_wxMiniFrame /*98*/ }, 
        { "wxStatusBar", wxStatusBar_methods, sizeof(wxStatusBar_methods)/sizeof(wxStatusBar_methods[0]),  44 /* wxWindow */, CLASSINFO(wxStatusBar), &s_wxStatusBar /*99*/ }, 
        { "wxToolTip", wxToolTip_methods, sizeof(wxToolTip_methods)/sizeof(wxToolTip_methods[0]),  2 /* wxObject */, CLASSINFO(wxToolTip), &s_wxToolTip /*100*/ }, 
        { "wxAcceleratorTable", wxAcceleratorTable_methods, sizeof(wxAcceleratorTable_methods)/sizeof(wxAcceleratorTable_methods[0]),  2 /* wxObject */, CLASSINFO(wxAcceleratorTable), &s_wxAcceleratorTable /*101*/ }, 
        { "wxAcceleratorEntry", wxAcceleratorEntry_methods, sizeof(wxAcceleratorEntry_methods)/sizeof(wxAcceleratorEntry_methods[0]), -1, NULL, &s_wxAcceleratorEntry /*102*/ }, 
        { "wxTaskBarIcon", wxTaskBarIcon_methods, sizeof(wxTaskBarIcon_methods)/sizeof(wxTaskBarIcon_methods[0]),  20 /* wxEvtHandler */, CLASSINFO(wxTaskBarIcon), &s_wxTaskBarIcon /*103*/ }, 
        { "wxTaskBarIconEvent", wxTaskBarIconEvent_methods, sizeof(wxTaskBarIconEvent_methods)/sizeof(wxTaskBarIconEvent_methods[0]),  21 /* wxEvent */, NULL, &s_wxTaskBarIconEvent /*104*/ }, 
        { "wxSystemSettings", wxSystemSettings_methods, sizeof(wxSystemSettings_methods)/sizeof(wxSystemSettings_methods[0]), -1, NULL, &s_wxSystemSettings /*105*/ }, 
        { "wxSystemOptions", wxSystemOptions_methods, sizeof(wxSystemOptions_methods)/sizeof(wxSystemOptions_methods[0]),  2 /* wxObject */, NULL, &s_wxSystemOptions /*106*/ }, 
        { "wxDialog", wxDialog_methods, sizeof(wxDialog_methods)/sizeof(wxDialog_methods[0]),  46 /* wxPanel */, CLASSINFO(wxDialog), &s_wxDialog /*107*/ }, 
        { "wxColourDialog", wxColourDialog_methods, sizeof(wxColourDialog_methods)/sizeof(wxColourDialog_methods[0]),  107 /* wxDialog */, CLASSINFO(wxColourDialog), &s_wxColourDialog /*108*/ }, 
        { "wxColourData", wxColourData_methods, sizeof(wxColourData_methods)/sizeof(wxColourData_methods[0]),  2 /* wxObject */, CLASSINFO(wxColourData), &s_wxColourData /*109*/ }, 
        { "wxFileDialog", wxFileDialog_methods, sizeof(wxFileDialog_methods)/sizeof(wxFileDialog_methods[0]),  107 /* wxDialog */, CLASSINFO(wxFileDialog), &s_wxFileDialog /*110*/ }, 
        { "wxDirDialog", wxDirDialog_methods, sizeof(wxDirDialog_methods)/sizeof(wxDirDialog_methods[0]),  107 /* wxDialog */, NULL, &s_wxDirDialog /*111*/ }, 
        { "wxMessageDialog", wxMessageDialog_methods, sizeof(wxMessageDialog_methods)/sizeof(wxMessageDialog_methods[0]),  107 /* wxDialog */, CLASSINFO(wxMessageDialog), &s_wxMessageDialog /*112*/ }, 
        { "wxSingleChoiceDialog", wxSingleChoiceDialog_methods, sizeof(wxSingleChoiceDialog_methods)/sizeof(wxSingleChoiceDialog_methods[0]),  107 /* wxDialog */, CLASSINFO(wxSingleChoiceDialog), &s_wxSingleChoiceDialog /*113*/ }, 
        { "wxTextEntryDialog", wxTextEntryDialog_methods, sizeof(wxTextEntryDialog_methods)/sizeof(wxTextEntryDialog_methods[0]),  107 /* wxDialog */, CLASSINFO(wxTextEntryDialog), &s_wxTextEntryDialog /*114*/ }, 
        { "wxFontDialog", wxFontDialog_methods, sizeof(wxFontDialog_methods)/sizeof(wxFontDialog_methods[0]),  107 /* wxDialog */, CLASSINFO(wxFontDialog), &s_wxFontDialog /*115*/ }, 
        { "wxFontData", wxFontData_methods, sizeof(wxFontData_methods)/sizeof(wxFontData_methods[0]), -1, NULL, &s_wxFontData /*116*/ }, 
        { "wxFindReplaceDialog", wxFindReplaceDialog_methods, sizeof(wxFindReplaceDialog_methods)/sizeof(wxFindReplaceDialog_methods[0]),  107 /* wxDialog */, CLASSINFO(wxFindReplaceDialog), &s_wxFindReplaceDialog /*117*/ }, 
        { "wxFindReplaceData", wxFindReplaceData_methods, sizeof(wxFindReplaceData_methods)/sizeof(wxFindReplaceData_methods[0]), -1, NULL, &s_wxFindReplaceData /*118*/ }, 
        { "wxFindDialogEvent", wxFindDialogEvent_methods, sizeof(wxFindDialogEvent_methods)/sizeof(wxFindDialogEvent_methods[0]),  22 /* wxCommandEvent */, CLASSINFO(wxFindDialogEvent), &s_wxFindDialogEvent /*119*/ }, 
        { "wxProgressDialog", wxProgressDialog_methods, sizeof(wxProgressDialog_methods)/sizeof(wxProgressDialog_methods[0]),  107 /* wxDialog */, CLASSINFO(wxProgressDialog), &s_wxProgressDialog /*120*/ }, 
        { "wxPrintout", wxPrintout_methods, sizeof(wxPrintout_methods)/sizeof(wxPrintout_methods[0]),  2 /* wxObject */, CLASSINFO(wxPrintout), &s_wxPrintout /*121*/ }, 
        { "wxPrinter", wxPrinter_methods, sizeof(wxPrinter_methods)/sizeof(wxPrinter_methods[0]),  2 /* wxObject */, NULL, &s_wxPrinter /*122*/ }, 
        { "wxPrintData", wxPrintData_methods, sizeof(wxPrintData_methods)/sizeof(wxPrintData_methods[0]),  2 /* wxObject */, CLASSINFO(wxPrintData), &s_wxPrintData /*123*/ }, 
        { "wxPageSetupDialogData", wxPageSetupDialogData_methods, sizeof(wxPageSetupDialogData_methods)/sizeof(wxPageSetupDialogData_methods[0]),  2 /* wxObject */, CLASSINFO(wxPageSetupDialogData), &s_wxPageSetupDialogData /*124*/ }, 
        { "wxPageSetupDialog", wxPageSetupDialog_methods, sizeof(wxPageSetupDialog_methods)/sizeof(wxPageSetupDialog_methods[0]),  2 /* wxObject */, CLASSINFO(wxPageSetupDialog), &s_wxPageSetupDialog /*125*/ }, 
        { "wxPrintDialog", wxPrintDialog_methods, sizeof(wxPrintDialog_methods)/sizeof(wxPrintDialog_methods[0]),  2 /* wxObject */, CLASSINFO(wxPrintDialog), &s_wxPrintDialog /*126*/ }, 
        { "wxPrintDialogData", wxPrintDialogData_methods, sizeof(wxPrintDialogData_methods)/sizeof(wxPrintDialogData_methods[0]),  2 /* wxObject */, CLASSINFO(wxPrintDialogData), &s_wxPrintDialogData /*127*/ }, 
        { "wxPreviewCanvas", wxPreviewCanvas_methods, sizeof(wxPreviewCanvas_methods)/sizeof(wxPreviewCanvas_methods[0]),  58 /* wxScrolledWindow */, NULL, &s_wxPreviewCanvas /*128*/ }, 
        { "wxPrintPreview", wxPrintPreview_methods, sizeof(wxPrintPreview_methods)/sizeof(wxPrintPreview_methods[0]),  2 /* wxObject */, NULL, &s_wxPrintPreview /*129*/ }, 
        { "wxPreviewFrame", wxPreviewFrame_methods, sizeof(wxPreviewFrame_methods)/sizeof(wxPreviewFrame_methods[0]),  97 /* wxFrame */, CLASSINFO(wxPreviewFrame), &s_wxPreviewFrame /*130*/ }, 
        { "wxPrinterDC", wxPrinterDC_methods, sizeof(wxPrinterDC_methods)/sizeof(wxPrinterDC_methods[0]),  89 /* wxDC */, CLASSINFO(wxPrinterDC), &s_wxPrinterDC /*131*/ }, 
        { "wxClipboard", wxClipboard_methods, sizeof(wxClipboard_methods)/sizeof(wxClipboard_methods[0]),  2 /* wxObject */, CLASSINFO(wxClipboard), &s_wxClipboard /*132*/ }, 
        { "wxDataFormat", wxDataFormat_methods, sizeof(wxDataFormat_methods)/sizeof(wxDataFormat_methods[0]), -1, NULL, &s_wxDataFormat /*133*/ }, 
        { "wxDataObject", wxDataObject_methods, sizeof(wxDataObject_methods)/sizeof(wxDataObject_methods[0]), -1, NULL, &s_wxDataObject /*134*/ }, 
        { "wxDataObjectSimple", wxDataObjectSimple_methods, sizeof(wxDataObjectSimple_methods)/sizeof(wxDataObjectSimple_methods[0]),  134 /* wxDataObject */, NULL, &s_wxDataObjectSimple /*135*/ }, 
        { "wxDataObjectComposite", wxDataObjectComposite_methods, sizeof(wxDataObjectComposite_methods)/sizeof(wxDataObjectComposite_methods[0]),  134 /* wxDataObject */, NULL, &s_wxDataObjectComposite /*136*/ }, 
        { "wxFileDataObject", wxFileDataObject_methods, sizeof(wxFileDataObject_methods)/sizeof(wxFileDataObject_methods[0]),  135 /* wxDataObjectSimple */, NULL, &s_wxFileDataObject /*137*/ }, 
        { "wxTextDataObject", wxTextDataObject_methods, sizeof(wxTextDataObject_methods)/sizeof(wxTextDataObject_methods[0]),  135 /* wxDataObjectSimple */, NULL, &s_wxTextDataObject /*138*/ }, 
        { "wxBitmapDataObject", wxBitmapDataObject_methods, sizeof(wxBitmapDataObject_methods)/sizeof(wxBitmapDataObject_methods[0]),  135 /* wxDataObjectSimple */, NULL, &s_wxBitmapDataObject /*139*/ }, 
        { "wxCustomDataObject", wxCustomDataObject_methods, sizeof(wxCustomDataObject_methods)/sizeof(wxCustomDataObject_methods[0]),  135 /* wxDataObjectSimple */, NULL, &s_wxCustomDataObject /*140*/ }, 
        { "wxDropTarget", wxDropTarget_methods, sizeof(wxDropTarget_methods)/sizeof(wxDropTarget_methods[0]), -1, NULL, &s_wxDropTarget /*141*/ }, 
        { "wxDropSource", wxDropSource_methods, sizeof(wxDropSource_methods)/sizeof(wxDropSource_methods[0]), -1, NULL, &s_wxDropSource /*142*/ }, 
        { "wxDropFilesEvent", wxDropFilesEvent_methods, sizeof(wxDropFilesEvent_methods)/sizeof(wxDropFilesEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxDropFilesEvent), &s_wxDropFilesEvent /*143*/ }, 
        { "wxMetafile", wxMetafile_methods, sizeof(wxMetafile_methods)/sizeof(wxMetafile_methods[0]),  2 /* wxObject */, NULL, &s_wxMetafile /*144*/ }, 
        { "wxMetafileDC", wxMetafileDC_methods, sizeof(wxMetafileDC_methods)/sizeof(wxMetafileDC_methods[0]),  89 /* wxDC */, NULL, &s_wxMetafileDC /*145*/ }, 
        { "wxConfigBase", wxConfigBase_methods, sizeof(wxConfigBase_methods)/sizeof(wxConfigBase_methods[0]), -1, NULL, &s_wxConfigBase /*146*/ }, 
        { "wxConfig", wxConfig_methods, sizeof(wxConfig_methods)/sizeof(wxConfig_methods[0]),  146 /* wxConfigBase */, NULL, &s_wxConfig /*147*/ }, 
        { "wxButton", wxButton_methods, sizeof(wxButton_methods)/sizeof(wxButton_methods[0]),  47 /* wxControl */, CLASSINFO(wxButton), &s_wxButton /*148*/ }, 
        { "wxBitmapButton", wxBitmapButton_methods, sizeof(wxBitmapButton_methods)/sizeof(wxBitmapButton_methods[0]),  148 /* wxButton */, CLASSINFO(wxBitmapButton), &s_wxBitmapButton /*149*/ }, 
        { "wxCheckBox", wxCheckBox_methods, sizeof(wxCheckBox_methods)/sizeof(wxCheckBox_methods[0]),  47 /* wxControl */, CLASSINFO(wxCheckBox), &s_wxCheckBox /*150*/ }, 
        { "wxChoice", wxChoice_methods, sizeof(wxChoice_methods)/sizeof(wxChoice_methods[0]),  47 /* wxControl */, CLASSINFO(wxChoice), &s_wxChoice /*151*/ }, 
        { "wxComboBox", wxComboBox_methods, sizeof(wxComboBox_methods)/sizeof(wxComboBox_methods[0]),  47 /* wxControl */, CLASSINFO(wxComboBox), &s_wxComboBox /*152*/ }, 
        { "wxGauge", wxGauge_methods, sizeof(wxGauge_methods)/sizeof(wxGauge_methods[0]),  47 /* wxControl */, CLASSINFO(wxGauge), &s_wxGauge /*153*/ }, 
        { "wxListBox", wxListBox_methods, sizeof(wxListBox_methods)/sizeof(wxListBox_methods[0]),  47 /* wxControl */, CLASSINFO(wxListBox), &s_wxListBox /*154*/ }, 
        { "wxCheckListBox", wxCheckListBox_methods, sizeof(wxCheckListBox_methods)/sizeof(wxCheckListBox_methods[0]),  154 /* wxListBox */, CLASSINFO(wxCheckListBox), &s_wxCheckListBox /*155*/ }, 
        { "wxListCtrl", wxListCtrl_methods, sizeof(wxListCtrl_methods)/sizeof(wxListCtrl_methods[0]),  47 /* wxControl */, CLASSINFO(wxListCtrl), &s_wxListCtrl /*156*/ }, 
        { "wxListItemAttr", wxListItemAttr_methods, sizeof(wxListItemAttr_methods)/sizeof(wxListItemAttr_methods[0]), -1, NULL, &s_wxListItemAttr /*157*/ }, 
        { "wxListItem", wxListItem_methods, sizeof(wxListItem_methods)/sizeof(wxListItem_methods[0]),  2 /* wxObject */, CLASSINFO(wxListItem), &s_wxListItem /*158*/ }, 
        { "wxListEvent", wxListEvent_methods, sizeof(wxListEvent_methods)/sizeof(wxListEvent_methods[0]),  23 /* wxNotifyEvent */, CLASSINFO(wxListEvent), &s_wxListEvent /*159*/ }, 
        { "wxRadioBox", wxRadioBox_methods, sizeof(wxRadioBox_methods)/sizeof(wxRadioBox_methods[0]),  47 /* wxControl */, CLASSINFO(wxRadioBox), &s_wxRadioBox /*160*/ }, 
        { "wxRadioButton", wxRadioButton_methods, sizeof(wxRadioButton_methods)/sizeof(wxRadioButton_methods[0]),  47 /* wxControl */, CLASSINFO(wxRadioButton), &s_wxRadioButton /*161*/ }, 
        { "wxScrollBar", wxScrollBar_methods, sizeof(wxScrollBar_methods)/sizeof(wxScrollBar_methods[0]),  47 /* wxControl */, CLASSINFO(wxScrollBar), &s_wxScrollBar /*162*/ }, 
        { "wxSlider", wxSlider_methods, sizeof(wxSlider_methods)/sizeof(wxSlider_methods[0]),  47 /* wxControl */, CLASSINFO(wxSlider), &s_wxSlider /*163*/ }, 
        { "wxSpinButton", wxSpinButton_methods, sizeof(wxSpinButton_methods)/sizeof(wxSpinButton_methods[0]),  47 /* wxControl */, CLASSINFO(wxSpinButton), &s_wxSpinButton /*164*/ }, 
        { "wxSpinEvent", wxSpinEvent_methods, sizeof(wxSpinEvent_methods)/sizeof(wxSpinEvent_methods[0]),  23 /* wxNotifyEvent */, CLASSINFO(wxSpinEvent), &s_wxSpinEvent /*165*/ }, 
        { "wxSpinCtrl", wxSpinCtrl_methods, sizeof(wxSpinCtrl_methods)/sizeof(wxSpinCtrl_methods[0]),  47 /* wxControl */, CLASSINFO(wxSpinCtrl), &s_wxSpinCtrl /*166*/ }, 
        { "wxTextCtrl", wxTextCtrl_methods, sizeof(wxTextCtrl_methods)/sizeof(wxTextCtrl_methods[0]),  47 /* wxControl */, CLASSINFO(wxTextCtrl), &s_wxTextCtrl /*167*/ }, 
        { "wxTreeCtrl", wxTreeCtrl_methods, sizeof(wxTreeCtrl_methods)/sizeof(wxTreeCtrl_methods[0]),  47 /* wxControl */, CLASSINFO(wxTreeCtrl), &s_wxTreeCtrl /*168*/ }, 
        { "wxTreeItemAttr", wxTreeItemAttr_methods, sizeof(wxTreeItemAttr_methods)/sizeof(wxTreeItemAttr_methods[0]),  2 /* wxObject */, NULL, &s_wxTreeItemAttr /*169*/ }, 
        { "wxTreeItemIdValue", wxTreeItemIdValue_methods, sizeof(wxTreeItemIdValue_methods)/sizeof(wxTreeItemIdValue_methods[0]), -1, NULL, &s_wxTreeItemIdValue /*170*/ }, 
        { "wxTreeItemId", wxTreeItemId_methods, sizeof(wxTreeItemId_methods)/sizeof(wxTreeItemId_methods[0]), -1, NULL, &s_wxTreeItemId /*171*/ }, 
        { "wxArrayTreeItemIds", wxArrayTreeItemIds_methods, sizeof(wxArrayTreeItemIds_methods)/sizeof(wxArrayTreeItemIds_methods[0]), -1, NULL, &s_wxArrayTreeItemIds /*172*/ }, 
        { "wxTreeItemData", wxTreeItemData_methods, sizeof(wxTreeItemData_methods)/sizeof(wxTreeItemData_methods[0]),  2 /* wxObject */, NULL, &s_wxTreeItemData /*173*/ }, 
        { "wxLuaTreeItemData", wxLuaTreeItemData_methods, sizeof(wxLuaTreeItemData_methods)/sizeof(wxLuaTreeItemData_methods[0]),  173 /* wxTreeItemData */, NULL, &s_wxLuaTreeItemData /*174*/ }, 
        { "wxTreeEvent", wxTreeEvent_methods, sizeof(wxTreeEvent_methods)/sizeof(wxTreeEvent_methods[0]),  23 /* wxNotifyEvent */, CLASSINFO(wxTreeEvent), &s_wxTreeEvent /*175*/ }, 
        { "wxDateTime", wxDateTime_methods, sizeof(wxDateTime_methods)/sizeof(wxDateTime_methods[0]), -1, NULL, &s_wxDateTime /*176*/ }, 
        { "wxTimeSpan", wxTimeSpan_methods, sizeof(wxTimeSpan_methods)/sizeof(wxTimeSpan_methods[0]), -1, NULL, &s_wxTimeSpan /*177*/ }, 
        { "wxDateSpan", wxDateSpan_methods, sizeof(wxDateSpan_methods)/sizeof(wxDateSpan_methods[0]), -1, NULL, &s_wxDateSpan /*178*/ }, 
        { "wxTimer", wxTimer_methods, sizeof(wxTimer_methods)/sizeof(wxTimer_methods[0]),  2 /* wxObject */, CLASSINFO(wxTimer), &s_wxTimer /*179*/ }, 
        { "wxCalendarCtrl", wxCalendarCtrl_methods, sizeof(wxCalendarCtrl_methods)/sizeof(wxCalendarCtrl_methods[0]),  47 /* wxControl */, CLASSINFO(wxCalendarCtrl), &s_wxCalendarCtrl /*180*/ }, 
        { "wxCalendarDateAttr", wxCalendarDateAttr_methods, sizeof(wxCalendarDateAttr_methods)/sizeof(wxCalendarDateAttr_methods[0]), -1, NULL, &s_wxCalendarDateAttr /*181*/ }, 
        { "wxCalendarEvent", wxCalendarEvent_methods, sizeof(wxCalendarEvent_methods)/sizeof(wxCalendarEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxCalendarEvent), &s_wxCalendarEvent /*182*/ }, 
        { "wxFileName", wxFileName_methods, sizeof(wxFileName_methods)/sizeof(wxFileName_methods[0]), -1, NULL, &s_wxFileName /*183*/ }, 
        { "wxFile", wxFile_methods, sizeof(wxFile_methods)/sizeof(wxFile_methods[0]), -1, NULL, &s_wxFile /*184*/ }, 
        { "wxDir", wxDir_methods, sizeof(wxDir_methods)/sizeof(wxDir_methods[0]), -1, NULL, &s_wxDir /*185*/ }, 
        { "wxGridCellRenderer", wxGridCellRenderer_methods, sizeof(wxGridCellRenderer_methods)/sizeof(wxGridCellRenderer_methods[0]), -1, NULL, &s_wxGridCellRenderer /*186*/ }, 
        { "wxGridCellStringRenderer", wxGridCellStringRenderer_methods, sizeof(wxGridCellStringRenderer_methods)/sizeof(wxGridCellStringRenderer_methods[0]),  186 /* wxGridCellRenderer */, NULL, &s_wxGridCellStringRenderer /*187*/ }, 
        { "wxGridCellNumberRenderer", wxGridCellNumberRenderer_methods, sizeof(wxGridCellNumberRenderer_methods)/sizeof(wxGridCellNumberRenderer_methods[0]),  187 /* wxGridCellStringRenderer */, NULL, &s_wxGridCellNumberRenderer /*188*/ }, 
        { "wxGridCellFloatRenderer", wxGridCellFloatRenderer_methods, sizeof(wxGridCellFloatRenderer_methods)/sizeof(wxGridCellFloatRenderer_methods[0]),  187 /* wxGridCellStringRenderer */, NULL, &s_wxGridCellFloatRenderer /*189*/ }, 
        { "wxGridCellBoolRenderer", wxGridCellBoolRenderer_methods, sizeof(wxGridCellBoolRenderer_methods)/sizeof(wxGridCellBoolRenderer_methods[0]),  186 /* wxGridCellRenderer */, NULL, &s_wxGridCellBoolRenderer /*190*/ }, 
        { "wxGridCellAttr", wxGridCellAttr_methods, sizeof(wxGridCellAttr_methods)/sizeof(wxGridCellAttr_methods[0]), -1, NULL, &s_wxGridCellAttr /*191*/ }, 
        { "wxGridCellAttrProvider", wxGridCellAttrProvider_methods, sizeof(wxGridCellAttrProvider_methods)/sizeof(wxGridCellAttrProvider_methods[0]), -1, NULL, &s_wxGridCellAttrProvider /*192*/ }, 
        { "wxGridTableBase", wxGridTableBase_methods, sizeof(wxGridTableBase_methods)/sizeof(wxGridTableBase_methods[0]),  2 /* wxObject */, CLASSINFO(wxGridTableBase), &s_wxGridTableBase /*193*/ }, 
        { "wxGridStringTable", wxGridStringTable_methods, sizeof(wxGridStringTable_methods)/sizeof(wxGridStringTable_methods[0]),  193 /* wxGridTableBase */, CLASSINFO(wxGridStringTable), &s_wxGridStringTable /*194*/ }, 
        { "wxGridTableMessage", wxGridTableMessage_methods, sizeof(wxGridTableMessage_methods)/sizeof(wxGridTableMessage_methods[0]), -1, NULL, &s_wxGridTableMessage /*195*/ }, 
        { "wxGridCellCoords", wxGridCellCoords_methods, sizeof(wxGridCellCoords_methods)/sizeof(wxGridCellCoords_methods[0]), -1, NULL, &s_wxGridCellCoords /*196*/ }, 
        { "wxGrid", wxGrid_methods, sizeof(wxGrid_methods)/sizeof(wxGrid_methods[0]),  58 /* wxScrolledWindow */, CLASSINFO(wxGrid), &s_wxGrid /*197*/ }, 
        { "wxGridCellEditor", wxGridCellEditor_methods, sizeof(wxGridCellEditor_methods)/sizeof(wxGridCellEditor_methods[0]), -1, NULL, &s_wxGridCellEditor /*198*/ }, 
        { "wxGridCellTextEditor", wxGridCellTextEditor_methods, sizeof(wxGridCellTextEditor_methods)/sizeof(wxGridCellTextEditor_methods[0]),  198 /* wxGridCellEditor */, NULL, &s_wxGridCellTextEditor /*199*/ }, 
        { "wxGridCellNumberEditor", wxGridCellNumberEditor_methods, sizeof(wxGridCellNumberEditor_methods)/sizeof(wxGridCellNumberEditor_methods[0]),  199 /* wxGridCellTextEditor */, NULL, &s_wxGridCellNumberEditor /*200*/ }, 
        { "wxGridCellFloatEditor", wxGridCellFloatEditor_methods, sizeof(wxGridCellFloatEditor_methods)/sizeof(wxGridCellFloatEditor_methods[0]),  199 /* wxGridCellTextEditor */, NULL, &s_wxGridCellFloatEditor /*201*/ }, 
        { "wxGridCellBoolEditor", wxGridCellBoolEditor_methods, sizeof(wxGridCellBoolEditor_methods)/sizeof(wxGridCellBoolEditor_methods[0]),  198 /* wxGridCellEditor */, NULL, &s_wxGridCellBoolEditor /*202*/ }, 
        { "wxGridEvent", wxGridEvent_methods, sizeof(wxGridEvent_methods)/sizeof(wxGridEvent_methods[0]),  23 /* wxNotifyEvent */, CLASSINFO(wxGridEvent), &s_wxGridEvent /*203*/ }, 
        { "wxGridSizeEvent", wxGridSizeEvent_methods, sizeof(wxGridSizeEvent_methods)/sizeof(wxGridSizeEvent_methods[0]),  23 /* wxNotifyEvent */, CLASSINFO(wxGridSizeEvent), &s_wxGridSizeEvent /*204*/ }, 
        { "wxGridRangeSelectEvent", wxGridRangeSelectEvent_methods, sizeof(wxGridRangeSelectEvent_methods)/sizeof(wxGridRangeSelectEvent_methods[0]),  23 /* wxNotifyEvent */, CLASSINFO(wxGridRangeSelectEvent), &s_wxGridRangeSelectEvent /*205*/ }, 
        { "wxGridEditorCreatedEvent", wxGridEditorCreatedEvent_methods, sizeof(wxGridEditorCreatedEvent_methods)/sizeof(wxGridEditorCreatedEvent_methods[0]),  22 /* wxCommandEvent */, CLASSINFO(wxGridEditorCreatedEvent), &s_wxGridEditorCreatedEvent /*206*/ }, 
        { "wxHelpController", wxHelpController_methods, sizeof(wxHelpController_methods)/sizeof(wxHelpController_methods[0]),  2 /* wxObject */, CLASSINFO(wxHelpController), &s_wxHelpController /*207*/ }, 
        { "wxWinHelpController", wxWinHelpController_methods, sizeof(wxWinHelpController_methods)/sizeof(wxWinHelpController_methods[0]),  207 /* wxHelpController */, CLASSINFO(wxWinHelpController), &s_wxWinHelpController /*208*/ }, 
        { "wxBestHelpController", wxBestHelpController_methods, sizeof(wxBestHelpController_methods)/sizeof(wxBestHelpController_methods[0]),  207 /* wxHelpController */, NULL, &s_wxBestHelpController /*209*/ }, 
        { "wxHtmlContentsItem", wxHtmlContentsItem_methods, sizeof(wxHtmlContentsItem_methods)/sizeof(wxHtmlContentsItem_methods[0]), -1, NULL, &s_wxHtmlContentsItem /*210*/ }, 
        { "wxHtmlHelpData", wxHtmlHelpData_methods, sizeof(wxHtmlHelpData_methods)/sizeof(wxHtmlHelpData_methods[0]),  2 /* wxObject */, CLASSINFO(wxHtmlHelpData), &s_wxHtmlHelpData /*211*/ }, 
        { "wxHtmlHelpController", wxHtmlHelpController_methods, sizeof(wxHtmlHelpController_methods)/sizeof(wxHtmlHelpController_methods[0]),  207 /* wxHelpController */, CLASSINFO(wxHtmlHelpController), &s_wxHtmlHelpController /*212*/ }, 
        { "wxHtmlCell", wxHtmlCell_methods, sizeof(wxHtmlCell_methods)/sizeof(wxHtmlCell_methods[0]), -1, NULL, &s_wxHtmlCell /*213*/ }, 
        { "wxHtmlWidgetCell", wxHtmlWidgetCell_methods, sizeof(wxHtmlWidgetCell_methods)/sizeof(wxHtmlWidgetCell_methods[0]),  213 /* wxHtmlCell */, NULL, &s_wxHtmlWidgetCell /*214*/ }, 
        { "wxHtmlLinkInfo", wxHtmlLinkInfo_methods, sizeof(wxHtmlLinkInfo_methods)/sizeof(wxHtmlLinkInfo_methods[0]), -1, NULL, &s_wxHtmlLinkInfo /*215*/ }, 
        { "wxHtmlTag", wxHtmlTag_methods, sizeof(wxHtmlTag_methods)/sizeof(wxHtmlTag_methods[0]), -1, CLASSINFO(wxHtmlTag), &s_wxHtmlTag /*216*/ }, 
        { "wxHtmlContainerCell", wxHtmlContainerCell_methods, sizeof(wxHtmlContainerCell_methods)/sizeof(wxHtmlContainerCell_methods[0]),  213 /* wxHtmlCell */, NULL, &s_wxHtmlContainerCell /*217*/ }, 
        { "wxHtmlWindow", wxHtmlWindow_methods, sizeof(wxHtmlWindow_methods)/sizeof(wxHtmlWindow_methods[0]),  58 /* wxScrolledWindow */, CLASSINFO(wxHtmlWindow), &s_wxHtmlWindow /*218*/ }, 
        { "wxHtmlParser", wxHtmlParser_methods, sizeof(wxHtmlParser_methods)/sizeof(wxHtmlParser_methods[0]), -1, NULL, &s_wxHtmlParser /*219*/ }, 
        { "wxHtmlWinParser", wxHtmlWinParser_methods, sizeof(wxHtmlWinParser_methods)/sizeof(wxHtmlWinParser_methods[0]),  219 /* wxHtmlParser */, NULL, &s_wxHtmlWinParser /*220*/ }, 
        { "wxHtmlDCRenderer", wxHtmlDCRenderer_methods, sizeof(wxHtmlDCRenderer_methods)/sizeof(wxHtmlDCRenderer_methods[0]),  2 /* wxObject */, NULL, &s_wxHtmlDCRenderer /*221*/ }, 
        { "wxHtmlEasyPrinting", wxHtmlEasyPrinting_methods, sizeof(wxHtmlEasyPrinting_methods)/sizeof(wxHtmlEasyPrinting_methods[0]),  2 /* wxObject */, NULL, &s_wxHtmlEasyPrinting /*222*/ }, 
        { "wxHtmlPrintout", wxHtmlPrintout_methods, sizeof(wxHtmlPrintout_methods)/sizeof(wxHtmlPrintout_methods[0]),  121 /* wxPrintout */, NULL, &s_wxHtmlPrintout /*223*/ }, 
        { "wxImage", wxImage_methods, sizeof(wxImage_methods)/sizeof(wxImage_methods[0]),  2 /* wxObject */, CLASSINFO(wxImage), &s_wxImage /*224*/ }, 
        { "wxImageHandler", wxImageHandler_methods, sizeof(wxImageHandler_methods)/sizeof(wxImageHandler_methods[0]),  2 /* wxObject */, NULL, &s_wxImageHandler /*225*/ }, 
        { "wxBMPHandler", wxBMPHandler_methods, sizeof(wxBMPHandler_methods)/sizeof(wxBMPHandler_methods[0]),  225 /* wxImageHandler */, CLASSINFO(wxBMPHandler), &s_wxBMPHandler /*226*/ }, 
        { "wxPNGHandler", wxPNGHandler_methods, sizeof(wxPNGHandler_methods)/sizeof(wxPNGHandler_methods[0]),  225 /* wxImageHandler */, CLASSINFO(wxPNGHandler), &s_wxPNGHandler /*227*/ }, 
        { "wxJPEGHandler", wxJPEGHandler_methods, sizeof(wxJPEGHandler_methods)/sizeof(wxJPEGHandler_methods[0]),  225 /* wxImageHandler */, CLASSINFO(wxJPEGHandler), &s_wxJPEGHandler /*228*/ }, 
        { "wxGIFHandler", wxGIFHandler_methods, sizeof(wxGIFHandler_methods)/sizeof(wxGIFHandler_methods[0]),  225 /* wxImageHandler */, CLASSINFO(wxGIFHandler), &s_wxGIFHandler /*229*/ }, 
        { "wxPNMHandler", wxPNMHandler_methods, sizeof(wxPNMHandler_methods)/sizeof(wxPNMHandler_methods[0]),  225 /* wxImageHandler */, CLASSINFO(wxPNMHandler), &s_wxPNMHandler /*230*/ }, 
        { "wxPCXHandler", wxPCXHandler_methods, sizeof(wxPCXHandler_methods)/sizeof(wxPCXHandler_methods[0]),  225 /* wxImageHandler */, CLASSINFO(wxPCXHandler), &s_wxPCXHandler /*231*/ }, 
        { "wxTIFFHandler", wxTIFFHandler_methods, sizeof(wxTIFFHandler_methods)/sizeof(wxTIFFHandler_methods[0]),  225 /* wxImageHandler */, CLASSINFO(wxTIFFHandler), &s_wxTIFFHandler /*232*/ }, 
        { "wxXPMHandler", wxXPMHandler_methods, sizeof(wxXPMHandler_methods)/sizeof(wxXPMHandler_methods[0]),  225 /* wxImageHandler */, CLASSINFO(wxXPMHandler), &s_wxXPMHandler /*233*/ }, 
        { "wxICOHandler", wxICOHandler_methods, sizeof(wxICOHandler_methods)/sizeof(wxICOHandler_methods[0]),  226 /* wxBMPHandler */, NULL, &s_wxICOHandler /*234*/ }, 
        { "wxMDIClientWindow", wxMDIClientWindow_methods, sizeof(wxMDIClientWindow_methods)/sizeof(wxMDIClientWindow_methods[0]),  44 /* wxWindow */, CLASSINFO(wxMDIClientWindow), &s_wxMDIClientWindow /*235*/ }, 
        { "wxMDIParentFrame", wxMDIParentFrame_methods, sizeof(wxMDIParentFrame_methods)/sizeof(wxMDIParentFrame_methods[0]),  97 /* wxFrame */, CLASSINFO(wxMDIParentFrame), &s_wxMDIParentFrame /*236*/ }, 
        { "wxMDIChildFrame", wxMDIChildFrame_methods, sizeof(wxMDIChildFrame_methods)/sizeof(wxMDIChildFrame_methods[0]),  97 /* wxFrame */, CLASSINFO(wxMDIChildFrame), &s_wxMDIChildFrame /*237*/ }, 
        { "wxDocChildFrame", wxDocChildFrame_methods, sizeof(wxDocChildFrame_methods)/sizeof(wxDocChildFrame_methods[0]),  97 /* wxFrame */, CLASSINFO(wxDocChildFrame), &s_wxDocChildFrame /*238*/ }, 
        { "wxDocManager", wxDocManager_methods, sizeof(wxDocManager_methods)/sizeof(wxDocManager_methods[0]),  20 /* wxEvtHandler */, CLASSINFO(wxDocManager), &s_wxDocManager /*239*/ }, 
        { "wxDocParentFrame", wxDocParentFrame_methods, sizeof(wxDocParentFrame_methods)/sizeof(wxDocParentFrame_methods[0]),  97 /* wxFrame */, CLASSINFO(wxDocParentFrame), &s_wxDocParentFrame /*240*/ }, 
        { "wxDocTemplate", wxDocTemplate_methods, sizeof(wxDocTemplate_methods)/sizeof(wxDocTemplate_methods[0]),  2 /* wxObject */, CLASSINFO(wxDocTemplate), &s_wxDocTemplate /*241*/ }, 
        { "wxDocument", wxDocument_methods, sizeof(wxDocument_methods)/sizeof(wxDocument_methods[0]),  20 /* wxEvtHandler */, CLASSINFO(wxDocument), &s_wxDocument /*242*/ }, 
        { "wxView", wxView_methods, sizeof(wxView_methods)/sizeof(wxView_methods[0]),  20 /* wxEvtHandler */, CLASSINFO(wxView), &s_wxView /*243*/ }, 
        { "wxCommandProcessor", wxCommandProcessor_methods, sizeof(wxCommandProcessor_methods)/sizeof(wxCommandProcessor_methods[0]),  2 /* wxObject */, CLASSINFO(wxCommandProcessor), &s_wxCommandProcessor /*244*/ }, 
        { "wxCommand", wxCommand_methods, sizeof(wxCommand_methods)/sizeof(wxCommand_methods[0]),  2 /* wxObject */, CLASSINFO(wxCommand), &s_wxCommand /*245*/ }, 
        { "wxFileHistory", wxFileHistory_methods, sizeof(wxFileHistory_methods)/sizeof(wxFileHistory_methods[0]),  2 /* wxObject */, CLASSINFO(wxFileHistory), &s_wxFileHistory /*246*/ }, 
        { "wxMenu", wxMenu_methods, sizeof(wxMenu_methods)/sizeof(wxMenu_methods[0]),  20 /* wxEvtHandler */, CLASSINFO(wxMenu), &s_wxMenu /*247*/ }, 
        { "wxMenuBar", wxMenuBar_methods, sizeof(wxMenuBar_methods)/sizeof(wxMenuBar_methods[0]),  20 /* wxEvtHandler */, CLASSINFO(wxMenuBar), &s_wxMenuBar /*248*/ }, 
        { "wxMenuItem", wxMenuItem_methods, sizeof(wxMenuItem_methods)/sizeof(wxMenuItem_methods[0]),  2 /* wxObject */, CLASSINFO(wxMenuItem), &s_wxMenuItem /*249*/ }, 
        { "wxMenuItemList", wxMenuItemList_methods, sizeof(wxMenuItemList_methods)/sizeof(wxMenuItemList_methods[0]), -1, NULL, &s_wxMenuItemList /*250*/ }, 
        { "wxMenuEvent", wxMenuEvent_methods, sizeof(wxMenuEvent_methods)/sizeof(wxMenuEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxMenuEvent), &s_wxMenuEvent /*251*/ }, 
        { "wxToolBarBase", wxToolBarBase_methods, sizeof(wxToolBarBase_methods)/sizeof(wxToolBarBase_methods[0]),  47 /* wxControl */, NULL, &s_wxToolBarBase /*252*/ }, 
        { "wxToolBar", wxToolBar_methods, sizeof(wxToolBar_methods)/sizeof(wxToolBar_methods[0]),  252 /* wxToolBarBase */, CLASSINFO(wxToolBar), &s_wxToolBar /*253*/ }, 
        { "wxToolBarToolBase", wxToolBarToolBase_methods, sizeof(wxToolBarToolBase_methods)/sizeof(wxToolBarToolBase_methods[0]), -1, NULL, &s_wxToolBarToolBase /*254*/ }, 
        { "wxToolBarTool", wxToolBarTool_methods, sizeof(wxToolBarTool_methods)/sizeof(wxToolBarTool_methods[0]),  254 /* wxToolBarToolBase */, NULL, &s_wxToolBarTool /*255*/ }, 
        { "wxSizer", wxSizer_methods, sizeof(wxSizer_methods)/sizeof(wxSizer_methods[0]),  2 /* wxObject */, CLASSINFO(wxSizer), &s_wxSizer /*256*/ }, 
        { "wxBoxSizer", wxBoxSizer_methods, sizeof(wxBoxSizer_methods)/sizeof(wxBoxSizer_methods[0]),  256 /* wxSizer */, CLASSINFO(wxBoxSizer), &s_wxBoxSizer /*257*/ }, 
        { "wxGridSizer", wxGridSizer_methods, sizeof(wxGridSizer_methods)/sizeof(wxGridSizer_methods[0]),  256 /* wxSizer */, CLASSINFO(wxGridSizer), &s_wxGridSizer /*258*/ }, 
        { "wxFlexGridSizer", wxFlexGridSizer_methods, sizeof(wxFlexGridSizer_methods)/sizeof(wxFlexGridSizer_methods[0]),  258 /* wxGridSizer */, CLASSINFO(wxFlexGridSizer), &s_wxFlexGridSizer /*259*/ }, 
        { "wxNotebookSizer", wxNotebookSizer_methods, sizeof(wxNotebookSizer_methods)/sizeof(wxNotebookSizer_methods[0]),  256 /* wxSizer */, CLASSINFO(wxNotebookSizer), &s_wxNotebookSizer /*260*/ }, 
        { "wxStaticBoxSizer", wxStaticBoxSizer_methods, sizeof(wxStaticBoxSizer_methods)/sizeof(wxStaticBoxSizer_methods[0]),  257 /* wxBoxSizer */, CLASSINFO(wxStaticBoxSizer), &s_wxStaticBoxSizer /*261*/ }, 
        { "wxLayoutConstraints", wxLayoutConstraints_methods, sizeof(wxLayoutConstraints_methods)/sizeof(wxLayoutConstraints_methods[0]),  2 /* wxObject */, CLASSINFO(wxLayoutConstraints), &s_wxLayoutConstraints /*262*/ }, 
        { "wxIndividualLayoutConstraint", wxIndividualLayoutConstraint_methods, sizeof(wxIndividualLayoutConstraint_methods)/sizeof(wxIndividualLayoutConstraint_methods[0]),  2 /* wxObject */, CLASSINFO(wxIndividualLayoutConstraint), &s_wxIndividualLayoutConstraint /*263*/ }, 
        { "wxSocketBase", wxSocketBase_methods, sizeof(wxSocketBase_methods)/sizeof(wxSocketBase_methods[0]),  2 /* wxObject */, CLASSINFO(wxSocketBase), &s_wxSocketBase /*264*/ }, 
        { "wxSocketClient", wxSocketClient_methods, sizeof(wxSocketClient_methods)/sizeof(wxSocketClient_methods[0]),  264 /* wxSocketBase */, CLASSINFO(wxSocketClient), &s_wxSocketClient /*265*/ }, 
        { "wxSocketServer", wxSocketServer_methods, sizeof(wxSocketServer_methods)/sizeof(wxSocketServer_methods[0]),  264 /* wxSocketBase */, CLASSINFO(wxSocketServer), &s_wxSocketServer /*266*/ }, 
        { "wxSocketEvent", wxSocketEvent_methods, sizeof(wxSocketEvent_methods)/sizeof(wxSocketEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxSocketEvent), &s_wxSocketEvent /*267*/ }, 
        { "wxSockAddress", wxSockAddress_methods, sizeof(wxSockAddress_methods)/sizeof(wxSockAddress_methods[0]),  2 /* wxObject */, CLASSINFO(wxSockAddress), &s_wxSockAddress /*268*/ }, 
        { "wxIPV4address", wxIPV4address_methods, sizeof(wxIPV4address_methods)/sizeof(wxIPV4address_methods[0]),  268 /* wxSockAddress */, CLASSINFO(wxIPV4address), &s_wxIPV4address /*269*/ }, 
        { "wxRect2DDouble", wxRect2DDouble_methods, sizeof(wxRect2DDouble_methods)/sizeof(wxRect2DDouble_methods[0]), -1, NULL, &s_wxRect2DDouble /*270*/ }, 
        { "wxPoint2DDouble", wxPoint2DDouble_methods, sizeof(wxPoint2DDouble_methods)/sizeof(wxPoint2DDouble_methods[0]), -1, NULL, &s_wxPoint2DDouble /*271*/ }, 
        { "wxRect2DInt", wxRect2DInt_methods, sizeof(wxRect2DInt_methods)/sizeof(wxRect2DInt_methods[0]), -1, NULL, &s_wxRect2DInt /*272*/ }, 
        { "wxPoint2DInt", wxPoint2DInt_methods, sizeof(wxPoint2DInt_methods)/sizeof(wxPoint2DInt_methods[0]), -1, NULL, &s_wxPoint2DInt /*273*/ }, 
        { "wxWave", wxWave_methods, sizeof(wxWave_methods)/sizeof(wxWave_methods[0]),  2 /* wxObject */, NULL, &s_wxWave /*274*/ }, 
        { "wxRegEx", wxRegEx_methods, sizeof(wxRegEx_methods)/sizeof(wxRegEx_methods[0]), -1, NULL, &s_wxRegEx /*275*/ }, 
        { "wxLuaInterpreter", wxLuaInterpreter_methods, sizeof(wxLuaInterpreter_methods)/sizeof(wxLuaInterpreter_methods[0]),  2 /* wxObject */, CLASSINFO(wxLuaInterpreter), &s_wxLuaInterpreter /*276*/ }, 
        { "wxLuaObject", wxLuaObject_methods, sizeof(wxLuaObject_methods)/sizeof(wxLuaObject_methods[0]),  2 /* wxObject */, CLASSINFO(wxLuaObject), &s_wxLuaObject /*277*/ }, 
        { "wxLuaDebugServer", wxLuaDebugServer_methods, sizeof(wxLuaDebugServer_methods)/sizeof(wxLuaDebugServer_methods[0]), -1, CLASSINFO(wxLuaDebugServer), &s_wxLuaDebugServer /*278*/ }, 
        { "wxLuaDebugData", wxLuaDebugData_methods, sizeof(wxLuaDebugData_methods)/sizeof(wxLuaDebugData_methods[0]), -1, NULL, &s_wxLuaDebugData /*279*/ }, 
        { "wxLuaDebugEvent", wxLuaDebugEvent_methods, sizeof(wxLuaDebugEvent_methods)/sizeof(wxLuaDebugEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxLuaDebugEvent), &s_wxLuaDebugEvent /*280*/ }, 
        { "wxLuaPrintout", wxLuaPrintout_methods, sizeof(wxLuaPrintout_methods)/sizeof(wxLuaPrintout_methods[0]),  121 /* wxPrintout */, CLASSINFO(wxLuaPrintout), &s_wxLuaPrintout /*281*/ }, 
        { "wxLuaHtmlWindow", wxLuaHtmlWindow_methods, sizeof(wxLuaHtmlWindow_methods)/sizeof(wxLuaHtmlWindow_methods[0]),  218 /* wxHtmlWindow */, CLASSINFO(wxLuaHtmlWindow), &s_wxLuaHtmlWindow /*282*/ }, 
        { "wxLuaHtmlWinTagEvent", wxLuaHtmlWinTagEvent_methods, sizeof(wxLuaHtmlWinTagEvent_methods)/sizeof(wxLuaHtmlWinTagEvent_methods[0]),  21 /* wxEvent */, CLASSINFO(wxLuaHtmlWinTagEvent), &s_wxLuaHtmlWinTagEvent /*283*/ }, 
        { "wxFrameLayout", wxFrameLayout_methods, sizeof(wxFrameLayout_methods)/sizeof(wxFrameLayout_methods[0]),  20 /* wxEvtHandler */, CLASSINFO(wxFrameLayout), &s_wxFrameLayout /*284*/ }, 
        { "cbBarSpy", cbBarSpy_methods, sizeof(cbBarSpy_methods)/sizeof(cbBarSpy_methods[0]),  20 /* wxEvtHandler */, NULL, &s_cbBarSpy /*285*/ }, 
        { "cbUpdateMgrData", cbUpdateMgrData_methods, sizeof(cbUpdateMgrData_methods)/sizeof(cbUpdateMgrData_methods[0]),  2 /* wxObject */, NULL, &s_cbUpdateMgrData /*286*/ }, 
        { "cbBarDimHandlerBase", cbBarDimHandlerBase_methods, sizeof(cbBarDimHandlerBase_methods)/sizeof(cbBarDimHandlerBase_methods[0]),  2 /* wxObject */, NULL, &s_cbBarDimHandlerBase /*287*/ }, 
        { "cbDimInfo", cbDimInfo_methods, sizeof(cbDimInfo_methods)/sizeof(cbDimInfo_methods[0]),  2 /* wxObject */, CLASSINFO(cbDimInfo), &s_cbDimInfo /*288*/ }, 
        { "cbRowInfo", cbRowInfo_methods, sizeof(cbRowInfo_methods)/sizeof(cbRowInfo_methods[0]),  2 /* wxObject */, NULL, &s_cbRowInfo /*289*/ }, 
        { "cbBarInfo", cbBarInfo_methods, sizeof(cbBarInfo_methods)/sizeof(cbBarInfo_methods[0]),  2 /* wxObject */, NULL, &s_cbBarInfo /*290*/ }, 
        { "cbBarShapeData", cbBarShapeData_methods, sizeof(cbBarShapeData_methods)/sizeof(cbBarShapeData_methods[0]),  2 /* wxObject */, NULL, &s_cbBarShapeData /*291*/ }, 
        { "wxBarIterator", wxBarIterator_methods, sizeof(wxBarIterator_methods)/sizeof(wxBarIterator_methods[0]), -1, NULL, &s_wxBarIterator /*292*/ }, 
        { "cbCommonPaneProperties", cbCommonPaneProperties_methods, sizeof(cbCommonPaneProperties_methods)/sizeof(cbCommonPaneProperties_methods[0]),  2 /* wxObject */, NULL, &s_cbCommonPaneProperties /*293*/ }, 
        { "cbLuaCommonPaneProperties", cbLuaCommonPaneProperties_methods, sizeof(cbLuaCommonPaneProperties_methods)/sizeof(cbLuaCommonPaneProperties_methods[0]),  293 /* cbCommonPaneProperties */, NULL, &s_cbLuaCommonPaneProperties /*294*/ }, 
        { "cbDockPane", cbDockPane_methods, sizeof(cbDockPane_methods)/sizeof(cbDockPane_methods[0]),  2 /* wxObject */, NULL, &s_cbDockPane /*295*/ }, 
        { "cbUpdatesManagerBase", cbUpdatesManagerBase_methods, sizeof(cbUpdatesManagerBase_methods)/sizeof(cbUpdatesManagerBase_methods[0]),  2 /* wxObject */, NULL, &s_cbUpdatesManagerBase /*296*/ }, 
        { "cbPluginEvent", cbPluginEvent_methods, sizeof(cbPluginEvent_methods)/sizeof(cbPluginEvent_methods[0]),  21 /* wxEvent */, NULL, &s_cbPluginEvent /*297*/ }, 
        { "cbPluginBase", cbPluginBase_methods, sizeof(cbPluginBase_methods)/sizeof(cbPluginBase_methods[0]),  20 /* wxEvtHandler */, NULL, &s_cbPluginBase /*298*/ }, 
        { "cbLeftDownEvent", cbLeftDownEvent_methods, sizeof(cbLeftDownEvent_methods)/sizeof(cbLeftDownEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbLeftDownEvent /*299*/ }, 
        { "cbLeftUpEvent", cbLeftUpEvent_methods, sizeof(cbLeftUpEvent_methods)/sizeof(cbLeftUpEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbLeftUpEvent /*300*/ }, 
        { "cbRightDownEvent", cbRightDownEvent_methods, sizeof(cbRightDownEvent_methods)/sizeof(cbRightDownEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbRightDownEvent /*301*/ }, 
        { "cbRightUpEvent", cbRightUpEvent_methods, sizeof(cbRightUpEvent_methods)/sizeof(cbRightUpEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbRightUpEvent /*302*/ }, 
        { "cbMotionEvent", cbMotionEvent_methods, sizeof(cbMotionEvent_methods)/sizeof(cbMotionEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbMotionEvent /*303*/ }, 
        { "cbLeftDClickEvent", cbLeftDClickEvent_methods, sizeof(cbLeftDClickEvent_methods)/sizeof(cbLeftDClickEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbLeftDClickEvent /*304*/ }, 
        { "cbLayoutRowEvent", cbLayoutRowEvent_methods, sizeof(cbLayoutRowEvent_methods)/sizeof(cbLayoutRowEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbLayoutRowEvent /*305*/ }, 
        { "cbResizeRowEvent", cbResizeRowEvent_methods, sizeof(cbResizeRowEvent_methods)/sizeof(cbResizeRowEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbResizeRowEvent /*306*/ }, 
        { "cbLayoutRowsEvent", cbLayoutRowsEvent_methods, sizeof(cbLayoutRowsEvent_methods)/sizeof(cbLayoutRowsEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbLayoutRowsEvent /*307*/ }, 
        { "cbInsertBarEvent", cbInsertBarEvent_methods, sizeof(cbInsertBarEvent_methods)/sizeof(cbInsertBarEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbInsertBarEvent /*308*/ }, 
        { "cbResizeBarEvent", cbResizeBarEvent_methods, sizeof(cbResizeBarEvent_methods)/sizeof(cbResizeBarEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbResizeBarEvent /*309*/ }, 
        { "cbRemoveBarEvent", cbRemoveBarEvent_methods, sizeof(cbRemoveBarEvent_methods)/sizeof(cbRemoveBarEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbRemoveBarEvent /*310*/ }, 
        { "cbSizeBarWndEvent", cbSizeBarWndEvent_methods, sizeof(cbSizeBarWndEvent_methods)/sizeof(cbSizeBarWndEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbSizeBarWndEvent /*311*/ }, 
        { "cbDrawBarDecorEvent", cbDrawBarDecorEvent_methods, sizeof(cbDrawBarDecorEvent_methods)/sizeof(cbDrawBarDecorEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbDrawBarDecorEvent /*312*/ }, 
        { "cbDrawRowDecorEvent", cbDrawRowDecorEvent_methods, sizeof(cbDrawRowDecorEvent_methods)/sizeof(cbDrawRowDecorEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbDrawRowDecorEvent /*313*/ }, 
        { "cbDrawPaneDecorEvent", cbDrawPaneDecorEvent_methods, sizeof(cbDrawPaneDecorEvent_methods)/sizeof(cbDrawPaneDecorEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbDrawPaneDecorEvent /*314*/ }, 
        { "cbDrawBarHandlesEvent", cbDrawBarHandlesEvent_methods, sizeof(cbDrawBarHandlesEvent_methods)/sizeof(cbDrawBarHandlesEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbDrawBarHandlesEvent /*315*/ }, 
        { "cbDrawRowHandlesEvent", cbDrawRowHandlesEvent_methods, sizeof(cbDrawRowHandlesEvent_methods)/sizeof(cbDrawRowHandlesEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbDrawRowHandlesEvent /*316*/ }, 
        { "cbDrawRowBkGroundEvent", cbDrawRowBkGroundEvent_methods, sizeof(cbDrawRowBkGroundEvent_methods)/sizeof(cbDrawRowBkGroundEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbDrawRowBkGroundEvent /*317*/ }, 
        { "cbDrawPaneBkGroundEvent", cbDrawPaneBkGroundEvent_methods, sizeof(cbDrawPaneBkGroundEvent_methods)/sizeof(cbDrawPaneBkGroundEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbDrawPaneBkGroundEvent /*318*/ }, 
        { "cbStartBarDraggingEvent", cbStartBarDraggingEvent_methods, sizeof(cbStartBarDraggingEvent_methods)/sizeof(cbStartBarDraggingEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbStartBarDraggingEvent /*319*/ }, 
        { "cbDrawHintRectEvent", cbDrawHintRectEvent_methods, sizeof(cbDrawHintRectEvent_methods)/sizeof(cbDrawHintRectEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbDrawHintRectEvent /*320*/ }, 
        { "cbStartDrawInAreaEvent", cbStartDrawInAreaEvent_methods, sizeof(cbStartDrawInAreaEvent_methods)/sizeof(cbStartDrawInAreaEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbStartDrawInAreaEvent /*321*/ }, 
        { "cbFinishDrawInAreaEvent", cbFinishDrawInAreaEvent_methods, sizeof(cbFinishDrawInAreaEvent_methods)/sizeof(cbFinishDrawInAreaEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbFinishDrawInAreaEvent /*322*/ }, 
        { "cbCustomizeBarEvent", cbCustomizeBarEvent_methods, sizeof(cbCustomizeBarEvent_methods)/sizeof(cbCustomizeBarEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbCustomizeBarEvent /*323*/ }, 
        { "cbCustomizeLayoutEvent", cbCustomizeLayoutEvent_methods, sizeof(cbCustomizeLayoutEvent_methods)/sizeof(cbCustomizeLayoutEvent_methods[0]),  297 /* cbPluginEvent */, NULL, &s_cbCustomizeLayoutEvent /*324*/ }, 
        { "cbSimpleUpdatesMgr", cbSimpleUpdatesMgr_methods, sizeof(cbSimpleUpdatesMgr_methods)/sizeof(cbSimpleUpdatesMgr_methods[0]),  296 /* cbUpdatesManagerBase */, CLASSINFO(cbSimpleUpdatesMgr), &s_cbSimpleUpdatesMgr /*325*/ }, 
        { "cbGCUpdatesMgr", cbGCUpdatesMgr_methods, sizeof(cbGCUpdatesMgr_methods)/sizeof(cbGCUpdatesMgr_methods[0]),  325 /* cbSimpleUpdatesMgr */, CLASSINFO(cbGCUpdatesMgr), &s_cbGCUpdatesMgr /*326*/ }, 
        { "cbBarHintsPlugin", cbBarHintsPlugin_methods, sizeof(cbBarHintsPlugin_methods)/sizeof(cbBarHintsPlugin_methods[0]),  298 /* cbPluginBase */, CLASSINFO(cbBarHintsPlugin), &s_cbBarHintsPlugin /*327*/ }, 
        { "cbHintAnimationPlugin", cbHintAnimationPlugin_methods, sizeof(cbHintAnimationPlugin_methods)/sizeof(cbHintAnimationPlugin_methods[0]),  298 /* cbPluginBase */, CLASSINFO(cbHintAnimationPlugin), &s_cbHintAnimationPlugin /*328*/ }, 
        { "cbRowDragPlugin", cbRowDragPlugin_methods, sizeof(cbRowDragPlugin_methods)/sizeof(cbRowDragPlugin_methods[0]),  298 /* cbPluginBase */, CLASSINFO(cbRowDragPlugin), &s_cbRowDragPlugin /*329*/ }, 
        { "cbAntiflickerPlugin", cbAntiflickerPlugin_methods, sizeof(cbAntiflickerPlugin_methods)/sizeof(cbAntiflickerPlugin_methods[0]),  298 /* cbPluginBase */, CLASSINFO(cbAntiflickerPlugin), &s_cbAntiflickerPlugin /*330*/ }, 
        { "cbSimpleCustomizationPlugin", cbSimpleCustomizationPlugin_methods, sizeof(cbSimpleCustomizationPlugin_methods)/sizeof(cbSimpleCustomizationPlugin_methods[0]),  298 /* cbPluginBase */, CLASSINFO(cbSimpleCustomizationPlugin), &s_cbSimpleCustomizationPlugin /*331*/ }, 
        { "cbDynToolBarDimHandler", cbDynToolBarDimHandler_methods, sizeof(cbDynToolBarDimHandler_methods)/sizeof(cbDynToolBarDimHandler_methods[0]),  287 /* cbBarDimHandlerBase */, CLASSINFO(cbDynToolBarDimHandler), &s_cbDynToolBarDimHandler /*332*/ }, 
        { "wxToolLayoutItem", wxToolLayoutItem_methods, sizeof(wxToolLayoutItem_methods)/sizeof(wxToolLayoutItem_methods[0]),  2 /* wxObject */, CLASSINFO(wxToolLayoutItem), &s_wxToolLayoutItem /*333*/ }, 
        { "wxDynToolInfo", wxDynToolInfo_methods, sizeof(wxDynToolInfo_methods)/sizeof(wxDynToolInfo_methods[0]),  333 /* wxToolLayoutItem */, CLASSINFO(wxDynToolInfo), &s_wxDynToolInfo /*334*/ }, 
        { "wxDynamicToolBar", wxDynamicToolBar_methods, sizeof(wxDynamicToolBar_methods)/sizeof(wxDynamicToolBar_methods[0]),  252 /* wxToolBarBase */, CLASSINFO(wxDynamicToolBar), &s_wxDynamicToolBar /*335*/ }, 
        { "wxStyledTextCtrlDocument", wxStyledTextCtrlDocument_methods, sizeof(wxStyledTextCtrlDocument_methods)/sizeof(wxStyledTextCtrlDocument_methods[0]), -1, NULL, &s_wxStyledTextCtrlDocument /*336*/ }, 
        { "wxStyledTextCtrl", wxStyledTextCtrl_methods, sizeof(wxStyledTextCtrl_methods)/sizeof(wxStyledTextCtrl_methods[0]),  47 /* wxControl */, CLASSINFO(wxStyledTextCtrl), &s_wxStyledTextCtrl /*337*/ }, 
        { "wxStyledTextEvent", wxStyledTextEvent_methods, sizeof(wxStyledTextEvent_methods)/sizeof(wxStyledTextEvent_methods[0]),  22 /* wxCommandEvent */, CLASSINFO(wxStyledTextEvent), &s_wxStyledTextEvent /*338*/ }, 
        { "wxXmlNode", wxXmlNode_methods, sizeof(wxXmlNode_methods)/sizeof(wxXmlNode_methods[0]), -1, NULL, &s_wxXmlNode /*339*/ }, 
        { "wxXmlProperty", wxXmlProperty_methods, sizeof(wxXmlProperty_methods)/sizeof(wxXmlProperty_methods[0]), -1, NULL, &s_wxXmlProperty /*340*/ }, 
        { "wxXmlDocument", wxXmlDocument_methods, sizeof(wxXmlDocument_methods)/sizeof(wxXmlDocument_methods[0]), -1, NULL, &s_wxXmlDocument /*341*/ }, 
        { "wxXmlResourceHandler", wxXmlResourceHandler_methods, sizeof(wxXmlResourceHandler_methods)/sizeof(wxXmlResourceHandler_methods[0]),  2 /* wxObject */, NULL, &s_wxXmlResourceHandler /*342*/ }, 
        { "wxXmlResource", wxXmlResource_methods, sizeof(wxXmlResource_methods)/sizeof(wxXmlResource_methods[0]),  2 /* wxObject */, NULL, &s_wxXmlResource /*343*/ }, 
    };
    count = 344;
    return classList;
};

WXLUADEFINE *GetDefineList(size_t &count)
{
    static WXLUADEFINE defineList[] =
    {
        { "wxLC_MASK_SORT", wxLC_MASK_SORT },
        { "wxSTC_DIFF_ADDED", wxSTC_DIFF_ADDED },
        { "wxSTC_B_COMMENT", wxSTC_B_COMMENT },
        { "wxSTC_BAT_DEFAULT", wxSTC_BAT_DEFAULT },
        { "wxSTC_HPHP_DEFAULT", wxSTC_HPHP_DEFAULT },
        { "wxLC_SORT_ASCENDING", wxLC_SORT_ASCENDING },
        { "wxSTC_H_SGML_DEFAULT", wxSTC_H_SGML_DEFAULT },
        { "MAX_BAR_STATES", MAX_BAR_STATES },
        { "wxBLIT_00990066", wxBLIT_00990066 },
        { "wxSTC_WRAP_NONE", wxSTC_WRAP_NONE },
        { "wxSTC_HPHP_NUMBER", wxSTC_HPHP_NUMBER },
        { "wxID_CLEAR", wxID_CLEAR },
        { "wxTREE_HITTEST_ABOVE", wxTREE_HITTEST_ABOVE },
        { "wxPD_ELAPSED_TIME", wxPD_ELAPSED_TIME },
        { "wxHF_TOOLBAR", wxHF_TOOLBAR },
        { "wxSTC_HJA_STRINGEOL", wxSTC_HJA_STRINGEOL },
        { "WXK_F2", WXK_F2 },
        { "wxSTC_H_SGML_SIMPLESTRING", wxSTC_H_SGML_SIMPLESTRING },
        { "wxSTC_FOLDLEVELBASE", wxSTC_FOLDLEVELBASE },
        { "wxSTC_DIFF_DEFAULT", wxSTC_DIFF_DEFAULT },
        { "wxSTC_H_ASP", wxSTC_H_ASP },
        { "wxSTC_MATLAB_DEFAULT", wxSTC_MATLAB_DEFAULT },
        { "wxSTC_MOD_CHANGEFOLD", wxSTC_MOD_CHANGEFOLD },
        { "wxSTC_L_COMMAND", wxSTC_L_COMMAND },
        { "wxHF_ICONS_BOOK", wxHF_ICONS_BOOK },
        { "wxDOT", wxDOT },
        { "wxSTC_C_STRINGEOL", wxSTC_C_STRINGEOL },
        { "wxSTC_C_NUMBER", wxSTC_C_NUMBER },
        { "wxWS_EX_VALIDATE_RECURSIVELY", wxWS_EX_VALIDATE_RECURSIVELY },
        { "wxSTC_FIND_REGEXP", wxSTC_FIND_REGEXP },
        { "wxSTC_HP_OPERATOR", wxSTC_HP_OPERATOR },
        { "wxID_CONTEXT_HELP", wxID_CONTEXT_HELP },
        { "wxSTC_CMD_CANCEL", wxSTC_CMD_CANCEL },
        { "wxSTC_CONF_STRING", wxSTC_CONF_STRING },
        { "wxID_REDO", wxID_REDO },
        { "wxSTC_PL_STRING", wxSTC_PL_STRING },
        { "WXK_NUMPAD_F1", WXK_NUMPAD_F1 },
        { "wxCBAR_FLOATING", wxCBAR_FLOATING },
        { "wxHTML_ALIGN_JUSTIFY", wxHTML_ALIGN_JUSTIFY },
        { "wxID_OK", wxID_OK },
        { "wxSTC_KEY_PRIOR", wxSTC_KEY_PRIOR },
        { "WXK_DOWN", WXK_DOWN },
        { "wxBLIT_SRCERASE", wxBLIT_SRCERASE },
        { "wxSTC_HJA_NUMBER", wxSTC_HJA_NUMBER },
        { "wxRETAINED", wxRETAINED },
        { "wxRA_HORIZONTAL", wxRA_HORIZONTAL },
        { "wxSTC_CHARSET_HEBREW", wxSTC_CHARSET_HEBREW },
        { "wxTR_NO_BUTTONS", wxTR_NO_BUTTONS },
        { "wxROP_NOTXORPEN", wxROP_NOTXORPEN },
        { "wxSTC_BAAN_COMMENT", wxSTC_BAAN_COMMENT },
        { "wxTB_TEXT", wxTB_TEXT },
        { "wxTR_SINGLE", wxTR_SINGLE },
        { "wxSTC_HP_WORD", wxSTC_HP_WORD },
        { "wxSTC_LEX_AUTOMATIC", wxSTC_LEX_AUTOMATIC },
        { "wxFORWARD", wxFORWARD },
        { "WXK_LBUTTON", WXK_LBUTTON },
        { "wxSTC_BAAN_DEFAULT", wxSTC_BAAN_DEFAULT },
        { "wxSTC_EOL_CR", wxSTC_EOL_CR },
        { "wxSTC_PL_STRING_QX", wxSTC_PL_STRING_QX },
        { "wxSTC_INDICS_MASK", wxSTC_INDICS_MASK },
        { "wxICONIZE", wxICONIZE },
        { "wxSTC_INDIC0_MASK", wxSTC_INDIC0_MASK },
        { "wxSTC_KEY_RIGHT", wxSTC_KEY_RIGHT },
        { "wxSTC_HP_CLASSNAME", wxSTC_HP_CLASSNAME },
        { "wxMOTIF_X", wxMOTIF_X },
        { "wxSTC_H_SCRIPT", wxSTC_H_SCRIPT },
        { "wxSL_TOP", wxSL_TOP },
        { "wxSTC_LEX_SCRIPTOL", wxSTC_LEX_SCRIPTOL },
        { "wxBU_TOP", wxBU_TOP },
        { "WXK_NUMPAD_NEXT", WXK_NUMPAD_NEXT },
        { "WXK_PAUSE", WXK_PAUSE },
        { "wxTREE_HITTEST_TOLEFT", wxTREE_HITTEST_TOLEFT },
        { "wxLC_ALIGN_LEFT", wxLC_ALIGN_LEFT },
        { "wxSTC_CMD_COPY", wxSTC_CMD_COPY },
        { "wxLIST_FIND_UP", wxLIST_FIND_UP },
        { "wxSTC_KEY_ADD", wxSTC_KEY_ADD },
        { "wxSTC_EDGE_LINE", wxSTC_EDGE_LINE },
        { "WXK_NUMPAD_RIGHT", WXK_NUMPAD_RIGHT },
        { "wxSTC_P_CHARACTER", wxSTC_P_CHARACTER },
        { "wxMM_LOMETRIC", wxMM_LOMETRIC },
        { "wxSTC_MATLAB_OPERATOR", wxSTC_MATLAB_OPERATOR },
        { "wxSTC_MOD_INSERTTEXT", wxSTC_MOD_INSERTTEXT },
        { "wxSTC_MARKNUM_FOLDERSUB", wxSTC_MARKNUM_FOLDERSUB },
        { "wxSTC_B_IDENTIFIER", wxSTC_B_IDENTIFIER },
        { "wxSTC_HJ_DEFAULT", wxSTC_HJ_DEFAULT },
        { "wxSTC_P_COMMENTBLOCK", wxSTC_P_COMMENTBLOCK },
        { "wxTAB_TRAVERSAL", wxTAB_TRAVERSAL },
        { "wxTE_CENTRE", wxTE_CENTRE },
        { "wxLIST_STATE_DROPHILITED", wxLIST_STATE_DROPHILITED },
        { "wxFRAME_NO_TASKBAR", wxFRAME_NO_TASKBAR },
        { "wxDEFAULT_DOCMAN_FLAGS", wxDEFAULT_DOCMAN_FLAGS },
        { "wxID_FILE7", wxID_FILE7 },
        { "wxWINDOWS", wxWINDOWS },
        { "WXK_F11", WXK_F11 },
        { "wxSTC_FOLDLEVELHEADERFLAG", wxSTC_FOLDLEVELHEADERFLAG },
        { "wxRA_VERTICAL", wxRA_VERTICAL },
        { "wxSTC_EDGE_NONE", wxSTC_EDGE_NONE },
        { "wxST_SIZEGRIP", wxST_SIZEGRIP },
        { "wxBLIT_00DD0228", wxBLIT_00DD0228 },
        { "wxTOP", wxTOP },
        { "wxID_PRINT_SETUP", wxID_PRINT_SETUP },
        { "wxCENTRE", wxCENTRE },
        { "wxSTC_LISP_STRINGEOL", wxSTC_LISP_STRINGEOL },
        { "wxSTC_BAT_LABEL", wxSTC_BAT_LABEL },
        { "wxSTC_ERR_NET", wxSTC_ERR_NET },
        { "wxSTC_MARK_SMALLRECT", wxSTC_MARK_SMALLRECT },
        { "WXK_NUMPAD3", WXK_NUMPAD3 },
        { "wxSTC_LASTSTEPINUNDOREDO", wxSTC_LASTSTEPINUNDOREDO },
        { "wxSTC_LEX_PHP", wxSTC_LEX_PHP },
        { "wxSTC_CHARSET_RUSSIAN", wxSTC_CHARSET_RUSSIAN },
        { "wxID_PRINT", wxID_PRINT },
        { "wxYES_NO", wxYES_NO },
        { "wxCB_SORT", wxCB_SORT },
        { "wxCLEAR", wxCLEAR },
        { "wxSTC_SCMOD_SHIFT", wxSTC_SCMOD_SHIFT },
        { "wxTREE_HITTEST_ONITEMINDENT", wxTREE_HITTEST_ONITEMINDENT },
        { "wxTREE_HITTEST_NOWHERE", wxTREE_HITTEST_NOWHERE },
        { "wxLC_SINGLE_SEL", wxLC_SINGLE_SEL },
        { "wxSTC_L_TAG", wxSTC_L_TAG },
        { "wxSTC_HPA_DEFAULT", wxSTC_HPA_DEFAULT },
        { "wxSTC_CHARSET_GREEK", wxSTC_CHARSET_GREEK },
        { "wxTB_NOALIGN", wxTB_NOALIGN },
        { "wxSTC_PL_ERROR", wxSTC_PL_ERROR },
        { "wxHTML_ALIGN_RIGHT", wxHTML_ALIGN_RIGHT },
        { "wxCOPY", wxCOPY },
        { "wxSTC_KEY_INSERT", wxSTC_KEY_INSERT },
        { "wxSTC_CONF_PARAMETER", wxSTC_CONF_PARAMETER },
        { "wxSW_3DSASH", wxSW_3DSASH },
        { "wxDIR_HIDDEN", wxDIR_HIDDEN },
        { "wxTE_RICH2", wxTE_RICH2 },
        { "wxSTC_MARK_BOXMINUS", wxSTC_MARK_BOXMINUS },
        { "wxSTC_CMD_BACKTAB", wxSTC_CMD_BACKTAB },
        { "wxTE_PROCESS_ENTER", wxTE_PROCESS_ENTER },
        { "wxID_FILE4", wxID_FILE4 },
        { "wxSTC_CACHE_CARET", wxSTC_CACHE_CARET },
        { "wxSTC_LEX_RUBY", wxSTC_LEX_RUBY },
        { "wxSTC_HJA_DOUBLESTRING", wxSTC_HJA_DOUBLESTRING },
        { "wxOR_INVERT", wxOR_INVERT },
        { "wxID_FILE6", wxID_FILE6 },
        { "wxPlatformWindows", wxPlatformWindows },
        { "WXK_F13", WXK_F13 },
        { "wxSTC_CASE_LOWER", wxSTC_CASE_LOWER },
        { "wxTR_HAS_BUTTONS", wxTR_HAS_BUTTONS },
        { "wxSTC_STYLE_INDENTGUIDE", wxSTC_STYLE_INDENTGUIDE },
        { "wxSTC_HJ_KEYWORD", wxSTC_HJ_KEYWORD },
        { "wxSTC_INVALID_POSITION", wxSTC_INVALID_POSITION },
        { "wxID_FILE9", wxID_FILE9 },
        { "wxSTC_MARKNUM_FOLDEROPEN", wxSTC_MARKNUM_FOLDEROPEN },
        { "wxSTC_C_PREPROCESSOR", wxSTC_C_PREPROCESSOR },
        { "wxICON_HAND", wxICON_HAND },
        { "wxSTC_CHARSET_MAC", wxSTC_CHARSET_MAC },
        { "wxSTC_PRINT_INVERTLIGHT", wxSTC_PRINT_INVERTLIGHT },
        { "wxHF_ICONS_BOOK_CHAPTER", wxHF_ICONS_BOOK_CHAPTER },
        { "wxSTC_AVE_DEFAULT", wxSTC_AVE_DEFAULT },
        { "wxICON_ERROR", wxICON_ERROR },
        { "wxMM_TWIPS", wxMM_TWIPS },
        { "wxINVERT", wxINVERT },
        { "wxSTC_LEX_DIFF", wxSTC_LEX_DIFF },
        { "wxTR_EDIT_LABELS", wxTR_EDIT_LABELS },
        { "WXK_TAB", WXK_TAB },
        { "wxSTC_CMD_PAGEUP", wxSTC_CMD_PAGEUP },
        { "wxSTC_STYLE_CONTROLCHAR", wxSTC_STYLE_CONTROLCHAR },
        { "wxSTC_CHARSET_SHIFTJIS", wxSTC_CHARSET_SHIFTJIS },
        { "wxSIZE_NO_ADJUSTMENTS", wxSIZE_NO_ADJUSTMENTS },
        { "wxSTC_LEX_BATCH", wxSTC_LEX_BATCH },
        { "wxSTC_HJ_START", wxSTC_HJ_START },
        { "wxSTC_CMD_LINEUPEXTEND", wxSTC_CMD_LINEUPEXTEND },
        { "wxLIST_NEXT_LEFT", wxLIST_NEXT_LEFT },
        { "wxSTC_MARK_ARROW", wxSTC_MARK_ARROW },
        { "wxNB_RIGHT", wxNB_RIGHT },
        { "wxSTC_KEY_ESCAPE", wxSTC_KEY_ESCAPE },
        { "wxUNKNOWN_PLATFORM", wxUNKNOWN_PLATFORM },
        { "wxBACKWARD", wxBACKWARD },
        { "wxSTC_CMD_LINEEND", wxSTC_CMD_LINEEND },
        { "wxSTC_P_NUMBER", wxSTC_P_NUMBER },
        { "wxCENTRE_ON_SCREEN", wxCENTRE_ON_SCREEN },
        { "wxNB_LEFT", wxNB_LEFT },
        { "wxSTC_HB_STRING", wxSTC_HB_STRING },
        { "wxSTC_LEX_MATLAB", wxSTC_LEX_MATLAB },
        { "wxSTC_PL_REGEX", wxSTC_PL_REGEX },
        { "wxTREE_HITTEST_ONITEMBUTTON", wxTREE_HITTEST_ONITEMBUTTON },
        { "wxS_IRGRP", wxS_IRGRP },
        { "wxSRC_INVERT", wxSRC_INVERT },
        { "wxMENU_TEAROFF", wxMENU_TEAROFF },
        { "wxSTC_HB_WORD", wxSTC_HB_WORD },
        { "wxID_HELP_CONTENTS", wxID_HELP_CONTENTS },
        { "wxID_SETUP", wxID_SETUP },
        { "wxICON_INFORMATION", wxICON_INFORMATION },
        { "WXK_NUMPAD_SUBTRACT", WXK_NUMPAD_SUBTRACT },
        { "wxLI_VERTICAL", wxLI_VERTICAL },
        { "wxTE_READONLY", wxTE_READONLY },
        { "wxGA_SMOOTH", wxGA_SMOOTH },
        { "wxSTC_C_OPERATOR", wxSTC_C_OPERATOR },
        { "wxSB_VERTICAL", wxSB_VERTICAL },
        { "wxSTC_FIND_MATCHCASE", wxSTC_FIND_MATCHCASE },
        { "wxCB_DROPDOWN", wxCB_DROPDOWN },
        { "wxTREE_HITTEST_ONITEMLOWERPART", wxTREE_HITTEST_ONITEMLOWERPART },
        { "wxTREE_HITTEST_TORIGHT", wxTREE_HITTEST_TORIGHT },
        { "wxTC_LEFT", wxTC_LEFT },
        { "wxST_NO_AUTORESIZE", wxST_NO_AUTORESIZE },
        { "wxHELP", wxHELP },
        { "wxTRANSPARENT_WINDOW", wxTRANSPARENT_WINDOW },
        { "WXK_NUMPAD_F3", WXK_NUMPAD_F3 },
        { "wxDOC_SILENT", wxDOC_SILENT },
        { "wxSTC_BAT_WORD", wxSTC_BAT_WORD },
        { "wxLIST_HITTEST_ONITEM", wxLIST_HITTEST_ONITEM },
        { "wxSP_3D", wxSP_3D },
        { "wxSTC_ADA_STRING", wxSTC_ADA_STRING },
        { "WXK_ESCAPE", WXK_ESCAPE },
        { "wxMM_TEXT", wxMM_TEXT },
        { "wxSTC_LEX_ASP", wxSTC_LEX_ASP },
        { "wxFRAME_EX_CONTEXTHELP", wxFRAME_EX_CONTEXTHELP },
        { "WXK_F12", WXK_F12 },
        { "wxLB_EXTENDED", wxLB_EXTENDED },
        { "WXK_F15", WXK_F15 },
        { "WXK_F5", WXK_F5 },
        { "WXK_F24", WXK_F24 },
        { "wxHF_SEARCH", wxHF_SEARCH },
        { "FL_ALIGN_LEFT", FL_ALIGN_LEFT },
        { "wxEQUIV", wxEQUIV },
        { "wxSTC_LEX_XML", wxSTC_LEX_XML },
        { "wxSTC_MARK_BOXPLUSCONNECTED", wxSTC_MARK_BOXPLUSCONNECTED },
        { "WXK_RBUTTON", WXK_RBUTTON },
        { "wxSTC_MARK_CHARACTER", wxSTC_MARK_CHARACTER },
        { "wxSETUP", wxSETUP },
        { "wxCAP_ROUND", wxCAP_ROUND },
        { "wxSTC_B_PREPROCESSOR", wxSTC_B_PREPROCESSOR },
        { "wxSTC_CMD_CHARRIGHTEXTEND", wxSTC_CMD_CHARRIGHTEXTEND },
        { "WXK_SNAPSHOT", WXK_SNAPSHOT },
        { "wxSTC_CMD_ZOOMOUT", wxSTC_CMD_ZOOMOUT },
        { "wxBU_EXACTFIT", wxBU_EXACTFIT },
        { "wxSTC_H_SINGLESTRING", wxSTC_H_SINGLESTRING },
        { "wxHW_SCROLLBAR_NEVER", wxHW_SCROLLBAR_NEVER },
        { "wxSTC_HBA_COMMENTLINE", wxSTC_HBA_COMMENTLINE },
        { "wxSTC_PL_PUNCTUATION", wxSTC_PL_PUNCTUATION },
        { "wxFILTER_NUMERIC", wxFILTER_NUMERIC },
        { "WXK_NUMPAD_TAB", WXK_NUMPAD_TAB },
        { "wxSTC_HB_DEFAULT", wxSTC_HB_DEFAULT },
        { "wxTE_LEFT", wxTE_LEFT },
        { "wxSTC_STYLE_DEFAULT", wxSTC_STYLE_DEFAULT },
        { "wxLIST_HITTEST_ONITEMRIGHT", wxLIST_HITTEST_ONITEMRIGHT },
        { "wxSTC_P_WORD", wxSTC_P_WORD },
        { "wxDIALOG_EX_CONTEXTHELP", wxDIALOG_EX_CONTEXTHELP },
        { "wxSTC_C_COMMENT", wxSTC_C_COMMENT },
        { "wxLIST_AUTOSIZE_USEHEADER", wxLIST_AUTOSIZE_USEHEADER },
        { "wxSTC_LEX_BULLANT", wxSTC_LEX_BULLANT },
        { "wxID_HIGHEST", wxID_HIGHEST },
        { "wxSTC_MARK_CIRCLEMINUS", wxSTC_MARK_CIRCLEMINUS },
        { "wxICON_WARNING", wxICON_WARNING },
        { "wxID_NEW", wxID_NEW },
        { "wxSTC_CMD_VCHOME", wxSTC_CMD_VCHOME },
        { "wxSTC_DIFF_COMMENT", wxSTC_DIFF_COMMENT },
        { "WXK_LEFT", WXK_LEFT },
        { "wxSTC_WS_VISIBLEAFTERINDENT", wxSTC_WS_VISIBLEAFTERINDENT },
        { "wxID_REVERT", wxID_REVERT },
        { "wxBLIT_SRCAND", wxBLIT_SRCAND },
        { "WXK_SPACE", WXK_SPACE },
        { "wxSTC_P_STRINGEOL", wxSTC_P_STRINGEOL },
        { "wxLANDSCAPE", wxLANDSCAPE },
        { "wxHTML_ALIGN_BOTTOM", wxHTML_ALIGN_BOTTOM },
        { "wxDEFAULT_TEMPLATE_FLAGS", wxDEFAULT_TEMPLATE_FLAGS },
        { "wxRESIZE_BORDER", wxRESIZE_BORDER },
        { "wxID_YES", wxID_YES },
        { "wxSTC_HB_IDENTIFIER", wxSTC_HB_IDENTIFIER },
        { "wxSTC_CMD_WORDLEFTEXTEND", wxSTC_CMD_WORDLEFTEXTEND },
        { "WXK_NUMPAD1", WXK_NUMPAD1 },
        { "wxPD_CAN_ABORT", wxPD_CAN_ABORT },
        { "wxSIMPLE_BORDER", wxSIMPLE_BORDER },
        { "wxSTC_HJA_DEFAULT", wxSTC_HJA_DEFAULT },
        { "wxFLOOD_SURFACE", wxFLOOD_SURFACE },
        { "WXK_HELP", WXK_HELP },
        { "WXK_NUMPAD_F2", WXK_NUMPAD_F2 },
        { "wxSTC_P_COMMENTLINE", wxSTC_P_COMMENTLINE },
        { "wxTE_AUTO_URL", wxTE_AUTO_URL },
        { "wxROP_NOTCOPYPEN", wxROP_NOTCOPYPEN },
        { "WXK_NUMPAD_DIVIDE", WXK_NUMPAD_DIVIDE },
        { "wxHTML_INDENT_TOP", wxHTML_INDENT_TOP },
        { "wxSTC_CMD_DELWORDLEFT", wxSTC_CMD_DELWORDLEFT },
        { "wxLIST_SET_ITEM", wxLIST_SET_ITEM },
        { "WXK_NUMPAD7", WXK_NUMPAD7 },
        { "wxCBAR_DOCKED_VERTICALLY", wxCBAR_DOCKED_VERTICALLY },
        { "WXK_NUMPAD_EQUAL", WXK_NUMPAD_EQUAL },
        { "wxSTC_PRINT_NORMAL", wxSTC_PRINT_NORMAL },
        { "wxTR_MAC_BUTTONS", wxTR_MAC_BUTTONS },
        { "WXK_NUMPAD_MULTIPLY", WXK_NUMPAD_MULTIPLY },
        { "wxSTC_CARET_EVEN", wxSTC_CARET_EVEN },
        { "wxTR_EXTENDED", wxTR_EXTENDED },
        { "wxSTC_KEY_RETURN", wxSTC_KEY_RETURN },
        { "wxSTC_P_TRIPLEDOUBLE", wxSTC_P_TRIPLEDOUBLE },
        { "wxSTC_CMD_LOWERCASE", wxSTC_CMD_LOWERCASE },
        { "wxSTC_PL_REGSUBST", wxSTC_PL_REGSUBST },
        { "wxSTC_CMD_WORDRIGHT", wxSTC_CMD_WORDRIGHT },
        { "wxSTC_VISIBLE_STRICT", wxSTC_VISIBLE_STRICT },
        { "wxSTC_HBA_DEFAULT", wxSTC_HBA_DEFAULT },
        { "wxLIST_HITTEST_ONITEMLABEL", wxLIST_HITTEST_ONITEMLABEL },
        { "wxSTC_CMD_ZOOMIN", wxSTC_CMD_ZOOMIN },
        { "wxGA_VERTICAL", wxGA_VERTICAL },
        { "wxID_HELP_PROCEDURES", wxID_HELP_PROCEDURES },
        { "wxICON_QUESTION", wxICON_QUESTION },
        { "WXK_SELECT", WXK_SELECT },
        { "wxPASSWORD", wxPASSWORD },
        { "wxSTC_DIFF_DELETED", wxSTC_DIFF_DELETED },
        { "wxLC_NO_HEADER", wxLC_NO_HEADER },
        { "wxBLIT_MERGEPAINT", wxBLIT_MERGEPAINT },
        { "WXK_UP", WXK_UP },
        { "wxSTC_CMD_UNDO", wxSTC_CMD_UNDO },
        { "WXK_F9", WXK_F9 },
        { "wxSTC_LEX_TCL", wxSTC_LEX_TCL },
        { "wxSP_3DBORDER", wxSP_3DBORDER },
        { "WXK_CANCEL", WXK_CANCEL },
        { "wxSTC_LUA_LITERALSTRING", wxSTC_LUA_LITERALSTRING },
        { "wxFILTER_ALPHA", wxFILTER_ALPHA },
        { "wxSTC_MAKE_DEFAULT", wxSTC_MAKE_DEFAULT },
        { "wxROP_XORPEN", wxROP_XORPEN },
        { "wxSTC_CP_UTF8", wxSTC_CP_UTF8 },
        { "wxHTML_UNITS_PIXELS", wxHTML_UNITS_PIXELS },
        { "wxSL_AUTOTICKS", wxSL_AUTOTICKS },
        { "wxID_FIND", wxID_FIND },
        { "wxLC_ICON", wxLC_ICON },
        { "wxSTC_HJ_COMMENTLINE", wxSTC_HJ_COMMENTLINE },
        { "wxSTC_MAKE_IDEOL", wxSTC_MAKE_IDEOL },
        { "wxBLIT_SRCPAINT", wxBLIT_SRCPAINT },
        { "wxSTC_PRINT_COLOURONWHITEDEFAULTBG", wxSTC_PRINT_COLOURONWHITEDEFAULTBG },
        { "wxNO_FULL_REPAINT_ON_RESIZE", wxNO_FULL_REPAINT_ON_RESIZE },
        { "wxTB_NODIVIDER", wxTB_NODIVIDER },
        { "wxROP_BLACK", wxROP_BLACK },
        { "wxSTC_AVE_NUMBER", wxSTC_AVE_NUMBER },
        { "wxDIALOG_MODELESS", wxDIALOG_MODELESS },
        { "wxSTC_H_ENTITY", wxSTC_H_ENTITY },
        { "wxSTC_INDIC_DIAGONAL", wxSTC_INDIC_DIAGONAL },
        { "wxFILTER_EXCLUDE_LIST", wxFILTER_EXCLUDE_LIST },
        { "WXK_NUMPAD_END", WXK_NUMPAD_END },
        { "WXK_PAGEUP", WXK_PAGEUP },
        { "wxDIALOG_MODAL", wxDIALOG_MODAL },
        { "wxSTC_LEX_PERL", wxSTC_LEX_PERL },
        { "wxLONG_DASH", wxLONG_DASH },
        { "wxSP_ARROW_KEYS", wxSP_ARROW_KEYS },
        { "wxSL_VERTICAL", wxSL_VERTICAL },
        { "wxMM_ANISOTROPIC", wxMM_ANISOTROPIC },
        { "WXK_NUMPAD2", WXK_NUMPAD2 },
        { "wxSTC_CMD_LINEDOWN", wxSTC_CMD_LINEDOWN },
        { "LO_VERTICAL", LO_VERTICAL },
        { "wxLIST_NEXT_ABOVE", wxLIST_NEXT_ABOVE },
        { "wxSTC_MOD_BEFOREDELETE", wxSTC_MOD_BEFOREDELETE },
        { "wxSTC_CONF_OPERATOR", wxSTC_CONF_OPERATOR },
        { "wxSTC_P_OPERATOR", wxSTC_P_OPERATOR },
        { "wxAND_REVERSE", wxAND_REVERSE },
        { "wxID_FILE1", wxID_FILE1 },
        { "wxSTC_PL_HERE_Q", wxSTC_PL_HERE_Q },
        { "wxSTC_MOD_DELETETEXT", wxSTC_MOD_DELETETEXT },
        { "wxSYSTEM_MENU", wxSYSTEM_MENU },
        { "wxSTAY_ON_TOP", wxSTAY_ON_TOP },
        { "wxTE_RICH", wxTE_RICH },
        { "wxPORTRAIT", wxPORTRAIT },
        { "wxSTC_H_QUESTION", wxSTC_H_QUESTION },
        { "wxSTC_CMD_HOME", wxSTC_CMD_HOME },
        { "wxSTC_CMD_HOMEDISPLAYEXTEND", wxSTC_CMD_HOMEDISPLAYEXTEND },
        { "wxSTC_CHARSET_JOHAB", wxSTC_CHARSET_JOHAB },
        { "wxODDEVEN_RULE", wxODDEVEN_RULE },
        { "WXK_NUMPAD_ENTER", WXK_NUMPAD_ENTER },
        { "wxLB_ALWAYS_SB", wxLB_ALWAYS_SB },
        { "wxVERTICAL", wxVERTICAL },
        { "WXK_MBUTTON", WXK_MBUTTON },
        { "wxSTC_PL_HERE_QQ", wxSTC_PL_HERE_QQ },
        { "wxID_HELP_COMMANDS", wxID_HELP_COMMANDS },
        { "wxSTC_ERR_DIFF_DELETION", wxSTC_ERR_DIFF_DELETION },
        { "wxSTC_CONF_EXTENSION", wxSTC_CONF_EXTENSION },
        { "WXK_NUMPAD_UP", WXK_NUMPAD_UP },
        { "wxDIR_FILES", wxDIR_FILES },
        { "wxSTC_EIFFEL_OPERATOR", wxSTC_EIFFEL_OPERATOR },
        { "wxHSCROLL", wxHSCROLL },
        { "WXK_DIVIDE", WXK_DIVIDE },
        { "wxLIST_MASK_IMAGE", wxLIST_MASK_IMAGE },
        { "wxCBAR_DOCKED_HORIZONTALLY", wxCBAR_DOCKED_HORIZONTALLY },
        { "wxTINY_CAPTION_VERT", wxTINY_CAPTION_VERT },
        { "wxNOR", wxNOR },
        { "wxPATH_MKDIR_FULL", wxPATH_MKDIR_FULL },
        { "WXK_NUMPAD9", WXK_NUMPAD9 },
        { "wxID_ABOUT", wxID_ABOUT },
        { "wxIMAGE_LIST_SMALL", wxIMAGE_LIST_SMALL },
        { "wxTE_PASSWORD", wxTE_PASSWORD },
        { "wxSTC_HJ_REGEX", wxSTC_HJ_REGEX },
        { "wxNB_FIXEDWIDTH", wxNB_FIXEDWIDTH },
        { "wxSTC_P_DEFAULT", wxSTC_P_DEFAULT },
        { "wxSP_NOBORDER", wxSP_NOBORDER },
        { "wxSTC_HJA_SINGLESTRING", wxSTC_HJA_SINGLESTRING },
        { "wxSTC_FOLDLEVELWHITEFLAG", wxSTC_FOLDLEVELWHITEFLAG },
        { "wxSTC_CHARSET_CHINESEBIG5", wxSTC_CHARSET_CHINESEBIG5 },
        { "wxNO", wxNO },
        { "wxSTC_C_COMMENTLINEDOC", wxSTC_C_COMMENTLINEDOC },
        { "wxSTC_KEY_HOME", wxSTC_KEY_HOME },
        { "wxWINDING_RULE", wxWINDING_RULE },
        { "wxROP_COPYPEN", wxROP_COPYPEN },
        { "wxSTC_CMD_HOMEDISPLAY", wxSTC_CMD_HOMEDISPLAY },
        { "wxSTC_FIND_WHOLEWORD", wxSTC_FIND_WHOLEWORD },
        { "WXK_F3", WXK_F3 },
        { "wxLIST_FIND_RIGHT", wxLIST_FIND_RIGHT },
        { "wxLB_OWNERDRAW", wxLB_OWNERDRAW },
        { "wxYES_DEFAULT", wxYES_DEFAULT },
        { "wxBLIT_00220326", wxBLIT_00220326 },
        { "wxSTC_C_COMMENTDOC", wxSTC_C_COMMENTDOC },
        { "wxSTC_CASE_UPPER", wxSTC_CASE_UPPER },
        { "wxSTC_KEY_SUBTRACT", wxSTC_KEY_SUBTRACT },
        { "wxSTC_HB_NUMBER", wxSTC_HB_NUMBER },
        { "wxTC_MULTILINE", wxTC_MULTILINE },
        { "wxSTC_CMD_NEWLINE", wxSTC_CMD_NEWLINE },
        { "wxSW_BORDER", wxSW_BORDER },
        { "WXK_NUMPAD_DELETE", WXK_NUMPAD_DELETE },
        { "WXK_NUMPAD6", WXK_NUMPAD6 },
        { "wxSTC_C_IDENTIFIER", wxSTC_C_IDENTIFIER },
        { "wxSTC_NNCRONTAB_KEYWORD", wxSTC_NNCRONTAB_KEYWORD },
        { "wxSTC_CHARSET_BALTIC", wxSTC_CHARSET_BALTIC },
        { "wxID_CANCEL", wxID_CANCEL },
        { "wxSTC_KEY_BACK", wxSTC_KEY_BACK },
        { "wxSTC_CMD_EDITTOGGLEOVERTYPE", wxSTC_CMD_EDITTOGGLEOVERTYPE },
        { "WXK_NUMPAD_BEGIN", WXK_NUMPAD_BEGIN },
        { "wxSTC_LEXER_START", wxSTC_LEXER_START },
        { "wxLIST_RECT_LABEL", wxLIST_RECT_LABEL },
        { "wxHF_BOOKMARKS", wxHF_BOOKMARKS },
        { "wxICON_ASTERISK", wxICON_ASTERISK },
        { "wxLIST_STATE_CUT", wxLIST_STATE_CUT },
        { "wxMINIMIZE_BOX", wxMINIMIZE_BOX },
        { "wxTEMPLATE_INVISIBLE", wxTEMPLATE_INVISIBLE },
        { "wxSTC_INDIC_STRIKE", wxSTC_INDIC_STRIKE },
        { "wxSTC_LEX_PROPERTIES", wxSTC_LEX_PROPERTIES },
        { "wxTR_TWIST_BUTTONS", wxTR_TWIST_BUTTONS },
        { "wxHTML_UNITS_PERCENT", wxHTML_UNITS_PERCENT },
        { "wxSTC_LISP_DEFAULT", wxSTC_LISP_DEFAULT },
        { "wxSTC_HBA_STRINGEOL", wxSTC_HBA_STRINGEOL },
        { "wxID_HELP_CONTEXT", wxID_HELP_CONTEXT },
        { "WXK_F17", WXK_F17 },
        { "wxLIST_AUTOSIZE", wxLIST_AUTOSIZE },
        { "wxSTC_HBA_STRING", wxSTC_HBA_STRING },
        { "wxLC_LIST", wxLC_LIST },
        { "wxSTC_P_CLASSNAME", wxSTC_P_CLASSNAME },
        { "wxTREE_HITTEST_ONITEMICON", wxTREE_HITTEST_ONITEMICON },
        { "wxOR_REVERSE", wxOR_REVERSE },
        { "wxID_OPEN", wxID_OPEN },
        { "wxLIST_ALIGN_TOP", wxLIST_ALIGN_TOP },
        { "WXK_INSERT", WXK_INSERT },
        { "wxSTC_HJ_COMMENTDOC", wxSTC_HJ_COMMENTDOC },
        { "wxSTC_CMD_LINEUP", wxSTC_CMD_LINEUP },
        { "wxSTC_HJ_COMMENT", wxSTC_HJ_COMMENT },
        { "wxSTC_H_XCCOMMENT", wxSTC_H_XCCOMMENT },
        { "wxLB_NEEDED_SB", wxLB_NEEDED_SB },
        { "wxSTC_MARK_LCORNER", wxSTC_MARK_LCORNER },
        { "wxNB_MULTILINE", wxNB_MULTILINE },
        { "wxLIST_MASK_FORMAT", wxLIST_MASK_FORMAT },
        { "wxSTC_H_SGML_1ST_PARAM_COMMENT", wxSTC_H_SGML_1ST_PARAM_COMMENT },
        { "wxSTC_LUA_COMMENTLINE", wxSTC_LUA_COMMENTLINE },
        { "wxSTC_BAT_HIDE", wxSTC_BAT_HIDE },
        { "wxSTC_KEY_NEXT", wxSTC_KEY_NEXT },
        { "wxLC_SORT_DESCENDING", wxLC_SORT_DESCENDING },
        { "wxSTC_CMD_PAGEDOWN", wxSTC_CMD_PAGEDOWN },
        { "wxFILTER_ALPHANUMERIC", wxFILTER_ALPHANUMERIC },
        { "wxSTC_LUA_STRINGEOL", wxSTC_LUA_STRINGEOL },
        { "WXK_CAPITAL", WXK_CAPITAL },
        { "wxSTC_L_DEFAULT", wxSTC_L_DEFAULT },
        { "wxTC_BOTTOM", wxTC_BOTTOM },
        { "wxLC_USER_TEXT", wxLC_USER_TEXT },
        { "wxSTC_HBA_WORD", wxSTC_HBA_WORD },
        { "wxLIST_NEXT_RIGHT", wxLIST_NEXT_RIGHT },
        { "wxSTC_CMD_DOCUMENTENDEXTEND", wxSTC_CMD_DOCUMENTENDEXTEND },
        { "wxSTC_CHARSET_DEFAULT", wxSTC_CHARSET_DEFAULT },
        { "wxMM_ISOTROPIC", wxMM_ISOTROPIC },
        { "wxLIST_FIND_LEFT", wxLIST_FIND_LEFT },
        { "WXK_RIGHT", WXK_RIGHT },
        { "FL_ALIGN_RIGHT_PANE", FL_ALIGN_RIGHT_PANE },
        { "wxSTC_B_KEYWORD", wxSTC_B_KEYWORD },
        { "wxID_COPY", wxID_COPY },
        { "wxID_SELECTALL", wxID_SELECTALL },
        { "wxID_MORE", wxID_MORE },
        { "wxSP_SASH_AQUA", wxSP_SASH_AQUA },
        { "WXK_HOME", WXK_HOME },
        { "wxCB_SIMPLE", wxCB_SIMPLE },
        { "wxS_IWUSR", wxS_IWUSR },
        { "wxSTC_C_STRING", wxSTC_C_STRING },
        { "wxSTC_MARGIN_NUMBER", wxSTC_MARGIN_NUMBER },
        { "wxSTC_CMD_CUT", wxSTC_CMD_CUT },
        { "wxJOIN_ROUND", wxJOIN_ROUND },
        { "wxSTC_H_SGML_COMMAND", wxSTC_H_SGML_COMMAND },
        { "wxSTC_HP_NUMBER", wxSTC_HP_NUMBER },
        { "wxGRIDTABLE_NOTIFY_COLS_INSERTED", wxGRIDTABLE_NOTIFY_COLS_INSERTED },
        { "WXK_END", WXK_END },
        { "wxLIST_ALIGN_SNAP_TO_GRID", wxLIST_ALIGN_SNAP_TO_GRID },
        { "wxHTML_INDENT_VERTICAL", wxHTML_INDENT_VERTICAL },
        { "wxTR_MULTIPLE", wxTR_MULTIPLE },
        { "wxSTC_HPA_IDENTIFIER", wxSTC_HPA_IDENTIFIER },
        { "wxID_FILE8", wxID_FILE8 },
        { "wxVSCROLL", wxVSCROLL },
        { "wxIMAGELIST_DRAW_TRANSPARENT", wxIMAGELIST_DRAW_TRANSPARENT },
        { "wxSTC_C_CHARACTER", wxSTC_C_CHARACTER },
        { "wxSTC_CARET_JUMPS", wxSTC_CARET_JUMPS },
        { "wxSTC_PERFORMED_REDO", wxSTC_PERFORMED_REDO },
        { "wxALL_PANES", wxALL_PANES },
        { "WXK_F16", WXK_F16 },
        { "wxSTC_HPHP_OPERATOR", wxSTC_HPHP_OPERATOR },
        { "wxSTC_ERR_PYTHON", wxSTC_ERR_PYTHON },
        { "wxSOUND_ASYNC", wxSOUND_ASYNC },
        { "wxSTC_MARK_ROUNDRECT", wxSTC_MARK_ROUNDRECT },
        { "wxSTC_AVE_OPERATOR", wxSTC_AVE_OPERATOR },
        { "wxID_FORWARD", wxID_FORWARD },
        { "wxSTC_HPA_COMMENTLINE", wxSTC_HPA_COMMENTLINE },
        { "wxBOTH", wxBOTH },
        { "wxTREE_HITTEST_ONITEMRIGHT", wxTREE_HITTEST_ONITEMRIGHT },
        { "wxSTC_CMD_DELETEBACK", wxSTC_CMD_DELETEBACK },
        { "wxSTC_WRAP_WORD", wxSTC_WRAP_WORD },
        { "wxSTC_HP_START", wxSTC_HP_START },
        { "wxSTC_CMD_LINESCROLLUP", wxSTC_CMD_LINESCROLLUP },
        { "LO_HORIZONTAL", LO_HORIZONTAL },
        { "wxSTC_H_SGML_SPECIAL", wxSTC_H_SGML_SPECIAL },
        { "WXK_NUMPAD4", WXK_NUMPAD4 },
        { "wxDOC_NEW", wxDOC_NEW },
        { "wxHTML_INDENT_BOTTOM", wxHTML_INDENT_BOTTOM },
        { "wxROP_MASKNOTPEN", wxROP_MASKNOTPEN },
        { "wxDEFAULT_DIALOG_STYLE", wxDEFAULT_DIALOG_STYLE },
        { "wxGRIDTABLE_NOTIFY_ROWS_INSERTED", wxGRIDTABLE_NOTIFY_ROWS_INSERTED },
        { "wxSTC_H_ASPAT", wxSTC_H_ASPAT },
        { "wxSTC_MARKNUM_FOLDEREND", wxSTC_MARKNUM_FOLDEREND },
        { "wxSTC_OPTIONAL_START", wxSTC_OPTIONAL_START },
        { "wxDIR_DIRS", wxDIR_DIRS },
        { "wxSTC_MARK_LCORNERCURVE", wxSTC_MARK_LCORNERCURVE },
        { "wxLB_SORT", wxLB_SORT },
        { "wxSTC_H_VALUE", wxSTC_H_VALUE },
        { "FL_ALIGN_RIGHT", FL_ALIGN_RIGHT },
        { "WXK_NUMPAD_SEPARATOR", WXK_NUMPAD_SEPARATOR },
        { "wxSTC_CHARSET_EASTEUROPE", wxSTC_CHARSET_EASTEUROPE },
        { "wxSTC_CMD_LINEENDEXTEND", wxSTC_CMD_LINEENDEXTEND },
        { "wxLC_MASK_ALIGN", wxLC_MASK_ALIGN },
        { "wxSTC_CMD_LINESCROLLDOWN", wxSTC_CMD_LINESCROLLDOWN },
        { "wxSTC_CHARSET_SYMBOL", wxSTC_CHARSET_SYMBOL },
        { "WXK_NUMPAD_HOME", WXK_NUMPAD_HOME },
        { "wxTOOL_STYLE_BUTTON", wxTOOL_STYLE_BUTTON },
        { "wxSTC_BAAN_IDENTIFIER", wxSTC_BAAN_IDENTIFIER },
        { "wxCLIP_CHILDREN", wxCLIP_CHILDREN },
        { "wxSTC_CMD_HOMEEXTEND", wxSTC_CMD_HOMEEXTEND },
        { "wxTE_DONTWRAP", wxTE_DONTWRAP },
        { "wxSTC_TIME_FOREVER", wxSTC_TIME_FOREVER },
        { "wxSL_BOTH", wxSL_BOTH },
        { "wxSTC_LEX_EIFFEL", wxSTC_LEX_EIFFEL },
        { "wxTR_DEFAULT_STYLE", wxTR_DEFAULT_STYLE },
        { "wxSTC_HP_TRIPLEDOUBLE", wxSTC_HP_TRIPLEDOUBLE },
        { "wxSTC_H_COMMENT", wxSTC_H_COMMENT },
        { "WXK_F21", WXK_F21 },
        { "wxOK", wxOK },
        { "wxSTC_BAT_COMMENT", wxSTC_BAT_COMMENT },
        { "wxFIXED_LENGTH", wxFIXED_LENGTH },
        { "wxSTC_CMD_CHARLEFTEXTEND", wxSTC_CMD_CHARLEFTEXTEND },
        { "wxSTC_MARK_CIRCLEPLUSCONNECTED", wxSTC_MARK_CIRCLEPLUSCONNECTED },
        { "wxTREE_HITTEST_ONITEMUPPERPART", wxTREE_HITTEST_ONITEMUPPERPART },
        { "WXK_NUMPAD_DOWN", WXK_NUMPAD_DOWN },
        { "WXK_F6", WXK_F6 },
        { "wxSTC_CHARSET_THAI", wxSTC_CHARSET_THAI },
        { "wxSTC_EDGE_BACKGROUND", wxSTC_EDGE_BACKGROUND },
        { "wxSTC_NNCRONTAB_COMMENT", wxSTC_NNCRONTAB_COMMENT },
        { "wxSTC_C_COMMENTDOCKEYWORDERROR", wxSTC_C_COMMENTDOCKEYWORDERROR },
        { "wxSTC_PL_STRING_QR", wxSTC_PL_STRING_QR },
        { "wxSL_BOTTOM", wxSL_BOTTOM },
        { "WXK_CONTROL", WXK_CONTROL },
        { "WXK_PRIOR", WXK_PRIOR },
        { "WXK_START", WXK_START },
        { "wxLIST_HITTEST_TOLEFT", wxLIST_HITTEST_TOLEFT },
        { "wxS_IROTH", wxS_IROTH },
        { "wxNB_BOTTOM", wxNB_BOTTOM },
        { "wxALIGN_CENTRE", wxALIGN_CENTRE },
        { "wxSTC_MAKE_OPERATOR", wxSTC_MAKE_OPERATOR },
        { "wxSTC_BAT_OPERATOR", wxSTC_BAT_OPERATOR },
        { "wxSTC_EOL_LF", wxSTC_EOL_LF },
        { "wxSTC_LUA_CHARACTER", wxSTC_LUA_CHARACTER },
        { "WXK_F22", WXK_F22 },
        { "wxSTC_CMD_DOCUMENTSTARTEXTEND", wxSTC_CMD_DOCUMENTSTARTEXTEND },
        { "wxLIST_HITTEST_ONITEMSTATEICON", wxLIST_HITTEST_ONITEMSTATEICON },
        { "wxSTC_LUA_DEFAULT", wxSTC_LUA_DEFAULT },
        { "wxSTC_SCMOD_CTRL", wxSTC_SCMOD_CTRL },
        { "wxSTC_C_WORD", wxSTC_C_WORD },
        { "wxHTML_ALIGN_CENTER", wxHTML_ALIGN_CENTER },
        { "wxBLIT_NOTSCRCOPY", wxBLIT_NOTSCRCOPY },
        { "wxSTC_EOL_CRLF", wxSTC_EOL_CRLF },
        { "wxSTC_MOD_CHANGESTYLE", wxSTC_MOD_CHANGESTYLE },
        { "wxSTC_B_DATE", wxSTC_B_DATE },
        { "wxSTC_LUA_OPERATOR", wxSTC_LUA_OPERATOR },
        { "wxSTC_PL_STRING_QW", wxSTC_PL_STRING_QW },
        { "wxSTC_KEY_UP", wxSTC_KEY_UP },
        { "wxSP_VERTICAL", wxSP_VERTICAL },
        { "wxID_UNDO", wxID_UNDO },
        { "wxHF_PRINT", wxHF_PRINT },
        { "wxROP_MERGEPEN", wxROP_MERGEPEN },
        { "wxSTC_MOD_CHANGEMARKER", wxSTC_MOD_CHANGEMARKER },
        { "wxSTC_CMD_CHARLEFT", wxSTC_CMD_CHARLEFT },
        { "wxSOUND_LOOP", wxSOUND_LOOP },
        { "wxSTC_AVE_WORD", wxSTC_AVE_WORD },
        { "wxFRAME_FLOAT_ON_PARENT", wxFRAME_FLOAT_ON_PARENT },
        { "wxSTC_CMD_PAGEUPEXTEND", wxSTC_CMD_PAGEUPEXTEND },
        { "wxSTC_CARET_STRICT", wxSTC_CARET_STRICT },
        { "wxTE_PROCESS_TAB", wxTE_PROCESS_TAB },
        { "wxSTC_MARK_CIRCLEPLUS", wxSTC_MARK_CIRCLEPLUS },
        { "wxID_EXIT", wxID_EXIT },
        { "FL_ALIGN_TOP", FL_ALIGN_TOP },
        { "wxSTC_MARK_TCORNERCURVE", wxSTC_MARK_TCORNERCURVE },
        { "WXK_DELETE", WXK_DELETE },
        { "wxSTC_LUA_IDENTIFIER", wxSTC_LUA_IDENTIFIER },
        { "wxSTC_MARK_SHORTARROW", wxSTC_MARK_SHORTARROW },
        { "wxSTC_HJA_REGEX", wxSTC_HJA_REGEX },
        { "wxSTC_H_SGML_BLOCK_DEFAULT", wxSTC_H_SGML_BLOCK_DEFAULT },
        { "wxSTC_BAT_COMMAND", wxSTC_BAT_COMMAND },
        { "wxSTC_HP_DEFAULT", wxSTC_HP_DEFAULT },
        { "wxSTC_HPA_OPERATOR", wxSTC_HPA_OPERATOR },
        { "wxGRIDTABLE_NOTIFY_ROWS_APPENDED", wxGRIDTABLE_NOTIFY_ROWS_APPENDED },
        { "wxSTC_CONF_IDENTIFIER", wxSTC_CONF_IDENTIFIER },
        { "wxSTC_CMD_WORDLEFT", wxSTC_CMD_WORDLEFT },
        { "wxSTC_MARK_BOXPLUS", wxSTC_MARK_BOXPLUS },
        { "wxSTC_CMD_PASTE", wxSTC_CMD_PASTE },
        { "wxUSER_DASH", wxUSER_DASH },
        { "wxSTC_CMD_DOCUMENTSTART", wxSTC_CMD_DOCUMENTSTART },
        { "wxSTC_H_DOUBLESTRING", wxSTC_H_DOUBLESTRING },
        { "wxLIST_HITTEST_TORIGHT", wxLIST_HITTEST_TORIGHT },
        { "wxDIALOG_NO_PARENT", wxDIALOG_NO_PARENT },
        { "wxGTK", wxGTK },
        { "wxTE_WORDWRAP", wxTE_WORDWRAP },
        { "wxBU_LEFT", wxBU_LEFT },
        { "wxHF_MERGE_BOOKS", wxHF_MERGE_BOOKS },
        { "wxSIZE_USE_EXISTING", wxSIZE_USE_EXISTING },
        { "wxSTC_MARKNUM_FOLDEROPENMID", wxSTC_MARKNUM_FOLDEROPENMID },
        { "wxSTC_CMD_DELWORDRIGHT", wxSTC_CMD_DELWORDRIGHT },
        { "wxSTC_ERR_BORLAND", wxSTC_ERR_BORLAND },
        { "WXK_CLEAR", WXK_CLEAR },
        { "WXK_NUMPAD_SPACE", WXK_NUMPAD_SPACE },
        { "wxLIST_FIND_DOWN", wxLIST_FIND_DOWN },
        { "wxSTC_WS_VISIBLEALWAYS", wxSTC_WS_VISIBLEALWAYS },
        { "wxS_IRUSR", wxS_IRUSR },
        { "wxLIST_STATE_FOCUSED", wxLIST_STATE_FOCUSED },
        { "wxBLIT_BLACKNESS", wxBLIT_BLACKNESS },
        { "wxSTC_MARK_EMPTY", wxSTC_MARK_EMPTY },
        { "LO_FIT_TO_WINDOW", LO_FIT_TO_WINDOW },
        { "wxWANTS_CHARS", wxWANTS_CHARS },
        { "wxFILTER_ASCII", wxFILTER_ASCII },
        { "wxHTML_ALIGN_LEFT", wxHTML_ALIGN_LEFT },
        { "wxLIST_HITTEST_BELOW", wxLIST_HITTEST_BELOW },
        { "wxSTC_H_XMLSTART", wxSTC_H_XMLSTART },
        { "wxTR_ROW_LINES", wxTR_ROW_LINES },
        { "wxTB_HORIZONTAL", wxTB_HORIZONTAL },
        { "wxSTC_HJ_STRINGEOL", wxSTC_HJ_STRINGEOL },
        { "wxLB_HSCROLL", wxLB_HSCROLL },
        { "wxLC_SMALL_ICON", wxLC_SMALL_ICON },
        { "wxSTC_C_UUID", wxSTC_C_UUID },
        { "wxROP_NOT", wxROP_NOT },
        { "wxMM_POINTS", wxMM_POINTS },
        { "wxFRAME_TOOL_WINDOW", wxFRAME_TOOL_WINDOW },
        { "wxS_IWOTH", wxS_IWOTH },
        { "wxSTC_CMD_CHARRIGHT", wxSTC_CMD_CHARRIGHT },
        { "wxMORE", wxMORE },
        { "wxPATH_GET_SEPARATOR", wxPATH_GET_SEPARATOR },
        { "wxSTC_CURSORWAIT", wxSTC_CURSORWAIT },
        { "wxID_LOWEST", wxID_LOWEST },
        { "wxIMAGELIST_DRAW_FOCUSED", wxIMAGELIST_DRAW_FOCUSED },
        { "wxSTC_FOLDLEVELNUMBERMASK", wxSTC_FOLDLEVELNUMBERMASK },
        { "wxSTC_HJ_SYMBOLS", wxSTC_HJ_SYMBOLS },
        { "wxSTC_MARK_TCORNER", wxSTC_MARK_TCORNER },
        { "wxTB_3DBUTTONS", wxTB_3DBUTTONS },
        { "wxROP_MASKPEN", wxROP_MASKPEN },
        { "wxSTC_PL_DEFAULT", wxSTC_PL_DEFAULT },
        { "wxSTC_NNCRONTAB_DEFAULT", wxSTC_NNCRONTAB_DEFAULT },
        { "wxSTC_LEX_AVE", wxSTC_LEX_AVE },
        { "wxRAISED_BORDER", wxRAISED_BORDER },
        { "wxSTC_MARK_BOXMINUSCONNECTED", wxSTC_MARK_BOXMINUSCONNECTED },
        { "wxSTC_LEX_HTML", wxSTC_LEX_HTML },
        { "wxSTC_PROPS_DEFAULT", wxSTC_PROPS_DEFAULT },
        { "wxLIST_HITTEST_ABOVE", wxLIST_HITTEST_ABOVE },
        { "wxLC_AUTOARRANGE", wxLC_AUTOARRANGE },
        { "WXK_DECIMAL", WXK_DECIMAL },
        { "wxTB_FLAT", wxTB_FLAT },
        { "wxSP_WRAP", wxSP_WRAP },
        { "wxSTC_H_XMLEND", wxSTC_H_XMLEND },
        { "wxID_FILE3", wxID_FILE3 },
        { "wxMM_HIENGLISH", wxMM_HIENGLISH },
        { "WXK_NUMPAD_ADD", WXK_NUMPAD_ADD },
        { "wxSTC_MARKNUM_FOLDERMIDTAIL", wxSTC_MARKNUM_FOLDERMIDTAIL },
        { "wxSTC_PL_WORD", wxSTC_PL_WORD },
        { "wxID_STATIC", wxID_STATIC },
        { "wxTB_VERTICAL", wxTB_VERTICAL },
        { "wxSTC_HPA_STRING", wxSTC_HPA_STRING },
        { "wxSTC_FIND_WORDSTART", wxSTC_FIND_WORDSTART },
        { "wxSTC_H_SGML_COMMENT", wxSTC_H_SGML_COMMENT },
        { "wxSTC_LISP_NUMBER", wxSTC_LISP_NUMBER },
        { "WXK_SHIFT", WXK_SHIFT },
        { "wxSTC_CMD_LINETRANSPOSE", wxSTC_CMD_LINETRANSPOSE },
        { "wxXVIEW_X", wxXVIEW_X },
        { "wxSTC_INDIC_MAX", wxSTC_INDIC_MAX },
        { "WXK_NUMPAD_LEFT", WXK_NUMPAD_LEFT },
        { "wxSTC_MATLAB_IDENTIFIER", wxSTC_MATLAB_IDENTIFIER },
        { "wxSTC_MATLAB_STRING", wxSTC_MATLAB_STRING },
        { "wxID_CUT", wxID_CUT },
        { "wxSTC_AVE_ENUM", wxSTC_AVE_ENUM },
        { "wxSTC_MARKNUM_FOLDERTAIL", wxSTC_MARKNUM_FOLDERTAIL },
        { "wxSTC_PROPS_SECTION", wxSTC_PROPS_SECTION },
        { "wxAND", wxAND },
        { "wxROP_NOTMASKPEN", wxROP_NOTMASKPEN },
        { "wxSTC_PL_LONGQUOTE", wxSTC_PL_LONGQUOTE },
        { "wxBU_BOTTOM", wxBU_BOTTOM },
        { "wxSTC_LUA_WORD3", wxSTC_LUA_WORD3 },
        { "wxSTC_PRINT_COLOURONWHITE", wxSTC_PRINT_COLOURONWHITE },
        { "wxSTC_MATLAB_COMMENT", wxSTC_MATLAB_COMMENT },
        { "wxCOLOURED", wxCOLOURED },
        { "wxAND_INVERT", wxAND_INVERT },
        { "wxSTC_NNCRONTAB_IDENTIFIER", wxSTC_NNCRONTAB_IDENTIFIER },
        { "wxSTC_CARET_SLOP", wxSTC_CARET_SLOP },
        { "wxSTC_H_ATTRIBUTEUNKNOWN", wxSTC_H_ATTRIBUTEUNKNOWN },
        { "wxSTC_NNCRONTAB_STRING", wxSTC_NNCRONTAB_STRING },
        { "wxSTC_C_VERBATIM", wxSTC_C_VERBATIM },
        { "wxSTC_NNCRONTAB_ASTERISK", wxSTC_NNCRONTAB_ASTERISK },
        { "WXK_F20", WXK_F20 },
        { "wxSTC_NNCRONTAB_SECTION", wxSTC_NNCRONTAB_SECTION },
        { "wxSTC_KEY_LEFT", wxSTC_KEY_LEFT },
        { "wxSTC_MASK_FOLDERS", wxSTC_MASK_FOLDERS },
        { "wxID_DUPLICATE", wxID_DUPLICATE },
        { "wxSTC_NNCRONTAB_TASK", wxSTC_NNCRONTAB_TASK },
        { "wxSTC_EIFFEL_STRINGEOL", wxSTC_EIFFEL_STRINGEOL },
        { "wxSTC_LEX_CONF", wxSTC_LEX_CONF },
        { "wxSTC_CACHE_DOCUMENT", wxSTC_CACHE_DOCUMENT },
        { "wxSTC_HB_STRINGEOL", wxSTC_HB_STRINGEOL },
        { "wxSTC_EIFFEL_STRING", wxSTC_EIFFEL_STRING },
        { "wxSTC_EIFFEL_WORD", wxSTC_EIFFEL_WORD },
        { "wxSTC_EIFFEL_NUMBER", wxSTC_EIFFEL_NUMBER },
        { "wxSTC_EIFFEL_COMMENTLINE", wxSTC_EIFFEL_COMMENTLINE },
        { "wxSTC_EIFFEL_DEFAULT", wxSTC_EIFFEL_DEFAULT },
        { "wxSTC_LISP_OPERATOR", wxSTC_LISP_OPERATOR },
        { "wxSTC_LISP_IDENTIFIER", wxSTC_LISP_IDENTIFIER },
        { "wxSTC_LISP_STRING", wxSTC_LISP_STRING },
        { "wxSTC_CHARSET_OEM", wxSTC_CHARSET_OEM },
        { "wxSTC_LISP_COMMENT", wxSTC_LISP_COMMENT },
        { "wxSTC_BAAN_WORD2", wxSTC_BAAN_WORD2 },
        { "wxTINY_CAPTION_HORIZ", wxTINY_CAPTION_HORIZ },
        { "wxSTC_BAAN_STRINGEOL", wxSTC_BAAN_STRINGEOL },
        { "wxSTC_MAKE_TARGET", wxSTC_MAKE_TARGET },
        { "wxSTC_HJA_START", wxSTC_HJA_START },
        { "wxSTC_BAAN_PREPROCESSOR", wxSTC_BAAN_PREPROCESSOR },
        { "wxLIST_MASK_DATA", wxLIST_MASK_DATA },
        { "wxSTC_BAAN_STRING", wxSTC_BAAN_STRING },
        { "wxPROCESS_ENTER", wxPROCESS_ENTER },
        { "wxTREE_HITTEST_ONITEMLABEL", wxTREE_HITTEST_ONITEMLABEL },
        { "wxSTC_BAAN_WORD", wxSTC_BAAN_WORD },
        { "wxCB_READONLY", wxCB_READONLY },
        { "wxSTC_BAAN_NUMBER", wxSTC_BAAN_NUMBER },
        { "wxSTC_BAAN_COMMENTDOC", wxSTC_BAAN_COMMENTDOC },
        { "wxSTC_ADA_STRINGEOL", wxSTC_ADA_STRINGEOL },
        { "wxSTC_ADA_IDENTIFIER", wxSTC_ADA_IDENTIFIER },
        { "wxHTML_INDENT_RIGHT", wxHTML_INDENT_RIGHT },
        { "wxSTC_ADA_CHARACTER", wxSTC_ADA_CHARACTER },
        { "wxID_FILE2", wxID_FILE2 },
        { "wxSTC_ADA_WORD", wxSTC_ADA_WORD },
        { "wxSTC_ADA_NUMBER", wxSTC_ADA_NUMBER },
        { "wxSTC_ADA_DEFAULT", wxSTC_ADA_DEFAULT },
        { "wxSTC_AVE_IDENTIFIER", wxSTC_AVE_IDENTIFIER },
        { "wxSTC_ERR_DEFAULT", wxSTC_ERR_DEFAULT },
        { "wxID_SAVEAS", wxID_SAVEAS },
        { "wxSTC_MARKNUM_FOLDER", wxSTC_MARKNUM_FOLDER },
        { "wxSTC_LEX_PYTHON", wxSTC_LEX_PYTHON },
        { "wxSTC_AVE_STRING", wxSTC_AVE_STRING },
        { "WXK_ADD", WXK_ADD },
        { "wxSTC_WS_INVISIBLE", wxSTC_WS_INVISIBLE },
        { "wxSTC_AVE_COMMENT", wxSTC_AVE_COMMENT },
        { "wxMINIMIZE", wxMINIMIZE },
        { "wxSTC_CONF_DIRECTIVE", wxSTC_CONF_DIRECTIVE },
        { "wxSTC_CONF_IP", wxSTC_CONF_IP },
        { "wxRA_SPECIFY_COLS", wxRA_SPECIFY_COLS },
        { "wxSTC_LEX_ADA", wxSTC_LEX_ADA },
        { "wxTC_RIGHT", wxTC_RIGHT },
        { "wxMAXIMIZE_BOX", wxMAXIMIZE_BOX },
        { "wxSTC_LEX_SQL", wxSTC_LEX_SQL },
        { "wxSTC_EIFFEL_CHARACTER", wxSTC_EIFFEL_CHARACTER },
        { "wxSTC_HPHP_COMMENT", wxSTC_HPHP_COMMENT },
        { "wxSTC_DIFF_HEADER", wxSTC_DIFF_HEADER },
        { "wxSTC_DIFF_COMMAND", wxSTC_DIFF_COMMAND },
        { "wxSTC_BAAN_OPERATOR", wxSTC_BAAN_OPERATOR },
        { "wxSTC_MAKE_IDENTIFIER", wxSTC_MAKE_IDENTIFIER },
        { "wxSTC_LEX_ERRORLIST", wxSTC_LEX_ERRORLIST },
        { "wxSTC_MAKE_PREPROCESSOR", wxSTC_MAKE_PREPROCESSOR },
        { "wxLIST_RECT_BOUNDS", wxLIST_RECT_BOUNDS },
        { "wxSTC_C_COMMENTLINE", wxSTC_C_COMMENTLINE },
        { "wxSTC_B_STRING", wxSTC_B_STRING },
        { "wxROP_MERGEPENNOT", wxROP_MERGEPENNOT },
        { "wxSTC_BAT_IDENTIFIER", wxSTC_BAT_IDENTIFIER },
        { "wxSB_HORIZONTAL", wxSB_HORIZONTAL },
        { "wxLIST_NEXT_BELOW", wxLIST_NEXT_BELOW },
        { "wxSTC_ERR_DIFF_ADDITION", wxSTC_ERR_DIFF_ADDITION },
        { "wxS_IWGRP", wxS_IWGRP },
        { "wxSTC_ERR_CTAG", wxSTC_ERR_CTAG },
        { "wxSTC_ERR_DIFF_CHANGED", wxSTC_ERR_DIFF_CHANGED },
        { "wxSTC_KEY_DIVIDE", wxSTC_KEY_DIVIDE },
        { "wxSTC_ERR_LUA", wxSTC_ERR_LUA },
        { "WXK_MENU", WXK_MENU },
        { "wxSTC_ERR_PERL", wxSTC_ERR_PERL },
        { "wxGRIDTABLE_REQUEST_VIEW_GET_VALUES", wxGRIDTABLE_REQUEST_VIEW_GET_VALUES },
        { "wxSTC_ERR_CMD", wxSTC_ERR_CMD },
        { "wxSTC_ERR_MS", wxSTC_ERR_MS },
        { "wxSTC_ERR_GCC", wxSTC_ERR_GCC },
        { "wxSTC_LUA_WORD6", wxSTC_LUA_WORD6 },
        { "wxSTC_LUA_WORD5", wxSTC_LUA_WORD5 },
        { "wxFILTER_INCLUDE_LIST", wxFILTER_INCLUDE_LIST },
        { "wxSTC_MATLAB_NUMBER", wxSTC_MATLAB_NUMBER },
        { "wxOR", wxOR },
        { "wxSTC_LUA_WORD2", wxSTC_LUA_WORD2 },
        { "FL_ALIGN_BOTTOM", FL_ALIGN_BOTTOM },
        { "wxSTC_LUA_PREPROCESSOR", wxSTC_LUA_PREPROCESSOR },
        { "wxROP_WHITE", wxROP_WHITE },
        { "wxSTC_LUA_STRING", wxSTC_LUA_STRING },
        { "wxSTC_CHARSET_HANGUL", wxSTC_CHARSET_HANGUL },
        { "wxTREE_HITTEST_BELOW", wxTREE_HITTEST_BELOW },
        { "wxLIST_MASK_WIDTH", wxLIST_MASK_WIDTH },
        { "wxSTC_LUA_WORD", wxSTC_LUA_WORD },
        { "wxSOLID", wxSOLID },
        { "wxSTC_LUA_COMMENTDOC", wxSTC_LUA_COMMENTDOC },
        { "wxBLIT_00AA0029", wxBLIT_00AA0029 },
        { "wxSTC_LUA_COMMENT", wxSTC_LUA_COMMENT },
        { "wxSTC_L_COMMENT", wxSTC_L_COMMENT },
        { "wxSTC_L_MATH", wxSTC_L_MATH },
        { "wxSET", wxSET },
        { "wxLIST_ALIGN_LEFT", wxLIST_ALIGN_LEFT },
        { "wxSTC_PROPS_COMMENT", wxSTC_PROPS_COMMENT },
        { "wxRB_SINGLE", wxRB_SINGLE },
        { "wxROP_MASKPENNOT", wxROP_MASKPENNOT },
        { "wxSTC_B_OPERATOR", wxSTC_B_OPERATOR },
        { "wxSTC_B_NUMBER", wxSTC_B_NUMBER },
        { "wxSTC_B_DEFAULT", wxSTC_B_DEFAULT },
        { "wxSTC_H_DEFAULT", wxSTC_H_DEFAULT },
        { "wxNAND", wxNAND },
        { "wxSTC_PL_STRING_QQ", wxSTC_PL_STRING_QQ },
        { "wxSTC_PL_HERE_QX", wxSTC_PL_HERE_QX },
        { "WXK_SUBTRACT", WXK_SUBTRACT },
        { "wxSTC_PL_STRING_Q", wxSTC_PL_STRING_Q },
        { "wxSTC_PL_HERE_DELIM", wxSTC_PL_HERE_DELIM },
        { "wxSTC_PL_DATASECTION", wxSTC_PL_DATASECTION },
        { "wxSTC_HP_STRING", wxSTC_HP_STRING },
        { "wxSTC_PL_BACKTICKS", wxSTC_PL_BACKTICKS },
        { "wxSTC_LEX_CONTAINER", wxSTC_LEX_CONTAINER },
        { "wxSTC_LEX_CPP", wxSTC_LEX_CPP },
        { "wxSTC_PL_ARRAY", wxSTC_PL_ARRAY },
        { "wxSTC_LEX_VBSCRIPT", wxSTC_LEX_VBSCRIPT },
        { "wxROP_NOP", wxROP_NOP },
        { "wxTB_DOCKABLE", wxTB_DOCKABLE },
        { "wxSTC_PL_HASH", wxSTC_PL_HASH },
        { "wxSTC_PL_SYMBOLTABLE", wxSTC_PL_SYMBOLTABLE },
        { "wxSTC_PL_SCALAR", wxSTC_PL_SCALAR },
        { "wxSTC_PL_IDENTIFIER", wxSTC_PL_IDENTIFIER },
        { "wxCAP_BUTT", wxCAP_BUTT },
        { "wxICON_STOP", wxICON_STOP },
        { "wxSTC_PL_OPERATOR", wxSTC_PL_OPERATOR },
        { "WXK_NUMPAD_DECIMAL", WXK_NUMPAD_DECIMAL },
        { "wxCLOSE_BOX", wxCLOSE_BOX },
        { "wxSTATIC_BORDER", wxSTATIC_BORDER },
        { "wxTREE_HITTEST_ONITEM", wxTREE_HITTEST_ONITEM },
        { "wxID_NO", wxID_NO },
        { "wxDEFAULT_FRAME_STYLE", wxDEFAULT_FRAME_STYLE },
        { "wxID_RESET", wxID_RESET },
        { "wxSTC_PL_CHARACTER", wxSTC_PL_CHARACTER },
        { "wxSTC_HP_IDENTIFIER", wxSTC_HP_IDENTIFIER },
        { "wxMM_HIMETRIC", wxMM_HIMETRIC },
        { "wxSTC_HPHP_HSTRING_VARIABLE", wxSTC_HPHP_HSTRING_VARIABLE },
        { "wxSTC_MARK_ARROWS", wxSTC_MARK_ARROWS },
        { "wxHTML_INDENT_HORIZONTAL", wxHTML_INDENT_HORIZONTAL },
        { "wxPD_APP_MODAL", wxPD_APP_MODAL },
        { "wxRB_GROUP", wxRB_GROUP },
        { "wxSTC_PL_POD", wxSTC_PL_POD },
        { "wxSTC_PL_COMMENTLINE", wxSTC_PL_COMMENTLINE },
        { "wxTB_NOICONS", wxTB_NOICONS },
        { "wxSTC_MARK_DOTDOTDOT", wxSTC_MARK_DOTDOTDOT },
        { "wxSTC_HPHP_COMMENTLINE", wxSTC_HPHP_COMMENTLINE },
        { "wxSTC_MATLAB_COMMAND", wxSTC_MATLAB_COMMAND },
        { "wxIMAGE_LIST_NORMAL", wxIMAGE_LIST_NORMAL },
        { "wxSTC_HPHP_VARIABLE", wxSTC_HPHP_VARIABLE },
        { "wxHTML_INDENT_LEFT", wxHTML_INDENT_LEFT },
        { "wxNO_OP", wxNO_OP },
        { "wxSTC_HPHP_WORD", wxSTC_HPHP_WORD },
        { "wxIMAGELIST_DRAW_NORMAL", wxIMAGELIST_DRAW_NORMAL },
        { "wxMM_LOENGLISH", wxMM_LOENGLISH },
        { "wxSTC_HPHP_HSTRING", wxSTC_HPHP_HSTRING },
        { "wxHF_FLAT_TOOLBAR", wxHF_FLAT_TOOLBAR },
        { "wxPD_REMAINING_TIME", wxPD_REMAINING_TIME },
        { "wxSTC_MARK_PLUS", wxSTC_MARK_PLUS },
        { "wxSTC_HPA_DEFNAME", wxSTC_HPA_DEFNAME },
        { "wxID_APPLY", wxID_APPLY },
        { "wxSTC_HPA_CLASSNAME", wxSTC_HPA_CLASSNAME },
        { "wxID_PASTE", wxID_PASTE },
        { "wxSTC_HPA_TRIPLEDOUBLE", wxSTC_HPA_TRIPLEDOUBLE },
        { "wxICON_EXCLAMATION", wxICON_EXCLAMATION },
        { "wxSTC_LUA_WORD4", wxSTC_LUA_WORD4 },
        { "FL_ALIGN_LEFT_PANE", FL_ALIGN_LEFT_PANE },
        { "wxSTC_HPA_TRIPLE", wxSTC_HPA_TRIPLE },
        { "wxSTC_HPA_WORD", wxSTC_HPA_WORD },
        { "wxICON_MASK", wxICON_MASK },
        { "wxSTC_HPA_CHARACTER", wxSTC_HPA_CHARACTER },
        { "wxSTC_VISIBLE_SLOP", wxSTC_VISIBLE_SLOP },
        { "wxSTC_HPA_NUMBER", wxSTC_HPA_NUMBER },
        { "wxSTC_INDIC1_MASK", wxSTC_INDIC1_MASK },
        { "wxSIZE_AUTO", wxSIZE_AUTO },
        { "wxSTC_C_REGEX", wxSTC_C_REGEX },
        { "wxHF_DEFAULT_STYLE", wxHF_DEFAULT_STYLE },
        { "wxSTC_MARK_CIRCLE", wxSTC_MARK_CIRCLE },
        { "wxBLIT_DSTINVERT", wxBLIT_DSTINVERT },
        { "wxGA_PROGRESSBAR", wxGA_PROGRESSBAR },
        { "wxLB_MULTIPLE", wxLB_MULTIPLE },
        { "wxSTC_HP_DEFNAME", wxSTC_HP_DEFNAME },
        { "wxTR_HIDE_ROOT", wxTR_HIDE_ROOT },
        { "wxSTC_HP_TRIPLE", wxSTC_HP_TRIPLE },
        { "wxSTC_MARK_ARROWDOWN", wxSTC_MARK_ARROWDOWN },
        { "wxSTC_HP_CHARACTER", wxSTC_HP_CHARACTER },
        { "wxSTC_HP_COMMENTLINE", wxSTC_HP_COMMENTLINE },
        { "wxSTC_HBA_IDENTIFIER", wxSTC_HBA_IDENTIFIER },
        { "wxSTC_HBA_NUMBER", wxSTC_HBA_NUMBER },
        { "WXK_PRINT", WXK_PRINT },
        { "WXK_NUMPAD8", WXK_NUMPAD8 },
        { "wxSTC_STYLE_LINENUMBER", wxSTC_STYLE_LINENUMBER },
        { "wxTC_TOP", wxTC_TOP },
        { "wxSTC_HBA_START", wxSTC_HBA_START },
        { "WXK_F19", WXK_F19 },
        { "wxSTC_CMD_PAGEDOWNEXTEND", wxSTC_CMD_PAGEDOWNEXTEND },
        { "wxTE_AUTO_SCROLL", wxTE_AUTO_SCROLL },
        { "WXK_F18", WXK_F18 },
        { "wxALIGN_RIGHT", wxALIGN_RIGHT },
        { "wxSTC_HB_COMMENTLINE", wxSTC_HB_COMMENTLINE },
        { "wxDIR", wxDIR },
        { "wxTC_FIXEDWIDTH", wxTC_FIXEDWIDTH },
        { "wxID_HELP", wxID_HELP },
        { "wxLI_HORIZONTAL", wxLI_HORIZONTAL },
        { "wxBLIT_SRCCOPY", wxBLIT_SRCCOPY },
        { "wxSTC_HB_START", wxSTC_HB_START },
        { "wxFRAME_SHAPED", wxFRAME_SHAPED },
        { "wxSP_NOSASH", wxSP_NOSASH },
        { "wxSTC_MAKE_COMMENT", wxSTC_MAKE_COMMENT },
        { "wxSTC_MARK_VLINE", wxSTC_MARK_VLINE },
        { "wxCBAR_HIDDEN", wxCBAR_HIDDEN },
        { "wxYES", wxYES },
        { "wxSTC_P_STRING", wxSTC_P_STRING },
        { "wxS_IXOTH", wxS_IXOTH },
        { "wxSTC_LISP_KEYWORD", wxSTC_LISP_KEYWORD },
        { "wxSTC_P_TRIPLE", wxSTC_P_TRIPLE },
        { "wxSTC_HJ_DOUBLESTRING", wxSTC_HJ_DOUBLESTRING },
        { "wxSTC_HJA_COMMENT", wxSTC_HJA_COMMENT },
        { "wxFILTER_NONE", wxFILTER_NONE },
        { "WXK_NUMPAD0", WXK_NUMPAD0 },
        { "wxSTC_HJA_COMMENTLINE", wxSTC_HJA_COMMENTLINE },
        { "wxSP_3DSASH", wxSP_3DSASH },
        { "wxSTC_HJA_WORD", wxSTC_HJA_WORD },
        { "wxSIZE_ALLOW_MINUS_ONE", wxSIZE_ALLOW_MINUS_ONE },
        { "wxDOT_DASH", wxDOT_DASH },
        { "wxSTC_MATLAB_KEYWORD", wxSTC_MATLAB_KEYWORD },
        { "wxLIST_MASK_TEXT", wxLIST_MASK_TEXT },
        { "WXK_SCROLL", WXK_SCROLL },
        { "wxLIST_MASK_STATE", wxLIST_MASK_STATE },
        { "wxRIGHT", wxRIGHT },
        { "wxFILE", wxFILE },
        { "wxTR_NO_LINES", wxTR_NO_LINES },
        { "wxSL_SELRANGE", wxSL_SELRANGE },
        { "wxSW_3DBORDER", wxSW_3DBORDER },
        { "wxSTC_SCMOD_ALT", wxSTC_SCMOD_ALT },
        { "wxSTC_HJ_SINGLESTRING", wxSTC_HJ_SINGLESTRING },
        { "wxIMAGE_LIST_STATE", wxIMAGE_LIST_STATE },
        { "wxLC_EDIT_LABELS", wxLC_EDIT_LABELS },
        { "wxSTC_MOD_BEFOREINSERT", wxSTC_MOD_BEFOREINSERT },
        { "wxSTC_HJ_WORD", wxSTC_HJ_WORD },
        { "wxHF_CONTENTS", wxHF_CONTENTS },
        { "wxSTC_HJ_NUMBER", wxSTC_HJ_NUMBER },
        { "wxCAP_PROJECTING", wxCAP_PROJECTING },
        { "wxSTC_PL_NUMBER", wxSTC_PL_NUMBER },
        { "wxSTC_CMD_SELECTALL", wxSTC_CMD_SELECTALL },
        { "wxSW_3D", wxSW_3D },
        { "wxGRIDTABLE_NOTIFY_ROWS_DELETED", wxGRIDTABLE_NOTIFY_ROWS_DELETED },
        { "wxSTC_H_SGML_ENTITY", wxSTC_H_SGML_ENTITY },
        { "WXK_NUMLOCK", WXK_NUMLOCK },
        { "wxSL_HORIZONTAL", wxSL_HORIZONTAL },
        { "WXK_NUMPAD_INSERT", WXK_NUMPAD_INSERT },
        { "wxSTC_HPA_START", wxSTC_HPA_START },
        { "wxSTC_MARK_MINUS", wxSTC_MARK_MINUS },
        { "WXK_F7", WXK_F7 },
        { "wxSTC_H_SGML_ERROR", wxSTC_H_SGML_ERROR },
        { "wxSTC_H_SGML_DOUBLESTRING", wxSTC_H_SGML_DOUBLESTRING },
        { "wxFLOOD_BORDER", wxFLOOD_BORDER },
        { "wxGA_HORIZONTAL", wxGA_HORIZONTAL },
        { "wxDIR_DEFAULT", wxDIR_DEFAULT },
        { "wxSTC_CMD_VCHOMEEXTEND", wxSTC_CMD_VCHOMEEXTEND },
        { "wxNB_TOP", wxNB_TOP },
        { "wxSTC_H_CDATA", wxSTC_H_CDATA },
        { "wxSTC_LEX_NNCRONTAB", wxSTC_LEX_NNCRONTAB },
        { "wxSTC_CMD_LINEENDDISPLAY", wxSTC_CMD_LINEENDDISPLAY },
        { "wxSP_PERMIT_UNSPLIT", wxSP_PERMIT_UNSPLIT },
        { "wxSTC_LEX_EIFFELKW", wxSTC_LEX_EIFFELKW },
        { "WXK_ALT", WXK_ALT },
        { "wxBOTTOM", wxBOTTOM },
        { "FL_ALIGN_BOTTOM_PANE", FL_ALIGN_BOTTOM_PANE },
        { "wxSTC_CHARSET_ANSI", wxSTC_CHARSET_ANSI },
        { "wxHF_ICONS_FOLDER", wxHF_ICONS_FOLDER },
        { "wxTE_MULTILINE", wxTE_MULTILINE },
        { "wxSTC_H_OTHER", wxSTC_H_OTHER },
        { "WXK_NEXT", WXK_NEXT },
        { "wxBLIT_NOTSRCERASE", wxBLIT_NOTSRCERASE },
        { "wxALIGN_LEFT", wxALIGN_LEFT },
        { "wxS_IXGRP", wxS_IXGRP },
        { "wxSTC_EIFFEL_IDENTIFIER", wxSTC_EIFFEL_IDENTIFIER },
        { "wxPD_ESTIMATED_TIME", wxPD_ESTIMATED_TIME },
        { "wxSTC_H_NUMBER", wxSTC_H_NUMBER },
        { "wxRA_SPECIFY_ROWS", wxRA_SPECIFY_ROWS },
        { "wxSTC_NNCRONTAB_ENVIRONMENT", wxSTC_NNCRONTAB_ENVIRONMENT },
        { "wxSTC_H_ATTRIBUTE", wxSTC_H_ATTRIBUTE },
        { "wxSTC_H_TAGUNKNOWN", wxSTC_H_TAGUNKNOWN },
        { "wxRESET", wxRESET },
        { "WXK_F14", WXK_F14 },
        { "wxSTC_H_TAG", wxSTC_H_TAG },
        { "wxSTC_C_COMMENTDOCKEYWORD", wxSTC_C_COMMENTDOCKEYWORD },
        { "wxSTC_PL_PREPROCESSOR", wxSTC_PL_PREPROCESSOR },
        { "wxSTC_C_WORD2", wxSTC_C_WORD2 },
        { "wxMAXIMIZE", wxMAXIMIZE },
        { "wxSTC_CONF_COMMENT", wxSTC_CONF_COMMENT },
        { "wxSTC_NNCRONTAB_NUMBER", wxSTC_NNCRONTAB_NUMBER },
        { "WXK_NUMPAD_F4", WXK_NUMPAD_F4 },
        { "WXK_NUMPAD_PAGEUP", WXK_NUMPAD_PAGEUP },
        { "wxGRIDTABLE_NOTIFY_COLS_DELETED", wxGRIDTABLE_NOTIFY_COLS_DELETED },
        { "wxTREE_HITTEST_ONITEMSTATEICON", wxTREE_HITTEST_ONITEMSTATEICON },
        { "WXK_EXECUTE", WXK_EXECUTE },
        { "wxSTC_PRINT_BLACKONWHITE", wxSTC_PRINT_BLACKONWHITE },
        { "wxSTC_P_IDENTIFIER", wxSTC_P_IDENTIFIER },
        { "wxSTC_P_DEFNAME", wxSTC_P_DEFNAME },
        { "wxID_SEPARATOR", wxID_SEPARATOR },
        { "wxSTC_STYLE_MAX", wxSTC_STYLE_MAX },
        { "WXK_PAGEDOWN", WXK_PAGEDOWN },
        { "wxSTC_HJA_COMMENTDOC", wxSTC_HJA_COMMENTDOC },
        { "wxSTC_CASE_MIXED", wxSTC_CASE_MIXED },
        { "wxLIST_RECT_ICON", wxLIST_RECT_ICON },
        { "wxSTC_CMD_LINEENDDISPLAYEXTEND", wxSTC_CMD_LINEENDDISPLAYEXTEND },
        { "WXK_F1", WXK_F1 },
        { "wxTC_OWNERDRAW", wxTC_OWNERDRAW },
        { "wxTE_NO_VSCROLL", wxTE_NO_VSCROLL },
        { "wxSTC_LEX_LISP", wxSTC_LEX_LISP },
        { "wxSTC_PERFORMED_USER", wxSTC_PERFORMED_USER },
        { "wxTOOL_STYLE_SEPARATOR", wxTOOL_STYLE_SEPARATOR },
        { "wxSTC_CONF_NUMBER", wxSTC_CONF_NUMBER },
        { "wxSTC_PERFORMED_UNDO", wxSTC_PERFORMED_UNDO },
        { "wxSTC_LEX_VB", wxSTC_LEX_VB },
        { "wxSTC_LEX_PASCAL", wxSTC_LEX_PASCAL },
        { "wxJOIN_MITER", wxJOIN_MITER },
        { "wxTR_HAS_VARIABLE_ROW_HEIGHT", wxTR_HAS_VARIABLE_ROW_HEIGHT },
        { "wxHF_INDEX", wxHF_INDEX },
        { "wxBLIT_007700E6", wxBLIT_007700E6 },
        { "wxTOOL_STYLE_CONTROL", wxTOOL_STYLE_CONTROL },
        { "wxSTC_CMD_LINEDELETE", wxSTC_CMD_LINEDELETE },
        { "wxID_BACKWARD", wxID_BACKWARD },
        { "wxPD_AUTO_HIDE", wxPD_AUTO_HIDE },
        { "wxTE_NOHIDESEL", wxTE_NOHIDESEL },
        { "wxSTC_LEX_LUA", wxSTC_LEX_LUA },
        { "wxSTC_ERR_DIFF_MESSAGE", wxSTC_ERR_DIFF_MESSAGE },
        { "wxLC_ALIGN_TOP", wxLC_ALIGN_TOP },
        { "wxLIST_HITTEST_ONITEMICON", wxLIST_HITTEST_ONITEMICON },
        { "wxCAPTION", wxCAPTION },
        { "WXK_F23", WXK_F23 },
        { "wxSTC_CMD_UPPERCASE", wxSTC_CMD_UPPERCASE },
        { "wxSTC_LEX_LATEX", wxSTC_LEX_LATEX },
        { "wxSTC_LEX_XCODE", wxSTC_LEX_XCODE },
        { "wxSTC_LUA_NUMBER", wxSTC_LUA_NUMBER },
        { "wxHTML_INDENT_ALL", wxHTML_INDENT_ALL },
        { "wxROP_MERGENOTPEN", wxROP_MERGENOTPEN },
        { "wxSTC_CONF_DEFAULT", wxSTC_CONF_DEFAULT },
        { "wxMB_DOCKABLE", wxMB_DOCKABLE },
        { "wxS_IXUSR", wxS_IXUSR },
        { "wxLC_VRULES", wxLC_VRULES },
        { "wxRESIZE_BOX", wxRESIZE_BOX },
        { "wxMM_METRIC", wxMM_METRIC },
        { "wxSIZE_AUTO_WIDTH", wxSIZE_AUTO_WIDTH },
        { "wxSTC_C_DEFAULT", wxSTC_C_DEFAULT },
        { "wxSTC_AVE_STRINGEOL", wxSTC_AVE_STRINGEOL },
        { "wxSTC_KEY_TAB", wxSTC_KEY_TAB },
        { "wxSTC_H_SGML_1ST_PARAM", wxSTC_H_SGML_1ST_PARAM },
        { "wxSTC_KEY_DELETE", wxSTC_KEY_DELETE },
        { "wxSTC_KEY_END", wxSTC_KEY_END },
        { "wxSTC_CMD_FORMFEED", wxSTC_CMD_FORMFEED },
        { "wxSL_LEFT", wxSL_LEFT },
        { "wxSTC_MODEVENTMASKALL", wxSTC_MODEVENTMASKALL },
        { "wxSTC_LEX_MAKEFILE", wxSTC_LEX_MAKEFILE },
        { "wxSP_FULLSASH", wxSP_FULLSASH },
        { "FL_ALIGN_TOP_PANE", FL_ALIGN_TOP_PANE },
        { "wxSTC_H_TAGEND", wxSTC_H_TAGEND },
        { "wxTC_RIGHTJUSTIFY", wxTC_RIGHTJUSTIFY },
        { "wxLC_NO_SORT_HEADER", wxLC_NO_SORT_HEADER },
        { "wxSUNKEN_BORDER", wxSUNKEN_BORDER },
        { "wxSTC_CMD_REDO", wxSTC_CMD_REDO },
        { "WXK_F8", WXK_F8 },
        { "wxROP_NOTMERGEPEN", wxROP_NOTMERGEPEN },
        { "wxSP_HORIZONTAL", wxSP_HORIZONTAL },
        { "wxGRIDTABLE_NOTIFY_COLS_APPENDED", wxGRIDTABLE_NOTIFY_COLS_APPENDED },
        { "wxSTC_LEX_NULL", wxSTC_LEX_NULL },
        { "wxSL_LABELS", wxSL_LABELS },
        { "wxID_FILE5", wxID_FILE5 },
        { "wxSTC_CMD_DELETEBACKNOTLINE", wxSTC_CMD_DELETEBACKNOTLINE },
        { "wxID_CLOSE", wxID_CLOSE },
        { "wxSTC_STYLE_LASTPREDEFINED", wxSTC_STYLE_LASTPREDEFINED },
        { "wxGRIDTABLE_REQUEST_VIEW_SEND_VALUES", wxGRIDTABLE_REQUEST_VIEW_SEND_VALUES },
        { "wxSTC_HPHP_SIMPLESTRING", wxSTC_HPHP_SIMPLESTRING },
        { "wxTR_LINES_AT_ROOT", wxTR_LINES_AT_ROOT },
        { "wxID_PREVIEW", wxID_PREVIEW },
        { "wxID_FILEDLGG", wxID_FILEDLGG },
        { "wxBACKINGSTORE", wxBACKINGSTORE },
        { "wxSTC_CMD_TAB", wxSTC_CMD_TAB },
        { "wxSTC_CMD_DOCUMENTEND", wxSTC_CMD_DOCUMENTEND },
        { "wxSTC_CMD_WORDRIGHTEXTEND", wxSTC_CMD_WORDRIGHTEXTEND },
        { "wxSTC_CMD_LINEDOWNEXTEND", wxSTC_CMD_LINEDOWNEXTEND },
        { "wxSTC_DIFF_POSITION", wxSTC_DIFF_POSITION },
        { "wxSIZE_AUTO_HEIGHT", wxSIZE_AUTO_HEIGHT },
        { "wxSTC_CACHE_PAGE", wxSTC_CACHE_PAGE },
        { "WXK_NUMPAD_PAGEDOWN", WXK_NUMPAD_PAGEDOWN },
        { "wxLIST_HITTEST_NOWHERE", wxLIST_HITTEST_NOWHERE },
        { "wxSTC_CURSORNORMAL", wxSTC_CURSORNORMAL },
        { "wxSTC_CACHE_NONE", wxSTC_CACHE_NONE },
        { "wxNO_DEFAULT", wxNO_DEFAULT },
        { "wxTE_LINEWRAP", wxTE_LINEWRAP },
        { "wxSTC_LEX_BAAN", wxSTC_LEX_BAAN },
        { "wxPATH_GET_VOLUME", wxPATH_GET_VOLUME },
        { "wxSTC_START", wxSTC_START },
        { "wxSTC_KEY_DOWN", wxSTC_KEY_DOWN },
        { "wxSTC_INDIC2_MASK", wxSTC_INDIC2_MASK },
        { "wxHORIZONTAL", wxHORIZONTAL },
        { "wxCENTER_ON_SCREEN", wxCENTER_ON_SCREEN },
        { "wxSOUND_SYNC", wxSOUND_SYNC },
        { "WXK_SEPARATOR", WXK_SEPARATOR },
        { "wxSTC_MARK_BACKGROUND", wxSTC_MARK_BACKGROUND },
        { "wxSTC_MARGIN_SYMBOL", wxSTC_MARGIN_SYMBOL },
        { "WXK_BACK", WXK_BACK },
        { "wxLIST_STATE_DONTCARE", wxLIST_STATE_DONTCARE },
        { "wxDOUBLE_BORDER", wxDOUBLE_BORDER },
        { "wxSTC_INDIC_PLAIN", wxSTC_INDIC_PLAIN },
        { "wxLC_MASK_TYPE", wxLC_MASK_TYPE },
        { "wxSHORT_DASH", wxSHORT_DASH },
        { "wxSTC_CHARSET_VIETNAMESE", wxSTC_CHARSET_VIETNAMESE },
        { "wxCENTER_FRAME", wxCENTER_FRAME },
        { "wxSTC_CHARSET_ARABIC", wxSTC_CHARSET_ARABIC },
        { "wxSTC_CHARSET_TURKISH", wxSTC_CHARSET_TURKISH },
        { "wxCANCEL", wxCANCEL },
        { "wxLC_HRULES", wxLC_HRULES },
        { "wxSTC_CHARSET_GB2312", wxSTC_CHARSET_GB2312 },
        { "wxSTC_NNCRONTAB_MODIFIER", wxSTC_NNCRONTAB_MODIFIER },
        { "wxSTC_STYLE_BRACEBAD", wxSTC_STYLE_BRACEBAD },
        { "wxLC_REPORT", wxLC_REPORT },
        { "wxJOIN_BEVEL", wxJOIN_BEVEL },
        { "wxSP_BORDER", wxSP_BORDER },
        { "wxBLIT_SRCINVERT", wxBLIT_SRCINVERT },
        { "wxSTC_STYLE_BRACELIGHT", wxSTC_STYLE_BRACELIGHT },
        { "wxSTC_INDIC_SQUIGGLE", wxSTC_INDIC_SQUIGGLE },
        { "wxBLIT_WHITENESS", wxBLIT_WHITENESS },
        { "wxSTC_INDIC_TT", wxSTC_INDIC_TT },
        { "wxSTC_MARK_CIRCLEMINUSCONNECTED", wxSTC_MARK_CIRCLEMINUSCONNECTED },
        { "wxXOR", wxXOR },
        { "wxLIST_NEXT_ALL", wxLIST_NEXT_ALL },
        { "wxTHICK_FRAME", wxTHICK_FRAME },
        { "wxSTC_HJA_SYMBOLS", wxSTC_HJA_SYMBOLS },
        { "wxSTC_HJA_KEYWORD", wxSTC_HJA_KEYWORD },
        { "wxSTC_MARKER_MAX", wxSTC_MARKER_MAX },
        { "WXK_NUMPAD5", WXK_NUMPAD5 },
        { "wxTEMPLATE_VISIBLE", wxTEMPLATE_VISIBLE },
        { "wxHTML_ALIGN_TOP", wxHTML_ALIGN_TOP },
        { "wxIMAGELIST_DRAW_SELECTED", wxIMAGELIST_DRAW_SELECTED },
        { "WXK_F4", WXK_F4 },
        { "wxHF_OPEN_FILES", wxHF_OPEN_FILES },
        { "wxDIR_DOTDOT", wxDIR_DOTDOT },
        { "wxSTC_PROPS_ASSIGNMENT", wxSTC_PROPS_ASSIGNMENT },
        { "wxID_DEFAULT", wxID_DEFAULT },
        { "wxID_SAVE", wxID_SAVE },
        { "wxNO_3D", wxNO_3D },
        { "wxLB_SINGLE", wxLB_SINGLE },
        { "wxSTC_CMD_LINECUT", wxSTC_CMD_LINECUT },
        { "WXK_NUMPAD_PRIOR", WXK_NUMPAD_PRIOR },
        { "WXK_RETURN", WXK_RETURN },
        { "WXK_MULTIPLY", WXK_MULTIPLY },
        { "wxSTC_PROPS_DEFVAL", wxSTC_PROPS_DEFVAL },
        { "WXK_F10", WXK_F10 },
        { "wxSP_LIVE_UPDATE", wxSP_LIVE_UPDATE },
        { "wxTE_RIGHT", wxTE_RIGHT },
        { "wxNO_BORDER", wxNO_BORDER },
        { "wxSL_RIGHT", wxSL_RIGHT },
        { "wxSL_NOTIFY_DRAG", wxSL_NOTIFY_DRAG },
        { "wxCENTER", wxCENTER },
        { "wxHW_SCROLLBAR_AUTO", wxHW_SCROLLBAR_AUTO },
        { "wxLIST_ALIGN_DEFAULT", wxLIST_ALIGN_DEFAULT },
        { "wxLIST_STATE_SELECTED", wxLIST_STATE_SELECTED },
        { "wxBU_RIGHT", wxBU_RIGHT },
        { "wxCAL_HITTEST_DECMONTH", wxCAL_HITTEST_DECMONTH },
        { "GMT_6", wxDateTime::GMT_6 },
        { "wxSTREAM_WRITE_ERROR", wxSTREAM_WRITE_ERROR },
        { "wxDECORATIVE", wxDECORATIVE },
        { "wxPATH_BEOS", wxPATH_BEOS },
        { "wxUP", wxUP },
        { "wxDF_SYLK", wxDF_SYLK },
        { "wxPATH_NORM_CASE", wxPATH_NORM_CASE },
        { "wxCAL_HITTEST_DAY", wxCAL_HITTEST_DAY },
        { "wxBITMAP_TYPE_PICT_RESOURCE", wxBITMAP_TYPE_PICT_RESOURCE },
        { "wxFONTENCODING_ISO8859_5", wxFONTENCODING_ISO8859_5 },
        { "wxSOCKET_WOULDBLOCK", wxSOCKET_WOULDBLOCK },
        { "wxSYS_COLOUR_WINDOWTEXT", wxSYS_COLOUR_WINDOWTEXT },
        { "wxPAPER_DSHEET", wxPAPER_DSHEET },
        { "wxFONTENCODING_UNICODE", wxFONTENCODING_UNICODE },
        { "wxFONTENCODING_CP1254", wxFONTENCODING_CP1254 },
        { "AKST", wxDateTime::AKST },
        { "wxBITMAP_TYPE_GIF", wxBITMAP_TYPE_GIF },
        { "wxFONTWEIGHT_NORMAL", wxFONTWEIGHT_NORMAL },
        { "wxBITMAP_TYPE_ICO_RESOURCE", wxBITMAP_TYPE_ICO_RESOURCE },
        { "wxTELETYPE", wxTELETYPE },
        { "wxPAPER_ISO_B4", wxPAPER_ISO_B4 },
        { "wxSASH_STATUS_OK", wxSASH_STATUS_OK },
        { "wxFONTSTYLE_SLANT", wxFONTSTYLE_SLANT },
        { "wxSYS_COLOUR_INFOBK", wxSYS_COLOUR_INFOBK },
        { "Type_Boolean", wxConfigBase::Type_Boolean },
        { "wxLAYOUT_NONE", wxLAYOUT_NONE },
        { "wxFONTFAMILY_TELETYPE", wxFONTFAMILY_TELETYPE },
        { "wxCentre", wxCentre },
        { "wxCAL_HITTEST_SURROUNDING_WEEK", wxCAL_HITTEST_SURROUNDING_WEEK },
        { "wxFONTENCODING_CP932", wxFONTENCODING_CP932 },
        { "wxFILE_MUST_EXIST", wxFILE_MUST_EXIST },
        { "wxPATH_NORM_ALL", wxPATH_NORM_ALL },
        { "wxALIGN_CENTRE_HORIZONTAL", wxALIGN_CENTRE_HORIZONTAL },
        { "A_CST", wxDateTime::A_CST },
        { "wxDUPLEX_HORIZONTAL", wxDUPLEX_HORIZONTAL },
        { "wxSYS_COLOUR_ACTIVEBORDER", wxSYS_COLOUR_ACTIVEBORDER },
        { "wxPAPER_STATEMENT", wxPAPER_STATEMENT },
        { "wxFileWriteAppend", wxFile::wxFileWriteAppend },
        { "wxACCEL_ALT", wxACCEL_ALT },
        { "wxSYS_OEM_FIXED_FONT", wxSYS_OEM_FIXED_FONT },
        { "wxCAL_BORDER_ROUND", wxCAL_BORDER_ROUND },
        { "CB_LEFT_BAR_HANDLE_HITTED", CB_LEFT_BAR_HANDLE_HITTED },
        { "NONE", wxFTP::NONE },
        { "USA", wxDateTime::USA },
        { "wxCAL_BORDER_NONE", wxCAL_BORDER_NONE },
        { "wxCURSOR_SIZENWSE", wxCURSOR_SIZENWSE },
        { "wxLEFT", wxLEFT },
        { "wxPAPER_LETTERSMALL", wxPAPER_LETTERSMALL },
        { "wxFONTENCODING_ALTERNATIVE", wxFONTENCODING_ALTERNATIVE },
        { "A_EST", wxDateTime::A_EST },
        { "wxFONTENCODING_ISO8859_8", wxFONTENCODING_ISO8859_8 },
        { "wxXML_ENTITY_NODE", wxXML_ENTITY_NODE },
        { "wxALIGN_MASK", wxALIGN_MASK },
        { "wxFONTENCODING_ISO8859_MAX", wxFONTENCODING_ISO8859_MAX },
        { "wxDF_INVALID", wxDF_INVALID },
        { "wxDragError", wxDragError },
        { "wxSYS_COLOUR_MENUTEXT", wxSYS_COLOUR_MENUTEXT },
        { "wxCURSOR_NO_ENTRY", wxCURSOR_NO_ENTRY },
        { "wxXML_TEXT_NODE", wxXML_TEXT_NODE },
        { "wxITEM_NORMAL", wxITEM_NORMAL },
        { "wxPAPER_15X11", wxPAPER_15X11 },
        { "wxPAPER_LETTER", wxPAPER_LETTER },
        { "wxSYS_COLOUR_3DSHADOW", wxSYS_COLOUR_3DSHADOW },
        { "wxALIGN_CENTER_VERTICAL", wxALIGN_CENTER_VERTICAL },
        { "wxBORDER_SUNKEN", wxBORDER_SUNKEN },
        { "wxBITMAP_TYPE_ICON", wxBITMAP_TYPE_ICON },
        { "wxLeft", wxLeft },
        { "wxFR_NOWHOLEWORD", wxFR_NOWHOLEWORD },
        { "wxSYS_CAN_ICONIZE_FRAME", wxSYS_CAN_ICONIZE_FRAME },
        { "wxSOCKET_INVADDR", wxSOCKET_INVADDR },
        { "wxSASH_BOTTOM", wxSASH_BOTTOM },
        { "wxDragCancel", wxDragCancel },
        { "wxDUPLEX_VERTICAL", wxDUPLEX_VERTICAL },
        { "GMT8", wxDateTime::GMT8 },
        { "wxBITMAP_TYPE_TIF", wxBITMAP_TYPE_TIF },
        { "wxGROW", wxGROW },
        { "wxSYS_SMALLICON_X", wxSYS_SMALLICON_X },
        { "wxPAPER_ENV_10", wxPAPER_ENV_10 },
        { "wxCURSOR_BLANK", wxCURSOR_BLANK },
        { "wxMULTIPLE", wxMULTIPLE },
        { "wxXML_COMMENT_NODE", wxXML_COMMENT_NODE },
        { "GMT_9", wxDateTime::GMT_9 },
        { "wxDrag_CopyOnly", wxDrag_CopyOnly },
        { "wxFONTENCODING_CP1251", wxFONTENCODING_CP1251 },
        { "Dec", wxDateTime::Dec },
        { "wxCURSOR_IBEAM", wxCURSOR_IBEAM },
        { "wxFONTENCODING_SYSTEM", wxFONTENCODING_SYSTEM },
        { "wxSYS_COLOUR_MENUHILIGHT", wxSYS_COLOUR_MENUHILIGHT },
        { "wxSYS_HSCROLL_ARROW_X", wxSYS_HSCROLL_ARROW_X },
        { "wxTreeItemIcon_Expanded", wxTreeItemIcon_Expanded },
        { "GMT7", wxDateTime::GMT7 },
        { "wxPATH_WIN", wxPATH_WIN },
        { "wxPAPER_A4SMALL", wxPAPER_A4SMALL },
        { "wxSYS_COLOUR_INACTIVEBORDER", wxSYS_COLOUR_INACTIVEBORDER },
        { "wxSOCKET_CONNECTION", wxSOCKET_CONNECTION },
        { "wxFONTSTYLE_ITALIC", wxFONTSTYLE_ITALIC },
        { "wxPAPER_ENV_B5", wxPAPER_ENV_B5 },
        { "wxFONTENCODING_CP12_MAX", wxFONTENCODING_CP12_MAX },
        { "GMT9", wxDateTime::GMT9 },
        { "CB_RIGHT_BAR_HANDLE_HITTED", CB_RIGHT_BAR_HANDLE_HITTED },
        { "wxAbove", wxAbove },
        { "wxDF_UNICODETEXT", wxDF_UNICODETEXT },
        { "wxFR_MATCHCASE", wxFR_MATCHCASE },
        { "wxCHANGE_DIR", wxCHANGE_DIR },
        { "wxFONTENCODING_ISO8859_2", wxFONTENCODING_ISO8859_2 },
        { "wxSTIPPLE", wxSTIPPLE },
        { "MDT", wxDateTime::MDT },
        { "wxSYS_SCREEN_DESKTOP", wxSYS_SCREEN_DESKTOP },
        { "wxPAPER_A5_EXTRA", wxPAPER_A5_EXTRA },
        { "Cell", wxGridCellAttr::Cell },
        { "PDT", wxDateTime::PDT },
        { "wxFONTWEIGHT_BOLD", wxFONTWEIGHT_BOLD },
        { "wxPAPER_B4", wxPAPER_B4 },
        { "wxSYS_COLOUR_INFOTEXT", wxSYS_COLOUR_INFOTEXT },
        { "wxDF_TIFF", wxDF_TIFF },
        { "wxACCEL_CTRL", wxACCEL_CTRL },
        { "wxFONTFAMILY_SWISS", wxFONTFAMILY_SWISS },
        { "wxTOP", wxTOP },
        { "Mar", wxDateTime::Mar },
        { "wxSYS_HSCROLL_Y", wxSYS_HSCROLL_Y },
        { "wxBITMAP_TYPE_BMP", wxBITMAP_TYPE_BMP },
        { "GMT3", wxDateTime::GMT3 },
        { "wxALIGN_CENTRE", wxALIGN_CENTRE },
        { "GMT_10", wxDateTime::GMT_10 },
        { "wxCAL_SUNDAY_FIRST", wxCAL_SUNDAY_FIRST },
        { "Jun", wxDateTime::Jun },
        { "Sun", wxDateTime::Sun },
        { "wxPAPER_ENV_MONARCH", wxPAPER_ENV_MONARCH },
        { "WET", wxDateTime::WET },
        { "wxSYS_VSCROLL_ARROW_Y", wxSYS_VSCROLL_ARROW_Y },
        { "wxROMAN", wxROMAN },
        { "wxFONTENCODING_CP852", wxFONTENCODING_CP852 },
        { "wxSYS_MENU_Y", wxSYS_MENU_Y },
        { "wxDEFAULT", wxDEFAULT },
        { "wxPartRegion", wxPartRegion },
        { "wxFONTFAMILY_UNKNOWN", wxFONTFAMILY_UNKNOWN },
        { "wxPAPER_ENV_C4", wxPAPER_ENV_C4 },
        { "wxGridSelectRows", wxGrid::wxGridSelectRows },
        { "GMT_4", wxDateTime::GMT_4 },
        { "wxSTREAM_EOF", wxSTREAM_EOF },
        { "wxSASH_STATUS_OUT_OF_RANGE", wxSASH_STATUS_OUT_OF_RANGE },
        { "wxFONTENCODING_ISO8859_9", wxFONTENCODING_ISO8859_9 },
        { "wxSYS_MOUSE_BUTTONS", wxSYS_MOUSE_BUTTONS },
        { "CET", wxDateTime::CET },
        { "Default", wxGridCellAttr::Default },
        { "EET", wxDateTime::EET },
        { "wxALIGN_CENTER_HORIZONTAL", wxALIGN_CENTER_HORIZONTAL },
        { "Gregorian", wxDateTime::Gregorian },
        { "wxSOCKET_TIMEDOUT", wxSOCKET_TIMEDOUT },
        { "wxFONTENCODING_UTF7", wxFONTENCODING_UTF7 },
        { "wxSYS_COLOUR_WINDOW", wxSYS_COLOUR_WINDOW },
        { "wxCURSOR_RIGHT_ARROW", wxCURSOR_RIGHT_ARROW },
        { "wxFONTENCODING_ISO8859_10", wxFONTENCODING_ISO8859_10 },
        { "wxSYS_VSCROLL_ARROW_X", wxSYS_VSCROLL_ARROW_X },
        { "wxOVERWRITE_PROMPT", wxOVERWRITE_PROMPT },
        { "wxPATH_NORM_DOTS", wxPATH_NORM_DOTS },
        { "Wed", wxDateTime::Wed },
        { "wxSYS_SCREEN_Y", wxSYS_SCREEN_Y },
        { "wxSYS_COLOUR_GRADIENTINACTIVECAPTION", wxSYS_COLOUR_GRADIENTINACTIVECAPTION },
        { "wxFONTSTYLE_MAX", wxFONTSTYLE_MAX },
        { "wxMODERN", wxMODERN },
        { "GMT4", wxDateTime::GMT4 },
        { "wxPATH_MAC", wxPATH_MAC },
        { "wxBOLD", wxBOLD },
        { "wxBORDER_RAISED", wxBORDER_RAISED },
        { "wxFONTENCODING_ISO8859_15", wxFONTENCODING_ISO8859_15 },
        { "wxTreeItemIcon_SelectedExpanded", wxTreeItemIcon_SelectedExpanded },
        { "wxFileRead", wxFile::wxFileRead },
        { "CEST", wxDateTime::CEST },
        { "wxPAPER_FANFOLD_STD_GERMAN", wxPAPER_FANFOLD_STD_GERMAN },
        { "wxSYS_COLOUR_3DDKSHADOW", wxSYS_COLOUR_3DDKSHADOW },
        { "wxOutLeft", wxOutLeft },
        { "wxPRINTER_ERROR", wxPRINTER_ERROR },
        { "wxFromEnd", wxFromEnd },
        { "wxEOL_MAC", wxEOL_MAC },
        { "wxSYS_WINDOWMIN_X", wxSYS_WINDOWMIN_X },
        { "Fri", wxDateTime::Fri },
        { "wxALIGN_BOTTOM", wxALIGN_BOTTOM },
        { "wxALL", wxALL },
        { "wxPAPER_ENV_14", wxPAPER_ENV_14 },
        { "wxPAPER_A2", wxPAPER_A2 },
        { "wxDF_PENDATA", wxDF_PENDATA },
        { "wxBelow", wxBelow },
        { "GMT_7", wxDateTime::GMT_7 },
        { "wxPAPER_ENV_B4", wxPAPER_ENV_B4 },
        { "wxPAPER_ENV_B6", wxPAPER_ENV_B6 },
        { "wxDF_PALETTE", wxDF_PALETTE },
        { "wxSYS_CURSOR_X", wxSYS_CURSOR_X },
        { "A_ESST", wxDateTime::A_ESST },
        { "wxPAPER_ESHEET", wxPAPER_ESHEET },
        { "wxPAPER_FOLIO", wxPAPER_FOLIO },
        { "wxXML_NOTATION_NODE", wxXML_NOTATION_NODE },
        { "wxALIGN_TOP", wxALIGN_TOP },
        { "wxPAPER_LETTER_PLUS", wxPAPER_LETTER_PLUS },
        { "wxBITMAP_TYPE_JPEG", wxBITMAP_TYPE_JPEG },
        { "wxCURSOR_QUESTION_ARROW", wxCURSOR_QUESTION_ARROW },
        { "wxCURSOR_ARROW", wxCURSOR_ARROW },
        { "wxSYS_HSCROLL_ARROW_Y", wxSYS_HSCROLL_ARROW_Y },
        { "wxPAPER_LEGAL_EXTRA", wxPAPER_LEGAL_EXTRA },
        { "wxSYS_ICONSPACING_Y", wxSYS_ICONSPACING_Y },
        { "wxInvalidOffset", wxInvalidOffset },
        { "wxSYS_COLOUR_MAX", wxSYS_COLOUR_MAX },
        { "wxSYS_COLOUR_HOTLIGHT", wxSYS_COLOUR_HOTLIGHT },
        { "wxFONTENCODING_CP950", wxFONTENCODING_CP950 },
        { "wxFONTENCODING_DEFAULT", wxFONTENCODING_DEFAULT },
        { "wxFONTENCODING_UTF8", wxFONTENCODING_UTF8 },
        { "MSK", wxDateTime::MSK },
        { "wxLeftOf", wxLeftOf },
        { "wxPAPER_A3_EXTRA", wxPAPER_A3_EXTRA },
        { "wxCURSOR_PAINT_BRUSH", wxCURSOR_PAINT_BRUSH },
        { "wxWEST", wxWEST },
        { "wxFIXED", wxFIXED },
        { "wxCURSOR_CROSS", wxCURSOR_CROSS },
        { "wxCROSSDIAG_HATCH", wxCROSSDIAG_HATCH },
        { "wxCURSOR_SIZENS", wxCURSOR_SIZENS },
        { "wxLAYOUT_VERTICAL", wxLAYOUT_VERTICAL },
        { "wxSYS_COLOUR_CAPTIONTEXT", wxSYS_COLOUR_CAPTIONTEXT },
        { "wxPROTO_NOHNDLR", wxPROTO_NOHNDLR },
        { "wxPRINT_QUALITY_MEDIUM", wxPRINT_QUALITY_MEDIUM },
        { "wxPAPER_FANFOLD_LGL_GERMAN", wxPAPER_FANFOLD_LGL_GERMAN },
        { "wxCAL_BORDER_SQUARE", wxCAL_BORDER_SQUARE },
        { "wxBITMAP_TYPE_PNM_RESOURCE", wxBITMAP_TYPE_PNM_RESOURCE },
        { "wxRightOf", wxRightOf },
        { "France", wxDateTime::France },
        { "wxBITMAP_TYPE_CUR_RESOURCE", wxBITMAP_TYPE_CUR_RESOURCE },
        { "wxPROTO_PROTERR", wxPROTO_PROTERR },
        { "wxFONTENCODING_CP1250", wxFONTENCODING_CP1250 },
        { "wxFONTWEIGHT_MAX", wxFONTWEIGHT_MAX },
        { "wxPROTO_INVVAL", wxPROTO_INVVAL },
        { "Type_Integer", wxConfigBase::Type_Integer },
        { "wxPRINT_MODE_NONE", wxPRINT_MODE_NONE },
        { "wxSYS_SHOW_SOUNDS", wxSYS_SHOW_SOUNDS },
        { "wxFONTENCODING_CP850", wxFONTENCODING_CP850 },
        { "wxFONTENCODING_ISO8859_1", wxFONTENCODING_ISO8859_1 },
        { "wxBITMAP_TYPE_CUR", wxBITMAP_TYPE_CUR },
        { "wxSYS_COLOUR_APPWORKSPACE", wxSYS_COLOUR_APPWORKSPACE },
        { "wxSYS_SYSTEM_FIXED_FONT", wxSYS_SYSTEM_FIXED_FONT },
        { "wxPROTO_NETERR", wxPROTO_NETERR },
        { "wxFONTENCODING_CP949", wxFONTENCODING_CP949 },
        { "wxSYS_DEVICE_DEFAULT_FONT", wxSYS_DEVICE_DEFAULT_FONT },
        { "wxADJUST_MINSIZE", wxADJUST_MINSIZE },
        { "Inv_Month", wxDateTime::Inv_Month },
        { "wxCURSOR_LEFT_BUTTON", wxCURSOR_LEFT_BUTTON },
        { "wxFONTENCODING_ISO8859_11", wxFONTENCODING_ISO8859_11 },
        { "wxSTREAM_READ_ERROR", wxSTREAM_READ_ERROR },
        { "wxSYS_COLOUR_BTNTEXT", wxSYS_COLOUR_BTNTEXT },
        { "wxPAPER_QUARTO", wxPAPER_QUARTO },
        { "Country_Default", wxDateTime::Country_Default },
        { "wxPAPER_A5_TRANSVERSE", wxPAPER_A5_TRANSVERSE },
        { "GMT6", wxDateTime::GMT6 },
        { "wxPAPER_B5_TRANSVERSE", wxPAPER_B5_TRANSVERSE },
        { "wxCAL_SEQUENTIAL_MONTH_SELECTION", wxCAL_SEQUENTIAL_MONTH_SELECTION },
        { "wxXML_DOCUMENT_TYPE_NODE", wxXML_DOCUMENT_TYPE_NODE },
        { "GMT_8", wxDateTime::GMT_8 },
        { "wxCURSOR_MAGNIFIER", wxCURSOR_MAGNIFIER },
        { "wxPAPER_FANFOLD_US", wxPAPER_FANFOLD_US },
        { "wxPAPER_B_PLUS", wxPAPER_B_PLUS },
        { "wxDOWN", wxDOWN },
        { "wxPAPER_TABLOID_EXTRA", wxPAPER_TABLOID_EXTRA },
        { "wxNORTH", wxNORTH },
        { "wxSYS_COLOUR_WINDOWFRAME", wxSYS_COLOUR_WINDOWFRAME },
        { "Sep", wxDateTime::Sep },
        { "wxPATH_NATIVE", wxPATH_NATIVE },
        { "wxPAPER_ENV_INVITE", wxPAPER_ENV_INVITE },
        { "Col", wxGridCellAttr::Col },
        { "wxCROSS_HATCH", wxCROSS_HATCH },
        { "wxCURSOR_CHAR", wxCURSOR_CHAR },
        { "Country_Unknown", wxDateTime::Country_Unknown },
        { "wxFONTENCODING_CP1257", wxFONTENCODING_CP1257 },
        { "wxXML_ENTITY_REF_NODE", wxXML_ENTITY_REF_NODE },
        { "GMT1", wxDateTime::GMT1 },
        { "wxBITMAP_TYPE_PCX", wxBITMAP_TYPE_PCX },
        { "Germany", wxDateTime::Germany },
        { "wxPAPER_A5", wxPAPER_A5 },
        { "wxBITMAP_TYPE_GIF_RESOURCE", wxBITMAP_TYPE_GIF_RESOURCE },
        { "Country_WesternEurope_End", wxDateTime::Country_WesternEurope_End },
        { "wxFONTENCODING_ISO8859_6", wxFONTENCODING_ISO8859_6 },
        { "wxSYS_SYSTEM_FONT", wxSYS_SYSTEM_FONT },
        { "Country_EEC", wxDateTime::Country_EEC },
        { "wxPATH_VMS", wxPATH_VMS },
        { "wxPAPER_A4_TRANSVERSE", wxPAPER_A4_TRANSVERSE },
        { "wxDF_DIF", wxDF_DIF },
        { "wxPAPER_LETTER_EXTRA", wxPAPER_LETTER_EXTRA },
        { "wxALIGN_NOT", wxALIGN_NOT },
        { "wxCURSOR_WAIT", wxCURSOR_WAIT },
        { "Mon", wxDateTime::Mon },
        { "wxPAPER_ENV_DL", wxPAPER_ENV_DL },
        { "wxTop", wxTop },
        { "wxSTIPPLE_MASK_OPAQUE", wxSTIPPLE_MASK_OPAQUE },
        { "wxPAPER_ENV_9", wxPAPER_ENV_9 },
        { "GMT5", wxDateTime::GMT5 },
        { "wxTreeItemIcon_Max", wxTreeItemIcon_Max },
        { "wxXML_ATTRIBUTE_NODE", wxXML_ATTRIBUTE_NODE },
        { "wxBITMAP_TYPE_XPM_DATA", wxBITMAP_TYPE_XPM_DATA },
        { "wxSASH_RIGHT", wxSASH_RIGHT },
        { "Type_Float", wxConfigBase::Type_Float },
        { "wxDrag_AllowMove", wxDrag_AllowMove },
        { "wxSYS_SWAP_BUTTONS", wxSYS_SWAP_BUTTONS },
        { "wxFONTENCODING_ISO8859_14", wxFONTENCODING_ISO8859_14 },
        { "wxSYS_COLOUR_LISTBOX", wxSYS_COLOUR_LISTBOX },
        { "wxCAL_NO_YEAR_CHANGE", wxCAL_NO_YEAR_CHANGE },
        { "GMT_3", wxDateTime::GMT_3 },
        { "wxFR_NOUPDOWN", wxFR_NOUPDOWN },
        { "wxSOCKET_NOERROR", wxSOCKET_NOERROR },
        { "wxPAPER_10X11", wxPAPER_10X11 },
        { "wxVERTICAL_HATCH", wxVERTICAL_HATCH },
        { "wxCURSOR_NONE", wxCURSOR_NONE },
        { "wxCAL_SHOW_SURROUNDING_WEEKS", wxCAL_SHOW_SURROUNDING_WEEKS },
        { "wxKEY_NONE", wxKEY_NONE },
        { "wxPRINTER_NO_ERROR", wxPRINTER_NO_ERROR },
        { "wxPAPER_A4_PLUS", wxPAPER_A4_PLUS },
        { "CB_LOWER_ROW_HANDLE_HITTED", CB_LOWER_ROW_HANDLE_HITTED },
        { "wxPRINT_QUALITY_LOW", wxPRINT_QUALITY_LOW },
        { "wxFONTENCODING_CP855", wxFONTENCODING_CP855 },
        { "wxSASH_NONE", wxSASH_NONE },
        { "wxSYS_COLOUR_INACTIVECAPTIONTEXT", wxSYS_COLOUR_INACTIVECAPTIONTEXT },
        { "wxSYS_BORDER_X", wxSYS_BORDER_X },
        { "wxFR_DOWN", wxFR_DOWN },
        { "wxSYS_DRAG_X", wxSYS_DRAG_X },
        { "wxLAYOUT_RIGHT", wxLAYOUT_RIGHT },
        { "wxCURSOR_RIGHT_BUTTON", wxCURSOR_RIGHT_BUTTON },
        { "wxSOCKET_WAITALL", wxSOCKET_WAITALL },
        { "wxPAPER_11X17", wxPAPER_11X17 },
        { "wxACCEL_SHIFT", wxACCEL_SHIFT },
        { "wxPAPER_ENV_12", wxPAPER_ENV_12 },
        { "wxPAPER_NOTE", wxPAPER_NOTE },
        { "wxBottom", wxBottom },
        { "wxFR_NOMATCHCASE", wxFR_NOMATCHCASE },
        { "wxDragMove", wxDragMove },
        { "wxXRC_NO_SUBCLASSING", wxXRC_NO_SUBCLASSING },
        { "wxSYS_SCREEN_TINY", wxSYS_SCREEN_TINY },
        { "wxFR_WHOLEWORD", wxFR_WHOLEWORD },
        { "Oct", wxDateTime::Oct },
        { "wxCAL_HITTEST_HEADER", wxCAL_HITTEST_HEADER },
        { "wxOutTop", wxOutTop },
        { "wxBITMAP_TYPE_XBM_DATA", wxBITMAP_TYPE_XBM_DATA },
        { "wxSTREAM_NO_ERROR", wxSTREAM_NO_ERROR },
        { "CB_UPPER_ROW_HANDLE_HITTED", CB_UPPER_ROW_HANDLE_HITTED },
        { "wxSOCKET_NOWAIT", wxSOCKET_NOWAIT },
        { "wxFONTFAMILY_DECORATIVE", wxFONTFAMILY_DECORATIVE },
        { "wxXRC_USE_LOCALE", wxXRC_USE_LOCALE },
        { "Row", wxGridCellAttr::Row },
        { "wxLIGHT", wxLIGHT },
        { "wxFONTFAMILY_MODERN", wxFONTFAMILY_MODERN },
        { "AST", wxDateTime::AST },
        { "wxXML_HTML_DOCUMENT_NODE", wxXML_HTML_DOCUMENT_NODE },
        { "Nov", wxDateTime::Nov },
        { "wxXML_DOCUMENT_FRAG_NODE", wxXML_DOCUMENT_FRAG_NODE },
        { "wxInside", wxInside },
        { "wxXML_DOCUMENT_NODE", wxXML_DOCUMENT_NODE },
        { "wxXML_PI_NODE", wxXML_PI_NODE },
        { "wxXML_CDATA_SECTION_NODE", wxXML_CDATA_SECTION_NODE },
        { "wxSAVE", wxSAVE },
        { "HST", wxDateTime::HST },
        { "wxXML_ELEMENT_NODE", wxXML_ELEMENT_NODE },
        { "CB_BAR_CONTENT_HITTED", CB_BAR_CONTENT_HITTED },
        { "EST", wxDateTime::EST },
        { "CB_NO_ITEMS_HITTED", CB_NO_ITEMS_HITTED },
        { "wxFONTENCODING_CP1255", wxFONTENCODING_CP1255 },
        { "wxRE_NOTEOL", wxRE_NOTEOL },
        { "CDT", wxDateTime::CDT },
        { "wxRE_DEFAULT", wxRE_DEFAULT },
        { "wxITALIC", wxITALIC },
        { "wxRE_NOSUB", wxRE_NOSUB },
        { "wxRE_ICASE", wxRE_ICASE },
        { "wxSYS_COLOUR_3DHILIGHT", wxSYS_COLOUR_3DHILIGHT },
        { "wxFONTFAMILY_SCRIPT", wxFONTFAMILY_SCRIPT },
        { "wxOutBottom", wxOutBottom },
        { "wxSYS_VTHUMB_Y", wxSYS_VTHUMB_Y },
        { "wxDF_PRIVATE", wxDF_PRIVATE },
        { "wxDF_FILENAME", wxDF_FILENAME },
        { "wxSOCKET_LOST", wxSOCKET_LOST },
        { "wxSOCKET_OUTPUT", wxSOCKET_OUTPUT },
        { "wxDF_TEXT", wxDF_TEXT },
        { "wxSOCKET_INPUT", wxSOCKET_INPUT },
        { "wxSYS_COLOUR_3DLIGHT", wxSYS_COLOUR_3DLIGHT },
        { "wxSYS_COLOUR_HIGHLIGHT", wxSYS_COLOUR_HIGHLIGHT },
        { "wxSOCKET_BLOCK", wxSOCKET_BLOCK },
        { "wxDF_WAVE", wxDF_WAVE },
        { "wxSOCKET_NONE", wxSOCKET_NONE },
        { "wxPAPER_TABLOID", wxPAPER_TABLOID },
        { "wxFONTENCODING_KOI8", wxFONTENCODING_KOI8 },
        { "wxSHAPED", wxSHAPED },
        { "wxSOCKET_INVPORT", wxSOCKET_INVPORT },
        { "wxSOUTH", wxSOUTH },
        { "wxPATH_NORM_ENV_VARS", wxPATH_NORM_ENV_VARS },
        { "wxSOCKET_INVSOCK", wxSOCKET_INVSOCK },
        { "wxDUPLEX_SIMPLEX", wxDUPLEX_SIMPLEX },
        { "wxPRINT_MODE_FILE", wxPRINT_MODE_FILE },
        { "wxITEM_SEPARATOR", wxITEM_SEPARATOR },
        { "wxSOCKET_IOERR", wxSOCKET_IOERR },
        { "wxPAPER_LETTER_TRANSVERSE", wxPAPER_LETTER_TRANSVERSE },
        { "wxTreeItemIcon_Selected", wxTreeItemIcon_Selected },
        { "PST", wxDateTime::PST },
        { "wxSOCKET_INVOP", wxSOCKET_INVOP },
        { "wxPROTO_CONNERR", wxPROTO_CONNERR },
        { "wxDF_ENHMETAFILE", wxDF_ENHMETAFILE },
        { "wxCentreY", wxCentreY },
        { "wxTRANSPARENT", wxTRANSPARENT },
        { "wxCenter", wxCenter },
        { "wxDragCopy", wxDragCopy },
        { "wxSYS_NETWORK_PRESENT", wxSYS_NETWORK_PRESENT },
        { "Country_WesternEurope_Start", wxDateTime::Country_WesternEurope_Start },
        { "wxWidth", wxWidth },
        { "Type_String", wxConfigBase::Type_String },
        { "wxRight", wxRight },
        { "wxSYS_FRAMESIZE_X", wxSYS_FRAMESIZE_X },
        { "wxSYS_ANSI_VAR_FONT", wxSYS_ANSI_VAR_FONT },
        { "wxPAPER_ENV_ITALY", wxPAPER_ENV_ITALY },
        { "wxFONTENCODING_CP866", wxFONTENCODING_CP866 },
        { "wxPAPER_9X11", wxPAPER_9X11 },
        { "wxSameAs", wxSameAs },
        { "wxPercentOf", wxPercentOf },
        { "wxAsIs", wxAsIs },
        { "wxFONTENCODING_MAX", wxFONTENCODING_MAX },
        { "wxUnconstrained", wxUnconstrained },
        { "Jan", wxDateTime::Jan },
        { "wxCURSOR_POINT_RIGHT", wxCURSOR_POINT_RIGHT },
        { "Aug", wxDateTime::Aug },
        { "wxITEM_CHECK", wxITEM_CHECK },
        { "wxSYS_COLOUR_GRAYTEXT", wxSYS_COLOUR_GRAYTEXT },
        { "wxFileReadWrite", wxFile::wxFileReadWrite },
        { "wxBITMAP_TYPE_ANY", wxBITMAP_TYPE_ANY },
        { "wxBITMAP_TYPE_MACCURSOR_RESOURCE", wxBITMAP_TYPE_MACCURSOR_RESOURCE },
        { "wxSYS_SCREEN_X", wxSYS_SCREEN_X },
        { "wxSYS_PENWINDOWS_PRESENT", wxSYS_PENWINDOWS_PRESENT },
        { "wxBITMAP_TYPE_ICON_RESOURCE", wxBITMAP_TYPE_ICON_RESOURCE },
        { "wxBOTTOM", wxBOTTOM },
        { "wxFONTFAMILY_DEFAULT", wxFONTFAMILY_DEFAULT },
        { "wxSYS_COLOUR_BACKGROUND", wxSYS_COLOUR_BACKGROUND },
        { "wxSASH_LEFT", wxSASH_LEFT },
        { "wxBITMAP_TYPE_PNM", wxBITMAP_TYPE_PNM },
        { "GMT2", wxDateTime::GMT2 },
        { "wxBITMAP_TYPE_PNG_RESOURCE", wxBITMAP_TYPE_PNG_RESOURCE },
        { "wxPROTO_NOFILE", wxPROTO_NOFILE },
        { "Tue", wxDateTime::Tue },
        { "Thu", wxDateTime::Thu },
        { "wxEOL_UNIX", wxEOL_UNIX },
        { "wxDragNone", wxDragNone },
        { "wxBITMAP_TYPE_PNG", wxBITMAP_TYPE_PNG },
        { "wxVARIABLE", wxVARIABLE },
        { "wxSYS_SCREEN_SMALL", wxSYS_SCREEN_SMALL },
        { "wxFromStart", wxFromStart },
        { "GMT_1", wxDateTime::GMT_1 },
        { "wxPAPER_ENV_C5", wxPAPER_ENV_C5 },
        { "wxFR_REPLACEDIALOG", wxFR_REPLACEDIALOG },
        { "wxBITMAP_TYPE_ICO", wxBITMAP_TYPE_ICO },
        { "wxAbsolute", wxAbsolute },
        { "wxBITMAP_TYPE_BMP_RESOURCE", wxBITMAP_TYPE_BMP_RESOURCE },
        { "wxBITMAP_TYPE_INVALID", wxBITMAP_TYPE_INVALID },
        { "wxGridSelectColumns", wxGrid::wxGridSelectColumns },
        { "AKDT", wxDateTime::AKDT },
        { "wxSYS_ANSI_FIXED_FONT", wxSYS_ANSI_FIXED_FONT },
        { "Any", wxGridCellAttr::Any },
        { "wxFileWrite", wxFile::wxFileWrite },
        { "BINARY", wxFTP::BINARY },
        { "wxSYS_COLOUR_DESKTOP", wxSYS_COLOUR_DESKTOP },
        { "wxPATH_NORM_LONG", wxPATH_NORM_LONG },
        { "wxPATH_NORM_ABSOLUTE", wxPATH_NORM_ABSOLUTE },
        { "GMT10", wxDateTime::GMT10 },
        { "wxPATH_NORM_TILDE", wxPATH_NORM_TILDE },
        { "wxSOCKET_NOHOST", wxSOCKET_NOHOST },
        { "wxPATH_OS2", wxPATH_OS2 },
        { "wxPATH_DOS", wxPATH_DOS },
        { "wxPATH_UNIX", wxPATH_UNIX },
        { "wxSYS_DRAG_Y", wxSYS_DRAG_Y },
        { "wxEAST", wxEAST },
        { "wxEOL_NATIVE", wxEOL_NATIVE },
        { "wxBORDER_MASK", wxBORDER_MASK },
        { "wxBORDER_DOUBLE", wxBORDER_DOUBLE },
        { "wxPAPER_LEGAL", wxPAPER_LEGAL },
        { "wxBORDER_SIMPLE", wxBORDER_SIMPLE },
        { "wxBORDER_STATIC", wxBORDER_STATIC },
        { "wxBORDER_NONE", wxBORDER_NONE },
        { "wxBORDER_DEFAULT", wxBORDER_DEFAULT },
        { "wxFONTENCODING_CP1252", wxFONTENCODING_CP1252 },
        { "wxSOCKET_MEMERR", wxSOCKET_MEMERR },
        { "wxALIGN_LEFT", wxALIGN_LEFT },
        { "wxEXPAND", wxEXPAND },
        { "wxSYS_COLOUR_BTNHIGHLIGHT", wxSYS_COLOUR_BTNHIGHLIGHT },
        { "wxFONTENCODING_CP874", wxFONTENCODING_CP874 },
        { "wxCURSOR_POINT_LEFT", wxCURSOR_POINT_LEFT },
        { "wxSHRINK", wxSHRINK },
        { "wxSTRETCH_NOT", wxSTRETCH_NOT },
        { "wxFONTENCODING_ISO8859_12", wxFONTENCODING_ISO8859_12 },
        { "wxPAPER_ENV_PERSONAL", wxPAPER_ENV_PERSONAL },
        { "wxALIGN_CENTER", wxALIGN_CENTER },
        { "wxKEY_STRING", wxKEY_STRING },
        { "wxSCRIPT", wxSCRIPT },
        { "wxALIGN_CENTRE_VERTICAL", wxALIGN_CENTRE_VERTICAL },
        { "wxALIGN_RIGHT", wxALIGN_RIGHT },
        { "Merged", wxGridCellAttr::Merged },
        { "wxPAPER_A3_TRANSVERSE", wxPAPER_A3_TRANSVERSE },
        { "wxDF_OEMTEXT", wxDF_OEMTEXT },
        { "wxOutRight", wxOutRight },
        { "wxSYS_COLOUR_3DHIGHLIGHT", wxSYS_COLOUR_3DHIGHLIGHT },
        { "wxPRINTER_CANCELLED", wxPRINTER_CANCELLED },
        { "wxSYS_COLOUR_ACTIVECAPTION", wxSYS_COLOUR_ACTIVECAPTION },
        { "wxSASH_TOP", wxSASH_TOP },
        { "wxSYS_COLOUR_GRADIENTACTIVECAPTION", wxSYS_COLOUR_GRADIENTACTIVECAPTION },
        { "wxBITMAP_TYPE_JPEG_RESOURCE", wxBITMAP_TYPE_JPEG_RESOURCE },
        { "wxSYS_COLOUR_MENU", wxSYS_COLOUR_MENU },
        { "wxBITMAP_TYPE_PICT", wxBITMAP_TYPE_PICT },
        { "wxPAPER_LEDGER", wxPAPER_LEDGER },
        { "wxCURSOR_BULLSEYE", wxCURSOR_BULLSEYE },
        { "wxSYS_WINDOWMIN_Y", wxSYS_WINDOWMIN_Y },
        { "wxRIGHT", wxRIGHT },
        { "Sat", wxDateTime::Sat },
        { "wxPRINT_QUALITY_DRAFT", wxPRINT_QUALITY_DRAFT },
        { "GMT_12", wxDateTime::GMT_12 },
        { "wxPAPER_A3", wxPAPER_A3 },
        { "wxFONTFAMILY_ROMAN", wxFONTFAMILY_ROMAN },
        { "wxLAYOUT_BOTTOM", wxLAYOUT_BOTTOM },
        { "wxBITMAP_TYPE_XPM", wxBITMAP_TYPE_XPM },
        { "wxPRINT_MODE_PREVIEW", wxPRINT_MODE_PREVIEW },
        { "wxCAL_NO_MONTH_CHANGE", wxCAL_NO_MONTH_CHANGE },
        { "wxSYS_EDGE_Y", wxSYS_EDGE_Y },
        { "wxNORMAL", wxNORMAL },
        { "wxFONTWEIGHT_LIGHT", wxFONTWEIGHT_LIGHT },
        { "wxSYS_CAN_DRAW_FRAME_DECORATIONS", wxSYS_CAN_DRAW_FRAME_DECORATIONS },
        { "wxLIST_FORMAT_RIGHT", wxLIST_FORMAT_RIGHT },
        { "EDT", wxDateTime::EDT },
        { "wxFONTENCODING_ISO8859_7", wxFONTENCODING_ISO8859_7 },
        { "wxTILE", wxTILE },
        { "wxLAYOUT_TOP", wxLAYOUT_TOP },
        { "wxITEM_RADIO", wxITEM_RADIO },
        { "wxBITMAP_TYPE_PCX_RESOURCE", wxBITMAP_TYPE_PCX_RESOURCE },
        { "wxPAPER_A4_EXTRA", wxPAPER_A4_EXTRA },
        { "wxPROTO_NOERR", wxPROTO_NOERR },
        { "wxPAPER_ENV_C3", wxPAPER_ENV_C3 },
        { "wxPAPER_ENV_11", wxPAPER_ENV_11 },
        { "wxSYS_BORDER_Y", wxSYS_BORDER_Y },
        { "wxCURSOR_PENCIL", wxCURSOR_PENCIL },
        { "wxBDIAGONAL_HATCH", wxBDIAGONAL_HATCH },
        { "Get", wxDataObject::Get },
        { "Jul", wxDateTime::Jul },
        { "wxLIST_FORMAT_CENTER", wxLIST_FORMAT_CENTER },
        { "wxSYS_HTHUMB_X", wxSYS_HTHUMB_X },
        { "wxKEY_INTEGER", wxKEY_INTEGER },
        { "wxLAYOUT_HORIZONTAL", wxLAYOUT_HORIZONTAL },
        { "wxSYS_CAPTION_Y", wxSYS_CAPTION_Y },
        { "wxCURSOR_WATCH", wxCURSOR_WATCH },
        { "wxTreeItemIcon_Normal", wxTreeItemIcon_Normal },
        { "wxFONTENCODING_CP936", wxFONTENCODING_CP936 },
        { "wxPRINT_MODE_PRINTER", wxPRINT_MODE_PRINTER },
        { "wxPAPER_LETTER_EXTRA_TRANSVERSE", wxPAPER_LETTER_EXTRA_TRANSVERSE },
        { "wxPAPER_ENV_C6", wxPAPER_ENV_C6 },
        { "wxBITMAP_TYPE_RESOURCE", wxBITMAP_TYPE_RESOURCE },
        { "wxSYS_COLOUR_MENUBAR", wxSYS_COLOUR_MENUBAR },
        { "wxCURSOR_SIZEWE", wxCURSOR_SIZEWE },
        { "wxFDIAGONAL_HATCH", wxFDIAGONAL_HATCH },
        { "Apr", wxDateTime::Apr },
        { "Feb", wxDateTime::Feb },
        { "wxITEM_MAX", wxITEM_MAX },
        { "wxSYS_ICON_Y", wxSYS_ICON_Y },
        { "Russia", wxDateTime::Russia },
        { "wxACCEL_NORMAL", wxACCEL_NORMAL },
        { "UK", wxDateTime::UK },
        { "wxFONTENCODING_ISO8859_4", wxFONTENCODING_ISO8859_4 },
        { "wxCURSOR_SIZING", wxCURSOR_SIZING },
        { "wxSWISS", wxSWISS },
        { "wxSYS_ICONSPACING_X", wxSYS_ICONSPACING_X },
        { "wxHeight", wxHeight },
        { "Julian", wxDateTime::Julian },
        { "UTC", wxDateTime::UTC },
        { "wxSYS_FRAMESIZE_Y", wxSYS_FRAMESIZE_Y },
        { "A_WST", wxDateTime::A_WST },
        { "wxPAPER_10X14", wxPAPER_10X14 },
        { "wxGridSelectCells", wxGrid::wxGridSelectCells },
        { "wxSYS_ICON_X", wxSYS_ICON_X },
        { "wxDF_RIFF", wxDF_RIFF },
        { "wxLAYOUT_LEFT", wxLAYOUT_LEFT },
        { "MST", wxDateTime::MST },
        { "wxSYS_COLOUR_3DFACE", wxSYS_COLOUR_3DFACE },
        { "wxRE_NOTBOL", wxRE_NOTBOL },
        { "wxSYS_SCREEN_NONE", wxSYS_SCREEN_NONE },
        { "wxPRINT_QUALITY_HIGH", wxPRINT_QUALITY_HIGH },
        { "wxCURSOR_SIZENESW", wxCURSOR_SIZENESW },
        { "CST", wxDateTime::CST },
        { "wxCAL_MONDAY_FIRST", wxCAL_MONDAY_FIRST },
        { "EEST", wxDateTime::EEST },
        { "ADT", wxDateTime::ADT },
        { "wxPAPER_A4", wxPAPER_A4 },
        { "wxSYS_DCLICK_Y", wxSYS_DCLICK_Y },
        { "wxSYS_EDGE_X", wxSYS_EDGE_X },
        { "MSD", wxDateTime::MSD },
        { "wxLIST_FORMAT_CENTRE", wxLIST_FORMAT_CENTRE },
        { "wxDF_MAX", wxDF_MAX },
        { "wxInRegion", wxInRegion },
        { "wxDF_DIB", wxDF_DIB },
        { "wxSYS_VSCROLL_X", wxSYS_VSCROLL_X },
        { "WEST", wxDateTime::WEST },
        { "wxFONTENCODING_BULGARIAN", wxFONTENCODING_BULGARIAN },
        { "GMT12", wxDateTime::GMT12 },
        { "Local", wxDateTime::Local },
        { "wxPROTO_ABRT", wxPROTO_ABRT },
        { "May", wxDateTime::May },
        { "wxFONTENCODING_ISO8859_3", wxFONTENCODING_ISO8859_3 },
        { "wxSYS_COLOUR_SCROLLBAR", wxSYS_COLOUR_SCROLLBAR },
        { "wxPROTO_RCNCT", wxPROTO_RCNCT },
        { "wxDF_HTML", wxDF_HTML },
        { "wxSYS_SMALLICON_Y", wxSYS_SMALLICON_Y },
        { "wxFONTFAMILY_MAX", wxFONTFAMILY_MAX },
        { "wxOutRegion", wxOutRegion },
        { "wxPAPER_JAPANESE_POSTCARD", wxPAPER_JAPANESE_POSTCARD },
        { "wxSYS_DEFAULT_PALETTE", wxSYS_DEFAULT_PALETTE },
        { "wxSTIPPLE_MASK", wxSTIPPLE_MASK },
        { "wxCentreX", wxCentreX },
        { "GMT_5", wxDateTime::GMT_5 },
        { "GMT_2", wxDateTime::GMT_2 },
        { "wxPAPER_B5", wxPAPER_B5 },
        { "GMT_11", wxDateTime::GMT_11 },
        { "wxSYS_COLOUR_BTNHILIGHT", wxSYS_COLOUR_BTNHILIGHT },
        { "wxBITMAP_TYPE_MACCURSOR", wxBITMAP_TYPE_MACCURSOR },
        { "wxFONTENCODING_CP437", wxFONTENCODING_CP437 },
        { "wxCURSOR_MIDDLE_BUTTON", wxCURSOR_MIDDLE_BUTTON },
        { "wxLIST_FORMAT_LEFT", wxLIST_FORMAT_LEFT },
        { "Inv_WeekDay", wxDateTime::Inv_WeekDay },
        { "wxSYS_COLOUR_BTNFACE", wxSYS_COLOUR_BTNFACE },
        { "wxRE_EXTENDED", wxRE_EXTENDED },
        { "Type_Unknown", wxConfigBase::Type_Unknown },
        { "wxSYS_COLOUR_BTNSHADOW", wxSYS_COLOUR_BTNSHADOW },
        { "wxSYS_SCREEN_PDA", wxSYS_SCREEN_PDA },
        { "wxDrag_DefaultMove", wxDrag_DefaultMove },
        { "Set", wxDataObject::Set },
        { "wxPAPER_CSHEET", wxPAPER_CSHEET },
        { "wxPAPER_B5_EXTRA", wxPAPER_B5_EXTRA },
        { "wxDF_LOCALE", wxDF_LOCALE },
        { "wxHIDE_READONLY", wxHIDE_READONLY },
        { "wxDF_METAFILE", wxDF_METAFILE },
        { "wxSYS_COLOUR_HIGHLIGHTTEXT", wxSYS_COLOUR_HIGHLIGHTTEXT },
        { "wxSYS_COLOUR_INACTIVECAPTION", wxSYS_COLOUR_INACTIVECAPTION },
        { "wxCAL_HITTEST_NOWHERE", wxCAL_HITTEST_NOWHERE },
        { "wxDF_BITMAP", wxDF_BITMAP },
        { "wxFONTENCODING_CP1253", wxFONTENCODING_CP1253 },
        { "wxSYS_DCLICK_X", wxSYS_DCLICK_X },
        { "wxPAPER_NONE", wxPAPER_NONE },
        { "wxPAPER_A3_EXTRA_TRANSVERSE", wxPAPER_A3_EXTRA_TRANSVERSE },
        { "wxRE_NEWLINE", wxRE_NEWLINE },
        { "wxEOL_DOS", wxEOL_DOS },
        { "wxPAPER_EXECUTIVE", wxPAPER_EXECUTIVE },
        { "GMT11", wxDateTime::GMT11 },
        { "wxFONTSTYLE_NORMAL", wxFONTSTYLE_NORMAL },
        { "wxHORIZONTAL_HATCH", wxHORIZONTAL_HATCH },
        { "wxCAL_SHOW_HOLIDAYS", wxCAL_SHOW_HOLIDAYS },
        { "wxSYS_CURSOR_Y", wxSYS_CURSOR_Y },
        { "wxPAPER_ENV_C65", wxPAPER_ENV_C65 },
        { "wxBITMAP_TYPE_XBM", wxBITMAP_TYPE_XBM },
        { "wxFromCurrent", wxFromCurrent },
        { "wxPAPER_A_PLUS", wxPAPER_A_PLUS },
        { "wxCURSOR_HAND", wxCURSOR_HAND },
        { "wxOPEN", wxOPEN },
        { "wxCAL_HITTEST_INCMONTH", wxCAL_HITTEST_INCMONTH },
        { "GMT0", wxDateTime::GMT0 },
        { "wxSYS_DEFAULT_GUI_FONT", wxSYS_DEFAULT_GUI_FONT },
        { "wxRE_BASIC", wxRE_BASIC },
        { "wxSLANT", wxSLANT },
        { "wxBITMAP_TYPE_TIF_RESOURCE", wxBITMAP_TYPE_TIF_RESOURCE },
        { "ASCII", wxFTP::ASCII },
        { "wxCURSOR_DEFAULT", wxCURSOR_DEFAULT },
        { "wxFONTENCODING_ISO8859_13", wxFONTENCODING_ISO8859_13 },
        { "wxCURSOR_SPRAYCAN", wxCURSOR_SPRAYCAN },
        { "wxFONTENCODING_CP1256", wxFONTENCODING_CP1256 },
    };
    count = 1845;
    return defineList;
};

WXLUASTRING *GetStringList(size_t &count)
{
    static WXLUASTRING stringList[] =
    {
        { "wxGRID_VALUE_FLOAT", wxGRID_VALUE_FLOAT },
        { "wxGRID_VALUE_BOOL", wxGRID_VALUE_BOOL },
        { "wxGRID_VALUE_LONG", wxGRID_VALUE_LONG },
        { "wxGRID_VALUE_NUMBER", wxGRID_VALUE_NUMBER },
        { "wxGRID_VALUE_TEXT", wxGRID_VALUE_TEXT },
        { "wxGRID_VALUE_CHOICE", wxGRID_VALUE_CHOICE },
        { "wxGRID_VALUE_STRING", wxGRID_VALUE_STRING },
    };
    count = 7;
    return stringList;
};

WXLUAEVENT *GetEventList(size_t &count)
{
    static WXLUAEVENT eventList[] =
    {
        { &wxEVT_DEBUG_EVALUATE_EXPR, "wxEVT_DEBUG_EVALUATE_EXPR", &s_wxLuaDebugEvent },
        { &wxEVT_SCROLLWIN_LINEUP, "wxEVT_SCROLLWIN_LINEUP", &s_wxScrollWinEvent },
        { &wxEVT_GRID_EDITOR_CREATED, "wxEVT_GRID_EDITOR_CREATED", &s_wxGridEditorCreatedEvent },
        { &cbEVT_PL_RIGHT_DOWN, "cbEVT_PL_RIGHT_DOWN", &s_cbUpdatesManagerBase },
        { &wxEVT_COMMAND_LIST_COL_RIGHT_CLICK, "wxEVT_COMMAND_LIST_COL_RIGHT_CLICK", &s_wxListEvent },
        { &wxEVT_TASKBAR_RIGHT_UP, "wxEVT_TASKBAR_RIGHT_UP", &s_wxTaskBarIconEvent },
        { &wxEVT_STC_UPDATEUI, "wxEVT_STC_UPDATEUI", &s_wxStyledTextEvent },
        { &wxEVT_SCROLLWIN_LINEDOWN, "wxEVT_SCROLLWIN_LINEDOWN", &s_wxScrollWinEvent },
        { &cbEVT_PL_START_BAR_DRAGGING, "cbEVT_PL_START_BAR_DRAGGING", &s_cbUpdatesManagerBase },
        { &wxEVT_RIGHT_DOWN, "wxEVT_RIGHT_DOWN", &s_wxMouseEvent },
        { &wxEVT_RIGHT_DCLICK, "wxEVT_RIGHT_DCLICK", &s_wxMouseEvent },
        { &wxEVT_SCROLL_LINEDOWN, "wxEVT_SCROLL_LINEDOWN", &s_wxSpinEvent },
        { &wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS, "wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS", &s_wxListEvent },
        { &wxEVT_STC_CHANGE, "wxEVT_STC_CHANGE", &s_wxStyledTextEvent },
        { &wxEVT_COMMAND_TREE_ITEM_EXPANDING, "wxEVT_COMMAND_TREE_ITEM_EXPANDING", &s_wxTreeEvent },
        { &wxEVT_COMMAND_LIST_ITEM_ACTIVATED, "wxEVT_COMMAND_LIST_ITEM_ACTIVATED", &s_wxListEvent },
        { &wxEVT_COMMAND_TREE_BEGIN_DRAG, "wxEVT_COMMAND_TREE_BEGIN_DRAG", &s_wxTreeEvent },
        { &wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, "wxEVT_COMMAND_TOGGLEBUTTON_CLICKED", &s_wxCommandEvent },
        { &wxEVT_CALCULATE_LAYOUT, "wxEVT_CALCULATE_LAYOUT", &s_wxCalculateLayoutEvent },
        { &wxEVT_COMMAND_KILL_FOCUS, "wxEVT_COMMAND_KILL_FOCUS", &s_wxCommandEvent },
        { &wxEVT_COMMAND_TEXT_URL, "wxEVT_COMMAND_TEXT_URL", &s_wxCommandEvent },
        { &wxEVT_COMMAND_TEXT_MAXLEN, "wxEVT_COMMAND_TEXT_MAXLEN", &s_wxCommandEvent },
        { &wxEVT_JOY_ZMOVE, "wxEVT_JOY_ZMOVE", &s_wxJoystickEvent },
        { &wxEVT_COMMAND_TAB_SEL_CHANGING, "wxEVT_COMMAND_TAB_SEL_CHANGING", &s_wxTabEvent },
        { &wxEVT_STC_ZOOM, "wxEVT_STC_ZOOM", &s_wxStyledTextEvent },
        { &wxEVT_MOVE, "wxEVT_MOVE", &s_wxMoveEvent },
        { &wxEVT_NC_LEFT_DCLICK, "wxEVT_NC_LEFT_DCLICK", &s_wxMouseEvent },
        { &wxEVT_DEBUG_BREAK, "wxEVT_DEBUG_BREAK", &s_wxLuaDebugEvent },
        { &wxEVT_COMMAND_LIST_GET_INFO, "wxEVT_COMMAND_LIST_GET_INFO", &s_wxListEvent },
        { &wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING, "wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING", &s_wxSplitterEvent },
        { &wxEVT_STC_DO_DROP, "wxEVT_STC_DO_DROP", &s_wxStyledTextEvent },
        { &wxEVT_STC_DRAG_OVER, "wxEVT_STC_DRAG_OVER", &s_wxStyledTextEvent },
        { &wxEVT_CALENDAR_SEL_CHANGED, "wxEVT_CALENDAR_SEL_CHANGED", &s_wxCalendarEvent },
        { &wxEVT_NC_RIGHT_DOWN, "wxEVT_NC_RIGHT_DOWN", &s_wxMouseEvent },
        { &wxEVT_GRID_CELL_RIGHT_CLICK, "wxEVT_GRID_CELL_RIGHT_CLICK", &s_wxGridEvent },
        { &wxEVT_NC_LEFT_UP, "wxEVT_NC_LEFT_UP", &s_wxMouseEvent },
        { &wxEVT_COMMAND_LIST_KEY_DOWN, "wxEVT_COMMAND_LIST_KEY_DOWN", &s_wxListEvent },
        { &cbEVT_PL_DRAW_ROW_DECOR, "cbEVT_PL_DRAW_ROW_DECOR", &s_cbUpdatesManagerBase },
        { &wxEVT_STC_DWELLSTART, "wxEVT_STC_DWELLSTART", &s_wxStyledTextEvent },
        { &wxEVT_STC_URIDROPPED, "wxEVT_STC_URIDROPPED", &s_wxStyledTextEvent },
        { &wxEVT_STC_USERLISTSELECTION, "wxEVT_STC_USERLISTSELECTION", &s_wxStyledTextEvent },
        { &wxEVT_SCROLL_LINEUP, "wxEVT_SCROLL_LINEUP", &s_wxSpinEvent },
        { &wxEVT_IDLE, "wxEVT_IDLE", &s_wxIdleEvent },
        { &cbEVT_PL_RESIZE_BAR, "cbEVT_PL_RESIZE_BAR", &s_cbUpdatesManagerBase },
        { &wxEVT_SCROLLWIN_PAGEDOWN, "wxEVT_SCROLLWIN_PAGEDOWN", &s_wxScrollWinEvent },
        { &wxEVT_STC_PAINTED, "wxEVT_STC_PAINTED", &s_wxStyledTextEvent },
        { &wxEVT_END_SESSION, "wxEVT_END_SESSION", &s_wxCloseEvent },
        { &wxEVT_STC_NEEDSHOWN, "wxEVT_STC_NEEDSHOWN", &s_wxStyledTextEvent },
        { &wxEVT_COMMAND_LIST_ITEM_SELECTED, "wxEVT_COMMAND_LIST_ITEM_SELECTED", &s_wxListEvent },
        { &wxEVT_ACTIVATE, "wxEVT_ACTIVATE", &s_wxActivateEvent },
        { &wxEVT_COMMAND_TEXT_UPDATED, "wxEVT_COMMAND_TEXT_UPDATED", &s_wxCommandEvent },
        { &wxEVT_NC_LEAVE_WINDOW, "wxEVT_NC_LEAVE_WINDOW", &s_wxMouseEvent },
        { &wxEVT_STC_MARGINCLICK, "wxEVT_STC_MARGINCLICK", &s_wxStyledTextEvent },
        { &wxEVT_STC_MACRORECORD, "wxEVT_STC_MACRORECORD", &s_wxStyledTextEvent },
        { &wxEVT_STC_MODIFIED, "wxEVT_STC_MODIFIED", &s_wxStyledTextEvent },
        { &wxEVT_GRID_CELL_CHANGE, "wxEVT_GRID_CELL_CHANGE", &s_wxGridRangeSelectEvent },
        { &wxEVT_JOY_MOVE, "wxEVT_JOY_MOVE", &s_wxJoystickEvent },
        { &cbEVT_PL_DRAW_HINT_RECT, "cbEVT_PL_DRAW_HINT_RECT", &s_cbUpdatesManagerBase },
        { &wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK, "wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK", &s_wxTreeEvent },
        { &wxEVT_STC_KEY, "wxEVT_STC_KEY", &s_wxStyledTextEvent },
        { &wxEVT_STC_ROMODIFYATTEMPT, "wxEVT_STC_ROMODIFYATTEMPT", &s_wxStyledTextEvent },
        { &wxEVT_COMMAND_TREE_SET_INFO, "wxEVT_COMMAND_TREE_SET_INFO", &s_wxTreeEvent },
        { &wxEVT_COMMAND_LIST_COL_END_DRAG, "wxEVT_COMMAND_LIST_COL_END_DRAG", &s_wxListEvent },
        { &wxEVT_COMMAND_LEFT_CLICK, "wxEVT_COMMAND_LEFT_CLICK", &s_wxCommandEvent },
        { &wxEVT_COMMAND_SPLITTER_UNSPLIT, "wxEVT_COMMAND_SPLITTER_UNSPLIT", &s_wxSplitterEvent },
        { &wxEVT_GRID_SELECT_CELL, "wxEVT_GRID_SELECT_CELL", &s_wxGridRangeSelectEvent },
        { &wxEVT_STC_SAVEPOINTREACHED, "wxEVT_STC_SAVEPOINTREACHED", &s_wxStyledTextEvent },
        { &wxEVT_QUERY_LAYOUT_INFO, "wxEVT_QUERY_LAYOUT_INFO", &s_wxQueryLayoutInfoEvent },
        { &wxEVT_SOCKET, "wxEVT_SOCKET", &s_wxSocketEvent },
        { &wxEVT_STC_CHARADDED, "wxEVT_STC_CHARADDED", &s_wxStyledTextEvent },
        { &wxEVT_COMMAND_LIST_ITEM_DESELECTED, "wxEVT_COMMAND_LIST_ITEM_DESELECTED", &s_wxListEvent },
        { &wxCUSTOM_CB_PLUGIN_EVENTS_START_AT, "wxCUSTOM_CB_PLUGIN_EVENTS_START_AT", &s_cbUpdatesManagerBase },
        { &wxEVT_COMMAND_LIST_ITEM_FOCUSED, "wxEVT_COMMAND_LIST_ITEM_FOCUSED", &s_wxListEvent },
        { &wxEVT_MOTION, "wxEVT_MOTION", &s_wxMouseEvent },
        { &wxEVT_NC_RIGHT_UP, "wxEVT_NC_RIGHT_UP", &s_wxMouseEvent },
        { &wxEVT_TASKBAR_RIGHT_DCLICK, "wxEVT_TASKBAR_RIGHT_DCLICK", &s_wxTaskBarIconEvent },
        { &wxEVT_CALENDAR_YEAR_CHANGED, "wxEVT_CALENDAR_YEAR_CHANGED", &s_wxCalendarEvent },
        { &cbEVT_PL_CUSTOMIZE_LAYOUT, "cbEVT_PL_CUSTOMIZE_LAYOUT", &s_cbUpdatesManagerBase },
        { &cbEVT_PL_CUSTOMIZE_BAR, "cbEVT_PL_CUSTOMIZE_BAR", &s_cbUpdatesManagerBase },
        { &wxEVT_SCROLL_THUMBRELEASE, "wxEVT_SCROLL_THUMBRELEASE", &s_wxScrollEvent },
        { &wxEVT_COMMAND_LISTBOX_SELECTED, "wxEVT_COMMAND_LISTBOX_SELECTED", &s_wxCommandEvent },
        { &wxEVT_ERASE_BACKGROUND, "wxEVT_ERASE_BACKGROUND", &s_wxEraseEvent },
        { &cbEVT_PL_FINISH_DRAW_IN_AREA, "cbEVT_PL_FINISH_DRAW_IN_AREA", &s_cbUpdatesManagerBase },
        { &wxEVT_COMMAND_CHOICE_SELECTED, "wxEVT_COMMAND_CHOICE_SELECTED", &s_wxCommandEvent },
        { &cbEVT_PL_START_DRAW_IN_AREA, "cbEVT_PL_START_DRAW_IN_AREA", &s_cbUpdatesManagerBase },
        { &wxEVT_SCROLLWIN_BOTTOM, "wxEVT_SCROLLWIN_BOTTOM", &s_wxScrollWinEvent },
        { &cbEVT_PL_DRAW_ROW_BKGROUND, "cbEVT_PL_DRAW_ROW_BKGROUND", &s_cbUpdatesManagerBase },
        { &cbEVT_PL_DRAW_PANE_BKGROUND, "cbEVT_PL_DRAW_PANE_BKGROUND", &s_cbUpdatesManagerBase },
        { &wxEVT_LEFT_DOWN, "wxEVT_LEFT_DOWN", &s_wxMouseEvent },
        { &cbEVT_PL_DRAW_ROW_HANDLES, "cbEVT_PL_DRAW_ROW_HANDLES", &s_cbUpdatesManagerBase },
        { &wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, "wxEVT_COMMAND_CHECKLISTBOX_TOGGLED", &s_wxCommandEvent },
        { &wxEVT_COMMAND_FIND, "wxEVT_COMMAND_FIND", &s_wxFindDialogEvent },
        { &wxEVT_COMMAND_TREE_ITEM_EXPANDED, "wxEVT_COMMAND_TREE_ITEM_EXPANDED", &s_wxTreeEvent },
        { &wxEVT_GRID_CELL_LEFT_CLICK, "wxEVT_GRID_CELL_LEFT_CLICK", &s_wxGridEvent },
        { &wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED, "wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED", &s_wxSplitterEvent },
        { &cbEVT_PL_LAYOUT_ROWS, "cbEVT_PL_LAYOUT_ROWS", &s_cbUpdatesManagerBase },
        { &cbEVT_PL_DRAW_PANE_DECOR, "cbEVT_PL_DRAW_PANE_DECOR", &s_cbUpdatesManagerBase },
        { &cbEVT_PL_DRAW_BAR_HANDLES, "cbEVT_PL_DRAW_BAR_HANDLES", &s_cbUpdatesManagerBase },
        { &wxEVT_COMMAND_FIND_NEXT, "wxEVT_COMMAND_FIND_NEXT", &s_wxFindDialogEvent },
        { &wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK, "wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK", &s_wxTreeEvent },
        { &cbEVT_PL_SIZE_BAR_WND, "cbEVT_PL_SIZE_BAR_WND", &s_cbUpdatesManagerBase },
        { &cbEVT_PL_REMOVE_BAR, "cbEVT_PL_REMOVE_BAR", &s_cbUpdatesManagerBase },
        { &cbEVT_PL_INSERT_BAR, "cbEVT_PL_INSERT_BAR", &s_cbUpdatesManagerBase },
        { &cbEVT_PL_RESIZE_ROW, "cbEVT_PL_RESIZE_ROW", &s_cbUpdatesManagerBase },
        { &wxEVT_COMMAND_TEXT_ENTER, "wxEVT_COMMAND_TEXT_ENTER", &s_wxCommandEvent },
        { &cbEVT_PL_LEFT_DCLICK, "cbEVT_PL_LEFT_DCLICK", &s_cbUpdatesManagerBase },
        { &wxEVT_COMMAND_RIGHT_DCLICK, "wxEVT_COMMAND_RIGHT_DCLICK", &s_wxCommandEvent },
        { &wxEVT_DEBUG_PRINT, "wxEVT_DEBUG_PRINT", &s_wxLuaDebugEvent },
        { &cbEVT_PL_MOTION, "cbEVT_PL_MOTION", &s_cbUpdatesManagerBase },
        { &wxEVT_NC_MIDDLE_UP, "wxEVT_NC_MIDDLE_UP", &s_wxMouseEvent },
        { &cbEVT_PL_RIGHT_UP, "cbEVT_PL_RIGHT_UP", &s_cbUpdatesManagerBase },
        { &wxEVT_CHAR, "wxEVT_CHAR", &s_wxKeyEvent },
        { &wxEVT_END_PROCESS, "wxEVT_END_PROCESS", &s_wxProcessEvent },
        { &cbEVT_PL_LEFT_UP, "cbEVT_PL_LEFT_UP", &s_cbUpdatesManagerBase },
        { &cbEVT_PL_LEFT_DOWN, "cbEVT_PL_LEFT_DOWN", &s_cbUpdatesManagerBase },
        { &wxEVT_HTML_TAG_HANDLER, "wxEVT_HTML_TAG_HANDLER", &s_wxLuaHtmlWinTagEvent },
        { &wxEVT_DEBUG_TABLE_ENUM, "wxEVT_DEBUG_TABLE_ENUM", &s_wxLuaDebugEvent },
        { &wxEVT_DEBUG_STACK_ENTRY_ENUM, "wxEVT_DEBUG_STACK_ENTRY_ENUM", &s_wxLuaDebugEvent },
        { &wxEVT_RIGHT_UP, "wxEVT_RIGHT_UP", &s_wxMouseEvent },
        { &wxEVT_MIDDLE_DCLICK, "wxEVT_MIDDLE_DCLICK", &s_wxMouseEvent },
        { &wxEVT_DIALUP_DISCONNECTED, "wxEVT_DIALUP_DISCONNECTED", &s_wxDialUpEvent },
        { &wxEVT_COMMAND_SPLITTER_DOUBLECLICKED, "wxEVT_COMMAND_SPLITTER_DOUBLECLICKED", &s_wxSplitterEvent },
        { &wxEVT_DEBUG_EXIT, "wxEVT_DEBUG_EXIT", &s_wxLuaDebugEvent },
        { &wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, "wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED", &s_wxNotebookEvent },
        { &wxEVT_COMMAND_TREE_KEY_DOWN, "wxEVT_COMMAND_TREE_KEY_DOWN", &s_wxTreeEvent },
        { &wxEVT_GRID_EDITOR_SHOWN, "wxEVT_GRID_EDITOR_SHOWN", &s_wxGridEditorCreatedEvent },
        { &wxEVT_PAINT, "wxEVT_PAINT", &s_wxPaintEvent },
        { &wxEVT_COMMAND_TREE_GET_INFO, "wxEVT_COMMAND_TREE_GET_INFO", &s_wxTreeEvent },
        { &wxEVT_MENU_CLOSE, "wxEVT_MENU_CLOSE", &s_wxMenuEvent },
        { &wxEVT_DEBUG_CLIENT_CONNECTED, "wxEVT_DEBUG_CLIENT_CONNECTED", &s_wxLuaDebugEvent },
        { &wxEVT_MENU_HIGHLIGHT, "wxEVT_MENU_HIGHLIGHT", &s_wxMenuEvent },
        { &wxEVT_GRID_EDITOR_HIDDEN, "wxEVT_GRID_EDITOR_HIDDEN", &s_wxGridEditorCreatedEvent },
        { &wxEVT_STC_DOUBLECLICK, "wxEVT_STC_DOUBLECLICK", &s_wxStyledTextEvent },
        { &cbEVT_PL_DRAW_BAR_DECOR, "cbEVT_PL_DRAW_BAR_DECOR", &s_cbUpdatesManagerBase },
        { &wxEVT_GRID_COL_SIZE, "wxEVT_GRID_COL_SIZE", &s_wxGridSizeEvent },
        { &wxEVT_GRID_ROW_SIZE, "wxEVT_GRID_ROW_SIZE", &s_wxGridSizeEvent },
        { &wxEVT_GRID_LABEL_RIGHT_DCLICK, "wxEVT_GRID_LABEL_RIGHT_DCLICK", &s_wxGridEvent },
        { &wxEVT_HELP, "wxEVT_HELP", &s_wxHelpEvent },
        { &wxEVT_GRID_LABEL_LEFT_DCLICK, "wxEVT_GRID_LABEL_LEFT_DCLICK", &s_wxGridEvent },
        { &wxEVT_COMMAND_FIND_REPLACE_ALL, "wxEVT_COMMAND_FIND_REPLACE_ALL", &s_wxFindDialogEvent },
        { &wxEVT_DETAILED_HELP, "wxEVT_DETAILED_HELP", &s_wxHelpEvent },
        { &wxEVT_COMMAND_SPINCTRL_UPDATED, "wxEVT_COMMAND_SPINCTRL_UPDATED", &s_wxCommandEvent },
        { &wxEVT_MIDDLE_UP, "wxEVT_MIDDLE_UP", &s_wxMouseEvent },
        { &wxEVT_SET_FOCUS, "wxEVT_SET_FOCUS", &s_wxFocusEvent },
        { &wxEVT_COMMAND_TOOL_ENTER, "wxEVT_COMMAND_TOOL_ENTER", &s_wxCommandEvent },
        { &wxEVT_GRID_LABEL_LEFT_CLICK, "wxEVT_GRID_LABEL_LEFT_CLICK", &s_wxGridEvent },
        { &wxEVT_GRID_CELL_RIGHT_DCLICK, "wxEVT_GRID_CELL_RIGHT_DCLICK", &s_wxGridEvent },
        { &wxEVT_ENTER_WINDOW, "wxEVT_ENTER_WINDOW", &s_wxMouseEvent },
        { &wxEVT_GRID_CELL_LEFT_DCLICK, "wxEVT_GRID_CELL_LEFT_DCLICK", &s_wxGridEvent },
        { &wxEVT_SCROLL_PAGEUP, "wxEVT_SCROLL_PAGEUP", &s_wxScrollEvent },
        { &wxEVT_CALENDAR_DOUBLECLICKED, "wxEVT_CALENDAR_DOUBLECLICKED", &s_wxCalendarEvent },
        { &wxEVT_CALENDAR_MONTH_CHANGED, "wxEVT_CALENDAR_MONTH_CHANGED", &s_wxCalendarEvent },
        { &wxEVT_CALENDAR_DAY_CHANGED, "wxEVT_CALENDAR_DAY_CHANGED", &s_wxCalendarEvent },
        { &wxEVT_STC_START_DRAG, "wxEVT_STC_START_DRAG", &s_wxStyledTextEvent },
        { &wxEVT_JOY_BUTTON_UP, "wxEVT_JOY_BUTTON_UP", &s_wxJoystickEvent },
        { &wxEVT_COMMAND_FIND_REPLACE, "wxEVT_COMMAND_FIND_REPLACE", &s_wxFindDialogEvent },
        { &wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK, "wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK", &s_wxListEvent },
        { &wxEVT_STC_SAVEPOINTLEFT, "wxEVT_STC_SAVEPOINTLEFT", &s_wxStyledTextEvent },
        { &wxEVT_COMMAND_TREE_SEL_CHANGING, "wxEVT_COMMAND_TREE_SEL_CHANGING", &s_wxTreeEvent },
        { &wxEVT_TIMER, "wxEVT_TIMER", &s_wxTimerEvent },
        { &wxEVT_COMMAND_TOOL_RCLICKED, "wxEVT_COMMAND_TOOL_RCLICKED", &s_wxCommandEvent },
        { &wxEVT_DEBUG_ERROR, "wxEVT_DEBUG_ERROR", &s_wxLuaDebugEvent },
        { &wxEVT_COMMAND_TREE_ITEM_COLLAPSING, "wxEVT_COMMAND_TREE_ITEM_COLLAPSING", &s_wxTreeEvent },
        { &wxEVT_COMMAND_TREE_ITEM_COLLAPSED, "wxEVT_COMMAND_TREE_ITEM_COLLAPSED", &s_wxTreeEvent },
        { &wxEVT_COMMAND_TREE_ITEM_ACTIVATED, "wxEVT_COMMAND_TREE_ITEM_ACTIVATED", &s_wxTreeEvent },
        { &wxEVT_MENU_OPEN, "wxEVT_MENU_OPEN", &s_wxMenuEvent },
        { &wxEVT_COMMAND_TAB_SEL_CHANGED, "wxEVT_COMMAND_TAB_SEL_CHANGED", &s_wxTabEvent },
        { &wxEVT_SCROLL_ENDSCROLL, "wxEVT_SCROLL_ENDSCROLL", &s_wxScrollEvent },
        { &wxEVT_COMMAND_TOOL_CLICKED, "wxEVT_COMMAND_TOOL_CLICKED", &s_wxCommandEvent },
        { &wxEVT_STC_STYLENEEDED, "wxEVT_STC_STYLENEEDED", &s_wxStyledTextEvent },
        { &wxEVT_COMMAND_LIST_BEGIN_RDRAG, "wxEVT_COMMAND_LIST_BEGIN_RDRAG", &s_wxListEvent },
        { &wxEVT_COMMAND_SET_FOCUS, "wxEVT_COMMAND_SET_FOCUS", &s_wxCommandEvent },
        { &wxEVT_CONTEXT_MENU, "wxEVT_CONTEXT_MENU", &s_wxHelpEvent },
        { &wxEVT_COMMAND_BUTTON_CLICKED, "wxEVT_COMMAND_BUTTON_CLICKED", &s_wxCommandEvent },
        { &wxEVT_COMMAND_LIST_COL_BEGIN_DRAG, "wxEVT_COMMAND_LIST_COL_BEGIN_DRAG", &s_wxListEvent },
        { &wxEVT_COMMAND_TREE_BEGIN_RDRAG, "wxEVT_COMMAND_TREE_BEGIN_RDRAG", &s_wxTreeEvent },
        { &wxEVT_NC_ENTER_WINDOW, "wxEVT_NC_ENTER_WINDOW", &s_wxMouseEvent },
        { &wxEVT_COMMAND_LIST_COL_DRAGGING, "wxEVT_COMMAND_LIST_COL_DRAGGING", &s_wxListEvent },
        { &wxEVT_UPDATE_UI, "wxEVT_UPDATE_UI", &s_wxUpdateUIEvent },
        { &wxEVT_COMMAND_TREE_DELETE_ITEM, "wxEVT_COMMAND_TREE_DELETE_ITEM", &s_wxTreeEvent },
        { &wxEVT_COMMAND_RADIOBOX_SELECTED, "wxEVT_COMMAND_RADIOBOX_SELECTED", &s_wxCommandEvent },
        { &wxEVT_NC_MIDDLE_DCLICK, "wxEVT_NC_MIDDLE_DCLICK", &s_wxMouseEvent },
        { &wxEVT_KILL_FOCUS, "wxEVT_KILL_FOCUS", &s_wxFocusEvent },
        { &wxEVT_COMMAND_LIST_CACHE_HINT, "wxEVT_COMMAND_LIST_CACHE_HINT", &s_wxListEvent },
        { &wxEVT_QUERY_END_SESSION, "wxEVT_QUERY_END_SESSION", &s_wxCloseEvent },
        { &wxEVT_STC_DWELLEND, "wxEVT_STC_DWELLEND", &s_wxStyledTextEvent },
        { &wxEVT_COMMAND_TREE_SEL_CHANGED, "wxEVT_COMMAND_TREE_SEL_CHANGED", &s_wxTreeEvent },
        { &wxEVT_JOY_BUTTON_DOWN, "wxEVT_JOY_BUTTON_DOWN", &s_wxJoystickEvent },
        { &wxEVT_COMMAND_TREE_END_LABEL_EDIT, "wxEVT_COMMAND_TREE_END_LABEL_EDIT", &s_wxTreeEvent },
        { &wxEVT_SCROLLWIN_PAGEUP, "wxEVT_SCROLLWIN_PAGEUP", &s_wxScrollWinEvent },
        { &wxEVT_SCROLLWIN_THUMBTRACK, "wxEVT_SCROLLWIN_THUMBTRACK", &s_wxScrollWinEvent },
        { &wxEVT_COMMAND_LIST_INSERT_ITEM, "wxEVT_COMMAND_LIST_INSERT_ITEM", &s_wxListEvent },
        { &wxEVT_COMMAND_LIST_END_LABEL_EDIT, "wxEVT_COMMAND_LIST_END_LABEL_EDIT", &s_wxListEvent },
        { &wxEVT_NC_RIGHT_DCLICK, "wxEVT_NC_RIGHT_DCLICK", &s_wxMouseEvent },
        { &wxEVT_TASKBAR_MOVE, "wxEVT_TASKBAR_MOVE", &s_wxTaskBarIconEvent },
        { &wxEVT_COMMAND_LIST_DELETE_ITEM, "wxEVT_COMMAND_LIST_DELETE_ITEM", &s_wxListEvent },
        { &wxEVT_COMMAND_SCROLLBAR_UPDATED, "wxEVT_COMMAND_SCROLLBAR_UPDATED", &s_wxCommandEvent },
        { &wxEVT_SCROLLWIN_THUMBRELEASE, "wxEVT_SCROLLWIN_THUMBRELEASE", &s_wxScrollWinEvent },
        { &wxEVT_COMMAND_LIST_COL_CLICK, "wxEVT_COMMAND_LIST_COL_CLICK", &s_wxListEvent },
        { &wxEVT_GRID_RANGE_SELECT, "wxEVT_GRID_RANGE_SELECT", &s_wxGridRangeSelectEvent },
        { &wxEVT_COMMAND_LIST_SET_INFO, "wxEVT_COMMAND_LIST_SET_INFO", &s_wxListEvent },
        { &wxEVT_COMMAND_COMBOBOX_SELECTED, "wxEVT_COMMAND_COMBOBOX_SELECTED", &s_wxCommandEvent },
        { &wxEVT_GRID_LABEL_RIGHT_CLICK, "wxEVT_GRID_LABEL_RIGHT_CLICK", &s_wxGridEvent },
        { &wxEVT_COMMAND_FIND_CLOSE, "wxEVT_COMMAND_FIND_CLOSE", &s_wxFindDialogEvent },
        { &wxEVT_COMMAND_TREE_END_DRAG, "wxEVT_COMMAND_TREE_END_DRAG", &s_wxTreeEvent },
        { &wxEVT_TASKBAR_LEFT_UP, "wxEVT_TASKBAR_LEFT_UP", &s_wxTaskBarIconEvent },
        { &wxEVT_COMMAND_MENU_SELECTED, "wxEVT_COMMAND_MENU_SELECTED", &s_wxCommandEvent },
        { &wxEVT_LEAVE_WINDOW, "wxEVT_LEAVE_WINDOW", &s_wxMouseEvent },
        { &wxEVT_TASKBAR_RIGHT_DOWN, "wxEVT_TASKBAR_RIGHT_DOWN", &s_wxTaskBarIconEvent },
        { &wxEVT_SCROLLWIN_TOP, "wxEVT_SCROLLWIN_TOP", &s_wxScrollWinEvent },
        { &wxEVT_KEY_UP, "wxEVT_KEY_UP", &s_wxKeyEvent },
        { &wxEVT_COMMAND_SLIDER_UPDATED, "wxEVT_COMMAND_SLIDER_UPDATED", &s_wxCommandEvent },
        { &wxEVT_NC_LEFT_DOWN, "wxEVT_NC_LEFT_DOWN", &s_wxMouseEvent },
        { &cbEVT_PL_LAYOUT_ROW, "cbEVT_PL_LAYOUT_ROW", &s_cbUpdatesManagerBase },
        { &wxEVT_SCROLL_BOTTOM, "wxEVT_SCROLL_BOTTOM", &s_wxScrollEvent },
        { &wxEVT_COMMAND_RIGHT_CLICK, "wxEVT_COMMAND_RIGHT_CLICK", &s_wxCommandEvent },
        { &wxEVT_COMMAND_CHECKBOX_CLICKED, "wxEVT_COMMAND_CHECKBOX_CLICKED", &s_wxCommandEvent },
        { &wxEVT_TASKBAR_LEFT_DCLICK, "wxEVT_TASKBAR_LEFT_DCLICK", &s_wxTaskBarIconEvent },
        { &wxEVT_COMMAND_LIST_BEGIN_DRAG, "wxEVT_COMMAND_LIST_BEGIN_DRAG", &s_wxListEvent },
        { &wxEVT_TASKBAR_LEFT_DOWN, "wxEVT_TASKBAR_LEFT_DOWN", &s_wxTaskBarIconEvent },
        { &wxEVT_COMMAND_RADIOBUTTON_SELECTED, "wxEVT_COMMAND_RADIOBUTTON_SELECTED", &s_wxCommandEvent },
        { &wxEVT_SCROLL_PAGEDOWN, "wxEVT_SCROLL_PAGEDOWN", &s_wxScrollEvent },
        { &wxEVT_DIALUP_CONNECTED, "wxEVT_DIALUP_CONNECTED", &s_wxDialUpEvent },
        { &wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, "wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING", &s_wxNotebookEvent },
        { &wxEVT_COMMAND_LEFT_DCLICK, "wxEVT_COMMAND_LEFT_DCLICK", &s_wxCommandEvent },
        { &wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, "wxEVT_COMMAND_LISTBOX_DOUBLECLICKED", &s_wxCommandEvent },
        { &wxEVT_INIT_DIALOG, "wxEVT_INIT_DIALOG", &s_wxInitDialogEvent },
        { &wxEVT_NC_MOTION, "wxEVT_NC_MOTION", &s_wxMouseEvent },
        { &wxEVT_DROP_FILES, "wxEVT_DROP_FILES", &s_wxDropFilesEvent },
        { &wxEVT_COMMAND_ENTER, "wxEVT_COMMAND_ENTER", &s_wxCommandEvent },
        { &wxEVT_CLOSE_WINDOW, "wxEVT_CLOSE_WINDOW", &s_wxCloseEvent },
        { &wxEVT_SASH_DRAGGED, "wxEVT_SASH_DRAGGED", &s_wxSashEvent },
        { &wxEVT_LEFT_UP, "wxEVT_LEFT_UP", &s_wxMouseEvent },
        { &wxEVT_NC_MIDDLE_DOWN, "wxEVT_NC_MIDDLE_DOWN", &s_wxMouseEvent },
        { &wxEVT_ACTIVATE_APP, "wxEVT_ACTIVATE_APP", &s_wxActivateEvent },
        { &wxEVT_MIDDLE_DOWN, "wxEVT_MIDDLE_DOWN", &s_wxMouseEvent },
        { &wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK, "wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK", &s_wxListEvent },
        { &wxEVT_SCROLL_THUMBTRACK, "wxEVT_SCROLL_THUMBTRACK", &s_wxSpinEvent },
        { &wxEVT_SYS_COLOUR_CHANGED, "wxEVT_SYS_COLOUR_CHANGED", &s_wxSysColourChangedEvent },
        { &wxEVT_DEBUG_STACK_ENUM, "wxEVT_DEBUG_STACK_ENUM", &s_wxLuaDebugEvent },
        { &wxEVT_SCROLL_TOP, "wxEVT_SCROLL_TOP", &s_wxScrollEvent },
        { &wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT, "wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT", &s_wxListEvent },
        { &wxEVT_CALENDAR_WEEKDAY_CLICKED, "wxEVT_CALENDAR_WEEKDAY_CLICKED", &s_wxCalendarEvent },
        { &wxEVT_KEY_DOWN, "wxEVT_KEY_DOWN", &s_wxKeyEvent },
        { &wxEVT_LEFT_DCLICK, "wxEVT_LEFT_DCLICK", &s_wxMouseEvent },
        { &wxEVT_SIZE, "wxEVT_SIZE", &s_wxSizeEvent },
        { &wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT, "wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT", &s_wxTreeEvent },
    };
    count = 247;
    return eventList;
};

WXLUAOBJECT *GetObjectList(size_t &count)
{
    static WXLUAOBJECT objectList[] =
    {
        { &wxNullPalette, 0, "wxNullPalette", &s_wxPalette },
        { &wxNullIcon, 0, "wxNullIcon", &s_wxIcon },
        { &wxNullBrush, 0, "wxNullBrush", &s_wxBrush },
        { &wxNullImage, 0, "wxNullImage", &s_wxImage },
        { &wxNullPen, 0, "wxNullPen", &s_wxPen },
        { &wxNullAcceleratorTable, 0, "wxNullAcceleratorTable", &s_wxAcceleratorTable },
        { &wxNullColour, 0, "wxNullColour", &s_wxColour },
        { &wxNullCursor, 0, "wxNullCursor", &s_wxCursor },
        { &wxDefaultPosition, 0, "wxDefaultPosition", &s_wxPoint },
        { &wxGridNoCellRect, 0, "wxGridNoCellRect", &s_wxGridCellCoords },
        { &wxDefaultValidator, 0, "wxDefaultValidator", &s_wxValidator },
        { &wxDefaultDateTime, 0, "wxDefaultDateTime", &s_wxDateTime },
        { &wxNullFont, 0, "wxNullFont", &s_wxFont },
        { &wxDefaultSize, 0, "wxDefaultSize", &s_wxSize },
        { &wxNullBitmap, 0, "wxNullBitmap", &s_wxBitmap },
        { &wxFormatInvalid, 0, "wxFormatInvalid", &s_wxDataFormat },
        { 0, (const void **) &wxGREY_PEN, "wxGREY_PEN", &s_wxPen },
        { 0, (const void **) &wxTRANSPARENT_PEN, "wxTRANSPARENT_PEN", &s_wxPen },
        { 0, (const void **) &wxCROSS_CURSOR, "wxCROSS_CURSOR", &s_wxCursor },
        { 0, (const void **) &wxBLACK_BRUSH, "wxBLACK_BRUSH", &s_wxBrush },
        { 0, (const void **) &wxCYAN_BRUSH, "wxCYAN_BRUSH", &s_wxBrush },
        { 0, (const void **) &wxGREEN_BRUSH, "wxGREEN_BRUSH", &s_wxBrush },
        { 0, (const void **) &wxTheFontList, "wxTheFontList", &s_wxFontList },
        { 0, (const void **) &wxMEDIUM_GREY_BRUSH, "wxMEDIUM_GREY_BRUSH", &s_wxBrush },
        { 0, (const void **) &wxCYAN_PEN, "wxCYAN_PEN", &s_wxPen },
        { 0, (const void **) &wxWHITE, "wxWHITE", &s_wxColour },
        { 0, (const void **) &wxTRANSPARENT_BRUSH, "wxTRANSPARENT_BRUSH", &s_wxBrush },
        { 0, (const void **) &wxLIGHT_GREY_BRUSH, "wxLIGHT_GREY_BRUSH", &s_wxBrush },
        { 0, (const void **) &wxBLUE, "wxBLUE", &s_wxColour },
        { 0, (const void **) &wxGREEN_PEN, "wxGREEN_PEN", &s_wxPen },
        { 0, (const void **) &wxWHITE_PEN, "wxWHITE_PEN", &s_wxPen },
        { 0, (const void **) &wxBLACK_PEN, "wxBLACK_PEN", &s_wxPen },
        { 0, (const void **) &wxLIGHT_GREY_PEN, "wxLIGHT_GREY_PEN", &s_wxPen },
        { 0, (const void **) &wxSTANDARD_CURSOR, "wxSTANDARD_CURSOR", &s_wxCursor },
        { 0, (const void **) &wxHOURGLASS_CURSOR, "wxHOURGLASS_CURSOR", &s_wxCursor },
        { 0, (const void **) &wxGREEN, "wxGREEN", &s_wxColour },
        { 0, (const void **) &wxSWISS_FONT, "wxSWISS_FONT", &s_wxFont },
        { 0, (const void **) &wxBLACK_DASHED_PEN, "wxBLACK_DASHED_PEN", &s_wxPen },
        { 0, (const void **) &wxRED, "wxRED", &s_wxColour },
        { 0, (const void **) &wxLIGHT_GREY, "wxLIGHT_GREY", &s_wxColour },
        { 0, (const void **) &wxRED_BRUSH, "wxRED_BRUSH", &s_wxBrush },
        { 0, (const void **) &wxGREY_BRUSH, "wxGREY_BRUSH", &s_wxBrush },
        { 0, (const void **) &wxBLACK, "wxBLACK", &s_wxColour },
        { 0, (const void **) &wxITALIC_FONT, "wxITALIC_FONT", &s_wxFont },
        { 0, (const void **) &wxSMALL_FONT, "wxSMALL_FONT", &s_wxFont },
        { 0, (const void **) &wxNORMAL_FONT, "wxNORMAL_FONT", &s_wxFont },
        { 0, (const void **) &wxMEDIUM_GREY_PEN, "wxMEDIUM_GREY_PEN", &s_wxPen },
        { 0, (const void **) &wxCYAN, "wxCYAN", &s_wxColour },
        { 0, (const void **) &wxRED_PEN, "wxRED_PEN", &s_wxPen },
        { 0, (const void **) &wxWHITE_BRUSH, "wxWHITE_BRUSH", &s_wxBrush },
        { 0, (const void **) &wxBLUE_BRUSH, "wxBLUE_BRUSH", &s_wxBrush },
    };
    count = 51;
    return objectList;
};
